/*
 * generated by Xtext 2.35.0
 */
package eu.metatools.technocat.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import eu.metatools.technocat.ide.contentassist.antlr.internal.InternalTechnoCatParser;
import eu.metatools.technocat.services.TechnoCatGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TechnoCatParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TechnoCatGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TechnoCatGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTechnologyCatalogAccess().getAlternatives_2(), "rule__TechnologyCatalog__Alternatives_2");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getModelElementAccess().getAlternatives(), "rule__ModelElement__Alternatives");
			builder.put(grammarAccess.getDefinitionElementAccess().getAlternatives(), "rule__DefinitionElement__Alternatives");
			builder.put(grammarAccess.getInstanceElementAccess().getAlternatives(), "rule__InstanceElement__Alternatives");
			builder.put(grammarAccess.getRTIDAccess().getAlternatives(), "rule__RTID__Alternatives");
			builder.put(grammarAccess.getETIDAccess().getAlternatives(), "rule__ETID__Alternatives");
			builder.put(grammarAccess.getEIDAccess().getAlternatives(), "rule__EID__Alternatives");
			builder.put(grammarAccess.getRSYMAccess().getAlternatives(), "rule__RSYM__Alternatives");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getGroup(), "rule__TechnologyCatalog__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getETDAccess().getGroup(), "rule__ETD__Group__0");
			builder.put(grammarAccess.getETDAccess().getGroup_2(), "rule__ETD__Group_2__0");
			builder.put(grammarAccess.getETDAccess().getGroup_2_2(), "rule__ETD__Group_2_2__0");
			builder.put(grammarAccess.getETDAccess().getGroup_3(), "rule__ETD__Group_3__0");
			builder.put(grammarAccess.getRTDAccess().getGroup(), "rule__RTD__Group__0");
			builder.put(grammarAccess.getRTDAccess().getGroup_2(), "rule__RTD__Group_2__0");
			builder.put(grammarAccess.getRTDAccess().getGroup_2_2(), "rule__RTD__Group_2_2__0");
			builder.put(grammarAccess.getRTDAccess().getGroup_3(), "rule__RTD__Group_3__0");
			builder.put(grammarAccess.getRTDItemAccess().getGroup(), "rule__RTDItem__Group__0");
			builder.put(grammarAccess.getRTDItemAccess().getGroup_3(), "rule__RTDItem__Group_3__0");
			builder.put(grammarAccess.getEDAccess().getGroup(), "rule__ED__Group__0");
			builder.put(grammarAccess.getEDAccess().getGroup_3(), "rule__ED__Group_3__0");
			builder.put(grammarAccess.getEDItemAccess().getGroup(), "rule__EDItem__Group__0");
			builder.put(grammarAccess.getEDItemAccess().getGroup_1(), "rule__EDItem__Group_1__0");
			builder.put(grammarAccess.getRDAccess().getGroup(), "rule__RD__Group__0");
			builder.put(grammarAccess.getRDAccess().getGroup_3(), "rule__RD__Group_3__0");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getNameAssignment_1(), "rule__TechnologyCatalog__NameAssignment_1");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getImportsAssignment_2_0(), "rule__TechnologyCatalog__ImportsAssignment_2_0");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getEntityTypesAssignment_2_1(), "rule__TechnologyCatalog__EntityTypesAssignment_2_1");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getRelationTypesAssignment_2_2(), "rule__TechnologyCatalog__RelationTypesAssignment_2_2");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getEntitiesAssignment_2_3(), "rule__TechnologyCatalog__EntitiesAssignment_2_3");
			builder.put(grammarAccess.getTechnologyCatalogAccess().getRelationsAssignment_2_4(), "rule__TechnologyCatalog__RelationsAssignment_2_4");
			builder.put(grammarAccess.getImportAccess().getRefAssignment_1(), "rule__Import__RefAssignment_1");
			builder.put(grammarAccess.getETDAccess().getNameAssignment_1(), "rule__ETD__NameAssignment_1");
			builder.put(grammarAccess.getETDAccess().getBasesAssignment_2_1(), "rule__ETD__BasesAssignment_2_1");
			builder.put(grammarAccess.getETDAccess().getBasesAssignment_2_2_1(), "rule__ETD__BasesAssignment_2_2_1");
			builder.put(grammarAccess.getETDAccess().getValueAssignment_3_1(), "rule__ETD__ValueAssignment_3_1");
			builder.put(grammarAccess.getRTDAccess().getNameAssignment_1(), "rule__RTD__NameAssignment_1");
			builder.put(grammarAccess.getRTDAccess().getBasesAssignment_2_1(), "rule__RTD__BasesAssignment_2_1");
			builder.put(grammarAccess.getRTDAccess().getBasesAssignment_2_2_1(), "rule__RTD__BasesAssignment_2_2_1");
			builder.put(grammarAccess.getRTDAccess().getValueAssignment_3_1(), "rule__RTD__ValueAssignment_3_1");
			builder.put(grammarAccess.getRTDAccess().getItemsAssignment_4(), "rule__RTD__ItemsAssignment_4");
			builder.put(grammarAccess.getRTDItemAccess().getDomainAssignment_0(), "rule__RTDItem__DomainAssignment_0");
			builder.put(grammarAccess.getRTDItemAccess().getCodomainAssignment_2(), "rule__RTDItem__CodomainAssignment_2");
			builder.put(grammarAccess.getRTDItemAccess().getValueAssignment_3_1(), "rule__RTDItem__ValueAssignment_3_1");
			builder.put(grammarAccess.getEDAccess().getTypeAssignment_0(), "rule__ED__TypeAssignment_0");
			builder.put(grammarAccess.getEDAccess().getItemsAssignment_2(), "rule__ED__ItemsAssignment_2");
			builder.put(grammarAccess.getEDAccess().getItemsAssignment_3_1(), "rule__ED__ItemsAssignment_3_1");
			builder.put(grammarAccess.getEDItemAccess().getNameAssignment_0(), "rule__EDItem__NameAssignment_0");
			builder.put(grammarAccess.getEDItemAccess().getValueAssignment_1_1(), "rule__EDItem__ValueAssignment_1_1");
			builder.put(grammarAccess.getRDAccess().getLeftAssignment_0(), "rule__RD__LeftAssignment_0");
			builder.put(grammarAccess.getRDAccess().getRelationAssignment_1(), "rule__RD__RelationAssignment_1");
			builder.put(grammarAccess.getRDAccess().getRightAssignment_2(), "rule__RD__RightAssignment_2");
			builder.put(grammarAccess.getRDAccess().getValueAssignment_3_1(), "rule__RD__ValueAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TechnoCatGrammarAccess grammarAccess;

	@Override
	protected InternalTechnoCatParser createParser() {
		InternalTechnoCatParser result = new InternalTechnoCatParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public TechnoCatGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TechnoCatGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
