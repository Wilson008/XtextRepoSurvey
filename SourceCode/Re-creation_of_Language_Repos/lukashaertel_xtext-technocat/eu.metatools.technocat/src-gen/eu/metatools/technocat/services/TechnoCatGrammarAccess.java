/*
 * generated by Xtext 2.35.0
 */
package eu.metatools.technocat.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TechnoCatGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TechnologyCatalogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.TechnologyCatalog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameTCIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_2_0_0 = (RuleCall)cImportsAssignment_2_0.eContents().get(0);
		private final Assignment cEntityTypesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cEntityTypesETDParserRuleCall_2_1_0 = (RuleCall)cEntityTypesAssignment_2_1.eContents().get(0);
		private final Assignment cRelationTypesAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cRelationTypesRTDParserRuleCall_2_2_0 = (RuleCall)cRelationTypesAssignment_2_2.eContents().get(0);
		private final Assignment cEntitiesAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cEntitiesEDParserRuleCall_2_3_0 = (RuleCall)cEntitiesAssignment_2_3.eContents().get(0);
		private final Assignment cRelationsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cRelationsRDParserRuleCall_2_4_0 = (RuleCall)cRelationsAssignment_2_4.eContents().get(0);
		
		//TechnologyCatalog:
		//    'model' name=TCID (imports+=Import | entityTypes+=ETD | relationTypes+=RTD | entities+=ED | relations+=RD)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=TCID (imports+=Import | entityTypes+=ETD | relationTypes+=RTD | entities+=ED | relations+=RD)*
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=TCID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//TCID
		public RuleCall getNameTCIDParserRuleCall_1_0() { return cNameTCIDParserRuleCall_1_0; }
		
		//(imports+=Import | entityTypes+=ETD | relationTypes+=RTD | entities+=ED | relations+=RD)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//imports+=Import
		public Assignment getImportsAssignment_2_0() { return cImportsAssignment_2_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0_0() { return cImportsImportParserRuleCall_2_0_0; }
		
		//entityTypes+=ETD
		public Assignment getEntityTypesAssignment_2_1() { return cEntityTypesAssignment_2_1; }
		
		//ETD
		public RuleCall getEntityTypesETDParserRuleCall_2_1_0() { return cEntityTypesETDParserRuleCall_2_1_0; }
		
		//relationTypes+=RTD
		public Assignment getRelationTypesAssignment_2_2() { return cRelationTypesAssignment_2_2; }
		
		//RTD
		public RuleCall getRelationTypesRTDParserRuleCall_2_2_0() { return cRelationTypesRTDParserRuleCall_2_2_0; }
		
		//entities+=ED
		public Assignment getEntitiesAssignment_2_3() { return cEntitiesAssignment_2_3; }
		
		//ED
		public RuleCall getEntitiesEDParserRuleCall_2_3_0() { return cEntitiesEDParserRuleCall_2_3_0; }
		
		//relations+=RD
		public Assignment getRelationsAssignment_2_4() { return cRelationsAssignment_2_4; }
		
		//RD
		public RuleCall getRelationsRDParserRuleCall_2_4_0() { return cRelationsRDParserRuleCall_2_4_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//    Import | ModelElement;
		@Override public ParserRule getRule() { return rule; }
		
		//Import | ModelElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//ModelElement
		public RuleCall getModelElementParserRuleCall_1() { return cModelElementParserRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefTechnologyCatalogCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefTechnologyCatalogTCIDParserRuleCall_1_0_1 = (RuleCall)cRefTechnologyCatalogCrossReference_1_0.eContents().get(1);
		
		//Import:
		//    'import' ref=[TechnologyCatalog|TCID];
		@Override public ParserRule getRule() { return rule; }
		
		//'import' ref=[TechnologyCatalog|TCID]
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//ref=[TechnologyCatalog|TCID]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[TechnologyCatalog|TCID]
		public CrossReference getRefTechnologyCatalogCrossReference_1_0() { return cRefTechnologyCatalogCrossReference_1_0; }
		
		//TCID
		public RuleCall getRefTechnologyCatalogTCIDParserRuleCall_1_0_1() { return cRefTechnologyCatalogTCIDParserRuleCall_1_0_1; }
	}
	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelElement:
		//    DefinitionElement | InstanceElement;
		@Override public ParserRule getRule() { return rule; }
		
		//DefinitionElement | InstanceElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DefinitionElement
		public RuleCall getDefinitionElementParserRuleCall_0() { return cDefinitionElementParserRuleCall_0; }
		
		//InstanceElement
		public RuleCall getInstanceElementParserRuleCall_1() { return cInstanceElementParserRuleCall_1; }
	}
	public class DefinitionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.DefinitionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cETDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRTDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DefinitionElement:
		//    ETD | RTD;
		@Override public ParserRule getRule() { return rule; }
		
		//ETD | RTD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ETD
		public RuleCall getETDParserRuleCall_0() { return cETDParserRuleCall_0; }
		
		//RTD
		public RuleCall getRTDParserRuleCall_1() { return cRTDParserRuleCall_1; }
	}
	public class InstanceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.InstanceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InstanceElement:
		//    ED | RD;
		@Override public ParserRule getRule() { return rule; }
		
		//ED | RD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ED
		public RuleCall getEDParserRuleCall_0() { return cEDParserRuleCall_0; }
		
		//RD
		public RuleCall getRDParserRuleCall_1() { return cRDParserRuleCall_1; }
	}
	public class ETDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.ETD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameETIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBasesETDCrossReference_2_1_0 = (CrossReference)cBasesAssignment_2_1.eContents().get(0);
		private final RuleCall cBasesETDETIDParserRuleCall_2_1_0_1 = (RuleCall)cBasesETDCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cBasesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cBasesETDCrossReference_2_2_1_0 = (CrossReference)cBasesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cBasesETDETIDParserRuleCall_2_2_1_0_1 = (RuleCall)cBasesETDCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//ETD:
		//    'type' name=ETID
		//    ('from' bases+=[ETD|ETID] (',' bases+=[ETD|ETID])*)?
		//    ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=ETID
		//('from' bases+=[ETD|ETID] (',' bases+=[ETD|ETID])*)?
		//('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=ETID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ETID
		public RuleCall getNameETIDParserRuleCall_1_0() { return cNameETIDParserRuleCall_1_0; }
		
		//('from' bases+=[ETD|ETID] (',' bases+=[ETD|ETID])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'from'
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }
		
		//bases+=[ETD|ETID]
		public Assignment getBasesAssignment_2_1() { return cBasesAssignment_2_1; }
		
		//[ETD|ETID]
		public CrossReference getBasesETDCrossReference_2_1_0() { return cBasesETDCrossReference_2_1_0; }
		
		//ETID
		public RuleCall getBasesETDETIDParserRuleCall_2_1_0_1() { return cBasesETDETIDParserRuleCall_2_1_0_1; }
		
		//(',' bases+=[ETD|ETID])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//bases+=[ETD|ETID]
		public Assignment getBasesAssignment_2_2_1() { return cBasesAssignment_2_2_1; }
		
		//[ETD|ETID]
		public CrossReference getBasesETDCrossReference_2_2_1_0() { return cBasesETDCrossReference_2_2_1_0; }
		
		//ETID
		public RuleCall getBasesETDETIDParserRuleCall_2_2_1_0_1() { return cBasesETDETIDParserRuleCall_2_2_1_0_1; }
		
		//('=' value=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class RTDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.RTD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameRTIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBasesRTDCrossReference_2_1_0 = (CrossReference)cBasesAssignment_2_1.eContents().get(0);
		private final RuleCall cBasesRTDRTIDParserRuleCall_2_1_0_1 = (RuleCall)cBasesRTDCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cBasesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cBasesRTDCrossReference_2_2_1_0 = (CrossReference)cBasesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cBasesRTDRTIDParserRuleCall_2_2_1_0_1 = (RuleCall)cBasesRTDCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsRTDItemParserRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		
		//RTD:
		//    'relation' name=RTID
		//    ('from' bases+=[RTD|RTID] (',' bases+=[RTD|RTID])*)?
		//    ('=' value=STRING)? items+=RTDItem*;
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' name=RTID
		//('from' bases+=[RTD|RTID] (',' bases+=[RTD|RTID])*)?
		//('=' value=STRING)? items+=RTDItem*
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//name=RTID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//RTID
		public RuleCall getNameRTIDParserRuleCall_1_0() { return cNameRTIDParserRuleCall_1_0; }
		
		//('from' bases+=[RTD|RTID] (',' bases+=[RTD|RTID])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'from'
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }
		
		//bases+=[RTD|RTID]
		public Assignment getBasesAssignment_2_1() { return cBasesAssignment_2_1; }
		
		//[RTD|RTID]
		public CrossReference getBasesRTDCrossReference_2_1_0() { return cBasesRTDCrossReference_2_1_0; }
		
		//RTID
		public RuleCall getBasesRTDRTIDParserRuleCall_2_1_0_1() { return cBasesRTDRTIDParserRuleCall_2_1_0_1; }
		
		//(',' bases+=[RTD|RTID])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//bases+=[RTD|RTID]
		public Assignment getBasesAssignment_2_2_1() { return cBasesAssignment_2_2_1; }
		
		//[RTD|RTID]
		public CrossReference getBasesRTDCrossReference_2_2_1_0() { return cBasesRTDCrossReference_2_2_1_0; }
		
		//RTID
		public RuleCall getBasesRTDRTIDParserRuleCall_2_2_1_0_1() { return cBasesRTDRTIDParserRuleCall_2_2_1_0_1; }
		
		//('=' value=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//items+=RTDItem*
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }
		
		//RTDItem
		public RuleCall getItemsRTDItemParserRuleCall_4_0() { return cItemsRTDItemParserRuleCall_4_0; }
	}
	public class RTDItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.RTDItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDomainETDCrossReference_0_0 = (CrossReference)cDomainAssignment_0.eContents().get(0);
		private final RuleCall cDomainETDETIDParserRuleCall_0_0_1 = (RuleCall)cDomainETDCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCodomainETDCrossReference_2_0 = (CrossReference)cCodomainAssignment_2.eContents().get(0);
		private final RuleCall cCodomainETDETIDParserRuleCall_2_0_1 = (RuleCall)cCodomainETDCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//RTDItem:
		//    domain=[ETD|ETID] '->' codomain=[ETD|ETID]
		//    ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//domain=[ETD|ETID] '->' codomain=[ETD|ETID]
		//('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//domain=[ETD|ETID]
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }
		
		//[ETD|ETID]
		public CrossReference getDomainETDCrossReference_0_0() { return cDomainETDCrossReference_0_0; }
		
		//ETID
		public RuleCall getDomainETDETIDParserRuleCall_0_0_1() { return cDomainETDETIDParserRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//codomain=[ETD|ETID]
		public Assignment getCodomainAssignment_2() { return cCodomainAssignment_2; }
		
		//[ETD|ETID]
		public CrossReference getCodomainETDCrossReference_2_0() { return cCodomainETDCrossReference_2_0; }
		
		//ETID
		public RuleCall getCodomainETDETIDParserRuleCall_2_0_1() { return cCodomainETDETIDParserRuleCall_2_0_1; }
		
		//('=' value=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class EDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.ED");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeETDCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeETDETIDParserRuleCall_0_0_1 = (RuleCall)cTypeETDCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsEDItemParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cItemsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cItemsEDItemParserRuleCall_3_1_0 = (RuleCall)cItemsAssignment_3_1.eContents().get(0);
		
		//ED:
		//    type=[ETD|ETID] ':' items+=EDItem (',' items+=EDItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[ETD|ETID] ':' items+=EDItem (',' items+=EDItem)*
		public Group getGroup() { return cGroup; }
		
		//type=[ETD|ETID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[ETD|ETID]
		public CrossReference getTypeETDCrossReference_0_0() { return cTypeETDCrossReference_0_0; }
		
		//ETID
		public RuleCall getTypeETDETIDParserRuleCall_0_0_1() { return cTypeETDETIDParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//items+=EDItem
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//EDItem
		public RuleCall getItemsEDItemParserRuleCall_2_0() { return cItemsEDItemParserRuleCall_2_0; }
		
		//(',' items+=EDItem)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//items+=EDItem
		public Assignment getItemsAssignment_3_1() { return cItemsAssignment_3_1; }
		
		//EDItem
		public RuleCall getItemsEDItemParserRuleCall_3_1_0() { return cItemsEDItemParserRuleCall_3_1_0; }
	}
	public class EDItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.EDItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//EDItem:
		//    name=EID
		//    ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EID
		//('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=EID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EID
		public RuleCall getNameEIDParserRuleCall_0_0() { return cNameEIDParserRuleCall_0_0; }
		
		//('=' value=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
	}
	public class RDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.RD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cLeftEDItemCrossReference_0_0 = (CrossReference)cLeftAssignment_0.eContents().get(0);
		private final RuleCall cLeftEDItemEIDParserRuleCall_0_0_1 = (RuleCall)cLeftEDItemCrossReference_0_0.eContents().get(1);
		private final Assignment cRelationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRelationRTDCrossReference_1_0 = (CrossReference)cRelationAssignment_1.eContents().get(0);
		private final RuleCall cRelationRTDRTIDParserRuleCall_1_0_1 = (RuleCall)cRelationRTDCrossReference_1_0.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRightEDItemCrossReference_2_0 = (CrossReference)cRightAssignment_2.eContents().get(0);
		private final RuleCall cRightEDItemEIDParserRuleCall_2_0_1 = (RuleCall)cRightEDItemCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//RD:
		//    left=[EDItem|EID] relation=[RTD|RTID] right=[EDItem|EID]
		//    ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//left=[EDItem|EID] relation=[RTD|RTID] right=[EDItem|EID]
		//('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//left=[EDItem|EID]
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//[EDItem|EID]
		public CrossReference getLeftEDItemCrossReference_0_0() { return cLeftEDItemCrossReference_0_0; }
		
		//EID
		public RuleCall getLeftEDItemEIDParserRuleCall_0_0_1() { return cLeftEDItemEIDParserRuleCall_0_0_1; }
		
		//relation=[RTD|RTID]
		public Assignment getRelationAssignment_1() { return cRelationAssignment_1; }
		
		//[RTD|RTID]
		public CrossReference getRelationRTDCrossReference_1_0() { return cRelationRTDCrossReference_1_0; }
		
		//RTID
		public RuleCall getRelationRTDRTIDParserRuleCall_1_0_1() { return cRelationRTDRTIDParserRuleCall_1_0_1; }
		
		//right=[EDItem|EID]
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//[EDItem|EID]
		public CrossReference getRightEDItemCrossReference_2_0() { return cRightEDItemCrossReference_2_0; }
		
		//EID
		public RuleCall getRightEDItemEIDParserRuleCall_2_0_1() { return cRightEDItemEIDParserRuleCall_2_0_1; }
		
		//('=' value=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
	}
	public class TCIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.TCID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//    // Techno-Cat identifier
		//TCID:
		//    ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class RTIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.RTID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRSYMParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//    // Relationship type identifier
		//RTID:
		//    ID | STRING | RSYM;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | RSYM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//RSYM
		public RuleCall getRSYMParserRuleCall_2() { return cRSYMParserRuleCall_2; }
	}
	public class ETIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.ETID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//    // Entity type identifier
		//ETID:
		//    ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class EIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.EID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//    // Entity identifier
		//EID:
		//    ID | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class RSYMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.RSYM");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cPercentSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPlusSignPlusSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHyphenMinusHyphenMinusKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cExclamationMarkEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLessThanSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cGreaterThanSignEqualsSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cLessThanSignEqualsSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cExclamationMarkKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cAmpersandAmpersandKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cVerticalLineVerticalLineKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cTildeKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cAmpersandKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cVerticalLineKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cCircumflexAccentKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cLessThanSignLessThanSignKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cPlusSignEqualsSignKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cHyphenMinusEqualsSignKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cAsteriskEqualsSignKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cSolidusEqualsSignKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cPercentSignEqualsSignKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cAmpersandEqualsSignKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cVerticalLineEqualsSignKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cCircumflexAccentEqualsSignKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cQuestionMarkKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		
		//    // List of overloadable relationship symbols
		//RSYM:
		//    "=" | "+" | "-" | "*" | "/" | "%" | "++" | "--" |
		//    "==" | "!=" | ">" | "<" | ">=" | "<=" |
		//    "!" | "&&" | "||" |
		//    "~" | "&" | "|" | "^" | "<<" | ">>" |
		//    "+=" | "-=" | "*=" | "/=" | "%=" |
		//    "&=" | "|=" | "^=" | "<<=" | ">>=" |
		//    "?";
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | "+" | "-" | "*" | "/" | "%" | "++" | "--" |
		//"==" | "!=" | ">" | "<" | ">=" | "<=" |
		//"!" | "&&" | "||" |
		//"~" | "&" | "|" | "^" | "<<" | ">>" |
		//"+=" | "-=" | "*=" | "/=" | "%=" |
		//"&=" | "|=" | "^=" | "<<=" | ">>=" |
		//"?"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//"*"
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//"/"
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }
		
		//"%"
		public Keyword getPercentSignKeyword_5() { return cPercentSignKeyword_5; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_6() { return cPlusSignPlusSignKeyword_6; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_7() { return cHyphenMinusHyphenMinusKeyword_7; }
		
		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_8() { return cEqualsSignEqualsSignKeyword_8; }
		
		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_9() { return cExclamationMarkEqualsSignKeyword_9; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_10() { return cGreaterThanSignKeyword_10; }
		
		//"<"
		public Keyword getLessThanSignKeyword_11() { return cLessThanSignKeyword_11; }
		
		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_12() { return cGreaterThanSignEqualsSignKeyword_12; }
		
		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_13() { return cLessThanSignEqualsSignKeyword_13; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_14() { return cExclamationMarkKeyword_14; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_15() { return cAmpersandAmpersandKeyword_15; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_16() { return cVerticalLineVerticalLineKeyword_16; }
		
		//"~"
		public Keyword getTildeKeyword_17() { return cTildeKeyword_17; }
		
		//"&"
		public Keyword getAmpersandKeyword_18() { return cAmpersandKeyword_18; }
		
		//"|"
		public Keyword getVerticalLineKeyword_19() { return cVerticalLineKeyword_19; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_20() { return cCircumflexAccentKeyword_20; }
		
		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_21() { return cLessThanSignLessThanSignKeyword_21; }
		
		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_22() { return cGreaterThanSignGreaterThanSignKeyword_22; }
		
		//"+="
		public Keyword getPlusSignEqualsSignKeyword_23() { return cPlusSignEqualsSignKeyword_23; }
		
		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_24() { return cHyphenMinusEqualsSignKeyword_24; }
		
		//"*="
		public Keyword getAsteriskEqualsSignKeyword_25() { return cAsteriskEqualsSignKeyword_25; }
		
		//"/="
		public Keyword getSolidusEqualsSignKeyword_26() { return cSolidusEqualsSignKeyword_26; }
		
		//"%="
		public Keyword getPercentSignEqualsSignKeyword_27() { return cPercentSignEqualsSignKeyword_27; }
		
		//"&="
		public Keyword getAmpersandEqualsSignKeyword_28() { return cAmpersandEqualsSignKeyword_28; }
		
		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_29() { return cVerticalLineEqualsSignKeyword_29; }
		
		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_30() { return cCircumflexAccentEqualsSignKeyword_30; }
		
		//"<<="
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_31() { return cLessThanSignLessThanSignEqualsSignKeyword_31; }
		
		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_32() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_32; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_33() { return cQuestionMarkKeyword_33; }
	}
	
	
	private final TechnologyCatalogElements pTechnologyCatalog;
	private final ElementElements pElement;
	private final ImportElements pImport;
	private final ModelElementElements pModelElement;
	private final DefinitionElementElements pDefinitionElement;
	private final InstanceElementElements pInstanceElement;
	private final ETDElements pETD;
	private final RTDElements pRTD;
	private final RTDItemElements pRTDItem;
	private final EDElements pED;
	private final EDItemElements pEDItem;
	private final RDElements pRD;
	private final TCIDElements pTCID;
	private final RTIDElements pRTID;
	private final ETIDElements pETID;
	private final EIDElements pEID;
	private final RSYMElements pRSYM;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public TechnoCatGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pTechnologyCatalog = new TechnologyCatalogElements();
		this.pElement = new ElementElements();
		this.pImport = new ImportElements();
		this.pModelElement = new ModelElementElements();
		this.pDefinitionElement = new DefinitionElementElements();
		this.pInstanceElement = new InstanceElementElements();
		this.pETD = new ETDElements();
		this.pRTD = new RTDElements();
		this.pRTDItem = new RTDItemElements();
		this.pED = new EDElements();
		this.pEDItem = new EDItemElements();
		this.pRD = new RDElements();
		this.pTCID = new TCIDElements();
		this.pRTID = new RTIDElements();
		this.pETID = new ETIDElements();
		this.pEID = new EIDElements();
		this.pRSYM = new RSYMElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.STRING");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eu.metatools.technocat.TechnoCat.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.metatools.technocat.TechnoCat".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//TechnologyCatalog:
	//    'model' name=TCID (imports+=Import | entityTypes+=ETD | relationTypes+=RTD | entities+=ED | relations+=RD)*;
	public TechnologyCatalogElements getTechnologyCatalogAccess() {
		return pTechnologyCatalog;
	}
	
	public ParserRule getTechnologyCatalogRule() {
		return getTechnologyCatalogAccess().getRule();
	}
	
	//Element:
	//    Import | ModelElement;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Import:
	//    'import' ref=[TechnologyCatalog|TCID];
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ModelElement:
	//    DefinitionElement | InstanceElement;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}
	
	//DefinitionElement:
	//    ETD | RTD;
	public DefinitionElementElements getDefinitionElementAccess() {
		return pDefinitionElement;
	}
	
	public ParserRule getDefinitionElementRule() {
		return getDefinitionElementAccess().getRule();
	}
	
	//InstanceElement:
	//    ED | RD;
	public InstanceElementElements getInstanceElementAccess() {
		return pInstanceElement;
	}
	
	public ParserRule getInstanceElementRule() {
		return getInstanceElementAccess().getRule();
	}
	
	//ETD:
	//    'type' name=ETID
	//    ('from' bases+=[ETD|ETID] (',' bases+=[ETD|ETID])*)?
	//    ('=' value=STRING)?;
	public ETDElements getETDAccess() {
		return pETD;
	}
	
	public ParserRule getETDRule() {
		return getETDAccess().getRule();
	}
	
	//RTD:
	//    'relation' name=RTID
	//    ('from' bases+=[RTD|RTID] (',' bases+=[RTD|RTID])*)?
	//    ('=' value=STRING)? items+=RTDItem*;
	public RTDElements getRTDAccess() {
		return pRTD;
	}
	
	public ParserRule getRTDRule() {
		return getRTDAccess().getRule();
	}
	
	//RTDItem:
	//    domain=[ETD|ETID] '->' codomain=[ETD|ETID]
	//    ('=' value=STRING)?;
	public RTDItemElements getRTDItemAccess() {
		return pRTDItem;
	}
	
	public ParserRule getRTDItemRule() {
		return getRTDItemAccess().getRule();
	}
	
	//ED:
	//    type=[ETD|ETID] ':' items+=EDItem (',' items+=EDItem)*;
	public EDElements getEDAccess() {
		return pED;
	}
	
	public ParserRule getEDRule() {
		return getEDAccess().getRule();
	}
	
	//EDItem:
	//    name=EID
	//    ('=' value=STRING)?;
	public EDItemElements getEDItemAccess() {
		return pEDItem;
	}
	
	public ParserRule getEDItemRule() {
		return getEDItemAccess().getRule();
	}
	
	//RD:
	//    left=[EDItem|EID] relation=[RTD|RTID] right=[EDItem|EID]
	//    ('=' value=STRING)?;
	public RDElements getRDAccess() {
		return pRD;
	}
	
	public ParserRule getRDRule() {
		return getRDAccess().getRule();
	}
	
	//    // Techno-Cat identifier
	//TCID:
	//    ID;
	public TCIDElements getTCIDAccess() {
		return pTCID;
	}
	
	public ParserRule getTCIDRule() {
		return getTCIDAccess().getRule();
	}
	
	//    // Relationship type identifier
	//RTID:
	//    ID | STRING | RSYM;
	public RTIDElements getRTIDAccess() {
		return pRTID;
	}
	
	public ParserRule getRTIDRule() {
		return getRTIDAccess().getRule();
	}
	
	//    // Entity type identifier
	//ETID:
	//    ID | STRING;
	public ETIDElements getETIDAccess() {
		return pETID;
	}
	
	public ParserRule getETIDRule() {
		return getETIDAccess().getRule();
	}
	
	//    // Entity identifier
	//EID:
	//    ID | STRING;
	public EIDElements getEIDAccess() {
		return pEID;
	}
	
	public ParserRule getEIDRule() {
		return getEIDAccess().getRule();
	}
	
	//    // List of overloadable relationship symbols
	//RSYM:
	//    "=" | "+" | "-" | "*" | "/" | "%" | "++" | "--" |
	//    "==" | "!=" | ">" | "<" | ">=" | "<=" |
	//    "!" | "&&" | "||" |
	//    "~" | "&" | "|" | "^" | "<<" | ">>" |
	//    "+=" | "-=" | "*=" | "/=" | "%=" |
	//    "&=" | "|=" | "^=" | "<<=" | ">>=" |
	//    "?";
	public RSYMElements getRSYMAccess() {
		return pRSYM;
	}
	
	public ParserRule getRSYMRule() {
		return getRSYMAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal SL_COMMENT:
	//    '--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r' | '\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
