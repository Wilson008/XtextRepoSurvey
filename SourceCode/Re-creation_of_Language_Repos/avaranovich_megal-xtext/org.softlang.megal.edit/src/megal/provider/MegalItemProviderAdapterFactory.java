/**
 */
package megal.provider;

import java.util.ArrayList;
import java.util.Collection;

import megal.util.MegalAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MegalItemProviderAdapterFactory extends MegalAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MegalItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalAnnotationItemProvider megalAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalAnnotationAdapter() {
		if (megalAnnotationItemProvider == null) {
			megalAnnotationItemProvider = new MegalAnnotationItemProvider(this);
		}

		return megalAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalFileItemProvider megalFileItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalFileAdapter() {
		if (megalFileItemProvider == null) {
			megalFileItemProvider = new MegalFileItemProvider(this);
		}

		return megalFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalLinkItemProvider megalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalLinkAdapter() {
		if (megalLinkItemProvider == null) {
			megalLinkItemProvider = new MegalLinkItemProvider(this);
		}

		return megalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalRelationshipItemProvider megalRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalRelationshipAdapter() {
		if (megalRelationshipItemProvider == null) {
			megalRelationshipItemProvider = new MegalRelationshipItemProvider(this);
		}

		return megalRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalPair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalPairItemProvider megalPairItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalPair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalPairAdapter() {
		if (megalPairItemProvider == null) {
			megalPairItemProvider = new MegalPairItemProvider(this);
		}

		return megalPairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalEntityType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalEntityTypeItemProvider megalEntityTypeItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalEntityType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalEntityTypeAdapter() {
		if (megalEntityTypeItemProvider == null) {
			megalEntityTypeItemProvider = new MegalEntityTypeItemProvider(this);
		}

		return megalEntityTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalRelationshipType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalRelationshipTypeItemProvider megalRelationshipTypeItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalRelationshipType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalRelationshipTypeAdapter() {
		if (megalRelationshipTypeItemProvider == null) {
			megalRelationshipTypeItemProvider = new MegalRelationshipTypeItemProvider(this);
		}

		return megalRelationshipTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.MegalEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MegalEntityItemProvider megalEntityItemProvider;

	/**
	 * This creates an adapter for a {@link megal.MegalEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMegalEntityAdapter() {
		if (megalEntityItemProvider == null) {
			megalEntityItemProvider = new MegalEntityItemProvider(this);
		}

		return megalEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.Selection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionItemProvider selectionItemProvider;

	/**
	 * This creates an adapter for a {@link megal.Selection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionAdapter() {
		if (selectionItemProvider == null) {
			selectionItemProvider = new SelectionItemProvider(this);
		}

		return selectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.QueryStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryStatementItemProvider queryStatementItemProvider;

	/**
	 * This creates an adapter for a {@link megal.QueryStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryStatementAdapter() {
		if (queryStatementItemProvider == null) {
			queryStatementItemProvider = new QueryStatementItemProvider(this);
		}

		return queryStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.QueryParam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryParamItemProvider queryParamItemProvider;

	/**
	 * This creates an adapter for a {@link megal.QueryParam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryParamAdapter() {
		if (queryParamItemProvider == null) {
			queryParamItemProvider = new QueryParamItemProvider(this);
		}

		return queryParamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.QueryReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryReferenceItemProvider queryReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link megal.QueryReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryReferenceAdapter() {
		if (queryReferenceItemProvider == null) {
			queryReferenceItemProvider = new QueryReferenceItemProvider(this);
		}

		return queryReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.QueryString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryStringItemProvider queryStringItemProvider;

	/**
	 * This creates an adapter for a {@link megal.QueryString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryStringAdapter() {
		if (queryStringItemProvider == null) {
			queryStringItemProvider = new QueryStringItemProvider(this);
		}

		return queryStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.QueryEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryEntityItemProvider queryEntityItemProvider;

	/**
	 * This creates an adapter for a {@link megal.QueryEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryEntityAdapter() {
		if (queryEntityItemProvider == null) {
			queryEntityItemProvider = new QueryEntityItemProvider(this);
		}

		return queryEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link megal.QueryPos} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryPosItemProvider queryPosItemProvider;

	/**
	 * This creates an adapter for a {@link megal.QueryPos}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryPosAdapter() {
		if (queryPosItemProvider == null) {
			queryPosItemProvider = new QueryPosItemProvider(this);
		}

		return queryPosItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (megalAnnotationItemProvider != null) megalAnnotationItemProvider.dispose();
		if (megalFileItemProvider != null) megalFileItemProvider.dispose();
		if (megalLinkItemProvider != null) megalLinkItemProvider.dispose();
		if (megalRelationshipItemProvider != null) megalRelationshipItemProvider.dispose();
		if (megalPairItemProvider != null) megalPairItemProvider.dispose();
		if (megalEntityTypeItemProvider != null) megalEntityTypeItemProvider.dispose();
		if (megalRelationshipTypeItemProvider != null) megalRelationshipTypeItemProvider.dispose();
		if (megalEntityItemProvider != null) megalEntityItemProvider.dispose();
		if (selectionItemProvider != null) selectionItemProvider.dispose();
		if (queryStatementItemProvider != null) queryStatementItemProvider.dispose();
		if (queryParamItemProvider != null) queryParamItemProvider.dispose();
		if (queryReferenceItemProvider != null) queryReferenceItemProvider.dispose();
		if (queryStringItemProvider != null) queryStringItemProvider.dispose();
		if (queryEntityItemProvider != null) queryEntityItemProvider.dispose();
		if (queryPosItemProvider != null) queryPosItemProvider.dispose();
	}

}
