/**
 * generated by Xtext 2.35.0
 */
package org.softlang.megal.language.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import megal.MegalAnnotation;
import megal.MegalDeclaration;
import megal.MegalFile;
import megal.MegalLink;
import megal.Selection;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.softlang.megal.language.services.MegalGrammarAccess;

@SuppressWarnings("all")
public class MegalFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MegalGrammarAccess _megalGrammarAccess;

  protected void _format(final MegalFile megalFile, @Extension final IFormattableDocument document) {
    EList<MegalAnnotation> _annotations = megalFile.getAnnotations();
    for (final MegalAnnotation megalAnnotation : _annotations) {
      document.<MegalAnnotation>format(megalAnnotation);
    }
    EList<MegalDeclaration> _declarations = megalFile.getDeclarations();
    for (final MegalDeclaration megalDeclaration : _declarations) {
      document.<MegalDeclaration>format(megalDeclaration);
    }
    EList<MegalLink> _bindings = megalFile.getBindings();
    for (final MegalLink megalLink : _bindings) {
      document.<MegalLink>format(megalLink);
    }
  }

  protected void _format(final MegalAnnotation megalAnnotation, @Extension final IFormattableDocument document) {
    document.<Selection>format(megalAnnotation.getSelection());
  }

  public void format(final Object megalFile, final IFormattableDocument document) {
    if (megalFile instanceof XtextResource) {
      _format((XtextResource)megalFile, document);
      return;
    } else if (megalFile instanceof MegalFile) {
      _format((MegalFile)megalFile, document);
      return;
    } else if (megalFile instanceof MegalAnnotation) {
      _format((MegalAnnotation)megalFile, document);
      return;
    } else if (megalFile instanceof EObject) {
      _format((EObject)megalFile, document);
      return;
    } else if (megalFile == null) {
      _format((Void)null, document);
      return;
    } else if (megalFile != null) {
      _format(megalFile, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(megalFile, document).toString());
    }
  }
}
