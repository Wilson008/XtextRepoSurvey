/*
 * generated by Xtext 2.35.0
 */
package hu.sze.aut.ros.middleware.statepubsub.serializer;

import com.google.inject.Inject;
import hu.sze.aut.ros.middleware.statepubsub.services.HybridDslGrammarAccess;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Activity;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.ContinuousVariable;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.DiscreteEvent;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.ErrorLocation;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.FuzzyHybridSystem;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.HybridSystem;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Invariant;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Location;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.RuleSet;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.StatepubsubmodelPackage;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Transition;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class HybridDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HybridDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StatepubsubmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StatepubsubmodelPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case StatepubsubmodelPackage.CONTINUOUS_VARIABLE:
				sequence_ContinuousVariable(context, (ContinuousVariable) semanticObject); 
				return; 
			case StatepubsubmodelPackage.DISCRETE_EVENT:
				sequence_DiscreteEvent(context, (DiscreteEvent) semanticObject); 
				return; 
			case StatepubsubmodelPackage.ERROR_LOCATION:
				sequence_ErrorLocation(context, (ErrorLocation) semanticObject); 
				return; 
			case StatepubsubmodelPackage.FUZZY_HYBRID_SYSTEM:
				sequence_FuzzyHybridSystem(context, (FuzzyHybridSystem) semanticObject); 
				return; 
			case StatepubsubmodelPackage.HYBRID_SYSTEM:
				sequence_HybridSystem_Impl(context, (HybridSystem) semanticObject); 
				return; 
			case StatepubsubmodelPackage.INVARIANT:
				sequence_Invariant(context, (Invariant) semanticObject); 
				return; 
			case StatepubsubmodelPackage.LOCATION:
				sequence_SimpleLocation(context, (Location) semanticObject); 
				return; 
			case StatepubsubmodelPackage.RULE_SET:
				sequence_RuleSet(context, (RuleSet) semanticObject); 
				return; 
			case StatepubsubmodelPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     continousvariable=[ContinuousVariable|EString]?
	 * </pre>
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ContinuousVariable returns ContinuousVariable
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_ContinuousVariable(ISerializationContext context, ContinuousVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StatepubsubmodelPackage.Literals.CONTINUOUS_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StatepubsubmodelPackage.Literals.CONTINUOUS_VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContinuousVariableAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DiscreteEvent returns DiscreteEvent
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_DiscreteEvent(ISerializationContext context, DiscreteEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StatepubsubmodelPackage.Literals.DISCRETE_EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StatepubsubmodelPackage.Literals.DISCRETE_EVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDiscreteEventAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns ErrorLocation
	 *     ErrorLocation returns ErrorLocation
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_ErrorLocation(ISerializationContext context, ErrorLocation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StatepubsubmodelPackage.Literals.LOCATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StatepubsubmodelPackage.Literals.LOCATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getErrorLocationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FuzzyHybridSystem returns FuzzyHybridSystem
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (location+=Location location+=Location*)? 
	 *         (transition+=Transition transition+=Transition*)? 
	 *         (variable+=ContinuousVariable variable+=ContinuousVariable*)? 
	 *         (activity+=Activity activity+=Activity*)? 
	 *         (event+=DiscreteEvent event+=DiscreteEvent*)? 
	 *         (invariant+=Invariant invariant+=Invariant*)? 
	 *         (ruleset+=RuleSet ruleset+=RuleSet*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_FuzzyHybridSystem(ISerializationContext context, FuzzyHybridSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HybridSystem_Impl returns HybridSystem
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (location+=Location location+=Location*)? 
	 *         (transition+=Transition transition+=Transition*)? 
	 *         (variable+=ContinuousVariable variable+=ContinuousVariable*)? 
	 *         (activity+=Activity activity+=Activity*)? 
	 *         (event+=DiscreteEvent event+=DiscreteEvent*)? 
	 *         (invariant+=Invariant invariant+=Invariant*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_HybridSystem_Impl(ISerializationContext context, HybridSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Invariant returns Invariant
	 *
	 * Constraint:
	 *     location=[Location|EString]?
	 * </pre>
	 */
	protected void sequence_Invariant(ISerializationContext context, Invariant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RuleSet returns RuleSet
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_RuleSet(ISerializationContext context, RuleSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StatepubsubmodelPackage.Literals.RULE_SET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StatepubsubmodelPackage.Literals.RULE_SET__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleSetAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Location returns Location
	 *     SimpleLocation returns Location
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_SimpleLocation(ISerializationContext context, Location semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StatepubsubmodelPackage.Literals.LOCATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StatepubsubmodelPackage.Literals.LOCATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleLocationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         source=[Location|EString] 
	 *         target=[Location|EString] 
	 *         discreteevent=[DiscreteEvent|EString]? 
	 *         continuousvariable=[ContinuousVariable|EString]?
	 *     )
	 * </pre>
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
