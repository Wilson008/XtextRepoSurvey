/**
 * generated by Xtext 2.35.0
 */
package hu.sze.aut.ros.middleware.statepubsub.formatting2;

import com.google.inject.Inject;
import hu.sze.aut.ros.middleware.statepubsub.services.RosNetworkDslGrammarAccess;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.AbstractRosFileElement;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Channel;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.FilePackage;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.FilterDefinition;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Stack;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class RosNetworkDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RosNetworkDslGrammarAccess _rosNetworkDslGrammarAccess;

  protected void _format(final Stack stack, @Extension final IFormattableDocument document) {
    EList<FilePackage> _filepackage = stack.getFilepackage();
    for (final FilePackage filePackage : _filepackage) {
      document.<FilePackage>format(filePackage);
    }
    EList<Channel> _channels = stack.getChannels();
    for (final Channel channel : _channels) {
      document.<Channel>format(channel);
    }
  }

  protected void _format(final FilePackage filePackage, @Extension final IFormattableDocument document) {
    EList<AbstractRosFileElement> _abstractroselement = filePackage.getAbstractroselement();
    for (final AbstractRosFileElement abstractRosFileElement : _abstractroselement) {
      document.<AbstractRosFileElement>format(abstractRosFileElement);
    }
    EList<FilterDefinition> _filter = filePackage.getFilter();
    for (final FilterDefinition filterDefinition : _filter) {
      document.<FilterDefinition>format(filterDefinition);
    }
  }

  public void format(final Object filePackage, final IFormattableDocument document) {
    if (filePackage instanceof XtextResource) {
      _format((XtextResource)filePackage, document);
      return;
    } else if (filePackage instanceof FilePackage) {
      _format((FilePackage)filePackage, document);
      return;
    } else if (filePackage instanceof Stack) {
      _format((Stack)filePackage, document);
      return;
    } else if (filePackage instanceof EObject) {
      _format((EObject)filePackage, document);
      return;
    } else if (filePackage == null) {
      _format((Void)null, document);
      return;
    } else if (filePackage != null) {
      _format(filePackage, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(filePackage, document).toString());
    }
  }
}
