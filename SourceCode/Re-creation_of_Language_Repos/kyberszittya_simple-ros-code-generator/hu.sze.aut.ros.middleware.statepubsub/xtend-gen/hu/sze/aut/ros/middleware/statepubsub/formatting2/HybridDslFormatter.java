/**
 * generated by Xtext 2.35.0
 */
package hu.sze.aut.ros.middleware.statepubsub.formatting2;

import com.google.inject.Inject;
import hu.sze.aut.ros.middleware.statepubsub.services.HybridDslGrammarAccess;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Activity;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.ContinuousVariable;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.DiscreteEvent;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.FuzzyHybridSystem;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.HybridSystem;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Invariant;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Location;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.RuleSet;
import hu.sze.jkk.middleware.statepubsub.model.statepubsubmodel.Transition;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class HybridDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private HybridDslGrammarAccess _hybridDslGrammarAccess;

  protected void _format(final HybridSystem hybridSystem, @Extension final IFormattableDocument document) {
    EList<Location> _location = hybridSystem.getLocation();
    for (final Location location : _location) {
      document.<Location>format(location);
    }
    EList<Transition> _transition = hybridSystem.getTransition();
    for (final Transition transition : _transition) {
      document.<Transition>format(transition);
    }
    EList<ContinuousVariable> _variable = hybridSystem.getVariable();
    for (final ContinuousVariable continuousVariable : _variable) {
      document.<ContinuousVariable>format(continuousVariable);
    }
    EList<Activity> _activity = hybridSystem.getActivity();
    for (final Activity activity : _activity) {
      document.<Activity>format(activity);
    }
    EList<DiscreteEvent> _event = hybridSystem.getEvent();
    for (final DiscreteEvent discreteEvent : _event) {
      document.<DiscreteEvent>format(discreteEvent);
    }
    EList<Invariant> _invariant = hybridSystem.getInvariant();
    for (final Invariant invariant : _invariant) {
      document.<Invariant>format(invariant);
    }
  }

  protected void _format(final FuzzyHybridSystem fuzzyHybridSystem, @Extension final IFormattableDocument document) {
    EList<Location> _location = fuzzyHybridSystem.getLocation();
    for (final Location location : _location) {
      document.<Location>format(location);
    }
    EList<Transition> _transition = fuzzyHybridSystem.getTransition();
    for (final Transition transition : _transition) {
      document.<Transition>format(transition);
    }
    EList<ContinuousVariable> _variable = fuzzyHybridSystem.getVariable();
    for (final ContinuousVariable continuousVariable : _variable) {
      document.<ContinuousVariable>format(continuousVariable);
    }
    EList<Activity> _activity = fuzzyHybridSystem.getActivity();
    for (final Activity activity : _activity) {
      document.<Activity>format(activity);
    }
    EList<DiscreteEvent> _event = fuzzyHybridSystem.getEvent();
    for (final DiscreteEvent discreteEvent : _event) {
      document.<DiscreteEvent>format(discreteEvent);
    }
    EList<Invariant> _invariant = fuzzyHybridSystem.getInvariant();
    for (final Invariant invariant : _invariant) {
      document.<Invariant>format(invariant);
    }
    EList<RuleSet> _ruleset = fuzzyHybridSystem.getRuleset();
    for (final RuleSet ruleSet : _ruleset) {
      document.<RuleSet>format(ruleSet);
    }
  }

  public void format(final Object fuzzyHybridSystem, final IFormattableDocument document) {
    if (fuzzyHybridSystem instanceof FuzzyHybridSystem) {
      _format((FuzzyHybridSystem)fuzzyHybridSystem, document);
      return;
    } else if (fuzzyHybridSystem instanceof XtextResource) {
      _format((XtextResource)fuzzyHybridSystem, document);
      return;
    } else if (fuzzyHybridSystem instanceof HybridSystem) {
      _format((HybridSystem)fuzzyHybridSystem, document);
      return;
    } else if (fuzzyHybridSystem instanceof EObject) {
      _format((EObject)fuzzyHybridSystem, document);
      return;
    } else if (fuzzyHybridSystem == null) {
      _format((Void)null, document);
      return;
    } else if (fuzzyHybridSystem != null) {
      _format(fuzzyHybridSystem, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(fuzzyHybridSystem, document).toString());
    }
  }
}
