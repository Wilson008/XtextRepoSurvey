/*
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import es.unex.quercusseg.ide.contentassist.antlr.internal.InternalGraphqlIDLParser;
import es.unex.quercusseg.services.GraphqlIDLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GraphqlIDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GraphqlIDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GraphqlIDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGraphqlTypeDefinitionAccess().getAlternatives(), "rule__GraphqlTypeDefinition__Alternatives");
			builder.put(grammarAccess.getGraphqlTypeAccess().getAlternatives(), "rule__GraphqlType__Alternatives");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getAlternatives(), "rule__GraphqlInputType__Alternatives");
			builder.put(grammarAccess.getGraphqlValueAccess().getAlternatives(), "rule__GraphqlValue__Alternatives");
			builder.put(grammarAccess.getSingleValueAccess().getAlternatives(), "rule__SingleValue__Alternatives");
			builder.put(grammarAccess.getComplexValueAccess().getAlternatives(), "rule__ComplexValue__Alternatives");
			builder.put(grammarAccess.getIntegerPartAccess().getAlternatives(), "rule__IntegerPart__Alternatives");
			builder.put(grammarAccess.getFloatValueAccess().getAlternatives(), "rule__FloatValue__Alternatives");
			builder.put(grammarAccess.getExponentIndicatorAccess().getAlternatives(), "rule__ExponentIndicator__Alternatives");
			builder.put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
			builder.put(grammarAccess.getStringValueAccess().getAlternatives(), "rule__StringValue__Alternatives");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getGroup(), "rule__GraphqlSchemaDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getGroup_3(), "rule__GraphqlSchemaDefinition__Group_3__0");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getGroup_4(), "rule__GraphqlSchemaDefinition__Group_4__0");
			builder.put(grammarAccess.getGraphqlRootQueryAccess().getGroup(), "rule__GraphqlRootQuery__Group__0");
			builder.put(grammarAccess.getGraphqlObjectTypeDefinitionAccess().getGroup(), "rule__GraphqlObjectTypeDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlObjectTypeDefinitionAccess().getGroup_2(), "rule__GraphqlObjectTypeDefinition__Group_2__0");
			builder.put(grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getGroup(), "rule__GraphqlInterfaceTypeDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlScalarTypeDefinitionAccess().getGroup(), "rule__GraphqlScalarTypeDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlEmunTypeDefinitionAccess().getGroup(), "rule__GraphqlEmunTypeDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlUnionTypeDefinitionAccess().getGroup(), "rule__GraphqlUnionTypeDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlUnionTypeDefinitionAccess().getGroup_4(), "rule__GraphqlUnionTypeDefinition__Group_4__0");
			builder.put(grammarAccess.getGraphqlInputTypeDefinitionAccess().getGroup(), "rule__GraphqlInputTypeDefinition__Group__0");
			builder.put(grammarAccess.getGraphqlInputFieldAccess().getGroup(), "rule__GraphqlInputField__Group__0");
			builder.put(grammarAccess.getGraphqlFieldAccess().getGroup(), "rule__GraphqlField__Group__0");
			builder.put(grammarAccess.getGraphqlFieldAccess().getGroup_1(), "rule__GraphqlField__Group_1__0");
			builder.put(grammarAccess.getGraphqlTypeAccess().getGroup_0(), "rule__GraphqlType__Group_0__0");
			builder.put(grammarAccess.getGraphqlTypeAccess().getGroup_1(), "rule__GraphqlType__Group_1__0");
			builder.put(grammarAccess.getGraphqlTypeAccess().getGroup_2(), "rule__GraphqlType__Group_2__0");
			builder.put(grammarAccess.getGraphqlListTypeAccess().getGroup(), "rule__GraphqlListType__Group__0");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getGroup_0(), "rule__GraphqlInputType__Group_0__0");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getGroup_1(), "rule__GraphqlInputType__Group_1__0");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getGroup_2(), "rule__GraphqlInputType__Group_2__0");
			builder.put(grammarAccess.getGraphqlListInputTypeAccess().getGroup(), "rule__GraphqlListInputType__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup_3(), "rule__Argument__Group_3__0");
			builder.put(grammarAccess.getEnumValueAccess().getGroup(), "rule__EnumValue__Group__0");
			builder.put(grammarAccess.getListValueAccess().getGroup(), "rule__ListValue__Group__0");
			builder.put(grammarAccess.getObjectValueAccess().getGroup(), "rule__ObjectValue__Group__0");
			builder.put(grammarAccess.getObjectFieldAccess().getGroup(), "rule__ObjectField__Group__0");
			builder.put(grammarAccess.getIntegerPartAccess().getGroup_0(), "rule__IntegerPart__Group_0__0");
			builder.put(grammarAccess.getIntegerPartAccess().getGroup_1(), "rule__IntegerPart__Group_1__0");
			builder.put(grammarAccess.getFloatValueAccess().getGroup_0(), "rule__FloatValue__Group_0__0");
			builder.put(grammarAccess.getFloatValueAccess().getGroup_1(), "rule__FloatValue__Group_1__0");
			builder.put(grammarAccess.getFloatValueAccess().getGroup_2(), "rule__FloatValue__Group_2__0");
			builder.put(grammarAccess.getFractionalPartAccess().getGroup(), "rule__FractionalPart__Group__0");
			builder.put(grammarAccess.getExponentPartAccess().getGroup(), "rule__ExponentPart__Group__0");
			builder.put(grammarAccess.getStringValueAccess().getGroup_0(), "rule__StringValue__Group_0__0");
			builder.put(grammarAccess.getStringValueAccess().getGroup_1(), "rule__StringValue__Group_1__0");
			builder.put(grammarAccess.getGraphqlSchemaAccess().getSchemaAssignment_0(), "rule__GraphqlSchema__SchemaAssignment_0");
			builder.put(grammarAccess.getGraphqlSchemaAccess().getTypesAssignment_1(), "rule__GraphqlSchema__TypesAssignment_1");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getNameAssignment_0(), "rule__GraphqlSchemaDefinition__NameAssignment_0");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getRootQueryAssignment_2(), "rule__GraphqlSchemaDefinition__RootQueryAssignment_2");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getMutationAssignment_3_2(), "rule__GraphqlSchemaDefinition__MutationAssignment_3_2");
			builder.put(grammarAccess.getGraphqlSchemaDefinitionAccess().getSubcriptionAssignment_4_2(), "rule__GraphqlSchemaDefinition__SubcriptionAssignment_4_2");
			builder.put(grammarAccess.getGraphqlRootQueryAccess().getNameAssignment_0(), "rule__GraphqlRootQuery__NameAssignment_0");
			builder.put(grammarAccess.getGraphqlRootQueryAccess().getQueryAssignment_2(), "rule__GraphqlRootQuery__QueryAssignment_2");
			builder.put(grammarAccess.getGraphqlObjectTypeDefinitionAccess().getNameAssignment_1(), "rule__GraphqlObjectTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGraphqlObjectTypeDefinitionAccess().getInterfacesAssignment_2_1(), "rule__GraphqlObjectTypeDefinition__InterfacesAssignment_2_1");
			builder.put(grammarAccess.getGraphqlObjectTypeDefinitionAccess().getFieldsAssignment_4(), "rule__GraphqlObjectTypeDefinition__FieldsAssignment_4");
			builder.put(grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getNameAssignment_1(), "rule__GraphqlInterfaceTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getFieldsAssignment_3(), "rule__GraphqlInterfaceTypeDefinition__FieldsAssignment_3");
			builder.put(grammarAccess.getGraphqlScalarTypeDefinitionAccess().getNameAssignment_1(), "rule__GraphqlScalarTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGraphqlEmunTypeDefinitionAccess().getNameAssignment_1(), "rule__GraphqlEmunTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGraphqlEmunTypeDefinitionAccess().getValuesAssignment_3(), "rule__GraphqlEmunTypeDefinition__ValuesAssignment_3");
			builder.put(grammarAccess.getGraphqlUnionTypeDefinitionAccess().getNameAssignment_1(), "rule__GraphqlUnionTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGraphqlUnionTypeDefinitionAccess().getMembersAssignment_3(), "rule__GraphqlUnionTypeDefinition__MembersAssignment_3");
			builder.put(grammarAccess.getGraphqlUnionTypeDefinitionAccess().getMembersAssignment_4_1(), "rule__GraphqlUnionTypeDefinition__MembersAssignment_4_1");
			builder.put(grammarAccess.getGraphqlInputTypeDefinitionAccess().getNameAssignment_1(), "rule__GraphqlInputTypeDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGraphqlInputTypeDefinitionAccess().getFieldsAssignment_3(), "rule__GraphqlInputTypeDefinition__FieldsAssignment_3");
			builder.put(grammarAccess.getGraphqlInputFieldAccess().getNameAssignment_0(), "rule__GraphqlInputField__NameAssignment_0");
			builder.put(grammarAccess.getGraphqlInputFieldAccess().getTypeAssignment_2(), "rule__GraphqlInputField__TypeAssignment_2");
			builder.put(grammarAccess.getGraphqlFieldAccess().getNameAssignment_0(), "rule__GraphqlField__NameAssignment_0");
			builder.put(grammarAccess.getGraphqlFieldAccess().getArgsAssignment_1_1(), "rule__GraphqlField__ArgsAssignment_1_1");
			builder.put(grammarAccess.getGraphqlFieldAccess().getTypeAssignment_3(), "rule__GraphqlField__TypeAssignment_3");
			builder.put(grammarAccess.getGraphqlTypeAccess().getDtypeAssignment_0_0(), "rule__GraphqlType__DtypeAssignment_0_0");
			builder.put(grammarAccess.getGraphqlTypeAccess().getNonNullAssignment_0_1(), "rule__GraphqlType__NonNullAssignment_0_1");
			builder.put(grammarAccess.getGraphqlTypeAccess().getNtypeAssignment_1_0(), "rule__GraphqlType__NtypeAssignment_1_0");
			builder.put(grammarAccess.getGraphqlTypeAccess().getNonNullAssignment_1_1(), "rule__GraphqlType__NonNullAssignment_1_1");
			builder.put(grammarAccess.getGraphqlTypeAccess().getLtypeAssignment_2_0(), "rule__GraphqlType__LtypeAssignment_2_0");
			builder.put(grammarAccess.getGraphqlTypeAccess().getNonNullAssignment_2_1(), "rule__GraphqlType__NonNullAssignment_2_1");
			builder.put(grammarAccess.getGraphqlNamedTypeAccess().getNameAssignment(), "rule__GraphqlNamedType__NameAssignment");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getDtypeAssignment_0_0(), "rule__GraphqlInputType__DtypeAssignment_0_0");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getNonNullAssignment_0_1(), "rule__GraphqlInputType__NonNullAssignment_0_1");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getNtypeAssignment_1_0(), "rule__GraphqlInputType__NtypeAssignment_1_0");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getNonNullAssignment_1_1(), "rule__GraphqlInputType__NonNullAssignment_1_1");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getLtypeAssignment_2_0(), "rule__GraphqlInputType__LtypeAssignment_2_0");
			builder.put(grammarAccess.getGraphqlInputTypeAccess().getNonNullAssignment_2_1(), "rule__GraphqlInputType__NonNullAssignment_2_1");
			builder.put(grammarAccess.getArgumentAccess().getNameAssignment_0(), "rule__Argument__NameAssignment_0");
			builder.put(grammarAccess.getArgumentAccess().getTypeAssignment_2(), "rule__Argument__TypeAssignment_2");
			builder.put(grammarAccess.getArgumentAccess().getDefValueAssignment_3_1(), "rule__Argument__DefValueAssignment_3_1");
			builder.put(grammarAccess.getGraphqlValueAccess().getSvAssignment_0(), "rule__GraphqlValue__SvAssignment_0");
			builder.put(grammarAccess.getGraphqlValueAccess().getEvAssignment_1(), "rule__GraphqlValue__EvAssignment_1");
			builder.put(grammarAccess.getGraphqlValueAccess().getCvAssignment_2(), "rule__GraphqlValue__CvAssignment_2");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_0(), "rule__SingleValue__ValueAssignment_0");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_1(), "rule__SingleValue__ValueAssignment_1");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_2(), "rule__SingleValue__ValueAssignment_2");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_3(), "rule__SingleValue__ValueAssignment_3");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_4(), "rule__SingleValue__ValueAssignment_4");
			builder.put(grammarAccess.getComplexValueAccess().getValueAssignment_0(), "rule__ComplexValue__ValueAssignment_0");
			builder.put(grammarAccess.getComplexValueAccess().getValueAssignment_1(), "rule__ComplexValue__ValueAssignment_1");
			builder.put(grammarAccess.getEnumValueAccess().getNameAssignment_1(), "rule__EnumValue__NameAssignment_1");
			builder.put(grammarAccess.getListValueAccess().getValuesAssignment_2(), "rule__ListValue__ValuesAssignment_2");
			builder.put(grammarAccess.getObjectValueAccess().getFieldsAssignment_2(), "rule__ObjectValue__FieldsAssignment_2");
			builder.put(grammarAccess.getObjectFieldAccess().getNameAssignment_0(), "rule__ObjectField__NameAssignment_0");
			builder.put(grammarAccess.getObjectFieldAccess().getValueAssignment_2(), "rule__ObjectField__ValueAssignment_2");
			builder.put(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup(), "rule__GraphqlSchema__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GraphqlIDLGrammarAccess grammarAccess;

	@Override
	protected InternalGraphqlIDLParser createParser() {
		InternalGraphqlIDLParser result = new InternalGraphqlIDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_COMMA", "RULE_COMMENT" };
	}

	public GraphqlIDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GraphqlIDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
