/*
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.serializer;

import com.google.inject.Inject;
import es.unex.quercusseg.graphqlIDL.Argument;
import es.unex.quercusseg.graphqlIDL.ComplexValue;
import es.unex.quercusseg.graphqlIDL.EnumValue;
import es.unex.quercusseg.graphqlIDL.GraphqlEmunTypeDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlField;
import es.unex.quercusseg.graphqlIDL.GraphqlIDLPackage;
import es.unex.quercusseg.graphqlIDL.GraphqlInputField;
import es.unex.quercusseg.graphqlIDL.GraphqlInputType;
import es.unex.quercusseg.graphqlIDL.GraphqlInputTypeDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlInterfaceTypeDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlNamedType;
import es.unex.quercusseg.graphqlIDL.GraphqlObjectTypeDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlRootQuery;
import es.unex.quercusseg.graphqlIDL.GraphqlScalarTypeDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlSchema;
import es.unex.quercusseg.graphqlIDL.GraphqlSchemaDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlType;
import es.unex.quercusseg.graphqlIDL.GraphqlUnionTypeDefinition;
import es.unex.quercusseg.graphqlIDL.GraphqlValue;
import es.unex.quercusseg.graphqlIDL.ListValue;
import es.unex.quercusseg.graphqlIDL.ObjectField;
import es.unex.quercusseg.graphqlIDL.ObjectValue;
import es.unex.quercusseg.graphqlIDL.SingleValue;
import es.unex.quercusseg.services.GraphqlIDLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GraphqlIDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphqlIDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GraphqlIDLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GraphqlIDLPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case GraphqlIDLPackage.COMPLEX_VALUE:
				sequence_ComplexValue(context, (ComplexValue) semanticObject); 
				return; 
			case GraphqlIDLPackage.ENUM_VALUE:
				sequence_EnumValue(context, (EnumValue) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_EMUN_TYPE_DEFINITION:
				sequence_GraphqlEmunTypeDefinition(context, (GraphqlEmunTypeDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_FIELD:
				sequence_GraphqlField(context, (GraphqlField) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_INPUT_FIELD:
				sequence_GraphqlInputField(context, (GraphqlInputField) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_INPUT_TYPE:
				sequence_GraphqlInputType(context, (GraphqlInputType) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_INPUT_TYPE_DEFINITION:
				sequence_GraphqlInputTypeDefinition(context, (GraphqlInputTypeDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_INTERFACE_TYPE_DEFINITION:
				sequence_GraphqlInterfaceTypeDefinition(context, (GraphqlInterfaceTypeDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_NAMED_TYPE:
				sequence_GraphqlNamedType(context, (GraphqlNamedType) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_OBJECT_TYPE_DEFINITION:
				sequence_GraphqlObjectTypeDefinition(context, (GraphqlObjectTypeDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_ROOT_QUERY:
				sequence_GraphqlRootQuery(context, (GraphqlRootQuery) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_SCALAR_TYPE_DEFINITION:
				sequence_GraphqlScalarTypeDefinition(context, (GraphqlScalarTypeDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_SCHEMA:
				sequence_GraphqlSchema(context, (GraphqlSchema) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_SCHEMA_DEFINITION:
				sequence_GraphqlSchemaDefinition(context, (GraphqlSchemaDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_TYPE:
				sequence_GraphqlType(context, (GraphqlType) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_UNION_TYPE_DEFINITION:
				sequence_GraphqlUnionTypeDefinition(context, (GraphqlUnionTypeDefinition) semanticObject); 
				return; 
			case GraphqlIDLPackage.GRAPHQL_VALUE:
				sequence_GraphqlValue(context, (GraphqlValue) semanticObject); 
				return; 
			case GraphqlIDLPackage.LIST_VALUE:
				sequence_ListValue(context, (ListValue) semanticObject); 
				return; 
			case GraphqlIDLPackage.OBJECT_FIELD:
				sequence_ObjectField(context, (ObjectField) semanticObject); 
				return; 
			case GraphqlIDLPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case GraphqlIDLPackage.SINGLE_VALUE:
				sequence_SingleValue(context, (SingleValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Argument returns Argument
	 *
	 * Constraint:
	 *     (name=NAME type=GraphqlType defValue=GraphqlValue?)
	 * </pre>
	 */
	protected void sequence_Argument(ISerializationContext context, Argument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComplexValue returns ComplexValue
	 *
	 * Constraint:
	 *     (value=ListValue | value=ObjectValue)
	 * </pre>
	 */
	protected void sequence_ComplexValue(ISerializationContext context, ComplexValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     EnumValue returns EnumValue
	 *
	 * Constraint:
	 *     name=ENUM_VALUE
	 * </pre>
	 */
	protected void sequence_EnumValue(ISerializationContext context, EnumValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.ENUM_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.ENUM_VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumValueAccess().getNameENUM_VALUETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlTypeDefinition returns GraphqlEmunTypeDefinition
	 *     GraphqlEmunTypeDefinition returns GraphqlEmunTypeDefinition
	 *
	 * Constraint:
	 *     (name=NAME values+=EnumValue+)
	 * </pre>
	 */
	protected void sequence_GraphqlEmunTypeDefinition(ISerializationContext context, GraphqlEmunTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlField returns GraphqlField
	 *
	 * Constraint:
	 *     (name=NAME args+=Argument* type=GraphqlType)
	 * </pre>
	 */
	protected void sequence_GraphqlField(ISerializationContext context, GraphqlField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlInputField returns GraphqlInputField
	 *
	 * Constraint:
	 *     (name=NAME type=GraphqlInputType)
	 * </pre>
	 */
	protected void sequence_GraphqlInputField(ISerializationContext context, GraphqlInputField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_INPUT_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_INPUT_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_INPUT_FIELD__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_INPUT_FIELD__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphqlInputFieldAccess().getNameNAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGraphqlInputFieldAccess().getTypeGraphqlInputTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlTypeDefinition returns GraphqlInputTypeDefinition
	 *     GraphqlInputTypeDefinition returns GraphqlInputTypeDefinition
	 *
	 * Constraint:
	 *     (name=NAME fields+=GraphqlInputField+)
	 * </pre>
	 */
	protected void sequence_GraphqlInputTypeDefinition(ISerializationContext context, GraphqlInputTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlInputType returns GraphqlInputType
	 *     GraphqlListInputType returns GraphqlInputType
	 *
	 * Constraint:
	 *     ((dtype=[GraphqlInputTypeDefinition|NAME] nonNull?='!'?) | (ntype=GraphqlNamedType nonNull?='!'?) | (ltype=GraphqlListInputType nonNull?='!'?))
	 * </pre>
	 */
	protected void sequence_GraphqlInputType(ISerializationContext context, GraphqlInputType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlTypeDefinition returns GraphqlInterfaceTypeDefinition
	 *     GraphqlInterfaceTypeDefinition returns GraphqlInterfaceTypeDefinition
	 *
	 * Constraint:
	 *     (name=NAME fields+=GraphqlField+)
	 * </pre>
	 */
	protected void sequence_GraphqlInterfaceTypeDefinition(ISerializationContext context, GraphqlInterfaceTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlNamedType returns GraphqlNamedType
	 *
	 * Constraint:
	 *     name=SCALAR
	 * </pre>
	 */
	protected void sequence_GraphqlNamedType(ISerializationContext context, GraphqlNamedType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_NAMED_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_NAMED_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphqlNamedTypeAccess().getNameSCALARTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlTypeDefinition returns GraphqlObjectTypeDefinition
	 *     GraphqlObjectTypeDefinition returns GraphqlObjectTypeDefinition
	 *
	 * Constraint:
	 *     (name=NAME interfaces+=[GraphqlInterfaceTypeDefinition|NAME]* fields+=GraphqlField+)
	 * </pre>
	 */
	protected void sequence_GraphqlObjectTypeDefinition(ISerializationContext context, GraphqlObjectTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlRootQuery returns GraphqlRootQuery
	 *
	 * Constraint:
	 *     (name='query' query=[GraphqlObjectTypeDefinition|NAME])
	 * </pre>
	 */
	protected void sequence_GraphqlRootQuery(ISerializationContext context, GraphqlRootQuery semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_ROOT_QUERY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_ROOT_QUERY__NAME));
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_ROOT_QUERY__QUERY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_ROOT_QUERY__QUERY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphqlRootQueryAccess().getNameQueryKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGraphqlRootQueryAccess().getQueryGraphqlObjectTypeDefinitionNAMETerminalRuleCall_2_0_1(), semanticObject.eGet(GraphqlIDLPackage.Literals.GRAPHQL_ROOT_QUERY__QUERY, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlTypeDefinition returns GraphqlScalarTypeDefinition
	 *     GraphqlScalarTypeDefinition returns GraphqlScalarTypeDefinition
	 *
	 * Constraint:
	 *     name=NAME
	 * </pre>
	 */
	protected void sequence_GraphqlScalarTypeDefinition(ISerializationContext context, GraphqlScalarTypeDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_TYPE_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.GRAPHQL_TYPE_DEFINITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphqlScalarTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlSchemaDefinition returns GraphqlSchemaDefinition
	 *
	 * Constraint:
	 *     (name='schema' rootQuery=GraphqlRootQuery mutation=[GraphqlObjectTypeDefinition|NAME]? subcription=[GraphqlObjectTypeDefinition|NAME]?)
	 * </pre>
	 */
	protected void sequence_GraphqlSchemaDefinition(ISerializationContext context, GraphqlSchemaDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlSchema returns GraphqlSchema
	 *
	 * Constraint:
	 *     (schema=GraphqlSchemaDefinition | types+=GraphqlTypeDefinition)+
	 * </pre>
	 */
	protected void sequence_GraphqlSchema(ISerializationContext context, GraphqlSchema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlType returns GraphqlType
	 *     GraphqlListType returns GraphqlType
	 *
	 * Constraint:
	 *     ((dtype=[GraphqlTypeDefinition|NAME] nonNull?='!'?) | (ntype=GraphqlNamedType nonNull?='!'?) | (ltype=GraphqlListType nonNull?='!'?))
	 * </pre>
	 */
	protected void sequence_GraphqlType(ISerializationContext context, GraphqlType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlTypeDefinition returns GraphqlUnionTypeDefinition
	 *     GraphqlUnionTypeDefinition returns GraphqlUnionTypeDefinition
	 *
	 * Constraint:
	 *     (name=NAME members+=[GraphqlObjectTypeDefinition|NAME] members+=[GraphqlObjectTypeDefinition|NAME]*)
	 * </pre>
	 */
	protected void sequence_GraphqlUnionTypeDefinition(ISerializationContext context, GraphqlUnionTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GraphqlValue returns GraphqlValue
	 *
	 * Constraint:
	 *     (sv=SingleValue | ev=[EnumValue|NAME] | cv=ComplexValue)
	 * </pre>
	 */
	protected void sequence_GraphqlValue(ISerializationContext context, GraphqlValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ListValue returns ListValue
	 *
	 * Constraint:
	 *     values+=GraphqlValue*
	 * </pre>
	 */
	protected void sequence_ListValue(ISerializationContext context, ListValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectField returns ObjectField
	 *
	 * Constraint:
	 *     (name=NAME value=GraphqlValue)
	 * </pre>
	 */
	protected void sequence_ObjectField(ISerializationContext context, ObjectField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.OBJECT_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.OBJECT_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, GraphqlIDLPackage.Literals.OBJECT_FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlIDLPackage.Literals.OBJECT_FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectFieldAccess().getNameNAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjectFieldAccess().getValueGraphqlValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     fields+=ObjectField*
	 * </pre>
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SingleValue returns SingleValue
	 *
	 * Constraint:
	 *     (value=IntValue | value=FloatValue | value=StringValue | value=BOOLEANVALUE | value=NULLVALUE)
	 * </pre>
	 */
	protected void sequence_SingleValue(ISerializationContext context, SingleValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
