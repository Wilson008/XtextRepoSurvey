/*
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import es.unex.quercusseg.ide.contentassist.antlr.internal.InternalGraphqlXtextParser;
import es.unex.quercusseg.services.GraphqlXtextGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GraphqlXtextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GraphqlXtextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GraphqlXtextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
			builder.put(grammarAccess.getOperationDefinitionAccess().getAlternatives(), "rule__OperationDefinition__Alternatives");
			builder.put(grammarAccess.getOperationTypeAccess().getAlternatives(), "rule__OperationType__Alternatives");
			builder.put(grammarAccess.getSelectionAccess().getAlternatives(), "rule__Selection__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getSingleValueAccess().getAlternatives(), "rule__SingleValue__Alternatives");
			builder.put(grammarAccess.getComplexValueAccess().getAlternatives(), "rule__ComplexValue__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getOperationDefinitionAccess().getGroup_1(), "rule__OperationDefinition__Group_1__0");
			builder.put(grammarAccess.getOperationDefinitionAccess().getGroup_1_2(), "rule__OperationDefinition__Group_1_2__0");
			builder.put(grammarAccess.getSelectionSetAccess().getGroup(), "rule__SelectionSet__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getAliasAccess().getGroup(), "rule__Alias__Group__0");
			builder.put(grammarAccess.getArgumentsAccess().getGroup(), "rule__Arguments__Group__0");
			builder.put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
			builder.put(grammarAccess.getFragmentSpreadAccess().getGroup(), "rule__FragmentSpread__Group__0");
			builder.put(grammarAccess.getInlineFragmentAccess().getGroup(), "rule__InlineFragment__Group__0");
			builder.put(grammarAccess.getFragmentDefinitionAccess().getGroup(), "rule__FragmentDefinition__Group__0");
			builder.put(grammarAccess.getTypeConditionAccess().getGroup(), "rule__TypeCondition__Group__0");
			builder.put(grammarAccess.getListValueAccess().getGroup(), "rule__ListValue__Group__0");
			builder.put(grammarAccess.getObjectValueAccess().getGroup(), "rule__ObjectValue__Group__0");
			builder.put(grammarAccess.getObjectFieldAccess().getGroup(), "rule__ObjectField__Group__0");
			builder.put(grammarAccess.getVariableDefinitionsAccess().getGroup(), "rule__VariableDefinitions__Group__0");
			builder.put(grammarAccess.getVariableDefinitionAccess().getGroup(), "rule__VariableDefinition__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getDefaultValueAccess().getGroup(), "rule__DefaultValue__Group__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getListTypeAccess().getGroup(), "rule__ListType__Group__0");
			builder.put(grammarAccess.getDirectiveAccess().getGroup(), "rule__Directive__Group__0");
			builder.put(grammarAccess.getDocumentAccess().getDefsAssignment(), "rule__Document__DefsAssignment");
			builder.put(grammarAccess.getOperationDefinitionAccess().getSelectionAssignment_0(), "rule__OperationDefinition__SelectionAssignment_0");
			builder.put(grammarAccess.getOperationDefinitionAccess().getOpTypeAssignment_1_0(), "rule__OperationDefinition__OpTypeAssignment_1_0");
			builder.put(grammarAccess.getOperationDefinitionAccess().getNameAssignment_1_1(), "rule__OperationDefinition__NameAssignment_1_1");
			builder.put(grammarAccess.getOperationDefinitionAccess().getVarDefinitionsAssignment_1_2_1(), "rule__OperationDefinition__VarDefinitionsAssignment_1_2_1");
			builder.put(grammarAccess.getOperationDefinitionAccess().getDirectivesAssignment_1_3(), "rule__OperationDefinition__DirectivesAssignment_1_3");
			builder.put(grammarAccess.getOperationDefinitionAccess().getSelectionSetAssignment_1_4(), "rule__OperationDefinition__SelectionSetAssignment_1_4");
			builder.put(grammarAccess.getSelectionSetAccess().getSelectionsAssignment_2(), "rule__SelectionSet__SelectionsAssignment_2");
			builder.put(grammarAccess.getFieldAccess().getAliasAssignment_0(), "rule__Field__AliasAssignment_0");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
			builder.put(grammarAccess.getFieldAccess().getArgsAssignment_2(), "rule__Field__ArgsAssignment_2");
			builder.put(grammarAccess.getFieldAccess().getDirectivesAssignment_3(), "rule__Field__DirectivesAssignment_3");
			builder.put(grammarAccess.getFieldAccess().getSelectionSetAssignment_4(), "rule__Field__SelectionSetAssignment_4");
			builder.put(grammarAccess.getAliasAccess().getNameAssignment_0(), "rule__Alias__NameAssignment_0");
			builder.put(grammarAccess.getArgumentsAccess().getArgsAssignment_2(), "rule__Arguments__ArgsAssignment_2");
			builder.put(grammarAccess.getArgumentAccess().getNameAssignment_0(), "rule__Argument__NameAssignment_0");
			builder.put(grammarAccess.getArgumentAccess().getValueAssignment_2(), "rule__Argument__ValueAssignment_2");
			builder.put(grammarAccess.getFragmentSpreadAccess().getFragNameAssignment_1(), "rule__FragmentSpread__FragNameAssignment_1");
			builder.put(grammarAccess.getFragmentSpreadAccess().getDirectivesAssignment_2(), "rule__FragmentSpread__DirectivesAssignment_2");
			builder.put(grammarAccess.getInlineFragmentAccess().getTypeConditionAssignment_2(), "rule__InlineFragment__TypeConditionAssignment_2");
			builder.put(grammarAccess.getInlineFragmentAccess().getDirectivesAssignment_3(), "rule__InlineFragment__DirectivesAssignment_3");
			builder.put(grammarAccess.getInlineFragmentAccess().getSelectionSetAssignment_4(), "rule__InlineFragment__SelectionSetAssignment_4");
			builder.put(grammarAccess.getFragmentDefinitionAccess().getFragNameAssignment_1(), "rule__FragmentDefinition__FragNameAssignment_1");
			builder.put(grammarAccess.getFragmentDefinitionAccess().getTypeConditionAssignment_2(), "rule__FragmentDefinition__TypeConditionAssignment_2");
			builder.put(grammarAccess.getFragmentDefinitionAccess().getDirectivesAssignment_3(), "rule__FragmentDefinition__DirectivesAssignment_3");
			builder.put(grammarAccess.getFragmentDefinitionAccess().getSelectionSetAssignment_4(), "rule__FragmentDefinition__SelectionSetAssignment_4");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_0(), "rule__SingleValue__ValueAssignment_0");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_1(), "rule__SingleValue__ValueAssignment_1");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_2(), "rule__SingleValue__ValueAssignment_2");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_3(), "rule__SingleValue__ValueAssignment_3");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_4(), "rule__SingleValue__ValueAssignment_4");
			builder.put(grammarAccess.getSingleValueAccess().getValueAssignment_5(), "rule__SingleValue__ValueAssignment_5");
			builder.put(grammarAccess.getComplexValueAccess().getValueAssignment_0(), "rule__ComplexValue__ValueAssignment_0");
			builder.put(grammarAccess.getComplexValueAccess().getValueAssignment_1(), "rule__ComplexValue__ValueAssignment_1");
			builder.put(grammarAccess.getListValueAccess().getValuesAssignment_2(), "rule__ListValue__ValuesAssignment_2");
			builder.put(grammarAccess.getObjectValueAccess().getFieldsAssignment_2(), "rule__ObjectValue__FieldsAssignment_2");
			builder.put(grammarAccess.getObjectFieldAccess().getNameAssignment_0(), "rule__ObjectField__NameAssignment_0");
			builder.put(grammarAccess.getObjectFieldAccess().getValueAssignment_2(), "rule__ObjectField__ValueAssignment_2");
			builder.put(grammarAccess.getVariableDefinitionsAccess().getVarDefinitionsAssignment_2(), "rule__VariableDefinitions__VarDefinitionsAssignment_2");
			builder.put(grammarAccess.getVariableDefinitionAccess().getNameAssignment_1(), "rule__VariableDefinition__NameAssignment_1");
			builder.put(grammarAccess.getVariableDefinitionAccess().getTypeAssignment_3(), "rule__VariableDefinition__TypeAssignment_3");
			builder.put(grammarAccess.getVariableDefinitionAccess().getDefValueAssignment_4(), "rule__VariableDefinition__DefValueAssignment_4");
			builder.put(grammarAccess.getTypeAccess().getNameAssignment_0_0(), "rule__Type__NameAssignment_0_0");
			builder.put(grammarAccess.getTypeAccess().getNotNullAssignment_0_1(), "rule__Type__NotNullAssignment_0_1");
			builder.put(grammarAccess.getTypeAccess().getListAssignment_1_0(), "rule__Type__ListAssignment_1_0");
			builder.put(grammarAccess.getTypeAccess().getNotNullAssignment_1_1(), "rule__Type__NotNullAssignment_1_1");
			builder.put(grammarAccess.getListTypeAccess().getTypeAssignment_1(), "rule__ListType__TypeAssignment_1");
			builder.put(grammarAccess.getDirectiveAccess().getNameAssignment_1(), "rule__Directive__NameAssignment_1");
			builder.put(grammarAccess.getDirectiveAccess().getArgsAssignment_2(), "rule__Directive__ArgsAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GraphqlXtextGrammarAccess grammarAccess;

	@Override
	protected InternalGraphqlXtextParser createParser() {
		InternalGraphqlXtextParser result = new InternalGraphqlXtextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_COMMA", "RULE_COMMENT" };
	}

	public GraphqlXtextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GraphqlXtextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
