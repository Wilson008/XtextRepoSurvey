/**
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.graphqlXtext.impl;

import es.unex.quercusseg.graphqlXtext.GraphqlXtextPackage;
import es.unex.quercusseg.graphqlXtext.InlineFragment;
import es.unex.quercusseg.graphqlXtext.SelectionSet;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inline Fragment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.InlineFragmentImpl#getTypeCondition <em>Type Condition</em>}</li>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.InlineFragmentImpl#getSelectionSet <em>Selection Set</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InlineFragmentImpl extends SelectionImpl implements InlineFragment
{
  /**
   * The default value of the '{@link #getTypeCondition() <em>Type Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCondition()
   * @generated
   * @ordered
   */
  protected static final String TYPE_CONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeCondition() <em>Type Condition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeCondition()
   * @generated
   * @ordered
   */
  protected String typeCondition = TYPE_CONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getSelectionSet() <em>Selection Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectionSet()
   * @generated
   * @ordered
   */
  protected SelectionSet selectionSet;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InlineFragmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphqlXtextPackage.Literals.INLINE_FRAGMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTypeCondition()
  {
    return typeCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeCondition(String newTypeCondition)
  {
    String oldTypeCondition = typeCondition;
    typeCondition = newTypeCondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.INLINE_FRAGMENT__TYPE_CONDITION, oldTypeCondition, typeCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionSet getSelectionSet()
  {
    return selectionSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectionSet(SelectionSet newSelectionSet, NotificationChain msgs)
  {
    SelectionSet oldSelectionSet = selectionSet;
    selectionSet = newSelectionSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET, oldSelectionSet, newSelectionSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectionSet(SelectionSet newSelectionSet)
  {
    if (newSelectionSet != selectionSet)
    {
      NotificationChain msgs = null;
      if (selectionSet != null)
        msgs = ((InternalEObject)selectionSet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET, null, msgs);
      if (newSelectionSet != null)
        msgs = ((InternalEObject)newSelectionSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET, null, msgs);
      msgs = basicSetSelectionSet(newSelectionSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET, newSelectionSet, newSelectionSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET:
        return basicSetSelectionSet(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.INLINE_FRAGMENT__TYPE_CONDITION:
        return getTypeCondition();
      case GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET:
        return getSelectionSet();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.INLINE_FRAGMENT__TYPE_CONDITION:
        setTypeCondition((String)newValue);
        return;
      case GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET:
        setSelectionSet((SelectionSet)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.INLINE_FRAGMENT__TYPE_CONDITION:
        setTypeCondition(TYPE_CONDITION_EDEFAULT);
        return;
      case GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET:
        setSelectionSet((SelectionSet)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.INLINE_FRAGMENT__TYPE_CONDITION:
        return TYPE_CONDITION_EDEFAULT == null ? typeCondition != null : !TYPE_CONDITION_EDEFAULT.equals(typeCondition);
      case GraphqlXtextPackage.INLINE_FRAGMENT__SELECTION_SET:
        return selectionSet != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (typeCondition: ");
    result.append(typeCondition);
    result.append(')');
    return result.toString();
  }

} //InlineFragmentImpl
