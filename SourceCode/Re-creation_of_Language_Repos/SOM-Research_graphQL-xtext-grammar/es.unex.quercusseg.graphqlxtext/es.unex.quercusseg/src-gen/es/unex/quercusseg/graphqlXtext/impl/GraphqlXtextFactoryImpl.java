/**
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.graphqlXtext.impl;

import es.unex.quercusseg.graphqlXtext.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GraphqlXtextFactoryImpl extends EFactoryImpl implements GraphqlXtextFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GraphqlXtextFactory init()
  {
    try
    {
      GraphqlXtextFactory theGraphqlXtextFactory = (GraphqlXtextFactory)EPackage.Registry.INSTANCE.getEFactory(GraphqlXtextPackage.eNS_URI);
      if (theGraphqlXtextFactory != null)
      {
        return theGraphqlXtextFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GraphqlXtextFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphqlXtextFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GraphqlXtextPackage.DOCUMENT: return createDocument();
      case GraphqlXtextPackage.DEFINITION: return createDefinition();
      case GraphqlXtextPackage.OPERATION_DEFINITION: return createOperationDefinition();
      case GraphqlXtextPackage.SELECTION_SET: return createSelectionSet();
      case GraphqlXtextPackage.SELECTION: return createSelection();
      case GraphqlXtextPackage.FIELD: return createField();
      case GraphqlXtextPackage.ALIAS: return createAlias();
      case GraphqlXtextPackage.ARGUMENTS: return createArguments();
      case GraphqlXtextPackage.ARGUMENT: return createArgument();
      case GraphqlXtextPackage.FRAGMENT_SPREAD: return createFragmentSpread();
      case GraphqlXtextPackage.INLINE_FRAGMENT: return createInlineFragment();
      case GraphqlXtextPackage.FRAGMENT_DEFINITION: return createFragmentDefinition();
      case GraphqlXtextPackage.VALUE: return createValue();
      case GraphqlXtextPackage.SINGLE_VALUE: return createSingleValue();
      case GraphqlXtextPackage.COMPLEX_VALUE: return createComplexValue();
      case GraphqlXtextPackage.LIST_VALUE: return createListValue();
      case GraphqlXtextPackage.OBJECT_VALUE: return createObjectValue();
      case GraphqlXtextPackage.OBJECT_FIELD: return createObjectField();
      case GraphqlXtextPackage.VARIABLE_DEFINITIONS: return createVariableDefinitions();
      case GraphqlXtextPackage.VARIABLE_DEFINITION: return createVariableDefinition();
      case GraphqlXtextPackage.DEFAULT_VALUE: return createDefaultValue();
      case GraphqlXtextPackage.TYPE: return createType();
      case GraphqlXtextPackage.LIST_TYPE: return createListType();
      case GraphqlXtextPackage.DIRECTIVE: return createDirective();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Document createDocument()
  {
    DocumentImpl document = new DocumentImpl();
    return document;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationDefinition createOperationDefinition()
  {
    OperationDefinitionImpl operationDefinition = new OperationDefinitionImpl();
    return operationDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionSet createSelectionSet()
  {
    SelectionSetImpl selectionSet = new SelectionSetImpl();
    return selectionSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selection createSelection()
  {
    SelectionImpl selection = new SelectionImpl();
    return selection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Alias createAlias()
  {
    AliasImpl alias = new AliasImpl();
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arguments createArguments()
  {
    ArgumentsImpl arguments = new ArgumentsImpl();
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Argument createArgument()
  {
    ArgumentImpl argument = new ArgumentImpl();
    return argument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FragmentSpread createFragmentSpread()
  {
    FragmentSpreadImpl fragmentSpread = new FragmentSpreadImpl();
    return fragmentSpread;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InlineFragment createInlineFragment()
  {
    InlineFragmentImpl inlineFragment = new InlineFragmentImpl();
    return inlineFragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FragmentDefinition createFragmentDefinition()
  {
    FragmentDefinitionImpl fragmentDefinition = new FragmentDefinitionImpl();
    return fragmentDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleValue createSingleValue()
  {
    SingleValueImpl singleValue = new SingleValueImpl();
    return singleValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComplexValue createComplexValue()
  {
    ComplexValueImpl complexValue = new ComplexValueImpl();
    return complexValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListValue createListValue()
  {
    ListValueImpl listValue = new ListValueImpl();
    return listValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectValue createObjectValue()
  {
    ObjectValueImpl objectValue = new ObjectValueImpl();
    return objectValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectField createObjectField()
  {
    ObjectFieldImpl objectField = new ObjectFieldImpl();
    return objectField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDefinitions createVariableDefinitions()
  {
    VariableDefinitionsImpl variableDefinitions = new VariableDefinitionsImpl();
    return variableDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDefinition createVariableDefinition()
  {
    VariableDefinitionImpl variableDefinition = new VariableDefinitionImpl();
    return variableDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefaultValue createDefaultValue()
  {
    DefaultValueImpl defaultValue = new DefaultValueImpl();
    return defaultValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListType createListType()
  {
    ListTypeImpl listType = new ListTypeImpl();
    return listType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directive createDirective()
  {
    DirectiveImpl directive = new DirectiveImpl();
    return directive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GraphqlXtextPackage getGraphqlXtextPackage()
  {
    return (GraphqlXtextPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GraphqlXtextPackage getPackage()
  {
    return GraphqlXtextPackage.eINSTANCE;
  }

} //GraphqlXtextFactoryImpl
