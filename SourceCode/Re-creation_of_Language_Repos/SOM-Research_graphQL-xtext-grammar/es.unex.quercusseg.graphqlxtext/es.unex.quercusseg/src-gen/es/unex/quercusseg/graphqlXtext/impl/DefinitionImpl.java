/**
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.graphqlXtext.impl;

import es.unex.quercusseg.graphqlXtext.Definition;
import es.unex.quercusseg.graphqlXtext.Directive;
import es.unex.quercusseg.graphqlXtext.GraphqlXtextPackage;
import es.unex.quercusseg.graphqlXtext.SelectionSet;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.DefinitionImpl#getDirectives <em>Directives</em>}</li>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.DefinitionImpl#getSelectionSet <em>Selection Set</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DefinitionImpl extends MinimalEObjectImpl.Container implements Definition
{
  /**
   * The cached value of the '{@link #getDirectives() <em>Directives</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirectives()
   * @generated
   * @ordered
   */
  protected EList<Directive> directives;

  /**
   * The cached value of the '{@link #getSelectionSet() <em>Selection Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectionSet()
   * @generated
   * @ordered
   */
  protected SelectionSet selectionSet;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphqlXtextPackage.Literals.DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Directive> getDirectives()
  {
    if (directives == null)
    {
      directives = new EObjectContainmentEList<Directive>(Directive.class, this, GraphqlXtextPackage.DEFINITION__DIRECTIVES);
    }
    return directives;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionSet getSelectionSet()
  {
    return selectionSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectionSet(SelectionSet newSelectionSet, NotificationChain msgs)
  {
    SelectionSet oldSelectionSet = selectionSet;
    selectionSet = newSelectionSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.DEFINITION__SELECTION_SET, oldSelectionSet, newSelectionSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelectionSet(SelectionSet newSelectionSet)
  {
    if (newSelectionSet != selectionSet)
    {
      NotificationChain msgs = null;
      if (selectionSet != null)
        msgs = ((InternalEObject)selectionSet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GraphqlXtextPackage.DEFINITION__SELECTION_SET, null, msgs);
      if (newSelectionSet != null)
        msgs = ((InternalEObject)newSelectionSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GraphqlXtextPackage.DEFINITION__SELECTION_SET, null, msgs);
      msgs = basicSetSelectionSet(newSelectionSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.DEFINITION__SELECTION_SET, newSelectionSet, newSelectionSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.DEFINITION__DIRECTIVES:
        return ((InternalEList<?>)getDirectives()).basicRemove(otherEnd, msgs);
      case GraphqlXtextPackage.DEFINITION__SELECTION_SET:
        return basicSetSelectionSet(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.DEFINITION__DIRECTIVES:
        return getDirectives();
      case GraphqlXtextPackage.DEFINITION__SELECTION_SET:
        return getSelectionSet();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.DEFINITION__DIRECTIVES:
        getDirectives().clear();
        getDirectives().addAll((Collection<? extends Directive>)newValue);
        return;
      case GraphqlXtextPackage.DEFINITION__SELECTION_SET:
        setSelectionSet((SelectionSet)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.DEFINITION__DIRECTIVES:
        getDirectives().clear();
        return;
      case GraphqlXtextPackage.DEFINITION__SELECTION_SET:
        setSelectionSet((SelectionSet)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.DEFINITION__DIRECTIVES:
        return directives != null && !directives.isEmpty();
      case GraphqlXtextPackage.DEFINITION__SELECTION_SET:
        return selectionSet != null;
    }
    return super.eIsSet(featureID);
  }

} //DefinitionImpl
