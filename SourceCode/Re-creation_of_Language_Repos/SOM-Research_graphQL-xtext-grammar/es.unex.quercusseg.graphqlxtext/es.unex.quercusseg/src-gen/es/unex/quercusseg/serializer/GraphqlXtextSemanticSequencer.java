/*
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.serializer;

import com.google.inject.Inject;
import es.unex.quercusseg.graphqlXtext.Alias;
import es.unex.quercusseg.graphqlXtext.Argument;
import es.unex.quercusseg.graphqlXtext.Arguments;
import es.unex.quercusseg.graphqlXtext.ComplexValue;
import es.unex.quercusseg.graphqlXtext.Directive;
import es.unex.quercusseg.graphqlXtext.Document;
import es.unex.quercusseg.graphqlXtext.Field;
import es.unex.quercusseg.graphqlXtext.FragmentDefinition;
import es.unex.quercusseg.graphqlXtext.FragmentSpread;
import es.unex.quercusseg.graphqlXtext.GraphqlXtextPackage;
import es.unex.quercusseg.graphqlXtext.InlineFragment;
import es.unex.quercusseg.graphqlXtext.ListType;
import es.unex.quercusseg.graphqlXtext.ListValue;
import es.unex.quercusseg.graphqlXtext.ObjectField;
import es.unex.quercusseg.graphqlXtext.ObjectValue;
import es.unex.quercusseg.graphqlXtext.OperationDefinition;
import es.unex.quercusseg.graphqlXtext.SelectionSet;
import es.unex.quercusseg.graphqlXtext.SingleValue;
import es.unex.quercusseg.graphqlXtext.Type;
import es.unex.quercusseg.graphqlXtext.VariableDefinition;
import es.unex.quercusseg.graphqlXtext.VariableDefinitions;
import es.unex.quercusseg.services.GraphqlXtextGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GraphqlXtextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphqlXtextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GraphqlXtextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GraphqlXtextPackage.ALIAS:
				sequence_Alias(context, (Alias) semanticObject); 
				return; 
			case GraphqlXtextPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case GraphqlXtextPackage.ARGUMENTS:
				sequence_Arguments(context, (Arguments) semanticObject); 
				return; 
			case GraphqlXtextPackage.COMPLEX_VALUE:
				sequence_ComplexValue(context, (ComplexValue) semanticObject); 
				return; 
			case GraphqlXtextPackage.DIRECTIVE:
				sequence_Directive(context, (Directive) semanticObject); 
				return; 
			case GraphqlXtextPackage.DOCUMENT:
				sequence_Document(context, (Document) semanticObject); 
				return; 
			case GraphqlXtextPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case GraphqlXtextPackage.FRAGMENT_DEFINITION:
				sequence_FragmentDefinition(context, (FragmentDefinition) semanticObject); 
				return; 
			case GraphqlXtextPackage.FRAGMENT_SPREAD:
				sequence_FragmentSpread(context, (FragmentSpread) semanticObject); 
				return; 
			case GraphqlXtextPackage.INLINE_FRAGMENT:
				sequence_InlineFragment(context, (InlineFragment) semanticObject); 
				return; 
			case GraphqlXtextPackage.LIST_TYPE:
				sequence_ListType(context, (ListType) semanticObject); 
				return; 
			case GraphqlXtextPackage.LIST_VALUE:
				sequence_ListValue(context, (ListValue) semanticObject); 
				return; 
			case GraphqlXtextPackage.OBJECT_FIELD:
				sequence_ObjectField(context, (ObjectField) semanticObject); 
				return; 
			case GraphqlXtextPackage.OBJECT_VALUE:
				sequence_ObjectValue(context, (ObjectValue) semanticObject); 
				return; 
			case GraphqlXtextPackage.OPERATION_DEFINITION:
				sequence_OperationDefinition(context, (OperationDefinition) semanticObject); 
				return; 
			case GraphqlXtextPackage.SELECTION_SET:
				sequence_SelectionSet(context, (SelectionSet) semanticObject); 
				return; 
			case GraphqlXtextPackage.SINGLE_VALUE:
				sequence_SingleValue(context, (SingleValue) semanticObject); 
				return; 
			case GraphqlXtextPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case GraphqlXtextPackage.VARIABLE_DEFINITION:
				sequence_VariableDefinition(context, (VariableDefinition) semanticObject); 
				return; 
			case GraphqlXtextPackage.VARIABLE_DEFINITIONS:
				sequence_VariableDefinitions(context, (VariableDefinitions) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Alias returns Alias
	 *
	 * Constraint:
	 *     name=NAME
	 * </pre>
	 */
	protected void sequence_Alias(ISerializationContext context, Alias semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlXtextPackage.Literals.ALIAS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlXtextPackage.Literals.ALIAS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAliasAccess().getNameNAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Argument returns Argument
	 *
	 * Constraint:
	 *     (name=NAME value=Value)
	 * </pre>
	 */
	protected void sequence_Argument(ISerializationContext context, Argument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlXtextPackage.Literals.ARGUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlXtextPackage.Literals.ARGUMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, GraphqlXtextPackage.Literals.ARGUMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlXtextPackage.Literals.ARGUMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArgumentAccess().getNameNAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getArgumentAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arguments returns Arguments
	 *
	 * Constraint:
	 *     args+=Argument*
	 * </pre>
	 */
	protected void sequence_Arguments(ISerializationContext context, Arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns ComplexValue
	 *     ComplexValue returns ComplexValue
	 *     DefaultValue returns ComplexValue
	 *
	 * Constraint:
	 *     (value=ListValue | value=ObjectValue)
	 * </pre>
	 */
	protected void sequence_ComplexValue(ISerializationContext context, ComplexValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Directive returns Directive
	 *
	 * Constraint:
	 *     (name=NAME args+=Arguments*)
	 * </pre>
	 */
	protected void sequence_Directive(ISerializationContext context, Directive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Document returns Document
	 *
	 * Constraint:
	 *     defs+=Definition+
	 * </pre>
	 */
	protected void sequence_Document(ISerializationContext context, Document semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Selection returns Field
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (alias=Alias? name=NAME args=Arguments? directives+=Directive* selectionSet=SelectionSet?)
	 * </pre>
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Definition returns FragmentDefinition
	 *     FragmentDefinition returns FragmentDefinition
	 *
	 * Constraint:
	 *     (fragName=FragmentName typeCondition=TypeCondition? directives+=Directive* selectionSet=SelectionSet)
	 * </pre>
	 */
	protected void sequence_FragmentDefinition(ISerializationContext context, FragmentDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Selection returns FragmentSpread
	 *     FragmentSpread returns FragmentSpread
	 *
	 * Constraint:
	 *     (fragName=FragmentName directives+=Directive*)
	 * </pre>
	 */
	protected void sequence_FragmentSpread(ISerializationContext context, FragmentSpread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Selection returns InlineFragment
	 *     InlineFragment returns InlineFragment
	 *
	 * Constraint:
	 *     (typeCondition=TypeCondition? directives+=Directive* selectionSet=SelectionSet)
	 * </pre>
	 */
	protected void sequence_InlineFragment(ISerializationContext context, InlineFragment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ListType returns ListType
	 *
	 * Constraint:
	 *     type=Type
	 * </pre>
	 */
	protected void sequence_ListType(ISerializationContext context, ListType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlXtextPackage.Literals.LIST_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlXtextPackage.Literals.LIST_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListTypeAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ListValue returns ListValue
	 *
	 * Constraint:
	 *     values+=Value*
	 * </pre>
	 */
	protected void sequence_ListValue(ISerializationContext context, ListValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectField returns ObjectField
	 *
	 * Constraint:
	 *     (name=NAME value=Value)
	 * </pre>
	 */
	protected void sequence_ObjectField(ISerializationContext context, ObjectField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GraphqlXtextPackage.Literals.OBJECT_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlXtextPackage.Literals.OBJECT_FIELD__NAME));
			if (transientValues.isValueTransient(semanticObject, GraphqlXtextPackage.Literals.OBJECT_FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphqlXtextPackage.Literals.OBJECT_FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectFieldAccess().getNameNAMETerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjectFieldAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectValue returns ObjectValue
	 *
	 * Constraint:
	 *     fields+=ObjectField*
	 * </pre>
	 */
	protected void sequence_ObjectValue(ISerializationContext context, ObjectValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Definition returns OperationDefinition
	 *     OperationDefinition returns OperationDefinition
	 *
	 * Constraint:
	 *     (selection=SelectionSet | (opType=OperationType name=NAME? varDefinitions+=VariableDefinition* directives+=Directive* selectionSet=SelectionSet))
	 * </pre>
	 */
	protected void sequence_OperationDefinition(ISerializationContext context, OperationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelectionSet returns SelectionSet
	 *
	 * Constraint:
	 *     selections+=Selection+
	 * </pre>
	 */
	protected void sequence_SelectionSet(ISerializationContext context, SelectionSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Value returns SingleValue
	 *     SingleValue returns SingleValue
	 *     DefaultValue returns SingleValue
	 *
	 * Constraint:
	 *     (
	 *         value=Variable | 
	 *         value=IntValue | 
	 *         value=StringValue | 
	 *         value=BOOLEANVALUE | 
	 *         value=NULLVALUE | 
	 *         value=EnumValue
	 *     )
	 * </pre>
	 */
	protected void sequence_SingleValue(ISerializationContext context, SingleValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     ((name=NamedType notNull?='!'?) | (list=ListType notNull?='!'?))
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableDefinition returns VariableDefinition
	 *
	 * Constraint:
	 *     (name=NAME type=Type defValue=DefaultValue?)
	 * </pre>
	 */
	protected void sequence_VariableDefinition(ISerializationContext context, VariableDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableDefinitions returns VariableDefinitions
	 *
	 * Constraint:
	 *     varDefinitions+=VariableDefinition*
	 * </pre>
	 */
	protected void sequence_VariableDefinitions(ISerializationContext context, VariableDefinitions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
