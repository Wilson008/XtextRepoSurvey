/**
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.graphqlXtext.impl;

import es.unex.quercusseg.graphqlXtext.GraphqlXtextPackage;
import es.unex.quercusseg.graphqlXtext.OperationDefinition;
import es.unex.quercusseg.graphqlXtext.SelectionSet;
import es.unex.quercusseg.graphqlXtext.VariableDefinition;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operation Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.OperationDefinitionImpl#getSelection <em>Selection</em>}</li>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.OperationDefinitionImpl#getOpType <em>Op Type</em>}</li>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.OperationDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link es.unex.quercusseg.graphqlXtext.impl.OperationDefinitionImpl#getVarDefinitions <em>Var Definitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperationDefinitionImpl extends DefinitionImpl implements OperationDefinition
{
  /**
   * The cached value of the '{@link #getSelection() <em>Selection</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelection()
   * @generated
   * @ordered
   */
  protected SelectionSet selection;

  /**
   * The default value of the '{@link #getOpType() <em>Op Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpType()
   * @generated
   * @ordered
   */
  protected static final String OP_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOpType() <em>Op Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpType()
   * @generated
   * @ordered
   */
  protected String opType = OP_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVarDefinitions() <em>Var Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarDefinitions()
   * @generated
   * @ordered
   */
  protected EList<VariableDefinition> varDefinitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphqlXtextPackage.Literals.OPERATION_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectionSet getSelection()
  {
    return selection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelection(SelectionSet newSelection, NotificationChain msgs)
  {
    SelectionSet oldSelection = selection;
    selection = newSelection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION, oldSelection, newSelection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSelection(SelectionSet newSelection)
  {
    if (newSelection != selection)
    {
      NotificationChain msgs = null;
      if (selection != null)
        msgs = ((InternalEObject)selection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION, null, msgs);
      if (newSelection != null)
        msgs = ((InternalEObject)newSelection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION, null, msgs);
      msgs = basicSetSelection(newSelection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION, newSelection, newSelection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOpType()
  {
    return opType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOpType(String newOpType)
  {
    String oldOpType = opType;
    opType = newOpType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.OPERATION_DEFINITION__OP_TYPE, oldOpType, opType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlXtextPackage.OPERATION_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VariableDefinition> getVarDefinitions()
  {
    if (varDefinitions == null)
    {
      varDefinitions = new EObjectContainmentEList<VariableDefinition>(VariableDefinition.class, this, GraphqlXtextPackage.OPERATION_DEFINITION__VAR_DEFINITIONS);
    }
    return varDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION:
        return basicSetSelection(null, msgs);
      case GraphqlXtextPackage.OPERATION_DEFINITION__VAR_DEFINITIONS:
        return ((InternalEList<?>)getVarDefinitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION:
        return getSelection();
      case GraphqlXtextPackage.OPERATION_DEFINITION__OP_TYPE:
        return getOpType();
      case GraphqlXtextPackage.OPERATION_DEFINITION__NAME:
        return getName();
      case GraphqlXtextPackage.OPERATION_DEFINITION__VAR_DEFINITIONS:
        return getVarDefinitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION:
        setSelection((SelectionSet)newValue);
        return;
      case GraphqlXtextPackage.OPERATION_DEFINITION__OP_TYPE:
        setOpType((String)newValue);
        return;
      case GraphqlXtextPackage.OPERATION_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case GraphqlXtextPackage.OPERATION_DEFINITION__VAR_DEFINITIONS:
        getVarDefinitions().clear();
        getVarDefinitions().addAll((Collection<? extends VariableDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION:
        setSelection((SelectionSet)null);
        return;
      case GraphqlXtextPackage.OPERATION_DEFINITION__OP_TYPE:
        setOpType(OP_TYPE_EDEFAULT);
        return;
      case GraphqlXtextPackage.OPERATION_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GraphqlXtextPackage.OPERATION_DEFINITION__VAR_DEFINITIONS:
        getVarDefinitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphqlXtextPackage.OPERATION_DEFINITION__SELECTION:
        return selection != null;
      case GraphqlXtextPackage.OPERATION_DEFINITION__OP_TYPE:
        return OP_TYPE_EDEFAULT == null ? opType != null : !OP_TYPE_EDEFAULT.equals(opType);
      case GraphqlXtextPackage.OPERATION_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GraphqlXtextPackage.OPERATION_DEFINITION__VAR_DEFINITIONS:
        return varDefinitions != null && !varDefinitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (opType: ");
    result.append(opType);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //OperationDefinitionImpl
