/*
 * generated by Xtext 2.35.0
 */
package es.unex.quercusseg.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphqlXtextGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Document");
		private final Assignment cDefsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefsDefinitionParserRuleCall_0 = (RuleCall)cDefsAssignment.eContents().get(0);
		
		////Production rules
		//Document:
		//    defs+=Definition*;
		@Override public ParserRule getRule() { return rule; }
		
		//defs+=Definition*
		public Assignment getDefsAssignment() { return cDefsAssignment; }
		
		//Definition
		public RuleCall getDefsDefinitionParserRuleCall_0() { return cDefsDefinitionParserRuleCall_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFragmentDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//    OperationDefinition |
		//    FragmentDefinition
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationDefinition |
		//FragmentDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationDefinition
		public RuleCall getOperationDefinitionParserRuleCall_0() { return cOperationDefinitionParserRuleCall_0; }
		
		//FragmentDefinition
		public RuleCall getFragmentDefinitionParserRuleCall_1() { return cFragmentDefinitionParserRuleCall_1; }
	}
	public class OperationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.OperationDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSelectionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSelectionSelectionSetParserRuleCall_0_0 = (RuleCall)cSelectionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOpTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpTypeOperationTypeParserRuleCall_1_0_0 = (RuleCall)cOpTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVarDefinitionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVarDefinitionsVariableDefinitionParserRuleCall_1_2_1_0 = (RuleCall)cVarDefinitionsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cDirectivesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_1_3_0 = (RuleCall)cDirectivesAssignment_1_3.eContents().get(0);
		private final Assignment cSelectionSetAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSelectionSetSelectionSetParserRuleCall_1_4_0 = (RuleCall)cSelectionSetAssignment_1_4.eContents().get(0);
		
		//OperationDefinition:
		//    selection=SelectionSet |
		//    opType=OperationType (name=NAME)? ('(' varDefinitions+=VariableDefinition+ ')')? (directives+=Directive)* selectionSet=SelectionSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selection=SelectionSet |
		//opType=OperationType (name=NAME)? ('(' varDefinitions+=VariableDefinition+ ')')? (directives+=Directive)* selectionSet=SelectionSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//selection=SelectionSet
		public Assignment getSelectionAssignment_0() { return cSelectionAssignment_0; }
		
		//SelectionSet
		public RuleCall getSelectionSelectionSetParserRuleCall_0_0() { return cSelectionSelectionSetParserRuleCall_0_0; }
		
		//opType=OperationType (name=NAME)? ('(' varDefinitions+=VariableDefinition+ ')')? (directives+=Directive)* selectionSet=SelectionSet
		public Group getGroup_1() { return cGroup_1; }
		
		//opType=OperationType
		public Assignment getOpTypeAssignment_1_0() { return cOpTypeAssignment_1_0; }
		
		//OperationType
		public RuleCall getOpTypeOperationTypeParserRuleCall_1_0_0() { return cOpTypeOperationTypeParserRuleCall_1_0_0; }
		
		//(name=NAME)?
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_1_0() { return cNameNAMETerminalRuleCall_1_1_0; }
		
		//('(' varDefinitions+=VariableDefinition+ ')')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }
		
		//varDefinitions+=VariableDefinition+
		public Assignment getVarDefinitionsAssignment_1_2_1() { return cVarDefinitionsAssignment_1_2_1; }
		
		//VariableDefinition
		public RuleCall getVarDefinitionsVariableDefinitionParserRuleCall_1_2_1_0() { return cVarDefinitionsVariableDefinitionParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }
		
		//(directives+=Directive)*
		public Assignment getDirectivesAssignment_1_3() { return cDirectivesAssignment_1_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_1_3_0() { return cDirectivesDirectiveParserRuleCall_1_3_0; }
		
		//selectionSet=SelectionSet
		public Assignment getSelectionSetAssignment_1_4() { return cSelectionSetAssignment_1_4; }
		
		//SelectionSet
		public RuleCall getSelectionSetSelectionSetParserRuleCall_1_4_0() { return cSelectionSetSelectionSetParserRuleCall_1_4_0; }
	}
	public class OperationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMutationKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OperationType:
		//    'query' | 'mutation'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'query' | 'mutation'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'mutation'
		public Keyword getMutationKeyword_1() { return cMutationKeyword_1; }
	}
	public class SelectionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.SelectionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectionSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectionsSelectionParserRuleCall_2_0 = (RuleCall)cSelectionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SelectionSet: {SelectionSet}
		//    '{' (selections+=Selection)+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectionSet}
		//   '{' (selections+=Selection)+ '}'
		public Group getGroup() { return cGroup; }
		
		//{SelectionSet}
		public Action getSelectionSetAction_0() { return cSelectionSetAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(selections+=Selection)+
		public Assignment getSelectionsAssignment_2() { return cSelectionsAssignment_2; }
		
		//Selection
		public RuleCall getSelectionsSelectionParserRuleCall_2_0() { return cSelectionsSelectionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Selection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFragmentSpreadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInlineFragmentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Selection:
		//    Field | FragmentSpread | InlineFragment
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | FragmentSpread | InlineFragment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//FragmentSpread
		public RuleCall getFragmentSpreadParserRuleCall_1() { return cFragmentSpreadParserRuleCall_1; }
		
		//InlineFragment
		public RuleCall getInlineFragmentParserRuleCall_2() { return cInlineFragmentParserRuleCall_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAliasAliasParserRuleCall_0_0 = (RuleCall)cAliasAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Assignment cSelectionSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectionSetSelectionSetParserRuleCall_4_0 = (RuleCall)cSelectionSetAssignment_4.eContents().get(0);
		
		//Field:
		//    (alias=Alias)? name=NAME (args=Arguments)? (directives+=Directive)* (selectionSet=SelectionSet)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(alias=Alias)? name=NAME (args=Arguments)? (directives+=Directive)* (selectionSet=SelectionSet)?
		public Group getGroup() { return cGroup; }
		
		//(alias=Alias)?
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_0_0() { return cAliasAliasParserRuleCall_0_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//(args=Arguments)?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_2_0() { return cArgsArgumentsParserRuleCall_2_0; }
		
		//(directives+=Directive)*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
		
		//(selectionSet=SelectionSet)?
		public Assignment getSelectionSetAssignment_4() { return cSelectionSetAssignment_4; }
		
		//SelectionSet
		public RuleCall getSelectionSetSelectionSetParserRuleCall_4_0() { return cSelectionSetSelectionSetParserRuleCall_4_0; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Alias:
		//    name=NAME ':'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ':'
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgumentParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//    {Arguments} '(' args+=Argument* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Arguments} '(' args+=Argument* ')'
		public Group getGroup() { return cGroup; }
		
		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//args+=Argument*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_2_0() { return cArgsArgumentParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Argument:
		//    name=NAME ':' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ':' value=Value
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class FragmentSpreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.FragmentSpread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFragNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFragNameFragmentNameParserRuleCall_1_0 = (RuleCall)cFragNameAssignment_1.eContents().get(0);
		private final Assignment cDirectivesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectivesDirectiveParserRuleCall_2_0 = (RuleCall)cDirectivesAssignment_2.eContents().get(0);
		
		//FragmentSpread:
		//    '...' fragName=FragmentName (directives+=Directive)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'...' fragName=FragmentName (directives+=Directive)*
		public Group getGroup() { return cGroup; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0() { return cFullStopFullStopFullStopKeyword_0; }
		
		//fragName=FragmentName
		public Assignment getFragNameAssignment_1() { return cFragNameAssignment_1; }
		
		//FragmentName
		public RuleCall getFragNameFragmentNameParserRuleCall_1_0() { return cFragNameFragmentNameParserRuleCall_1_0; }
		
		//(directives+=Directive)*
		public Assignment getDirectivesAssignment_2() { return cDirectivesAssignment_2; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_2_0() { return cDirectivesDirectiveParserRuleCall_2_0; }
	}
	public class InlineFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.InlineFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineFragmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeConditionTypeConditionParserRuleCall_2_0 = (RuleCall)cTypeConditionAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Assignment cSelectionSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectionSetSelectionSetParserRuleCall_4_0 = (RuleCall)cSelectionSetAssignment_4.eContents().get(0);
		
		//InlineFragment:
		//    {InlineFragment} '...' (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineFragment} '...' (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
		public Group getGroup() { return cGroup; }
		
		//{InlineFragment}
		public Action getInlineFragmentAction_0() { return cInlineFragmentAction_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//(typeCondition=TypeCondition)?
		public Assignment getTypeConditionAssignment_2() { return cTypeConditionAssignment_2; }
		
		//TypeCondition
		public RuleCall getTypeConditionTypeConditionParserRuleCall_2_0() { return cTypeConditionTypeConditionParserRuleCall_2_0; }
		
		//(directives+=Directive)*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
		
		//selectionSet=SelectionSet
		public Assignment getSelectionSetAssignment_4() { return cSelectionSetAssignment_4; }
		
		//SelectionSet
		public RuleCall getSelectionSetSelectionSetParserRuleCall_4_0() { return cSelectionSetSelectionSetParserRuleCall_4_0; }
	}
	public class FragmentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.FragmentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFragNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFragNameFragmentNameParserRuleCall_1_0 = (RuleCall)cFragNameAssignment_1.eContents().get(0);
		private final Assignment cTypeConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeConditionTypeConditionParserRuleCall_2_0 = (RuleCall)cTypeConditionAssignment_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectivesDirectiveParserRuleCall_3_0 = (RuleCall)cDirectivesAssignment_3.eContents().get(0);
		private final Assignment cSelectionSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSelectionSetSelectionSetParserRuleCall_4_0 = (RuleCall)cSelectionSetAssignment_4.eContents().get(0);
		
		//FragmentDefinition:
		//    'fragment' fragName=FragmentName (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'fragment' fragName=FragmentName (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
		public Group getGroup() { return cGroup; }
		
		//'fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//fragName=FragmentName
		public Assignment getFragNameAssignment_1() { return cFragNameAssignment_1; }
		
		//FragmentName
		public RuleCall getFragNameFragmentNameParserRuleCall_1_0() { return cFragNameFragmentNameParserRuleCall_1_0; }
		
		//(typeCondition=TypeCondition)?
		public Assignment getTypeConditionAssignment_2() { return cTypeConditionAssignment_2; }
		
		//TypeCondition
		public RuleCall getTypeConditionTypeConditionParserRuleCall_2_0() { return cTypeConditionTypeConditionParserRuleCall_2_0; }
		
		//(directives+=Directive)*
		public Assignment getDirectivesAssignment_3() { return cDirectivesAssignment_3; }
		
		//Directive
		public RuleCall getDirectivesDirectiveParserRuleCall_3_0() { return cDirectivesDirectiveParserRuleCall_3_0; }
		
		//selectionSet=SelectionSet
		public Assignment getSelectionSetAssignment_4() { return cSelectionSetAssignment_4; }
		
		//SelectionSet
		public RuleCall getSelectionSetSelectionSetParserRuleCall_4_0() { return cSelectionSetSelectionSetParserRuleCall_4_0; }
	}
	public class FragmentNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.FragmentName");
		private final RuleCall cNAMETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FragmentName:
		//    NAME //TODO: but not 'on'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall() { return cNAMETerminalRuleCall; }
	}
	public class TypeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.TypeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNamedTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeCondition:
		//    'on' NamedType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' NamedType
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//NamedType
		public RuleCall getNamedTypeParserRuleCall_1() { return cNamedTypeParserRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value: //TODO: parameter Const
		//    SingleValue | ComplexValue //condition added to solve different returned types for value attr
		////    value=Variable |
		////    value=IntValue |
		////    value=FloatValue |
		////    value=StringValue |
		////    value=BOOLEANVALUE |
		////    value=NULLVALUE |
		////    value=EnumValue |
		////    value=ListValue |
		////    value=ObjectValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: parameter Const
		//   SingleValue | ComplexValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO: parameter Const
		//   SingleValue
		public RuleCall getSingleValueParserRuleCall_0() { return cSingleValueParserRuleCall_0; }
		
		//ComplexValue
		public RuleCall getComplexValueParserRuleCall_1() { return cComplexValueParserRuleCall_1; }
	}
	public class SingleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.SingleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueVariableParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIntValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueStringValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueBOOLEANVALUETerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueNULLVALUETerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Assignment cValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cValueEnumValueParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		//SingleValue:
		//    value=Variable |
		//    value=IntValue |
		////    value=FloatValue |
		//    value=StringValue |
		//    value=BOOLEANVALUE |
		//    value=NULLVALUE |
		//    value=EnumValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    value=Variable |
		//    value=IntValue |
		////    value=FloatValue |
		//    value=StringValue |
		//    value=BOOLEANVALUE |
		//    value=NULLVALUE |
		//    value=EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=Variable
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//Variable
		public RuleCall getValueVariableParserRuleCall_0_0() { return cValueVariableParserRuleCall_0_0; }
		
		//value=IntValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//IntValue
		public RuleCall getValueIntValueParserRuleCall_1_0() { return cValueIntValueParserRuleCall_1_0; }
		
		////    value=FloatValue |
		//    value=StringValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StringValue
		public RuleCall getValueStringValueParserRuleCall_2_0() { return cValueStringValueParserRuleCall_2_0; }
		
		//value=BOOLEANVALUE
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//BOOLEANVALUE
		public RuleCall getValueBOOLEANVALUETerminalRuleCall_3_0() { return cValueBOOLEANVALUETerminalRuleCall_3_0; }
		
		//value=NULLVALUE
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//NULLVALUE
		public RuleCall getValueNULLVALUETerminalRuleCall_4_0() { return cValueNULLVALUETerminalRuleCall_4_0; }
		
		//value=EnumValue
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//EnumValue
		public RuleCall getValueEnumValueParserRuleCall_5_0() { return cValueEnumValueParserRuleCall_5_0; }
	}
	public class ComplexValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.ComplexValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueListValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueObjectValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ComplexValue:
		//    value=ListValue |
		//    value=ObjectValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ListValue |
		//value=ObjectValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ListValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ListValue
		public RuleCall getValueListValueParserRuleCall_0_0() { return cValueListValueParserRuleCall_0_0; }
		
		//value=ObjectValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ObjectValue
		public RuleCall getValueObjectValueParserRuleCall_1_0() { return cValueObjectValueParserRuleCall_1_0; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.EnumValue");
		private final RuleCall cNAMETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EnumValue:
		//    NAME //TODO: but not 'true' or 'false' or 'null'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall() { return cNAMETerminalRuleCall; }
	}
	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////TODO: parameter Const
		//ListValue:
		//    {ListValue} '[' values+=Value* ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListValue} '[' values+=Value* ']'
		public Group getGroup() { return cGroup; }
		
		//{ListValue}
		public Action getListValueAction_0() { return cListValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//values+=Value*
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.ObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsObjectFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////TODO: parameter Const
		//ObjectValue:
		//    {ObjectValue} '{' fields+=ObjectField* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectValue} '{' fields+=ObjectField* '}'
		public Group getGroup() { return cGroup; }
		
		//{ObjectValue}
		public Action getObjectValueAction_0() { return cObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//fields+=ObjectField*
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//ObjectField
		public RuleCall getFieldsObjectFieldParserRuleCall_2_0() { return cFieldsObjectFieldParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObjectFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.ObjectField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ObjectField: //TODO: parameter Const
		//    name=NAME ':' value=Value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: parameter Const
		//   name=NAME ':' value=Value
		public Group getGroup() { return cGroup; }
		
		////TODO: parameter Const
		//   name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class VariableDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.VariableDefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDefinitionsVariableDefinitionParserRuleCall_2_0 = (RuleCall)cVarDefinitionsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableDefinitions: // hidden(COMMA,WS): //TODO: review overriding of hidden symbols at grammar level
		//    {VariableDefinitions} '(' varDefinitions+=VariableDefinition* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// hidden(COMMA,WS): //TODO: review overriding of hidden symbols at grammar level
		//   {VariableDefinitions} '(' varDefinitions+=VariableDefinition* ')'
		public Group getGroup() { return cGroup; }
		
		//// hidden(COMMA,WS): //TODO: review overriding of hidden symbols at grammar level
		//   {VariableDefinitions}
		public Action getVariableDefinitionsAction_0() { return cVariableDefinitionsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//varDefinitions+=VariableDefinition*
		public Assignment getVarDefinitionsAssignment_2() { return cVarDefinitionsAssignment_2; }
		
		//VariableDefinition
		public RuleCall getVarDefinitionsVariableDefinitionParserRuleCall_2_0() { return cVarDefinitionsVariableDefinitionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cDefValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefValueDefaultValueParserRuleCall_4_0 = (RuleCall)cDefValueAssignment_4.eContents().get(0);
		
		//VariableDefinition: // hidden(COMMA,WS):
		//    '$' name=NAME ':' type=Type (defValue=DefaultValue)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// hidden(COMMA,WS):
		//   '$' name=NAME ':' type=Type (defValue=DefaultValue)?
		public Group getGroup() { return cGroup; }
		
		//// hidden(COMMA,WS):
		//   '$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
		
		//(defValue=DefaultValue)?
		public Assignment getDefValueAssignment_4() { return cDefValueAssignment_4; }
		
		//DefaultValue
		public RuleCall getDefValueDefaultValueParserRuleCall_4_0() { return cDefValueDefaultValueParserRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNAMETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Variable:
		//    '$' NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'$' NAME
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall_1() { return cNAMETerminalRuleCall_1; }
	}
	public class DefaultValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.DefaultValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DefaultValue:
		//    '=' Value //TODO: parameter Const
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' Value
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//Value
		public RuleCall getValueParserRuleCall_1() { return cValueParserRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNamedTypeParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cNotNullAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNotNullExclamationMarkKeyword_0_1_0 = (Keyword)cNotNullAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cListListTypeParserRuleCall_1_0_0 = (RuleCall)cListAssignment_1_0.eContents().get(0);
		private final Assignment cNotNullAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNotNullExclamationMarkKeyword_1_1_0 = (Keyword)cNotNullAssignment_1_1.eContents().get(0);
		
		//Type:
		////    NamedType | ListType | NonNullType
		//    name=NamedType (notNull?='!')? |
		//    list=ListType (notNull?='!')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    NamedType | ListType | NonNullType
		//    name=NamedType (notNull?='!')? |
		//    list=ListType (notNull?='!')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////    NamedType | ListType | NonNullType
		//    name=NamedType (notNull?='!')?
		public Group getGroup_0() { return cGroup_0; }
		
		////    NamedType | ListType | NonNullType
		//    name=NamedType
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//NamedType
		public RuleCall getNameNamedTypeParserRuleCall_0_0_0() { return cNameNamedTypeParserRuleCall_0_0_0; }
		
		//(notNull?='!')?
		public Assignment getNotNullAssignment_0_1() { return cNotNullAssignment_0_1; }
		
		//'!'
		public Keyword getNotNullExclamationMarkKeyword_0_1_0() { return cNotNullExclamationMarkKeyword_0_1_0; }
		
		//list=ListType (notNull?='!')?
		public Group getGroup_1() { return cGroup_1; }
		
		//list=ListType
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }
		
		//ListType
		public RuleCall getListListTypeParserRuleCall_1_0_0() { return cListListTypeParserRuleCall_1_0_0; }
		
		//(notNull?='!')?
		public Assignment getNotNullAssignment_1_1() { return cNotNullAssignment_1_1; }
		
		//'!'
		public Keyword getNotNullExclamationMarkKeyword_1_1_0() { return cNotNullExclamationMarkKeyword_1_1_0; }
	}
	public class NamedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.NamedType");
		private final RuleCall cNAMETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NamedType:
		//    NAME
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall() { return cNAMETerminalRuleCall; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ListType:
		//    '[' type=Type ']'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' type=Type ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class DirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.Directive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		
		////NonNullType:
		//// NamedType '!' |
		//// ListType  '!'
		////;
		////Directives:
		////    directives+=Directive*
		////;
		//Directive:
		//    '@' name=NAME (args+=Arguments)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' name=NAME (args+=Arguments)*
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//(args+=Arguments)*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//Arguments
		public RuleCall getArgsArgumentsParserRuleCall_2_0() { return cArgsArgumentsParserRuleCall_2_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.IntValue");
		private final RuleCall cDIGITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntValue:
		//    DIGIT
		////    IntegerPart
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DIGIT
		public RuleCall getDIGITTerminalRuleCall() { return cDIGITTerminalRuleCall; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.StringValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////IntegerPart returns ecore::EString:
		////    INT
		//////    (NegativeSign)? '0' |
		//////    (NegativeSign)? NONZERODIGIT INT
		////;
		////
		////NegativeSign: '-' ;
		////
		////FloatValue:
		////    IntegerPart FractionalPart |
		////    IntegerPart ExponentPart |
		////    IntegerPart FractionalPart ExponentPart
		////;
		////
		////FractionalPart:
		////    '.' INT
		////;
		////
		////ExponentPart:
		////    ExponentIndicator Sign? INT
		////;
		////
		////ExponentIndicator: //TODO: could be enum rule but then ExponentPart should assign the returned value
		////    'e' | 'E'
		////;
		////
		////Sign: //TODO: could be enum rule but then ExponentPart should assign the returned value
		////    '+' | '-'
		////;
		//StringValue:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final DocumentElements pDocument;
	private final DefinitionElements pDefinition;
	private final OperationDefinitionElements pOperationDefinition;
	private final OperationTypeElements pOperationType;
	private final SelectionSetElements pSelectionSet;
	private final SelectionElements pSelection;
	private final FieldElements pField;
	private final AliasElements pAlias;
	private final ArgumentsElements pArguments;
	private final ArgumentElements pArgument;
	private final FragmentSpreadElements pFragmentSpread;
	private final InlineFragmentElements pInlineFragment;
	private final FragmentDefinitionElements pFragmentDefinition;
	private final FragmentNameElements pFragmentName;
	private final TypeConditionElements pTypeCondition;
	private final ValueElements pValue;
	private final SingleValueElements pSingleValue;
	private final ComplexValueElements pComplexValue;
	private final EnumValueElements pEnumValue;
	private final ListValueElements pListValue;
	private final ObjectValueElements pObjectValue;
	private final ObjectFieldElements pObjectField;
	private final VariableDefinitionsElements pVariableDefinitions;
	private final VariableDefinitionElements pVariableDefinition;
	private final VariableElements pVariable;
	private final DefaultValueElements pDefaultValue;
	private final TypeElements pType;
	private final NamedTypeElements pNamedType;
	private final ListTypeElements pListType;
	private final DirectiveElements pDirective;
	private final TerminalRule tCOMMA;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tBOOLEANVALUE;
	private final TerminalRule tNULLVALUE;
	private final TerminalRule tDIGIT;
	private final TerminalRule tINT;
	private final TerminalRule tNAME;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphqlXtextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDocument = new DocumentElements();
		this.pDefinition = new DefinitionElements();
		this.pOperationDefinition = new OperationDefinitionElements();
		this.pOperationType = new OperationTypeElements();
		this.pSelectionSet = new SelectionSetElements();
		this.pSelection = new SelectionElements();
		this.pField = new FieldElements();
		this.pAlias = new AliasElements();
		this.pArguments = new ArgumentsElements();
		this.pArgument = new ArgumentElements();
		this.pFragmentSpread = new FragmentSpreadElements();
		this.pInlineFragment = new InlineFragmentElements();
		this.pFragmentDefinition = new FragmentDefinitionElements();
		this.pFragmentName = new FragmentNameElements();
		this.pTypeCondition = new TypeConditionElements();
		this.pValue = new ValueElements();
		this.pSingleValue = new SingleValueElements();
		this.pComplexValue = new ComplexValueElements();
		this.pEnumValue = new EnumValueElements();
		this.pListValue = new ListValueElements();
		this.pObjectValue = new ObjectValueElements();
		this.pObjectField = new ObjectFieldElements();
		this.pVariableDefinitions = new VariableDefinitionsElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.pVariable = new VariableElements();
		this.pDefaultValue = new DefaultValueElements();
		this.pType = new TypeElements();
		this.pNamedType = new NamedTypeElements();
		this.pListType = new ListTypeElements();
		this.pDirective = new DirectiveElements();
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.COMMA");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.COMMENT");
		this.tBOOLEANVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.BOOLEANVALUE");
		this.tNULLVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.NULLVALUE");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.DIGIT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.INT");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.unex.quercusseg.GraphqlXtext.NAME");
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.unex.quercusseg.GraphqlXtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Production rules
	//Document:
	//    defs+=Definition*;
	public DocumentElements getDocumentAccess() {
		return pDocument;
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}
	
	//Definition:
	//    OperationDefinition |
	//    FragmentDefinition
	//    ;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//OperationDefinition:
	//    selection=SelectionSet |
	//    opType=OperationType (name=NAME)? ('(' varDefinitions+=VariableDefinition+ ')')? (directives+=Directive)* selectionSet=SelectionSet
	//;
	public OperationDefinitionElements getOperationDefinitionAccess() {
		return pOperationDefinition;
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}
	
	//OperationType:
	//    'query' | 'mutation'
	//;
	public OperationTypeElements getOperationTypeAccess() {
		return pOperationType;
	}
	
	public ParserRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//SelectionSet: {SelectionSet}
	//    '{' (selections+=Selection)+ '}'
	//;
	public SelectionSetElements getSelectionSetAccess() {
		return pSelectionSet;
	}
	
	public ParserRule getSelectionSetRule() {
		return getSelectionSetAccess().getRule();
	}
	
	//Selection:
	//    Field | FragmentSpread | InlineFragment
	//;
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}
	
	//Field:
	//    (alias=Alias)? name=NAME (args=Arguments)? (directives+=Directive)* (selectionSet=SelectionSet)?
	//;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Alias:
	//    name=NAME ':'
	//;
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//Arguments:
	//    {Arguments} '(' args+=Argument* ')'
	//;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Argument:
	//    name=NAME ':' value=Value
	//;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	//FragmentSpread:
	//    '...' fragName=FragmentName (directives+=Directive)*
	//;
	public FragmentSpreadElements getFragmentSpreadAccess() {
		return pFragmentSpread;
	}
	
	public ParserRule getFragmentSpreadRule() {
		return getFragmentSpreadAccess().getRule();
	}
	
	//InlineFragment:
	//    {InlineFragment} '...' (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
	//;
	public InlineFragmentElements getInlineFragmentAccess() {
		return pInlineFragment;
	}
	
	public ParserRule getInlineFragmentRule() {
		return getInlineFragmentAccess().getRule();
	}
	
	//FragmentDefinition:
	//    'fragment' fragName=FragmentName (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
	//;
	public FragmentDefinitionElements getFragmentDefinitionAccess() {
		return pFragmentDefinition;
	}
	
	public ParserRule getFragmentDefinitionRule() {
		return getFragmentDefinitionAccess().getRule();
	}
	
	//FragmentName:
	//    NAME //TODO: but not 'on'
	//;
	public FragmentNameElements getFragmentNameAccess() {
		return pFragmentName;
	}
	
	public ParserRule getFragmentNameRule() {
		return getFragmentNameAccess().getRule();
	}
	
	//TypeCondition:
	//    'on' NamedType
	//;
	public TypeConditionElements getTypeConditionAccess() {
		return pTypeCondition;
	}
	
	public ParserRule getTypeConditionRule() {
		return getTypeConditionAccess().getRule();
	}
	
	//Value: //TODO: parameter Const
	//    SingleValue | ComplexValue //condition added to solve different returned types for value attr
	////    value=Variable |
	////    value=IntValue |
	////    value=FloatValue |
	////    value=StringValue |
	////    value=BOOLEANVALUE |
	////    value=NULLVALUE |
	////    value=EnumValue |
	////    value=ListValue |
	////    value=ObjectValue
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//SingleValue:
	//    value=Variable |
	//    value=IntValue |
	////    value=FloatValue |
	//    value=StringValue |
	//    value=BOOLEANVALUE |
	//    value=NULLVALUE |
	//    value=EnumValue
	//;
	public SingleValueElements getSingleValueAccess() {
		return pSingleValue;
	}
	
	public ParserRule getSingleValueRule() {
		return getSingleValueAccess().getRule();
	}
	
	//ComplexValue:
	//    value=ListValue |
	//    value=ObjectValue
	//;
	public ComplexValueElements getComplexValueAccess() {
		return pComplexValue;
	}
	
	public ParserRule getComplexValueRule() {
		return getComplexValueAccess().getRule();
	}
	
	//EnumValue:
	//    NAME //TODO: but not 'true' or 'false' or 'null'
	//;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	////TODO: parameter Const
	//ListValue:
	//    {ListValue} '[' values+=Value* ']'
	//;
	public ListValueElements getListValueAccess() {
		return pListValue;
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	////TODO: parameter Const
	//ObjectValue:
	//    {ObjectValue} '{' fields+=ObjectField* '}'
	//;
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	//ObjectField: //TODO: parameter Const
	//    name=NAME ':' value=Value
	//;
	public ObjectFieldElements getObjectFieldAccess() {
		return pObjectField;
	}
	
	public ParserRule getObjectFieldRule() {
		return getObjectFieldAccess().getRule();
	}
	
	//VariableDefinitions: // hidden(COMMA,WS): //TODO: review overriding of hidden symbols at grammar level
	//    {VariableDefinitions} '(' varDefinitions+=VariableDefinition* ')'
	//;
	public VariableDefinitionsElements getVariableDefinitionsAccess() {
		return pVariableDefinitions;
	}
	
	public ParserRule getVariableDefinitionsRule() {
		return getVariableDefinitionsAccess().getRule();
	}
	
	//VariableDefinition: // hidden(COMMA,WS):
	//    '$' name=NAME ':' type=Type (defValue=DefaultValue)?
	//;
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//Variable:
	//    '$' NAME
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//DefaultValue:
	//    '=' Value //TODO: parameter Const
	//;
	public DefaultValueElements getDefaultValueAccess() {
		return pDefaultValue;
	}
	
	public ParserRule getDefaultValueRule() {
		return getDefaultValueAccess().getRule();
	}
	
	//Type:
	////    NamedType | ListType | NonNullType
	//    name=NamedType (notNull?='!')? |
	//    list=ListType (notNull?='!')?
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//NamedType:
	//    NAME
	//;
	public NamedTypeElements getNamedTypeAccess() {
		return pNamedType;
	}
	
	public ParserRule getNamedTypeRule() {
		return getNamedTypeAccess().getRule();
	}
	
	//ListType:
	//    '[' type=Type ']'
	//;
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	////NonNullType:
	//// NamedType '!' |
	//// ListType  '!'
	////;
	////Directives:
	////    directives+=Directive*
	////;
	//Directive:
	//    '@' name=NAME (args+=Arguments)*
	//;
	public DirectiveElements getDirectiveAccess() {
		return pDirective;
	}
	
	public ParserRule getDirectiveRule() {
		return getDirectiveAccess().getRule();
	}
	
	////Terminals and data types
	//terminal COMMA: ',' ;
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal COMMENT:
	//    '#' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal BOOLEANVALUE: 'true' | 'false' ;
	public TerminalRule getBOOLEANVALUERule() {
		return tBOOLEANVALUE;
	}
	
	//terminal NULLVALUE: 'null';
	public TerminalRule getNULLVALUERule() {
		return tNULLVALUE;
	}
	
	//terminal DIGIT: ('0'..'9');
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//@Override
	//terminal INT returns ecore::EInt: DIGIT+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal NAME:
	//    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//IntValue:
	//    DIGIT
	////    IntegerPart
	//;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	////IntegerPart returns ecore::EString:
	////    INT
	//////    (NegativeSign)? '0' |
	//////    (NegativeSign)? NONZERODIGIT INT
	////;
	////
	////NegativeSign: '-' ;
	////
	////FloatValue:
	////    IntegerPart FractionalPart |
	////    IntegerPart ExponentPart |
	////    IntegerPart FractionalPart ExponentPart
	////;
	////
	////FractionalPart:
	////    '.' INT
	////;
	////
	////ExponentPart:
	////    ExponentIndicator Sign? INT
	////;
	////
	////ExponentIndicator: //TODO: could be enum rule but then ExponentPart should assign the returned value
	////    'e' | 'E'
	////;
	////
	////Sign: //TODO: could be enum rule but then ExponentPart should assign the returned value
	////    '+' | '-'
	////;
	//StringValue:
	//    STRING
	//;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
