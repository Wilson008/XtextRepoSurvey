/*
 * generated by Xtext 2.35.0
 */
package de.sebastianbenz.xgherkin.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.sebastianbenz.xgherkin.ide.contentassist.antlr.internal.InternalGherkinParser;
import de.sebastianbenz.xgherkin.services.GherkinGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GherkinParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GherkinGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GherkinGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNarrativeElementAccess().getAlternatives(), "rule__NarrativeElement__Alternatives");
			builder.put(grammarAccess.getAbstractScenarioAccess().getAlternatives(), "rule__AbstractScenario__Alternatives");
			builder.put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
			builder.put(grammarAccess.getOptionalTextAccess().getAlternatives(), "rule__OptionalText__Alternatives");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getScenarioWithOutlineAccess().getGroup(), "rule__ScenarioWithOutline__Group__0");
			builder.put(grammarAccess.getExampleAccess().getGroup(), "rule__Example__Group__0");
			builder.put(grammarAccess.getExampleRowAccess().getGroup(), "rule__ExampleRow__Group__0");
			builder.put(grammarAccess.getBackgroundAccess().getGroup(), "rule__Background__Group__0");
			builder.put(grammarAccess.getWhenStepAccess().getGroup(), "rule__WhenStep__Group__0");
			builder.put(grammarAccess.getThenStepAccess().getGroup(), "rule__ThenStep__Group__0");
			builder.put(grammarAccess.getGivenStepAccess().getGroup(), "rule__GivenStep__Group__0");
			builder.put(grammarAccess.getAndStepAccess().getGroup(), "rule__AndStep__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getTagsAssignment_0(), "rule__Feature__TagsAssignment_0");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment_1(), "rule__Feature__NameAssignment_1");
			builder.put(grammarAccess.getFeatureAccess().getElementsAssignment_2(), "rule__Feature__ElementsAssignment_2");
			builder.put(grammarAccess.getFeatureAccess().getScenariosAssignment_3(), "rule__Feature__ScenariosAssignment_3");
			builder.put(grammarAccess.getFreeTextAccess().getNameAssignment(), "rule__FreeText__NameAssignment");
			builder.put(grammarAccess.getAsAAccess().getNameAssignment(), "rule__AsA__NameAssignment");
			builder.put(grammarAccess.getInOrderToAccess().getNameAssignment(), "rule__InOrderTo__NameAssignment");
			builder.put(grammarAccess.getIWantToAccess().getNameAssignment(), "rule__IWantTo__NameAssignment");
			builder.put(grammarAccess.getScenarioAccess().getTagsAssignment_0(), "rule__Scenario__TagsAssignment_0");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getElementsAssignment_2(), "rule__Scenario__ElementsAssignment_2");
			builder.put(grammarAccess.getScenarioAccess().getStepsAssignment_3(), "rule__Scenario__StepsAssignment_3");
			builder.put(grammarAccess.getScenarioWithOutlineAccess().getTagsAssignment_0(), "rule__ScenarioWithOutline__TagsAssignment_0");
			builder.put(grammarAccess.getScenarioWithOutlineAccess().getNameAssignment_1(), "rule__ScenarioWithOutline__NameAssignment_1");
			builder.put(grammarAccess.getScenarioWithOutlineAccess().getElementsAssignment_2(), "rule__ScenarioWithOutline__ElementsAssignment_2");
			builder.put(grammarAccess.getScenarioWithOutlineAccess().getStepsAssignment_3(), "rule__ScenarioWithOutline__StepsAssignment_3");
			builder.put(grammarAccess.getScenarioWithOutlineAccess().getExampleAssignment_4(), "rule__ScenarioWithOutline__ExampleAssignment_4");
			builder.put(grammarAccess.getExampleAccess().getHeadingAssignment_1(), "rule__Example__HeadingAssignment_1");
			builder.put(grammarAccess.getExampleAccess().getRowsAssignment_2(), "rule__Example__RowsAssignment_2");
			builder.put(grammarAccess.getExampleRowAccess().getCellsAssignment_0(), "rule__ExampleRow__CellsAssignment_0");
			builder.put(grammarAccess.getExampleCellAccess().getValueAssignment(), "rule__ExampleCell__ValueAssignment");
			builder.put(grammarAccess.getBackgroundAccess().getTagsAssignment_0(), "rule__Background__TagsAssignment_0");
			builder.put(grammarAccess.getBackgroundAccess().getNameAssignment_1(), "rule__Background__NameAssignment_1");
			builder.put(grammarAccess.getBackgroundAccess().getStepsAssignment_2(), "rule__Background__StepsAssignment_2");
			builder.put(grammarAccess.getWhenStepAccess().getTagsAssignment_0(), "rule__WhenStep__TagsAssignment_0");
			builder.put(grammarAccess.getWhenStepAccess().getDescAssignment_1(), "rule__WhenStep__DescAssignment_1");
			builder.put(grammarAccess.getWhenStepAccess().getDescAssignment_2(), "rule__WhenStep__DescAssignment_2");
			builder.put(grammarAccess.getWhenStepAccess().getRowsAssignment_3(), "rule__WhenStep__RowsAssignment_3");
			builder.put(grammarAccess.getThenStepAccess().getTagsAssignment_0(), "rule__ThenStep__TagsAssignment_0");
			builder.put(grammarAccess.getThenStepAccess().getDescAssignment_1(), "rule__ThenStep__DescAssignment_1");
			builder.put(grammarAccess.getThenStepAccess().getDescAssignment_2(), "rule__ThenStep__DescAssignment_2");
			builder.put(grammarAccess.getThenStepAccess().getRowsAssignment_3(), "rule__ThenStep__RowsAssignment_3");
			builder.put(grammarAccess.getGivenStepAccess().getTagsAssignment_0(), "rule__GivenStep__TagsAssignment_0");
			builder.put(grammarAccess.getGivenStepAccess().getDescAssignment_1(), "rule__GivenStep__DescAssignment_1");
			builder.put(grammarAccess.getGivenStepAccess().getDescAssignment_2(), "rule__GivenStep__DescAssignment_2");
			builder.put(grammarAccess.getGivenStepAccess().getRowsAssignment_3(), "rule__GivenStep__RowsAssignment_3");
			builder.put(grammarAccess.getAndStepAccess().getDescAssignment_0(), "rule__AndStep__DescAssignment_0");
			builder.put(grammarAccess.getAndStepAccess().getDescAssignment_1(), "rule__AndStep__DescAssignment_1");
			builder.put(grammarAccess.getAndStepAccess().getRowsAssignment_2(), "rule__AndStep__RowsAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GherkinGrammarAccess grammarAccess;

	@Override
	protected InternalGherkinParser createParser() {
		InternalGherkinParser result = new InternalGherkinParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public GherkinGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GherkinGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
