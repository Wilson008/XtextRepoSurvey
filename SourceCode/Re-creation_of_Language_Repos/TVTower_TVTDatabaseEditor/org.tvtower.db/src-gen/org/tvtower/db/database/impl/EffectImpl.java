/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.Effect;
import org.tvtower.db.database.NewsItem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Effect</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getNews <em>News</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getGenre <em>Genre</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getChoose <em>Choose</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getGuid <em>Guid</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getValueMin <em>Value Min</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getValueMax <em>Value Max</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getProbability <em>Probability</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getNews1 <em>News1</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getProbability1 <em>Probability1</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getNews2 <em>News2</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getProbability2 <em>Probability2</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getNews3 <em>News3</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getProbability3 <em>Probability3</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getNews4 <em>News4</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getProbability4 <em>Probability4</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getEnable <em>Enable</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.EffectImpl#getTime <em>Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EffectImpl extends MinimalEObjectImpl.Container implements Effect
{
  /**
   * The default value of the '{@link #getTrigger() <em>Trigger</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected static final String TRIGGER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrigger()
   * @generated
   * @ordered
   */
  protected String trigger = TRIGGER_EDEFAULT;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getNews() <em>News</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNews()
   * @generated
   * @ordered
   */
  protected NewsItem news;

  /**
   * The default value of the '{@link #getGenre() <em>Genre</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre()
   * @generated
   * @ordered
   */
  protected static final String GENRE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGenre() <em>Genre</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre()
   * @generated
   * @ordered
   */
  protected String genre = GENRE_EDEFAULT;

  /**
   * The default value of the '{@link #getChoose() <em>Choose</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoose()
   * @generated
   * @ordered
   */
  protected static final String CHOOSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getChoose() <em>Choose</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoose()
   * @generated
   * @ordered
   */
  protected String choose = CHOOSE_EDEFAULT;

  /**
   * The cached value of the '{@link #getGuid() <em>Guid</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuid()
   * @generated
   * @ordered
   */
  protected EObject guid;

  /**
   * The default value of the '{@link #getValueMin() <em>Value Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueMin()
   * @generated
   * @ordered
   */
  protected static final String VALUE_MIN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValueMin() <em>Value Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueMin()
   * @generated
   * @ordered
   */
  protected String valueMin = VALUE_MIN_EDEFAULT;

  /**
   * The default value of the '{@link #getValueMax() <em>Value Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueMax()
   * @generated
   * @ordered
   */
  protected static final String VALUE_MAX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValueMax() <em>Value Max</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueMax()
   * @generated
   * @ordered
   */
  protected String valueMax = VALUE_MAX_EDEFAULT;

  /**
   * The default value of the '{@link #getProbability() <em>Probability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability()
   * @generated
   * @ordered
   */
  protected static final String PROBABILITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProbability() <em>Probability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability()
   * @generated
   * @ordered
   */
  protected String probability = PROBABILITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getNews1() <em>News1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNews1()
   * @generated
   * @ordered
   */
  protected NewsItem news1;

  /**
   * The default value of the '{@link #getProbability1() <em>Probability1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability1()
   * @generated
   * @ordered
   */
  protected static final String PROBABILITY1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProbability1() <em>Probability1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability1()
   * @generated
   * @ordered
   */
  protected String probability1 = PROBABILITY1_EDEFAULT;

  /**
   * The cached value of the '{@link #getNews2() <em>News2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNews2()
   * @generated
   * @ordered
   */
  protected NewsItem news2;

  /**
   * The default value of the '{@link #getProbability2() <em>Probability2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability2()
   * @generated
   * @ordered
   */
  protected static final String PROBABILITY2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProbability2() <em>Probability2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability2()
   * @generated
   * @ordered
   */
  protected String probability2 = PROBABILITY2_EDEFAULT;

  /**
   * The cached value of the '{@link #getNews3() <em>News3</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNews3()
   * @generated
   * @ordered
   */
  protected NewsItem news3;

  /**
   * The default value of the '{@link #getProbability3() <em>Probability3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability3()
   * @generated
   * @ordered
   */
  protected static final String PROBABILITY3_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProbability3() <em>Probability3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability3()
   * @generated
   * @ordered
   */
  protected String probability3 = PROBABILITY3_EDEFAULT;

  /**
   * The cached value of the '{@link #getNews4() <em>News4</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNews4()
   * @generated
   * @ordered
   */
  protected NewsItem news4;

  /**
   * The default value of the '{@link #getProbability4() <em>Probability4</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability4()
   * @generated
   * @ordered
   */
  protected static final String PROBABILITY4_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProbability4() <em>Probability4</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProbability4()
   * @generated
   * @ordered
   */
  protected String probability4 = PROBABILITY4_EDEFAULT;

  /**
   * The default value of the '{@link #getEnable() <em>Enable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnable()
   * @generated
   * @ordered
   */
  protected static final String ENABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnable() <em>Enable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnable()
   * @generated
   * @ordered
   */
  protected String enable = ENABLE_EDEFAULT;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final String TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected String time = TIME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EffectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.EFFECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTrigger()
  {
    return trigger;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrigger(String newTrigger)
  {
    String oldTrigger = trigger;
    trigger = newTrigger;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__TRIGGER, oldTrigger, trigger));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewsItem getNews()
  {
    if (news != null && news.eIsProxy())
    {
      InternalEObject oldNews = (InternalEObject)news;
      news = (NewsItem)eResolveProxy(oldNews);
      if (news != oldNews)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DatabasePackage.EFFECT__NEWS, oldNews, news));
      }
    }
    return news;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NewsItem basicGetNews()
  {
    return news;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNews(NewsItem newNews)
  {
    NewsItem oldNews = news;
    news = newNews;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__NEWS, oldNews, news));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGenre()
  {
    return genre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenre(String newGenre)
  {
    String oldGenre = genre;
    genre = newGenre;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__GENRE, oldGenre, genre));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getChoose()
  {
    return choose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChoose(String newChoose)
  {
    String oldChoose = choose;
    choose = newChoose;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__CHOOSE, oldChoose, choose));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getGuid()
  {
    if (guid != null && guid.eIsProxy())
    {
      InternalEObject oldGuid = (InternalEObject)guid;
      guid = eResolveProxy(oldGuid);
      if (guid != oldGuid)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DatabasePackage.EFFECT__GUID, oldGuid, guid));
      }
    }
    return guid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject basicGetGuid()
  {
    return guid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuid(EObject newGuid)
  {
    EObject oldGuid = guid;
    guid = newGuid;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__GUID, oldGuid, guid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValueMin()
  {
    return valueMin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueMin(String newValueMin)
  {
    String oldValueMin = valueMin;
    valueMin = newValueMin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__VALUE_MIN, oldValueMin, valueMin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValueMax()
  {
    return valueMax;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueMax(String newValueMax)
  {
    String oldValueMax = valueMax;
    valueMax = newValueMax;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__VALUE_MAX, oldValueMax, valueMax));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProbability()
  {
    return probability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProbability(String newProbability)
  {
    String oldProbability = probability;
    probability = newProbability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__PROBABILITY, oldProbability, probability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewsItem getNews1()
  {
    if (news1 != null && news1.eIsProxy())
    {
      InternalEObject oldNews1 = (InternalEObject)news1;
      news1 = (NewsItem)eResolveProxy(oldNews1);
      if (news1 != oldNews1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DatabasePackage.EFFECT__NEWS1, oldNews1, news1));
      }
    }
    return news1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NewsItem basicGetNews1()
  {
    return news1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNews1(NewsItem newNews1)
  {
    NewsItem oldNews1 = news1;
    news1 = newNews1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__NEWS1, oldNews1, news1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProbability1()
  {
    return probability1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProbability1(String newProbability1)
  {
    String oldProbability1 = probability1;
    probability1 = newProbability1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__PROBABILITY1, oldProbability1, probability1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewsItem getNews2()
  {
    if (news2 != null && news2.eIsProxy())
    {
      InternalEObject oldNews2 = (InternalEObject)news2;
      news2 = (NewsItem)eResolveProxy(oldNews2);
      if (news2 != oldNews2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DatabasePackage.EFFECT__NEWS2, oldNews2, news2));
      }
    }
    return news2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NewsItem basicGetNews2()
  {
    return news2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNews2(NewsItem newNews2)
  {
    NewsItem oldNews2 = news2;
    news2 = newNews2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__NEWS2, oldNews2, news2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProbability2()
  {
    return probability2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProbability2(String newProbability2)
  {
    String oldProbability2 = probability2;
    probability2 = newProbability2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__PROBABILITY2, oldProbability2, probability2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewsItem getNews3()
  {
    if (news3 != null && news3.eIsProxy())
    {
      InternalEObject oldNews3 = (InternalEObject)news3;
      news3 = (NewsItem)eResolveProxy(oldNews3);
      if (news3 != oldNews3)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DatabasePackage.EFFECT__NEWS3, oldNews3, news3));
      }
    }
    return news3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NewsItem basicGetNews3()
  {
    return news3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNews3(NewsItem newNews3)
  {
    NewsItem oldNews3 = news3;
    news3 = newNews3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__NEWS3, oldNews3, news3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProbability3()
  {
    return probability3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProbability3(String newProbability3)
  {
    String oldProbability3 = probability3;
    probability3 = newProbability3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__PROBABILITY3, oldProbability3, probability3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewsItem getNews4()
  {
    if (news4 != null && news4.eIsProxy())
    {
      InternalEObject oldNews4 = (InternalEObject)news4;
      news4 = (NewsItem)eResolveProxy(oldNews4);
      if (news4 != oldNews4)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, DatabasePackage.EFFECT__NEWS4, oldNews4, news4));
      }
    }
    return news4;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NewsItem basicGetNews4()
  {
    return news4;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNews4(NewsItem newNews4)
  {
    NewsItem oldNews4 = news4;
    news4 = newNews4;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__NEWS4, oldNews4, news4));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProbability4()
  {
    return probability4;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProbability4(String newProbability4)
  {
    String oldProbability4 = probability4;
    probability4 = newProbability4;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__PROBABILITY4, oldProbability4, probability4));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEnable()
  {
    return enable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnable(String newEnable)
  {
    String oldEnable = enable;
    enable = newEnable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__ENABLE, oldEnable, enable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(String newTime)
  {
    String oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.EFFECT__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.EFFECT__TRIGGER:
        return getTrigger();
      case DatabasePackage.EFFECT__TYPE:
        return getType();
      case DatabasePackage.EFFECT__NEWS:
        if (resolve) return getNews();
        return basicGetNews();
      case DatabasePackage.EFFECT__GENRE:
        return getGenre();
      case DatabasePackage.EFFECT__CHOOSE:
        return getChoose();
      case DatabasePackage.EFFECT__GUID:
        if (resolve) return getGuid();
        return basicGetGuid();
      case DatabasePackage.EFFECT__VALUE_MIN:
        return getValueMin();
      case DatabasePackage.EFFECT__VALUE_MAX:
        return getValueMax();
      case DatabasePackage.EFFECT__PROBABILITY:
        return getProbability();
      case DatabasePackage.EFFECT__NEWS1:
        if (resolve) return getNews1();
        return basicGetNews1();
      case DatabasePackage.EFFECT__PROBABILITY1:
        return getProbability1();
      case DatabasePackage.EFFECT__NEWS2:
        if (resolve) return getNews2();
        return basicGetNews2();
      case DatabasePackage.EFFECT__PROBABILITY2:
        return getProbability2();
      case DatabasePackage.EFFECT__NEWS3:
        if (resolve) return getNews3();
        return basicGetNews3();
      case DatabasePackage.EFFECT__PROBABILITY3:
        return getProbability3();
      case DatabasePackage.EFFECT__NEWS4:
        if (resolve) return getNews4();
        return basicGetNews4();
      case DatabasePackage.EFFECT__PROBABILITY4:
        return getProbability4();
      case DatabasePackage.EFFECT__ENABLE:
        return getEnable();
      case DatabasePackage.EFFECT__TIME:
        return getTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.EFFECT__TRIGGER:
        setTrigger((String)newValue);
        return;
      case DatabasePackage.EFFECT__TYPE:
        setType((String)newValue);
        return;
      case DatabasePackage.EFFECT__NEWS:
        setNews((NewsItem)newValue);
        return;
      case DatabasePackage.EFFECT__GENRE:
        setGenre((String)newValue);
        return;
      case DatabasePackage.EFFECT__CHOOSE:
        setChoose((String)newValue);
        return;
      case DatabasePackage.EFFECT__GUID:
        setGuid((EObject)newValue);
        return;
      case DatabasePackage.EFFECT__VALUE_MIN:
        setValueMin((String)newValue);
        return;
      case DatabasePackage.EFFECT__VALUE_MAX:
        setValueMax((String)newValue);
        return;
      case DatabasePackage.EFFECT__PROBABILITY:
        setProbability((String)newValue);
        return;
      case DatabasePackage.EFFECT__NEWS1:
        setNews1((NewsItem)newValue);
        return;
      case DatabasePackage.EFFECT__PROBABILITY1:
        setProbability1((String)newValue);
        return;
      case DatabasePackage.EFFECT__NEWS2:
        setNews2((NewsItem)newValue);
        return;
      case DatabasePackage.EFFECT__PROBABILITY2:
        setProbability2((String)newValue);
        return;
      case DatabasePackage.EFFECT__NEWS3:
        setNews3((NewsItem)newValue);
        return;
      case DatabasePackage.EFFECT__PROBABILITY3:
        setProbability3((String)newValue);
        return;
      case DatabasePackage.EFFECT__NEWS4:
        setNews4((NewsItem)newValue);
        return;
      case DatabasePackage.EFFECT__PROBABILITY4:
        setProbability4((String)newValue);
        return;
      case DatabasePackage.EFFECT__ENABLE:
        setEnable((String)newValue);
        return;
      case DatabasePackage.EFFECT__TIME:
        setTime((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.EFFECT__TRIGGER:
        setTrigger(TRIGGER_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__NEWS:
        setNews((NewsItem)null);
        return;
      case DatabasePackage.EFFECT__GENRE:
        setGenre(GENRE_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__CHOOSE:
        setChoose(CHOOSE_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__GUID:
        setGuid((EObject)null);
        return;
      case DatabasePackage.EFFECT__VALUE_MIN:
        setValueMin(VALUE_MIN_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__VALUE_MAX:
        setValueMax(VALUE_MAX_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__PROBABILITY:
        setProbability(PROBABILITY_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__NEWS1:
        setNews1((NewsItem)null);
        return;
      case DatabasePackage.EFFECT__PROBABILITY1:
        setProbability1(PROBABILITY1_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__NEWS2:
        setNews2((NewsItem)null);
        return;
      case DatabasePackage.EFFECT__PROBABILITY2:
        setProbability2(PROBABILITY2_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__NEWS3:
        setNews3((NewsItem)null);
        return;
      case DatabasePackage.EFFECT__PROBABILITY3:
        setProbability3(PROBABILITY3_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__NEWS4:
        setNews4((NewsItem)null);
        return;
      case DatabasePackage.EFFECT__PROBABILITY4:
        setProbability4(PROBABILITY4_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__ENABLE:
        setEnable(ENABLE_EDEFAULT);
        return;
      case DatabasePackage.EFFECT__TIME:
        setTime(TIME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.EFFECT__TRIGGER:
        return TRIGGER_EDEFAULT == null ? trigger != null : !TRIGGER_EDEFAULT.equals(trigger);
      case DatabasePackage.EFFECT__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case DatabasePackage.EFFECT__NEWS:
        return news != null;
      case DatabasePackage.EFFECT__GENRE:
        return GENRE_EDEFAULT == null ? genre != null : !GENRE_EDEFAULT.equals(genre);
      case DatabasePackage.EFFECT__CHOOSE:
        return CHOOSE_EDEFAULT == null ? choose != null : !CHOOSE_EDEFAULT.equals(choose);
      case DatabasePackage.EFFECT__GUID:
        return guid != null;
      case DatabasePackage.EFFECT__VALUE_MIN:
        return VALUE_MIN_EDEFAULT == null ? valueMin != null : !VALUE_MIN_EDEFAULT.equals(valueMin);
      case DatabasePackage.EFFECT__VALUE_MAX:
        return VALUE_MAX_EDEFAULT == null ? valueMax != null : !VALUE_MAX_EDEFAULT.equals(valueMax);
      case DatabasePackage.EFFECT__PROBABILITY:
        return PROBABILITY_EDEFAULT == null ? probability != null : !PROBABILITY_EDEFAULT.equals(probability);
      case DatabasePackage.EFFECT__NEWS1:
        return news1 != null;
      case DatabasePackage.EFFECT__PROBABILITY1:
        return PROBABILITY1_EDEFAULT == null ? probability1 != null : !PROBABILITY1_EDEFAULT.equals(probability1);
      case DatabasePackage.EFFECT__NEWS2:
        return news2 != null;
      case DatabasePackage.EFFECT__PROBABILITY2:
        return PROBABILITY2_EDEFAULT == null ? probability2 != null : !PROBABILITY2_EDEFAULT.equals(probability2);
      case DatabasePackage.EFFECT__NEWS3:
        return news3 != null;
      case DatabasePackage.EFFECT__PROBABILITY3:
        return PROBABILITY3_EDEFAULT == null ? probability3 != null : !PROBABILITY3_EDEFAULT.equals(probability3);
      case DatabasePackage.EFFECT__NEWS4:
        return news4 != null;
      case DatabasePackage.EFFECT__PROBABILITY4:
        return PROBABILITY4_EDEFAULT == null ? probability4 != null : !PROBABILITY4_EDEFAULT.equals(probability4);
      case DatabasePackage.EFFECT__ENABLE:
        return ENABLE_EDEFAULT == null ? enable != null : !ENABLE_EDEFAULT.equals(enable);
      case DatabasePackage.EFFECT__TIME:
        return TIME_EDEFAULT == null ? time != null : !TIME_EDEFAULT.equals(time);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (trigger: ");
    result.append(trigger);
    result.append(", type: ");
    result.append(type);
    result.append(", genre: ");
    result.append(genre);
    result.append(", choose: ");
    result.append(choose);
    result.append(", valueMin: ");
    result.append(valueMin);
    result.append(", valueMax: ");
    result.append(valueMax);
    result.append(", probability: ");
    result.append(probability);
    result.append(", probability1: ");
    result.append(probability1);
    result.append(", probability2: ");
    result.append(probability2);
    result.append(", probability3: ");
    result.append(probability3);
    result.append(", probability4: ");
    result.append(probability4);
    result.append(", enable: ");
    result.append(enable);
    result.append(", time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //EffectImpl
