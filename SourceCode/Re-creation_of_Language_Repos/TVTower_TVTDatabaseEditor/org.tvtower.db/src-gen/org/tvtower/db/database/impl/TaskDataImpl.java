/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.TaskData;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Data</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinAudienceAbs <em>Min Audience Abs</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinAudiencePercent <em>Min Audience Percent</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getLimitToGenres <em>Limit To Genres</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getLimitToFlags <em>Limit To Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinReachAbs <em>Min Reach Abs</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinReachPercent <em>Min Reach Percent</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getKeyword1 <em>Keyword1</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getKeyword2 <em>Keyword2</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getKeyword3 <em>Keyword3</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getGenre1 <em>Genre1</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getGenre2 <em>Genre2</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getGenre3 <em>Genre3</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinQuality1 <em>Min Quality1</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinQuality2 <em>Min Quality2</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMinQuality3 <em>Min Quality3</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMaxQuality1 <em>Max Quality1</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMaxQuality2 <em>Max Quality2</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getMaxQuality3 <em>Max Quality3</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getCheckMinute <em>Check Minute</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.TaskDataImpl#getCheckHour <em>Check Hour</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskDataImpl extends MinimalEObjectImpl.Container implements TaskData
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getMinAudienceAbs() <em>Min Audience Abs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinAudienceAbs()
   * @generated
   * @ordered
   */
  protected static final String MIN_AUDIENCE_ABS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinAudienceAbs() <em>Min Audience Abs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinAudienceAbs()
   * @generated
   * @ordered
   */
  protected String minAudienceAbs = MIN_AUDIENCE_ABS_EDEFAULT;

  /**
   * The default value of the '{@link #getMinAudiencePercent() <em>Min Audience Percent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinAudiencePercent()
   * @generated
   * @ordered
   */
  protected static final String MIN_AUDIENCE_PERCENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinAudiencePercent() <em>Min Audience Percent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinAudiencePercent()
   * @generated
   * @ordered
   */
  protected String minAudiencePercent = MIN_AUDIENCE_PERCENT_EDEFAULT;

  /**
   * The default value of the '{@link #getLimitToGenres() <em>Limit To Genres</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLimitToGenres()
   * @generated
   * @ordered
   */
  protected static final String LIMIT_TO_GENRES_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLimitToGenres() <em>Limit To Genres</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLimitToGenres()
   * @generated
   * @ordered
   */
  protected String limitToGenres = LIMIT_TO_GENRES_EDEFAULT;

  /**
   * The default value of the '{@link #getLimitToFlags() <em>Limit To Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLimitToFlags()
   * @generated
   * @ordered
   */
  protected static final String LIMIT_TO_FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLimitToFlags() <em>Limit To Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLimitToFlags()
   * @generated
   * @ordered
   */
  protected String limitToFlags = LIMIT_TO_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getMinReachAbs() <em>Min Reach Abs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinReachAbs()
   * @generated
   * @ordered
   */
  protected static final String MIN_REACH_ABS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinReachAbs() <em>Min Reach Abs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinReachAbs()
   * @generated
   * @ordered
   */
  protected String minReachAbs = MIN_REACH_ABS_EDEFAULT;

  /**
   * The default value of the '{@link #getMinReachPercent() <em>Min Reach Percent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinReachPercent()
   * @generated
   * @ordered
   */
  protected static final String MIN_REACH_PERCENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinReachPercent() <em>Min Reach Percent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinReachPercent()
   * @generated
   * @ordered
   */
  protected String minReachPercent = MIN_REACH_PERCENT_EDEFAULT;

  /**
   * The default value of the '{@link #getKeyword1() <em>Keyword1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword1()
   * @generated
   * @ordered
   */
  protected static final String KEYWORD1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyword1() <em>Keyword1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword1()
   * @generated
   * @ordered
   */
  protected String keyword1 = KEYWORD1_EDEFAULT;

  /**
   * The default value of the '{@link #getKeyword2() <em>Keyword2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword2()
   * @generated
   * @ordered
   */
  protected static final String KEYWORD2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyword2() <em>Keyword2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword2()
   * @generated
   * @ordered
   */
  protected String keyword2 = KEYWORD2_EDEFAULT;

  /**
   * The default value of the '{@link #getKeyword3() <em>Keyword3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword3()
   * @generated
   * @ordered
   */
  protected static final String KEYWORD3_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getKeyword3() <em>Keyword3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyword3()
   * @generated
   * @ordered
   */
  protected String keyword3 = KEYWORD3_EDEFAULT;

  /**
   * The default value of the '{@link #getGenre1() <em>Genre1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre1()
   * @generated
   * @ordered
   */
  protected static final String GENRE1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGenre1() <em>Genre1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre1()
   * @generated
   * @ordered
   */
  protected String genre1 = GENRE1_EDEFAULT;

  /**
   * The default value of the '{@link #getGenre2() <em>Genre2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre2()
   * @generated
   * @ordered
   */
  protected static final String GENRE2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGenre2() <em>Genre2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre2()
   * @generated
   * @ordered
   */
  protected String genre2 = GENRE2_EDEFAULT;

  /**
   * The default value of the '{@link #getGenre3() <em>Genre3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre3()
   * @generated
   * @ordered
   */
  protected static final String GENRE3_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGenre3() <em>Genre3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenre3()
   * @generated
   * @ordered
   */
  protected String genre3 = GENRE3_EDEFAULT;

  /**
   * The default value of the '{@link #getMinQuality1() <em>Min Quality1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinQuality1()
   * @generated
   * @ordered
   */
  protected static final String MIN_QUALITY1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinQuality1() <em>Min Quality1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinQuality1()
   * @generated
   * @ordered
   */
  protected String minQuality1 = MIN_QUALITY1_EDEFAULT;

  /**
   * The default value of the '{@link #getMinQuality2() <em>Min Quality2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinQuality2()
   * @generated
   * @ordered
   */
  protected static final String MIN_QUALITY2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinQuality2() <em>Min Quality2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinQuality2()
   * @generated
   * @ordered
   */
  protected String minQuality2 = MIN_QUALITY2_EDEFAULT;

  /**
   * The default value of the '{@link #getMinQuality3() <em>Min Quality3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinQuality3()
   * @generated
   * @ordered
   */
  protected static final String MIN_QUALITY3_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMinQuality3() <em>Min Quality3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinQuality3()
   * @generated
   * @ordered
   */
  protected String minQuality3 = MIN_QUALITY3_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxQuality1() <em>Max Quality1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxQuality1()
   * @generated
   * @ordered
   */
  protected static final String MAX_QUALITY1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMaxQuality1() <em>Max Quality1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxQuality1()
   * @generated
   * @ordered
   */
  protected String maxQuality1 = MAX_QUALITY1_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxQuality2() <em>Max Quality2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxQuality2()
   * @generated
   * @ordered
   */
  protected static final String MAX_QUALITY2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMaxQuality2() <em>Max Quality2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxQuality2()
   * @generated
   * @ordered
   */
  protected String maxQuality2 = MAX_QUALITY2_EDEFAULT;

  /**
   * The default value of the '{@link #getMaxQuality3() <em>Max Quality3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxQuality3()
   * @generated
   * @ordered
   */
  protected static final String MAX_QUALITY3_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMaxQuality3() <em>Max Quality3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaxQuality3()
   * @generated
   * @ordered
   */
  protected String maxQuality3 = MAX_QUALITY3_EDEFAULT;

  /**
   * The default value of the '{@link #getCheckMinute() <em>Check Minute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheckMinute()
   * @generated
   * @ordered
   */
  protected static final String CHECK_MINUTE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCheckMinute() <em>Check Minute</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheckMinute()
   * @generated
   * @ordered
   */
  protected String checkMinute = CHECK_MINUTE_EDEFAULT;

  /**
   * The default value of the '{@link #getCheckHour() <em>Check Hour</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheckHour()
   * @generated
   * @ordered
   */
  protected static final String CHECK_HOUR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCheckHour() <em>Check Hour</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCheckHour()
   * @generated
   * @ordered
   */
  protected String checkHour = CHECK_HOUR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskDataImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.TASK_DATA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinAudienceAbs()
  {
    return minAudienceAbs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinAudienceAbs(String newMinAudienceAbs)
  {
    String oldMinAudienceAbs = minAudienceAbs;
    minAudienceAbs = newMinAudienceAbs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_AUDIENCE_ABS, oldMinAudienceAbs, minAudienceAbs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinAudiencePercent()
  {
    return minAudiencePercent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinAudiencePercent(String newMinAudiencePercent)
  {
    String oldMinAudiencePercent = minAudiencePercent;
    minAudiencePercent = newMinAudiencePercent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_AUDIENCE_PERCENT, oldMinAudiencePercent, minAudiencePercent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLimitToGenres()
  {
    return limitToGenres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLimitToGenres(String newLimitToGenres)
  {
    String oldLimitToGenres = limitToGenres;
    limitToGenres = newLimitToGenres;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__LIMIT_TO_GENRES, oldLimitToGenres, limitToGenres));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLimitToFlags()
  {
    return limitToFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLimitToFlags(String newLimitToFlags)
  {
    String oldLimitToFlags = limitToFlags;
    limitToFlags = newLimitToFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__LIMIT_TO_FLAGS, oldLimitToFlags, limitToFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinReachAbs()
  {
    return minReachAbs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinReachAbs(String newMinReachAbs)
  {
    String oldMinReachAbs = minReachAbs;
    minReachAbs = newMinReachAbs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_REACH_ABS, oldMinReachAbs, minReachAbs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinReachPercent()
  {
    return minReachPercent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinReachPercent(String newMinReachPercent)
  {
    String oldMinReachPercent = minReachPercent;
    minReachPercent = newMinReachPercent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_REACH_PERCENT, oldMinReachPercent, minReachPercent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getKeyword1()
  {
    return keyword1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyword1(String newKeyword1)
  {
    String oldKeyword1 = keyword1;
    keyword1 = newKeyword1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__KEYWORD1, oldKeyword1, keyword1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getKeyword2()
  {
    return keyword2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyword2(String newKeyword2)
  {
    String oldKeyword2 = keyword2;
    keyword2 = newKeyword2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__KEYWORD2, oldKeyword2, keyword2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getKeyword3()
  {
    return keyword3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyword3(String newKeyword3)
  {
    String oldKeyword3 = keyword3;
    keyword3 = newKeyword3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__KEYWORD3, oldKeyword3, keyword3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGenre1()
  {
    return genre1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenre1(String newGenre1)
  {
    String oldGenre1 = genre1;
    genre1 = newGenre1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__GENRE1, oldGenre1, genre1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGenre2()
  {
    return genre2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenre2(String newGenre2)
  {
    String oldGenre2 = genre2;
    genre2 = newGenre2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__GENRE2, oldGenre2, genre2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGenre3()
  {
    return genre3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenre3(String newGenre3)
  {
    String oldGenre3 = genre3;
    genre3 = newGenre3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__GENRE3, oldGenre3, genre3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinQuality1()
  {
    return minQuality1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinQuality1(String newMinQuality1)
  {
    String oldMinQuality1 = minQuality1;
    minQuality1 = newMinQuality1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_QUALITY1, oldMinQuality1, minQuality1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinQuality2()
  {
    return minQuality2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinQuality2(String newMinQuality2)
  {
    String oldMinQuality2 = minQuality2;
    minQuality2 = newMinQuality2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_QUALITY2, oldMinQuality2, minQuality2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMinQuality3()
  {
    return minQuality3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMinQuality3(String newMinQuality3)
  {
    String oldMinQuality3 = minQuality3;
    minQuality3 = newMinQuality3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MIN_QUALITY3, oldMinQuality3, minQuality3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMaxQuality1()
  {
    return maxQuality1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxQuality1(String newMaxQuality1)
  {
    String oldMaxQuality1 = maxQuality1;
    maxQuality1 = newMaxQuality1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MAX_QUALITY1, oldMaxQuality1, maxQuality1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMaxQuality2()
  {
    return maxQuality2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxQuality2(String newMaxQuality2)
  {
    String oldMaxQuality2 = maxQuality2;
    maxQuality2 = newMaxQuality2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MAX_QUALITY2, oldMaxQuality2, maxQuality2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMaxQuality3()
  {
    return maxQuality3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMaxQuality3(String newMaxQuality3)
  {
    String oldMaxQuality3 = maxQuality3;
    maxQuality3 = newMaxQuality3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__MAX_QUALITY3, oldMaxQuality3, maxQuality3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCheckMinute()
  {
    return checkMinute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCheckMinute(String newCheckMinute)
  {
    String oldCheckMinute = checkMinute;
    checkMinute = newCheckMinute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__CHECK_MINUTE, oldCheckMinute, checkMinute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCheckHour()
  {
    return checkHour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCheckHour(String newCheckHour)
  {
    String oldCheckHour = checkHour;
    checkHour = newCheckHour;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.TASK_DATA__CHECK_HOUR, oldCheckHour, checkHour));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.TASK_DATA__TYPE:
        return getType();
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_ABS:
        return getMinAudienceAbs();
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_PERCENT:
        return getMinAudiencePercent();
      case DatabasePackage.TASK_DATA__LIMIT_TO_GENRES:
        return getLimitToGenres();
      case DatabasePackage.TASK_DATA__LIMIT_TO_FLAGS:
        return getLimitToFlags();
      case DatabasePackage.TASK_DATA__MIN_REACH_ABS:
        return getMinReachAbs();
      case DatabasePackage.TASK_DATA__MIN_REACH_PERCENT:
        return getMinReachPercent();
      case DatabasePackage.TASK_DATA__KEYWORD1:
        return getKeyword1();
      case DatabasePackage.TASK_DATA__KEYWORD2:
        return getKeyword2();
      case DatabasePackage.TASK_DATA__KEYWORD3:
        return getKeyword3();
      case DatabasePackage.TASK_DATA__GENRE1:
        return getGenre1();
      case DatabasePackage.TASK_DATA__GENRE2:
        return getGenre2();
      case DatabasePackage.TASK_DATA__GENRE3:
        return getGenre3();
      case DatabasePackage.TASK_DATA__MIN_QUALITY1:
        return getMinQuality1();
      case DatabasePackage.TASK_DATA__MIN_QUALITY2:
        return getMinQuality2();
      case DatabasePackage.TASK_DATA__MIN_QUALITY3:
        return getMinQuality3();
      case DatabasePackage.TASK_DATA__MAX_QUALITY1:
        return getMaxQuality1();
      case DatabasePackage.TASK_DATA__MAX_QUALITY2:
        return getMaxQuality2();
      case DatabasePackage.TASK_DATA__MAX_QUALITY3:
        return getMaxQuality3();
      case DatabasePackage.TASK_DATA__CHECK_MINUTE:
        return getCheckMinute();
      case DatabasePackage.TASK_DATA__CHECK_HOUR:
        return getCheckHour();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.TASK_DATA__TYPE:
        setType((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_ABS:
        setMinAudienceAbs((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_PERCENT:
        setMinAudiencePercent((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__LIMIT_TO_GENRES:
        setLimitToGenres((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__LIMIT_TO_FLAGS:
        setLimitToFlags((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_REACH_ABS:
        setMinReachAbs((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_REACH_PERCENT:
        setMinReachPercent((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__KEYWORD1:
        setKeyword1((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__KEYWORD2:
        setKeyword2((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__KEYWORD3:
        setKeyword3((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__GENRE1:
        setGenre1((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__GENRE2:
        setGenre2((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__GENRE3:
        setGenre3((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_QUALITY1:
        setMinQuality1((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_QUALITY2:
        setMinQuality2((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MIN_QUALITY3:
        setMinQuality3((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MAX_QUALITY1:
        setMaxQuality1((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MAX_QUALITY2:
        setMaxQuality2((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__MAX_QUALITY3:
        setMaxQuality3((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__CHECK_MINUTE:
        setCheckMinute((String)newValue);
        return;
      case DatabasePackage.TASK_DATA__CHECK_HOUR:
        setCheckHour((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.TASK_DATA__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_ABS:
        setMinAudienceAbs(MIN_AUDIENCE_ABS_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_PERCENT:
        setMinAudiencePercent(MIN_AUDIENCE_PERCENT_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__LIMIT_TO_GENRES:
        setLimitToGenres(LIMIT_TO_GENRES_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__LIMIT_TO_FLAGS:
        setLimitToFlags(LIMIT_TO_FLAGS_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_REACH_ABS:
        setMinReachAbs(MIN_REACH_ABS_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_REACH_PERCENT:
        setMinReachPercent(MIN_REACH_PERCENT_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__KEYWORD1:
        setKeyword1(KEYWORD1_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__KEYWORD2:
        setKeyword2(KEYWORD2_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__KEYWORD3:
        setKeyword3(KEYWORD3_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__GENRE1:
        setGenre1(GENRE1_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__GENRE2:
        setGenre2(GENRE2_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__GENRE3:
        setGenre3(GENRE3_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_QUALITY1:
        setMinQuality1(MIN_QUALITY1_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_QUALITY2:
        setMinQuality2(MIN_QUALITY2_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MIN_QUALITY3:
        setMinQuality3(MIN_QUALITY3_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MAX_QUALITY1:
        setMaxQuality1(MAX_QUALITY1_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MAX_QUALITY2:
        setMaxQuality2(MAX_QUALITY2_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__MAX_QUALITY3:
        setMaxQuality3(MAX_QUALITY3_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__CHECK_MINUTE:
        setCheckMinute(CHECK_MINUTE_EDEFAULT);
        return;
      case DatabasePackage.TASK_DATA__CHECK_HOUR:
        setCheckHour(CHECK_HOUR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.TASK_DATA__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_ABS:
        return MIN_AUDIENCE_ABS_EDEFAULT == null ? minAudienceAbs != null : !MIN_AUDIENCE_ABS_EDEFAULT.equals(minAudienceAbs);
      case DatabasePackage.TASK_DATA__MIN_AUDIENCE_PERCENT:
        return MIN_AUDIENCE_PERCENT_EDEFAULT == null ? minAudiencePercent != null : !MIN_AUDIENCE_PERCENT_EDEFAULT.equals(minAudiencePercent);
      case DatabasePackage.TASK_DATA__LIMIT_TO_GENRES:
        return LIMIT_TO_GENRES_EDEFAULT == null ? limitToGenres != null : !LIMIT_TO_GENRES_EDEFAULT.equals(limitToGenres);
      case DatabasePackage.TASK_DATA__LIMIT_TO_FLAGS:
        return LIMIT_TO_FLAGS_EDEFAULT == null ? limitToFlags != null : !LIMIT_TO_FLAGS_EDEFAULT.equals(limitToFlags);
      case DatabasePackage.TASK_DATA__MIN_REACH_ABS:
        return MIN_REACH_ABS_EDEFAULT == null ? minReachAbs != null : !MIN_REACH_ABS_EDEFAULT.equals(minReachAbs);
      case DatabasePackage.TASK_DATA__MIN_REACH_PERCENT:
        return MIN_REACH_PERCENT_EDEFAULT == null ? minReachPercent != null : !MIN_REACH_PERCENT_EDEFAULT.equals(minReachPercent);
      case DatabasePackage.TASK_DATA__KEYWORD1:
        return KEYWORD1_EDEFAULT == null ? keyword1 != null : !KEYWORD1_EDEFAULT.equals(keyword1);
      case DatabasePackage.TASK_DATA__KEYWORD2:
        return KEYWORD2_EDEFAULT == null ? keyword2 != null : !KEYWORD2_EDEFAULT.equals(keyword2);
      case DatabasePackage.TASK_DATA__KEYWORD3:
        return KEYWORD3_EDEFAULT == null ? keyword3 != null : !KEYWORD3_EDEFAULT.equals(keyword3);
      case DatabasePackage.TASK_DATA__GENRE1:
        return GENRE1_EDEFAULT == null ? genre1 != null : !GENRE1_EDEFAULT.equals(genre1);
      case DatabasePackage.TASK_DATA__GENRE2:
        return GENRE2_EDEFAULT == null ? genre2 != null : !GENRE2_EDEFAULT.equals(genre2);
      case DatabasePackage.TASK_DATA__GENRE3:
        return GENRE3_EDEFAULT == null ? genre3 != null : !GENRE3_EDEFAULT.equals(genre3);
      case DatabasePackage.TASK_DATA__MIN_QUALITY1:
        return MIN_QUALITY1_EDEFAULT == null ? minQuality1 != null : !MIN_QUALITY1_EDEFAULT.equals(minQuality1);
      case DatabasePackage.TASK_DATA__MIN_QUALITY2:
        return MIN_QUALITY2_EDEFAULT == null ? minQuality2 != null : !MIN_QUALITY2_EDEFAULT.equals(minQuality2);
      case DatabasePackage.TASK_DATA__MIN_QUALITY3:
        return MIN_QUALITY3_EDEFAULT == null ? minQuality3 != null : !MIN_QUALITY3_EDEFAULT.equals(minQuality3);
      case DatabasePackage.TASK_DATA__MAX_QUALITY1:
        return MAX_QUALITY1_EDEFAULT == null ? maxQuality1 != null : !MAX_QUALITY1_EDEFAULT.equals(maxQuality1);
      case DatabasePackage.TASK_DATA__MAX_QUALITY2:
        return MAX_QUALITY2_EDEFAULT == null ? maxQuality2 != null : !MAX_QUALITY2_EDEFAULT.equals(maxQuality2);
      case DatabasePackage.TASK_DATA__MAX_QUALITY3:
        return MAX_QUALITY3_EDEFAULT == null ? maxQuality3 != null : !MAX_QUALITY3_EDEFAULT.equals(maxQuality3);
      case DatabasePackage.TASK_DATA__CHECK_MINUTE:
        return CHECK_MINUTE_EDEFAULT == null ? checkMinute != null : !CHECK_MINUTE_EDEFAULT.equals(checkMinute);
      case DatabasePackage.TASK_DATA__CHECK_HOUR:
        return CHECK_HOUR_EDEFAULT == null ? checkHour != null : !CHECK_HOUR_EDEFAULT.equals(checkHour);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", minAudienceAbs: ");
    result.append(minAudienceAbs);
    result.append(", minAudiencePercent: ");
    result.append(minAudiencePercent);
    result.append(", limitToGenres: ");
    result.append(limitToGenres);
    result.append(", limitToFlags: ");
    result.append(limitToFlags);
    result.append(", minReachAbs: ");
    result.append(minReachAbs);
    result.append(", minReachPercent: ");
    result.append(minReachPercent);
    result.append(", keyword1: ");
    result.append(keyword1);
    result.append(", keyword2: ");
    result.append(keyword2);
    result.append(", keyword3: ");
    result.append(keyword3);
    result.append(", genre1: ");
    result.append(genre1);
    result.append(", genre2: ");
    result.append(genre2);
    result.append(", genre3: ");
    result.append(genre3);
    result.append(", minQuality1: ");
    result.append(minQuality1);
    result.append(", minQuality2: ");
    result.append(minQuality2);
    result.append(", minQuality3: ");
    result.append(minQuality3);
    result.append(", maxQuality1: ");
    result.append(maxQuality1);
    result.append(", maxQuality2: ");
    result.append(maxQuality2);
    result.append(", maxQuality3: ");
    result.append(maxQuality3);
    result.append(", checkMinute: ");
    result.append(checkMinute);
    result.append(", checkHour: ");
    result.append(checkHour);
    result.append(')');
    return result.toString();
  }

} //TaskDataImpl
