/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.ScriptData;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Script Data</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getProgrammeFlags <em>Programme Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getOptionalProgrammeFlags <em>Optional Programme Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getScriptFlags <em>Script Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getLive_date <em>Live date</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getBroadcastTimeSlotStart <em>Broadcast Time Slot Start</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getBroadcastTimeSlotEnd <em>Broadcast Time Slot End</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getProductionLimit <em>Production Limit</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getBroadcastLimit <em>Broadcast Limit</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getBroadcastFlags <em>Broadcast Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getLicenceFlags <em>Licence Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptDataImpl#getAvailable <em>Available</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ScriptDataImpl extends MinimalEObjectImpl.Container implements ScriptData
{
  /**
   * The default value of the '{@link #getProgrammeFlags() <em>Programme Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgrammeFlags()
   * @generated
   * @ordered
   */
  protected static final String PROGRAMME_FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProgrammeFlags() <em>Programme Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgrammeFlags()
   * @generated
   * @ordered
   */
  protected String programmeFlags = PROGRAMME_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getOptionalProgrammeFlags() <em>Optional Programme Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptionalProgrammeFlags()
   * @generated
   * @ordered
   */
  protected static final String OPTIONAL_PROGRAMME_FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOptionalProgrammeFlags() <em>Optional Programme Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOptionalProgrammeFlags()
   * @generated
   * @ordered
   */
  protected String optionalProgrammeFlags = OPTIONAL_PROGRAMME_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getScriptFlags() <em>Script Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScriptFlags()
   * @generated
   * @ordered
   */
  protected static final String SCRIPT_FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScriptFlags() <em>Script Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScriptFlags()
   * @generated
   * @ordered
   */
  protected String scriptFlags = SCRIPT_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getLive_date() <em>Live date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLive_date()
   * @generated
   * @ordered
   */
  protected static final String LIVE_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLive_date() <em>Live date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLive_date()
   * @generated
   * @ordered
   */
  protected String live_date = LIVE_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getBroadcastTimeSlotStart() <em>Broadcast Time Slot Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastTimeSlotStart()
   * @generated
   * @ordered
   */
  protected static final String BROADCAST_TIME_SLOT_START_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBroadcastTimeSlotStart() <em>Broadcast Time Slot Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastTimeSlotStart()
   * @generated
   * @ordered
   */
  protected String broadcastTimeSlotStart = BROADCAST_TIME_SLOT_START_EDEFAULT;

  /**
   * The default value of the '{@link #getBroadcastTimeSlotEnd() <em>Broadcast Time Slot End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastTimeSlotEnd()
   * @generated
   * @ordered
   */
  protected static final String BROADCAST_TIME_SLOT_END_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBroadcastTimeSlotEnd() <em>Broadcast Time Slot End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastTimeSlotEnd()
   * @generated
   * @ordered
   */
  protected String broadcastTimeSlotEnd = BROADCAST_TIME_SLOT_END_EDEFAULT;

  /**
   * The default value of the '{@link #getProductionLimit() <em>Production Limit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProductionLimit()
   * @generated
   * @ordered
   */
  protected static final String PRODUCTION_LIMIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProductionLimit() <em>Production Limit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProductionLimit()
   * @generated
   * @ordered
   */
  protected String productionLimit = PRODUCTION_LIMIT_EDEFAULT;

  /**
   * The default value of the '{@link #getBroadcastLimit() <em>Broadcast Limit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastLimit()
   * @generated
   * @ordered
   */
  protected static final String BROADCAST_LIMIT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBroadcastLimit() <em>Broadcast Limit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastLimit()
   * @generated
   * @ordered
   */
  protected String broadcastLimit = BROADCAST_LIMIT_EDEFAULT;

  /**
   * The default value of the '{@link #getBroadcastFlags() <em>Broadcast Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastFlags()
   * @generated
   * @ordered
   */
  protected static final String BROADCAST_FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBroadcastFlags() <em>Broadcast Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBroadcastFlags()
   * @generated
   * @ordered
   */
  protected String broadcastFlags = BROADCAST_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getLicenceFlags() <em>Licence Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLicenceFlags()
   * @generated
   * @ordered
   */
  protected static final String LICENCE_FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLicenceFlags() <em>Licence Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLicenceFlags()
   * @generated
   * @ordered
   */
  protected String licenceFlags = LICENCE_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getAvailable() <em>Available</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAvailable()
   * @generated
   * @ordered
   */
  protected static final String AVAILABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAvailable() <em>Available</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAvailable()
   * @generated
   * @ordered
   */
  protected String available = AVAILABLE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScriptDataImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.SCRIPT_DATA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProgrammeFlags()
  {
    return programmeFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProgrammeFlags(String newProgrammeFlags)
  {
    String oldProgrammeFlags = programmeFlags;
    programmeFlags = newProgrammeFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__PROGRAMME_FLAGS, oldProgrammeFlags, programmeFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOptionalProgrammeFlags()
  {
    return optionalProgrammeFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOptionalProgrammeFlags(String newOptionalProgrammeFlags)
  {
    String oldOptionalProgrammeFlags = optionalProgrammeFlags;
    optionalProgrammeFlags = newOptionalProgrammeFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__OPTIONAL_PROGRAMME_FLAGS, oldOptionalProgrammeFlags, optionalProgrammeFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getScriptFlags()
  {
    return scriptFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScriptFlags(String newScriptFlags)
  {
    String oldScriptFlags = scriptFlags;
    scriptFlags = newScriptFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__SCRIPT_FLAGS, oldScriptFlags, scriptFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLive_date()
  {
    return live_date;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLive_date(String newLive_date)
  {
    String oldLive_date = live_date;
    live_date = newLive_date;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__LIVE_DATE, oldLive_date, live_date));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBroadcastTimeSlotStart()
  {
    return broadcastTimeSlotStart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastTimeSlotStart(String newBroadcastTimeSlotStart)
  {
    String oldBroadcastTimeSlotStart = broadcastTimeSlotStart;
    broadcastTimeSlotStart = newBroadcastTimeSlotStart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_START, oldBroadcastTimeSlotStart, broadcastTimeSlotStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBroadcastTimeSlotEnd()
  {
    return broadcastTimeSlotEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastTimeSlotEnd(String newBroadcastTimeSlotEnd)
  {
    String oldBroadcastTimeSlotEnd = broadcastTimeSlotEnd;
    broadcastTimeSlotEnd = newBroadcastTimeSlotEnd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_END, oldBroadcastTimeSlotEnd, broadcastTimeSlotEnd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProductionLimit()
  {
    return productionLimit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProductionLimit(String newProductionLimit)
  {
    String oldProductionLimit = productionLimit;
    productionLimit = newProductionLimit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__PRODUCTION_LIMIT, oldProductionLimit, productionLimit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBroadcastLimit()
  {
    return broadcastLimit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastLimit(String newBroadcastLimit)
  {
    String oldBroadcastLimit = broadcastLimit;
    broadcastLimit = newBroadcastLimit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__BROADCAST_LIMIT, oldBroadcastLimit, broadcastLimit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBroadcastFlags()
  {
    return broadcastFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBroadcastFlags(String newBroadcastFlags)
  {
    String oldBroadcastFlags = broadcastFlags;
    broadcastFlags = newBroadcastFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__BROADCAST_FLAGS, oldBroadcastFlags, broadcastFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLicenceFlags()
  {
    return licenceFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLicenceFlags(String newLicenceFlags)
  {
    String oldLicenceFlags = licenceFlags;
    licenceFlags = newLicenceFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__LICENCE_FLAGS, oldLicenceFlags, licenceFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAvailable()
  {
    return available;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAvailable(String newAvailable)
  {
    String oldAvailable = available;
    available = newAvailable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_DATA__AVAILABLE, oldAvailable, available));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_DATA__PROGRAMME_FLAGS:
        return getProgrammeFlags();
      case DatabasePackage.SCRIPT_DATA__OPTIONAL_PROGRAMME_FLAGS:
        return getOptionalProgrammeFlags();
      case DatabasePackage.SCRIPT_DATA__SCRIPT_FLAGS:
        return getScriptFlags();
      case DatabasePackage.SCRIPT_DATA__LIVE_DATE:
        return getLive_date();
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_START:
        return getBroadcastTimeSlotStart();
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_END:
        return getBroadcastTimeSlotEnd();
      case DatabasePackage.SCRIPT_DATA__PRODUCTION_LIMIT:
        return getProductionLimit();
      case DatabasePackage.SCRIPT_DATA__BROADCAST_LIMIT:
        return getBroadcastLimit();
      case DatabasePackage.SCRIPT_DATA__BROADCAST_FLAGS:
        return getBroadcastFlags();
      case DatabasePackage.SCRIPT_DATA__LICENCE_FLAGS:
        return getLicenceFlags();
      case DatabasePackage.SCRIPT_DATA__AVAILABLE:
        return getAvailable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_DATA__PROGRAMME_FLAGS:
        setProgrammeFlags((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__OPTIONAL_PROGRAMME_FLAGS:
        setOptionalProgrammeFlags((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__SCRIPT_FLAGS:
        setScriptFlags((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__LIVE_DATE:
        setLive_date((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_START:
        setBroadcastTimeSlotStart((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_END:
        setBroadcastTimeSlotEnd((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__PRODUCTION_LIMIT:
        setProductionLimit((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_LIMIT:
        setBroadcastLimit((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_FLAGS:
        setBroadcastFlags((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__LICENCE_FLAGS:
        setLicenceFlags((String)newValue);
        return;
      case DatabasePackage.SCRIPT_DATA__AVAILABLE:
        setAvailable((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_DATA__PROGRAMME_FLAGS:
        setProgrammeFlags(PROGRAMME_FLAGS_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__OPTIONAL_PROGRAMME_FLAGS:
        setOptionalProgrammeFlags(OPTIONAL_PROGRAMME_FLAGS_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__SCRIPT_FLAGS:
        setScriptFlags(SCRIPT_FLAGS_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__LIVE_DATE:
        setLive_date(LIVE_DATE_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_START:
        setBroadcastTimeSlotStart(BROADCAST_TIME_SLOT_START_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_END:
        setBroadcastTimeSlotEnd(BROADCAST_TIME_SLOT_END_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__PRODUCTION_LIMIT:
        setProductionLimit(PRODUCTION_LIMIT_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_LIMIT:
        setBroadcastLimit(BROADCAST_LIMIT_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__BROADCAST_FLAGS:
        setBroadcastFlags(BROADCAST_FLAGS_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__LICENCE_FLAGS:
        setLicenceFlags(LICENCE_FLAGS_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_DATA__AVAILABLE:
        setAvailable(AVAILABLE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_DATA__PROGRAMME_FLAGS:
        return PROGRAMME_FLAGS_EDEFAULT == null ? programmeFlags != null : !PROGRAMME_FLAGS_EDEFAULT.equals(programmeFlags);
      case DatabasePackage.SCRIPT_DATA__OPTIONAL_PROGRAMME_FLAGS:
        return OPTIONAL_PROGRAMME_FLAGS_EDEFAULT == null ? optionalProgrammeFlags != null : !OPTIONAL_PROGRAMME_FLAGS_EDEFAULT.equals(optionalProgrammeFlags);
      case DatabasePackage.SCRIPT_DATA__SCRIPT_FLAGS:
        return SCRIPT_FLAGS_EDEFAULT == null ? scriptFlags != null : !SCRIPT_FLAGS_EDEFAULT.equals(scriptFlags);
      case DatabasePackage.SCRIPT_DATA__LIVE_DATE:
        return LIVE_DATE_EDEFAULT == null ? live_date != null : !LIVE_DATE_EDEFAULT.equals(live_date);
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_START:
        return BROADCAST_TIME_SLOT_START_EDEFAULT == null ? broadcastTimeSlotStart != null : !BROADCAST_TIME_SLOT_START_EDEFAULT.equals(broadcastTimeSlotStart);
      case DatabasePackage.SCRIPT_DATA__BROADCAST_TIME_SLOT_END:
        return BROADCAST_TIME_SLOT_END_EDEFAULT == null ? broadcastTimeSlotEnd != null : !BROADCAST_TIME_SLOT_END_EDEFAULT.equals(broadcastTimeSlotEnd);
      case DatabasePackage.SCRIPT_DATA__PRODUCTION_LIMIT:
        return PRODUCTION_LIMIT_EDEFAULT == null ? productionLimit != null : !PRODUCTION_LIMIT_EDEFAULT.equals(productionLimit);
      case DatabasePackage.SCRIPT_DATA__BROADCAST_LIMIT:
        return BROADCAST_LIMIT_EDEFAULT == null ? broadcastLimit != null : !BROADCAST_LIMIT_EDEFAULT.equals(broadcastLimit);
      case DatabasePackage.SCRIPT_DATA__BROADCAST_FLAGS:
        return BROADCAST_FLAGS_EDEFAULT == null ? broadcastFlags != null : !BROADCAST_FLAGS_EDEFAULT.equals(broadcastFlags);
      case DatabasePackage.SCRIPT_DATA__LICENCE_FLAGS:
        return LICENCE_FLAGS_EDEFAULT == null ? licenceFlags != null : !LICENCE_FLAGS_EDEFAULT.equals(licenceFlags);
      case DatabasePackage.SCRIPT_DATA__AVAILABLE:
        return AVAILABLE_EDEFAULT == null ? available != null : !AVAILABLE_EDEFAULT.equals(available);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (programmeFlags: ");
    result.append(programmeFlags);
    result.append(", optionalProgrammeFlags: ");
    result.append(optionalProgrammeFlags);
    result.append(", scriptFlags: ");
    result.append(scriptFlags);
    result.append(", live_date: ");
    result.append(live_date);
    result.append(", broadcastTimeSlotStart: ");
    result.append(broadcastTimeSlotStart);
    result.append(", broadcastTimeSlotEnd: ");
    result.append(broadcastTimeSlotEnd);
    result.append(", productionLimit: ");
    result.append(productionLimit);
    result.append(", broadcastLimit: ");
    result.append(broadcastLimit);
    result.append(", broadcastFlags: ");
    result.append(broadcastFlags);
    result.append(", licenceFlags: ");
    result.append(licenceFlags);
    result.append(", available: ");
    result.append(available);
    result.append(')');
    return result.toString();
  }

} //ScriptDataImpl
