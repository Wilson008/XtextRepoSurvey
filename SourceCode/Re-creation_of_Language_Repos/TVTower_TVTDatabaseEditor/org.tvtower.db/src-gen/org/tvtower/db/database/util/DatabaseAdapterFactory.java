/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.tvtower.db.database.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.tvtower.db.database.DatabasePackage
 * @generated
 */
public class DatabaseAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DatabasePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatabaseAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DatabasePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseSwitch<Adapter> modelSwitch =
    new DatabaseSwitch<Adapter>()
    {
      @Override
      public Adapter caseDatabase(Database object)
      {
        return createDatabaseAdapter();
      }
      @Override
      public Adapter caseExportOptions(ExportOptions object)
      {
        return createExportOptionsAdapter();
      }
      @Override
      public Adapter caseDefinition(Definition object)
      {
        return createDefinitionAdapter();
      }
      @Override
      public Adapter casePersonLocalization(PersonLocalization object)
      {
        return createPersonLocalizationAdapter();
      }
      @Override
      public Adapter caseMayContainVariables(MayContainVariables object)
      {
        return createMayContainVariablesAdapter();
      }
      @Override
      public Adapter caseScriptTemplates(ScriptTemplates object)
      {
        return createScriptTemplatesAdapter();
      }
      @Override
      public Adapter caseScriptTemplate(ScriptTemplate object)
      {
        return createScriptTemplateAdapter();
      }
      @Override
      public Adapter caseContainsLanguageStrings(ContainsLanguageStrings object)
      {
        return createContainsLanguageStringsAdapter();
      }
      @Override
      public Adapter caseTitle(Title object)
      {
        return createTitleAdapter();
      }
      @Override
      public Adapter caseDescription(Description object)
      {
        return createDescriptionAdapter();
      }
      @Override
      public Adapter caseScriptChildren(ScriptChildren object)
      {
        return createScriptChildrenAdapter();
      }
      @Override
      public Adapter caseVariables(Variables object)
      {
        return createVariablesAdapter();
      }
      @Override
      public Adapter caseVariableDef(VariableDef object)
      {
        return createVariableDefAdapter();
      }
      @Override
      public Adapter caseJobs(Jobs object)
      {
        return createJobsAdapter();
      }
      @Override
      public Adapter caseJob(Job object)
      {
        return createJobAdapter();
      }
      @Override
      public Adapter caseScriptData(ScriptData object)
      {
        return createScriptDataAdapter();
      }
      @Override
      public Adapter caseScriptGenres(ScriptGenres object)
      {
        return createScriptGenresAdapter();
      }
      @Override
      public Adapter caseContainsMinMaxSlope(ContainsMinMaxSlope object)
      {
        return createContainsMinMaxSlopeAdapter();
      }
      @Override
      public Adapter caseBlocks(Blocks object)
      {
        return createBlocksAdapter();
      }
      @Override
      public Adapter caseEpisodes(Episodes object)
      {
        return createEpisodesAdapter();
      }
      @Override
      public Adapter caseStudioSize(StudioSize object)
      {
        return createStudioSizeAdapter();
      }
      @Override
      public Adapter casePrice(Price object)
      {
        return createPriceAdapter();
      }
      @Override
      public Adapter casePotential(Potential object)
      {
        return createPotentialAdapter();
      }
      @Override
      public Adapter caseOutcome(Outcome object)
      {
        return createOutcomeAdapter();
      }
      @Override
      public Adapter caseReview(Review object)
      {
        return createReviewAdapter();
      }
      @Override
      public Adapter caseSpeed(Speed object)
      {
        return createSpeedAdapter();
      }
      @Override
      public Adapter caseProductionTime(ProductionTime object)
      {
        return createProductionTimeAdapter();
      }
      @Override
      public Adapter caseMinMaxSlope(MinMaxSlope object)
      {
        return createMinMaxSlopeAdapter();
      }
      @Override
      public Adapter caseLanguageString(LanguageString object)
      {
        return createLanguageStringAdapter();
      }
      @Override
      public Adapter caseProgrammeRoles(ProgrammeRoles object)
      {
        return createProgrammeRolesAdapter();
      }
      @Override
      public Adapter caseProgrammeRole(ProgrammeRole object)
      {
        return createProgrammeRoleAdapter();
      }
      @Override
      public Adapter caseRoleLocale(RoleLocale object)
      {
        return createRoleLocaleAdapter();
      }
      @Override
      public Adapter caseAchievements(Achievements object)
      {
        return createAchievementsAdapter();
      }
      @Override
      public Adapter caseAchievement(Achievement object)
      {
        return createAchievementAdapter();
      }
      @Override
      public Adapter caseText(Text object)
      {
        return createTextAdapter();
      }
      @Override
      public Adapter caseTasks(Tasks object)
      {
        return createTasksAdapter();
      }
      @Override
      public Adapter caseTask(Task object)
      {
        return createTaskAdapter();
      }
      @Override
      public Adapter caseTaskData(TaskData object)
      {
        return createTaskDataAdapter();
      }
      @Override
      public Adapter caseRewards(Rewards object)
      {
        return createRewardsAdapter();
      }
      @Override
      public Adapter caseReward(Reward object)
      {
        return createRewardAdapter();
      }
      @Override
      public Adapter caseRewardData(RewardData object)
      {
        return createRewardDataAdapter();
      }
      @Override
      public Adapter caseAchievementData(AchievementData object)
      {
        return createAchievementDataAdapter();
      }
      @Override
      public Adapter caseAdvertisements(Advertisements object)
      {
        return createAdvertisementsAdapter();
      }
      @Override
      public Adapter caseAdvertisement(Advertisement object)
      {
        return createAdvertisementAdapter();
      }
      @Override
      public Adapter caseAdConditions(AdConditions object)
      {
        return createAdConditionsAdapter();
      }
      @Override
      public Adapter caseAdvertisementData(AdvertisementData object)
      {
        return createAdvertisementDataAdapter();
      }
      @Override
      public Adapter caseNews(News object)
      {
        return createNewsAdapter();
      }
      @Override
      public Adapter caseNewsItem(NewsItem object)
      {
        return createNewsItemAdapter();
      }
      @Override
      public Adapter caseEffects(Effects object)
      {
        return createEffectsAdapter();
      }
      @Override
      public Adapter caseEffect(Effect object)
      {
        return createEffectAdapter();
      }
      @Override
      public Adapter caseAvailability(Availability object)
      {
        return createAvailabilityAdapter();
      }
      @Override
      public Adapter caseNewsData(NewsData object)
      {
        return createNewsDataAdapter();
      }
      @Override
      public Adapter caseCelebrityPeople(CelebrityPeople object)
      {
        return createCelebrityPeopleAdapter();
      }
      @Override
      public Adapter caseInsignificantPeople(InsignificantPeople object)
      {
        return createInsignificantPeopleAdapter();
      }
      @Override
      public Adapter casePerson(Person object)
      {
        return createPersonAdapter();
      }
      @Override
      public Adapter casePersonLocale(PersonLocale object)
      {
        return createPersonLocaleAdapter();
      }
      @Override
      public Adapter casePersonDetails(PersonDetails object)
      {
        return createPersonDetailsAdapter();
      }
      @Override
      public Adapter casePersonData(PersonData object)
      {
        return createPersonDataAdapter();
      }
      @Override
      public Adapter caseProgrammes(Programmes object)
      {
        return createProgrammesAdapter();
      }
      @Override
      public Adapter caseProgramme(Programme object)
      {
        return createProgrammeAdapter();
      }
      @Override
      public Adapter caseProgrammeChildren(ProgrammeChildren object)
      {
        return createProgrammeChildrenAdapter();
      }
      @Override
      public Adapter caseStaff(Staff object)
      {
        return createStaffAdapter();
      }
      @Override
      public Adapter caseProgrammeGroups(ProgrammeGroups object)
      {
        return createProgrammeGroupsAdapter();
      }
      @Override
      public Adapter caseGroupAttractivity(GroupAttractivity object)
      {
        return createGroupAttractivityAdapter();
      }
      @Override
      public Adapter caseProgrammeReleaseTime(ProgrammeReleaseTime object)
      {
        return createProgrammeReleaseTimeAdapter();
      }
      @Override
      public Adapter caseStaffMember(StaffMember object)
      {
        return createStaffMemberAdapter();
      }
      @Override
      public Adapter caseModifiers(Modifiers object)
      {
        return createModifiersAdapter();
      }
      @Override
      public Adapter caseTemplateProgrammeModifiers(TemplateProgrammeModifiers object)
      {
        return createTemplateProgrammeModifiersAdapter();
      }
      @Override
      public Adapter caseModifier(Modifier object)
      {
        return createModifierAdapter();
      }
      @Override
      public Adapter caseProgrammeRatings(ProgrammeRatings object)
      {
        return createProgrammeRatingsAdapter();
      }
      @Override
      public Adapter caseProgrammeData(ProgrammeData object)
      {
        return createProgrammeDataAdapter();
      }
      @Override
      public Adapter caseTitleOriginal(TitleOriginal object)
      {
        return createTitleOriginalAdapter();
      }
      @Override
      public Adapter caseVersion(Version object)
      {
        return createVersionAdapter();
      }
      @Override
      public Adapter caseUnnamedProperty(UnnamedProperty object)
      {
        return createUnnamedPropertyAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Database <em>Database</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Database
   * @generated
   */
  public Adapter createDatabaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ExportOptions <em>Export Options</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ExportOptions
   * @generated
   */
  public Adapter createExportOptionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Definition <em>Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Definition
   * @generated
   */
  public Adapter createDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.PersonLocalization <em>Person Localization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.PersonLocalization
   * @generated
   */
  public Adapter createPersonLocalizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.MayContainVariables <em>May Contain Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.MayContainVariables
   * @generated
   */
  public Adapter createMayContainVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ScriptTemplates <em>Script Templates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ScriptTemplates
   * @generated
   */
  public Adapter createScriptTemplatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ScriptTemplate <em>Script Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ScriptTemplate
   * @generated
   */
  public Adapter createScriptTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ContainsLanguageStrings <em>Contains Language Strings</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ContainsLanguageStrings
   * @generated
   */
  public Adapter createContainsLanguageStringsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Title <em>Title</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Title
   * @generated
   */
  public Adapter createTitleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Description <em>Description</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Description
   * @generated
   */
  public Adapter createDescriptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ScriptChildren <em>Script Children</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ScriptChildren
   * @generated
   */
  public Adapter createScriptChildrenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Variables <em>Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Variables
   * @generated
   */
  public Adapter createVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.VariableDef <em>Variable Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.VariableDef
   * @generated
   */
  public Adapter createVariableDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Jobs <em>Jobs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Jobs
   * @generated
   */
  public Adapter createJobsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Job <em>Job</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Job
   * @generated
   */
  public Adapter createJobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ScriptData <em>Script Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ScriptData
   * @generated
   */
  public Adapter createScriptDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ScriptGenres <em>Script Genres</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ScriptGenres
   * @generated
   */
  public Adapter createScriptGenresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ContainsMinMaxSlope <em>Contains Min Max Slope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ContainsMinMaxSlope
   * @generated
   */
  public Adapter createContainsMinMaxSlopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Blocks <em>Blocks</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Blocks
   * @generated
   */
  public Adapter createBlocksAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Episodes <em>Episodes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Episodes
   * @generated
   */
  public Adapter createEpisodesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.StudioSize <em>Studio Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.StudioSize
   * @generated
   */
  public Adapter createStudioSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Price <em>Price</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Price
   * @generated
   */
  public Adapter createPriceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Potential <em>Potential</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Potential
   * @generated
   */
  public Adapter createPotentialAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Outcome <em>Outcome</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Outcome
   * @generated
   */
  public Adapter createOutcomeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Review <em>Review</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Review
   * @generated
   */
  public Adapter createReviewAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Speed <em>Speed</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Speed
   * @generated
   */
  public Adapter createSpeedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProductionTime <em>Production Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProductionTime
   * @generated
   */
  public Adapter createProductionTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.MinMaxSlope <em>Min Max Slope</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.MinMaxSlope
   * @generated
   */
  public Adapter createMinMaxSlopeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.LanguageString <em>Language String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.LanguageString
   * @generated
   */
  public Adapter createLanguageStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeRoles <em>Programme Roles</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeRoles
   * @generated
   */
  public Adapter createProgrammeRolesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeRole <em>Programme Role</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeRole
   * @generated
   */
  public Adapter createProgrammeRoleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.RoleLocale <em>Role Locale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.RoleLocale
   * @generated
   */
  public Adapter createRoleLocaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Achievements <em>Achievements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Achievements
   * @generated
   */
  public Adapter createAchievementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Achievement <em>Achievement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Achievement
   * @generated
   */
  public Adapter createAchievementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Text <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Text
   * @generated
   */
  public Adapter createTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Tasks <em>Tasks</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Tasks
   * @generated
   */
  public Adapter createTasksAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Task <em>Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Task
   * @generated
   */
  public Adapter createTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.TaskData <em>Task Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.TaskData
   * @generated
   */
  public Adapter createTaskDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Rewards <em>Rewards</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Rewards
   * @generated
   */
  public Adapter createRewardsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Reward <em>Reward</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Reward
   * @generated
   */
  public Adapter createRewardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.RewardData <em>Reward Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.RewardData
   * @generated
   */
  public Adapter createRewardDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.AchievementData <em>Achievement Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.AchievementData
   * @generated
   */
  public Adapter createAchievementDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Advertisements <em>Advertisements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Advertisements
   * @generated
   */
  public Adapter createAdvertisementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Advertisement <em>Advertisement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Advertisement
   * @generated
   */
  public Adapter createAdvertisementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.AdConditions <em>Ad Conditions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.AdConditions
   * @generated
   */
  public Adapter createAdConditionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.AdvertisementData <em>Advertisement Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.AdvertisementData
   * @generated
   */
  public Adapter createAdvertisementDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.News <em>News</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.News
   * @generated
   */
  public Adapter createNewsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.NewsItem <em>News Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.NewsItem
   * @generated
   */
  public Adapter createNewsItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Effects <em>Effects</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Effects
   * @generated
   */
  public Adapter createEffectsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Effect <em>Effect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Effect
   * @generated
   */
  public Adapter createEffectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Availability <em>Availability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Availability
   * @generated
   */
  public Adapter createAvailabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.NewsData <em>News Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.NewsData
   * @generated
   */
  public Adapter createNewsDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.CelebrityPeople <em>Celebrity People</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.CelebrityPeople
   * @generated
   */
  public Adapter createCelebrityPeopleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.InsignificantPeople <em>Insignificant People</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.InsignificantPeople
   * @generated
   */
  public Adapter createInsignificantPeopleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Person <em>Person</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Person
   * @generated
   */
  public Adapter createPersonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.PersonLocale <em>Person Locale</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.PersonLocale
   * @generated
   */
  public Adapter createPersonLocaleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.PersonDetails <em>Person Details</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.PersonDetails
   * @generated
   */
  public Adapter createPersonDetailsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.PersonData <em>Person Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.PersonData
   * @generated
   */
  public Adapter createPersonDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Programmes <em>Programmes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Programmes
   * @generated
   */
  public Adapter createProgrammesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Programme <em>Programme</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Programme
   * @generated
   */
  public Adapter createProgrammeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeChildren <em>Programme Children</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeChildren
   * @generated
   */
  public Adapter createProgrammeChildrenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Staff <em>Staff</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Staff
   * @generated
   */
  public Adapter createStaffAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeGroups <em>Programme Groups</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeGroups
   * @generated
   */
  public Adapter createProgrammeGroupsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.GroupAttractivity <em>Group Attractivity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.GroupAttractivity
   * @generated
   */
  public Adapter createGroupAttractivityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeReleaseTime <em>Programme Release Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeReleaseTime
   * @generated
   */
  public Adapter createProgrammeReleaseTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.StaffMember <em>Staff Member</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.StaffMember
   * @generated
   */
  public Adapter createStaffMemberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Modifiers <em>Modifiers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Modifiers
   * @generated
   */
  public Adapter createModifiersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.TemplateProgrammeModifiers <em>Template Programme Modifiers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.TemplateProgrammeModifiers
   * @generated
   */
  public Adapter createTemplateProgrammeModifiersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Modifier <em>Modifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Modifier
   * @generated
   */
  public Adapter createModifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeRatings <em>Programme Ratings</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeRatings
   * @generated
   */
  public Adapter createProgrammeRatingsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.ProgrammeData <em>Programme Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.ProgrammeData
   * @generated
   */
  public Adapter createProgrammeDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.TitleOriginal <em>Title Original</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.TitleOriginal
   * @generated
   */
  public Adapter createTitleOriginalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.Version <em>Version</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.Version
   * @generated
   */
  public Adapter createVersionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.tvtower.db.database.UnnamedProperty <em>Unnamed Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.tvtower.db.database.UnnamedProperty
   * @generated
   */
  public Adapter createUnnamedPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DatabaseAdapterFactory
