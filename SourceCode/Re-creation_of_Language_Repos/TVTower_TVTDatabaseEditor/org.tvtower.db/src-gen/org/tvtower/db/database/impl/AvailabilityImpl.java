/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.Availability;
import org.tvtower.db.database.DatabasePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Availability</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.AvailabilityImpl#getScript <em>Script</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AvailabilityImpl#getYearFrom <em>Year From</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AvailabilityImpl#getYearTo <em>Year To</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AvailabilityImpl extends MinimalEObjectImpl.Container implements Availability
{
  /**
   * The default value of the '{@link #getScript() <em>Script</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScript()
   * @generated
   * @ordered
   */
  protected static final String SCRIPT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScript() <em>Script</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScript()
   * @generated
   * @ordered
   */
  protected String script = SCRIPT_EDEFAULT;

  /**
   * The default value of the '{@link #getYearFrom() <em>Year From</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYearFrom()
   * @generated
   * @ordered
   */
  protected static final String YEAR_FROM_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getYearFrom() <em>Year From</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYearFrom()
   * @generated
   * @ordered
   */
  protected String yearFrom = YEAR_FROM_EDEFAULT;

  /**
   * The default value of the '{@link #getYearTo() <em>Year To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYearTo()
   * @generated
   * @ordered
   */
  protected static final String YEAR_TO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getYearTo() <em>Year To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYearTo()
   * @generated
   * @ordered
   */
  protected String yearTo = YEAR_TO_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AvailabilityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.AVAILABILITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getScript()
  {
    return script;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScript(String newScript)
  {
    String oldScript = script;
    script = newScript;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.AVAILABILITY__SCRIPT, oldScript, script));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getYearFrom()
  {
    return yearFrom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setYearFrom(String newYearFrom)
  {
    String oldYearFrom = yearFrom;
    yearFrom = newYearFrom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.AVAILABILITY__YEAR_FROM, oldYearFrom, yearFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getYearTo()
  {
    return yearTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setYearTo(String newYearTo)
  {
    String oldYearTo = yearTo;
    yearTo = newYearTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.AVAILABILITY__YEAR_TO, oldYearTo, yearTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.AVAILABILITY__SCRIPT:
        return getScript();
      case DatabasePackage.AVAILABILITY__YEAR_FROM:
        return getYearFrom();
      case DatabasePackage.AVAILABILITY__YEAR_TO:
        return getYearTo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.AVAILABILITY__SCRIPT:
        setScript((String)newValue);
        return;
      case DatabasePackage.AVAILABILITY__YEAR_FROM:
        setYearFrom((String)newValue);
        return;
      case DatabasePackage.AVAILABILITY__YEAR_TO:
        setYearTo((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.AVAILABILITY__SCRIPT:
        setScript(SCRIPT_EDEFAULT);
        return;
      case DatabasePackage.AVAILABILITY__YEAR_FROM:
        setYearFrom(YEAR_FROM_EDEFAULT);
        return;
      case DatabasePackage.AVAILABILITY__YEAR_TO:
        setYearTo(YEAR_TO_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.AVAILABILITY__SCRIPT:
        return SCRIPT_EDEFAULT == null ? script != null : !SCRIPT_EDEFAULT.equals(script);
      case DatabasePackage.AVAILABILITY__YEAR_FROM:
        return YEAR_FROM_EDEFAULT == null ? yearFrom != null : !YEAR_FROM_EDEFAULT.equals(yearFrom);
      case DatabasePackage.AVAILABILITY__YEAR_TO:
        return YEAR_TO_EDEFAULT == null ? yearTo != null : !YEAR_TO_EDEFAULT.equals(yearTo);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (script: ");
    result.append(script);
    result.append(", yearFrom: ");
    result.append(yearFrom);
    result.append(", yearTo: ");
    result.append(yearTo);
    result.append(')');
    return result.toString();
  }

} //AvailabilityImpl
