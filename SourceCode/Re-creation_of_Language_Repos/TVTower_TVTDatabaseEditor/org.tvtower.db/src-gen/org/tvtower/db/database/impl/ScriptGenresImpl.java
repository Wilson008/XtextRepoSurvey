/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.ScriptGenres;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Script Genres</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.ScriptGenresImpl#getMainGenre <em>Main Genre</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptGenresImpl#getSubgenres <em>Subgenres</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ScriptGenresImpl extends MinimalEObjectImpl.Container implements ScriptGenres
{
  /**
   * The default value of the '{@link #getMainGenre() <em>Main Genre</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainGenre()
   * @generated
   * @ordered
   */
  protected static final String MAIN_GENRE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMainGenre() <em>Main Genre</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainGenre()
   * @generated
   * @ordered
   */
  protected String mainGenre = MAIN_GENRE_EDEFAULT;

  /**
   * The default value of the '{@link #getSubgenres() <em>Subgenres</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubgenres()
   * @generated
   * @ordered
   */
  protected static final String SUBGENRES_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSubgenres() <em>Subgenres</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubgenres()
   * @generated
   * @ordered
   */
  protected String subgenres = SUBGENRES_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScriptGenresImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.SCRIPT_GENRES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMainGenre()
  {
    return mainGenre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainGenre(String newMainGenre)
  {
    String oldMainGenre = mainGenre;
    mainGenre = newMainGenre;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_GENRES__MAIN_GENRE, oldMainGenre, mainGenre));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSubgenres()
  {
    return subgenres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubgenres(String newSubgenres)
  {
    String oldSubgenres = subgenres;
    subgenres = newSubgenres;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_GENRES__SUBGENRES, oldSubgenres, subgenres));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_GENRES__MAIN_GENRE:
        return getMainGenre();
      case DatabasePackage.SCRIPT_GENRES__SUBGENRES:
        return getSubgenres();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_GENRES__MAIN_GENRE:
        setMainGenre((String)newValue);
        return;
      case DatabasePackage.SCRIPT_GENRES__SUBGENRES:
        setSubgenres((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_GENRES__MAIN_GENRE:
        setMainGenre(MAIN_GENRE_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_GENRES__SUBGENRES:
        setSubgenres(SUBGENRES_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_GENRES__MAIN_GENRE:
        return MAIN_GENRE_EDEFAULT == null ? mainGenre != null : !MAIN_GENRE_EDEFAULT.equals(mainGenre);
      case DatabasePackage.SCRIPT_GENRES__SUBGENRES:
        return SUBGENRES_EDEFAULT == null ? subgenres != null : !SUBGENRES_EDEFAULT.equals(subgenres);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (mainGenre: ");
    result.append(mainGenre);
    result.append(", subgenres: ");
    result.append(subgenres);
    result.append(')');
    return result.toString();
  }

} //ScriptGenresImpl
