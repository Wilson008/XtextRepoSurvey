/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.Achievement;
import org.tvtower.db.database.AchievementData;
import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.Rewards;
import org.tvtower.db.database.Tasks;
import org.tvtower.db.database.Text;
import org.tvtower.db.database.Title;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Achievement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getComment <em>Comment</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getCreator <em>Creator</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getCreatedBy <em>Created By</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getTitle <em>Title</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getText <em>Text</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getTasks <em>Tasks</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getRewards <em>Rewards</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementImpl#getData <em>Data</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AchievementImpl extends MinimalEObjectImpl.Container implements Achievement
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected static final String COMMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComment() <em>Comment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComment()
   * @generated
   * @ordered
   */
  protected String comment = COMMENT_EDEFAULT;

  /**
   * The default value of the '{@link #getCreator() <em>Creator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreator()
   * @generated
   * @ordered
   */
  protected static final String CREATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCreator() <em>Creator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreator()
   * @generated
   * @ordered
   */
  protected String creator = CREATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getCreatedBy() <em>Created By</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreatedBy()
   * @generated
   * @ordered
   */
  protected static final String CREATED_BY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCreatedBy() <em>Created By</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreatedBy()
   * @generated
   * @ordered
   */
  protected String createdBy = CREATED_BY_EDEFAULT;

  /**
   * The cached value of the '{@link #getTitle() <em>Title</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle()
   * @generated
   * @ordered
   */
  protected Title title;

  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected Text text;

  /**
   * The cached value of the '{@link #getTasks() <em>Tasks</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks()
   * @generated
   * @ordered
   */
  protected Tasks tasks;

  /**
   * The cached value of the '{@link #getRewards() <em>Rewards</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRewards()
   * @generated
   * @ordered
   */
  protected Rewards rewards;

  /**
   * The cached value of the '{@link #getData() <em>Data</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData()
   * @generated
   * @ordered
   */
  protected AchievementData data;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AchievementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.ACHIEVEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getComment()
  {
    return comment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComment(String newComment)
  {
    String oldComment = comment;
    comment = newComment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__COMMENT, oldComment, comment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCreator()
  {
    return creator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCreator(String newCreator)
  {
    String oldCreator = creator;
    creator = newCreator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__CREATOR, oldCreator, creator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCreatedBy()
  {
    return createdBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCreatedBy(String newCreatedBy)
  {
    String oldCreatedBy = createdBy;
    createdBy = newCreatedBy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__CREATED_BY, oldCreatedBy, createdBy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Title getTitle()
  {
    return title;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTitle(Title newTitle, NotificationChain msgs)
  {
    Title oldTitle = title;
    title = newTitle;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__TITLE, oldTitle, newTitle);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTitle(Title newTitle)
  {
    if (newTitle != title)
    {
      NotificationChain msgs = null;
      if (title != null)
        msgs = ((InternalEObject)title).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__TITLE, null, msgs);
      if (newTitle != null)
        msgs = ((InternalEObject)newTitle).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__TITLE, null, msgs);
      msgs = basicSetTitle(newTitle, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__TITLE, newTitle, newTitle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Text getText()
  {
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetText(Text newText, NotificationChain msgs)
  {
    Text oldText = text;
    text = newText;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__TEXT, oldText, newText);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setText(Text newText)
  {
    if (newText != text)
    {
      NotificationChain msgs = null;
      if (text != null)
        msgs = ((InternalEObject)text).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__TEXT, null, msgs);
      if (newText != null)
        msgs = ((InternalEObject)newText).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__TEXT, null, msgs);
      msgs = basicSetText(newText, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__TEXT, newText, newText));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tasks getTasks()
  {
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTasks(Tasks newTasks, NotificationChain msgs)
  {
    Tasks oldTasks = tasks;
    tasks = newTasks;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__TASKS, oldTasks, newTasks);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTasks(Tasks newTasks)
  {
    if (newTasks != tasks)
    {
      NotificationChain msgs = null;
      if (tasks != null)
        msgs = ((InternalEObject)tasks).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__TASKS, null, msgs);
      if (newTasks != null)
        msgs = ((InternalEObject)newTasks).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__TASKS, null, msgs);
      msgs = basicSetTasks(newTasks, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__TASKS, newTasks, newTasks));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rewards getRewards()
  {
    return rewards;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRewards(Rewards newRewards, NotificationChain msgs)
  {
    Rewards oldRewards = rewards;
    rewards = newRewards;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__REWARDS, oldRewards, newRewards);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRewards(Rewards newRewards)
  {
    if (newRewards != rewards)
    {
      NotificationChain msgs = null;
      if (rewards != null)
        msgs = ((InternalEObject)rewards).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__REWARDS, null, msgs);
      if (newRewards != null)
        msgs = ((InternalEObject)newRewards).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__REWARDS, null, msgs);
      msgs = basicSetRewards(newRewards, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__REWARDS, newRewards, newRewards));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AchievementData getData()
  {
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetData(AchievementData newData, NotificationChain msgs)
  {
    AchievementData oldData = data;
    data = newData;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__DATA, oldData, newData);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setData(AchievementData newData)
  {
    if (newData != data)
    {
      NotificationChain msgs = null;
      if (data != null)
        msgs = ((InternalEObject)data).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__DATA, null, msgs);
      if (newData != null)
        msgs = ((InternalEObject)newData).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.ACHIEVEMENT__DATA, null, msgs);
      msgs = basicSetData(newData, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT__DATA, newData, newData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT__TITLE:
        return basicSetTitle(null, msgs);
      case DatabasePackage.ACHIEVEMENT__TEXT:
        return basicSetText(null, msgs);
      case DatabasePackage.ACHIEVEMENT__TASKS:
        return basicSetTasks(null, msgs);
      case DatabasePackage.ACHIEVEMENT__REWARDS:
        return basicSetRewards(null, msgs);
      case DatabasePackage.ACHIEVEMENT__DATA:
        return basicSetData(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT__NAME:
        return getName();
      case DatabasePackage.ACHIEVEMENT__COMMENT:
        return getComment();
      case DatabasePackage.ACHIEVEMENT__CREATOR:
        return getCreator();
      case DatabasePackage.ACHIEVEMENT__CREATED_BY:
        return getCreatedBy();
      case DatabasePackage.ACHIEVEMENT__TITLE:
        return getTitle();
      case DatabasePackage.ACHIEVEMENT__TEXT:
        return getText();
      case DatabasePackage.ACHIEVEMENT__TASKS:
        return getTasks();
      case DatabasePackage.ACHIEVEMENT__REWARDS:
        return getRewards();
      case DatabasePackage.ACHIEVEMENT__DATA:
        return getData();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT__NAME:
        setName((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__COMMENT:
        setComment((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__CREATOR:
        setCreator((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__CREATED_BY:
        setCreatedBy((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__TITLE:
        setTitle((Title)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__TEXT:
        setText((Text)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__TASKS:
        setTasks((Tasks)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__REWARDS:
        setRewards((Rewards)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT__DATA:
        setData((AchievementData)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT__COMMENT:
        setComment(COMMENT_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT__CREATOR:
        setCreator(CREATOR_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT__CREATED_BY:
        setCreatedBy(CREATED_BY_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT__TITLE:
        setTitle((Title)null);
        return;
      case DatabasePackage.ACHIEVEMENT__TEXT:
        setText((Text)null);
        return;
      case DatabasePackage.ACHIEVEMENT__TASKS:
        setTasks((Tasks)null);
        return;
      case DatabasePackage.ACHIEVEMENT__REWARDS:
        setRewards((Rewards)null);
        return;
      case DatabasePackage.ACHIEVEMENT__DATA:
        setData((AchievementData)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DatabasePackage.ACHIEVEMENT__COMMENT:
        return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);
      case DatabasePackage.ACHIEVEMENT__CREATOR:
        return CREATOR_EDEFAULT == null ? creator != null : !CREATOR_EDEFAULT.equals(creator);
      case DatabasePackage.ACHIEVEMENT__CREATED_BY:
        return CREATED_BY_EDEFAULT == null ? createdBy != null : !CREATED_BY_EDEFAULT.equals(createdBy);
      case DatabasePackage.ACHIEVEMENT__TITLE:
        return title != null;
      case DatabasePackage.ACHIEVEMENT__TEXT:
        return text != null;
      case DatabasePackage.ACHIEVEMENT__TASKS:
        return tasks != null;
      case DatabasePackage.ACHIEVEMENT__REWARDS:
        return rewards != null;
      case DatabasePackage.ACHIEVEMENT__DATA:
        return data != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", comment: ");
    result.append(comment);
    result.append(", creator: ");
    result.append(creator);
    result.append(", createdBy: ");
    result.append(createdBy);
    result.append(')');
    return result.toString();
  }

} //AchievementImpl
