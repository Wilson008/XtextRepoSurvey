/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.tvtower.db.database.Database;
import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.Definition;
import org.tvtower.db.database.ExportOptions;
import org.tvtower.db.database.PersonLocalization;
import org.tvtower.db.database.UnnamedProperty;
import org.tvtower.db.database.Version;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Database</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.DatabaseImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.DatabaseImpl#getPersonLocalization <em>Person Localization</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.DatabaseImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.DatabaseImpl#getDefinitions <em>Definitions</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.DatabaseImpl#getExportOptions <em>Export Options</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatabaseImpl extends MinimalEObjectImpl.Container implements Database
{
  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<UnnamedProperty> properties;

  /**
   * The cached value of the '{@link #getPersonLocalization() <em>Person Localization</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPersonLocalization()
   * @generated
   * @ordered
   */
  protected PersonLocalization personLocalization;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected Version version;

  /**
   * The cached value of the '{@link #getDefinitions() <em>Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinitions()
   * @generated
   * @ordered
   */
  protected EList<Definition> definitions;

  /**
   * The cached value of the '{@link #getExportOptions() <em>Export Options</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExportOptions()
   * @generated
   * @ordered
   */
  protected ExportOptions exportOptions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.DATABASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UnnamedProperty> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<UnnamedProperty>(UnnamedProperty.class, this, DatabasePackage.DATABASE__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PersonLocalization getPersonLocalization()
  {
    return personLocalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPersonLocalization(PersonLocalization newPersonLocalization, NotificationChain msgs)
  {
    PersonLocalization oldPersonLocalization = personLocalization;
    personLocalization = newPersonLocalization;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.DATABASE__PERSON_LOCALIZATION, oldPersonLocalization, newPersonLocalization);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPersonLocalization(PersonLocalization newPersonLocalization)
  {
    if (newPersonLocalization != personLocalization)
    {
      NotificationChain msgs = null;
      if (personLocalization != null)
        msgs = ((InternalEObject)personLocalization).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.DATABASE__PERSON_LOCALIZATION, null, msgs);
      if (newPersonLocalization != null)
        msgs = ((InternalEObject)newPersonLocalization).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.DATABASE__PERSON_LOCALIZATION, null, msgs);
      msgs = basicSetPersonLocalization(newPersonLocalization, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.DATABASE__PERSON_LOCALIZATION, newPersonLocalization, newPersonLocalization));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Version getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVersion(Version newVersion, NotificationChain msgs)
  {
    Version oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.DATABASE__VERSION, oldVersion, newVersion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(Version newVersion)
  {
    if (newVersion != version)
    {
      NotificationChain msgs = null;
      if (version != null)
        msgs = ((InternalEObject)version).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.DATABASE__VERSION, null, msgs);
      if (newVersion != null)
        msgs = ((InternalEObject)newVersion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.DATABASE__VERSION, null, msgs);
      msgs = basicSetVersion(newVersion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.DATABASE__VERSION, newVersion, newVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Definition> getDefinitions()
  {
    if (definitions == null)
    {
      definitions = new EObjectContainmentEList<Definition>(Definition.class, this, DatabasePackage.DATABASE__DEFINITIONS);
    }
    return definitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExportOptions getExportOptions()
  {
    return exportOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExportOptions(ExportOptions newExportOptions, NotificationChain msgs)
  {
    ExportOptions oldExportOptions = exportOptions;
    exportOptions = newExportOptions;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.DATABASE__EXPORT_OPTIONS, oldExportOptions, newExportOptions);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExportOptions(ExportOptions newExportOptions)
  {
    if (newExportOptions != exportOptions)
    {
      NotificationChain msgs = null;
      if (exportOptions != null)
        msgs = ((InternalEObject)exportOptions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.DATABASE__EXPORT_OPTIONS, null, msgs);
      if (newExportOptions != null)
        msgs = ((InternalEObject)newExportOptions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.DATABASE__EXPORT_OPTIONS, null, msgs);
      msgs = basicSetExportOptions(newExportOptions, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.DATABASE__EXPORT_OPTIONS, newExportOptions, newExportOptions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DatabasePackage.DATABASE__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
      case DatabasePackage.DATABASE__PERSON_LOCALIZATION:
        return basicSetPersonLocalization(null, msgs);
      case DatabasePackage.DATABASE__VERSION:
        return basicSetVersion(null, msgs);
      case DatabasePackage.DATABASE__DEFINITIONS:
        return ((InternalEList<?>)getDefinitions()).basicRemove(otherEnd, msgs);
      case DatabasePackage.DATABASE__EXPORT_OPTIONS:
        return basicSetExportOptions(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.DATABASE__PROPERTIES:
        return getProperties();
      case DatabasePackage.DATABASE__PERSON_LOCALIZATION:
        return getPersonLocalization();
      case DatabasePackage.DATABASE__VERSION:
        return getVersion();
      case DatabasePackage.DATABASE__DEFINITIONS:
        return getDefinitions();
      case DatabasePackage.DATABASE__EXPORT_OPTIONS:
        return getExportOptions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.DATABASE__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends UnnamedProperty>)newValue);
        return;
      case DatabasePackage.DATABASE__PERSON_LOCALIZATION:
        setPersonLocalization((PersonLocalization)newValue);
        return;
      case DatabasePackage.DATABASE__VERSION:
        setVersion((Version)newValue);
        return;
      case DatabasePackage.DATABASE__DEFINITIONS:
        getDefinitions().clear();
        getDefinitions().addAll((Collection<? extends Definition>)newValue);
        return;
      case DatabasePackage.DATABASE__EXPORT_OPTIONS:
        setExportOptions((ExportOptions)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.DATABASE__PROPERTIES:
        getProperties().clear();
        return;
      case DatabasePackage.DATABASE__PERSON_LOCALIZATION:
        setPersonLocalization((PersonLocalization)null);
        return;
      case DatabasePackage.DATABASE__VERSION:
        setVersion((Version)null);
        return;
      case DatabasePackage.DATABASE__DEFINITIONS:
        getDefinitions().clear();
        return;
      case DatabasePackage.DATABASE__EXPORT_OPTIONS:
        setExportOptions((ExportOptions)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.DATABASE__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case DatabasePackage.DATABASE__PERSON_LOCALIZATION:
        return personLocalization != null;
      case DatabasePackage.DATABASE__VERSION:
        return version != null;
      case DatabasePackage.DATABASE__DEFINITIONS:
        return definitions != null && !definitions.isEmpty();
      case DatabasePackage.DATABASE__EXPORT_OPTIONS:
        return exportOptions != null;
    }
    return super.eIsSet(featureID);
  }

} //DatabaseImpl
