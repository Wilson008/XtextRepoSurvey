/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.tvtower.db.database.Blocks;
import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.Episodes;
import org.tvtower.db.database.Jobs;
import org.tvtower.db.database.Outcome;
import org.tvtower.db.database.Potential;
import org.tvtower.db.database.Price;
import org.tvtower.db.database.ProductionTime;
import org.tvtower.db.database.ProgrammeGroups;
import org.tvtower.db.database.Review;
import org.tvtower.db.database.ScriptChildren;
import org.tvtower.db.database.ScriptData;
import org.tvtower.db.database.ScriptGenres;
import org.tvtower.db.database.ScriptTemplate;
import org.tvtower.db.database.Speed;
import org.tvtower.db.database.StudioSize;
import org.tvtower.db.database.TemplateProgrammeModifiers;
import org.tvtower.db.database.TitleOriginal;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Script Template</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getProduct <em>Product</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getLicenceType <em>Licence Type</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getTitle_original <em>Title original</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getGenres <em>Genres</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getJobs <em>Jobs</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getData <em>Data</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getGroups <em>Groups</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getEpisodes <em>Episodes</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getStudioSize <em>Studio Size</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getBlocks <em>Blocks</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getPrice <em>Price</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getPotential <em>Potential</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getOutcome <em>Outcome</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getReview <em>Review</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getSpeed <em>Speed</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getProductionTime <em>Production Time</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getChildren <em>Children</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.ScriptTemplateImpl#getProgDataModifiers <em>Prog Data Modifiers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ScriptTemplateImpl extends MayContainVariablesImpl implements ScriptTemplate
{
  /**
   * The default value of the '{@link #getProduct() <em>Product</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProduct()
   * @generated
   * @ordered
   */
  protected static final String PRODUCT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProduct() <em>Product</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProduct()
   * @generated
   * @ordered
   */
  protected String product = PRODUCT_EDEFAULT;

  /**
   * The default value of the '{@link #getLicenceType() <em>Licence Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLicenceType()
   * @generated
   * @ordered
   */
  protected static final String LICENCE_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLicenceType() <em>Licence Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLicenceType()
   * @generated
   * @ordered
   */
  protected String licenceType = LICENCE_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected static final String INDEX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected String index = INDEX_EDEFAULT;

  /**
   * The cached value of the '{@link #getTitle_original() <em>Title original</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTitle_original()
   * @generated
   * @ordered
   */
  protected TitleOriginal title_original;

  /**
   * The cached value of the '{@link #getGenres() <em>Genres</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenres()
   * @generated
   * @ordered
   */
  protected ScriptGenres genres;

  /**
   * The cached value of the '{@link #getJobs() <em>Jobs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJobs()
   * @generated
   * @ordered
   */
  protected Jobs jobs;

  /**
   * The cached value of the '{@link #getData() <em>Data</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getData()
   * @generated
   * @ordered
   */
  protected ScriptData data;

  /**
   * The cached value of the '{@link #getGroups() <em>Groups</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroups()
   * @generated
   * @ordered
   */
  protected ProgrammeGroups groups;

  /**
   * The cached value of the '{@link #getEpisodes() <em>Episodes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEpisodes()
   * @generated
   * @ordered
   */
  protected Episodes episodes;

  /**
   * The cached value of the '{@link #getStudioSize() <em>Studio Size</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStudioSize()
   * @generated
   * @ordered
   */
  protected StudioSize studioSize;

  /**
   * The cached value of the '{@link #getBlocks() <em>Blocks</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlocks()
   * @generated
   * @ordered
   */
  protected Blocks blocks;

  /**
   * The cached value of the '{@link #getPrice() <em>Price</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrice()
   * @generated
   * @ordered
   */
  protected Price price;

  /**
   * The cached value of the '{@link #getPotential() <em>Potential</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPotential()
   * @generated
   * @ordered
   */
  protected Potential potential;

  /**
   * The cached value of the '{@link #getOutcome() <em>Outcome</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutcome()
   * @generated
   * @ordered
   */
  protected Outcome outcome;

  /**
   * The cached value of the '{@link #getReview() <em>Review</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReview()
   * @generated
   * @ordered
   */
  protected Review review;

  /**
   * The cached value of the '{@link #getSpeed() <em>Speed</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpeed()
   * @generated
   * @ordered
   */
  protected Speed speed;

  /**
   * The cached value of the '{@link #getProductionTime() <em>Production Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProductionTime()
   * @generated
   * @ordered
   */
  protected ProductionTime productionTime;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected ScriptChildren children;

  /**
   * The cached value of the '{@link #getProgDataModifiers() <em>Prog Data Modifiers</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgDataModifiers()
   * @generated
   * @ordered
   */
  protected TemplateProgrammeModifiers progDataModifiers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScriptTemplateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.SCRIPT_TEMPLATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProduct()
  {
    return product;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProduct(String newProduct)
  {
    String oldProduct = product;
    product = newProduct;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PRODUCT, oldProduct, product));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLicenceType()
  {
    return licenceType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLicenceType(String newLicenceType)
  {
    String oldLicenceType = licenceType;
    licenceType = newLicenceType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__LICENCE_TYPE, oldLicenceType, licenceType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIndex(String newIndex)
  {
    String oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__INDEX, oldIndex, index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TitleOriginal getTitle_original()
  {
    return title_original;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTitle_original(TitleOriginal newTitle_original, NotificationChain msgs)
  {
    TitleOriginal oldTitle_original = title_original;
    title_original = newTitle_original;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL, oldTitle_original, newTitle_original);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTitle_original(TitleOriginal newTitle_original)
  {
    if (newTitle_original != title_original)
    {
      NotificationChain msgs = null;
      if (title_original != null)
        msgs = ((InternalEObject)title_original).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL, null, msgs);
      if (newTitle_original != null)
        msgs = ((InternalEObject)newTitle_original).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL, null, msgs);
      msgs = basicSetTitle_original(newTitle_original, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL, newTitle_original, newTitle_original));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScriptGenres getGenres()
  {
    return genres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGenres(ScriptGenres newGenres, NotificationChain msgs)
  {
    ScriptGenres oldGenres = genres;
    genres = newGenres;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__GENRES, oldGenres, newGenres);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenres(ScriptGenres newGenres)
  {
    if (newGenres != genres)
    {
      NotificationChain msgs = null;
      if (genres != null)
        msgs = ((InternalEObject)genres).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__GENRES, null, msgs);
      if (newGenres != null)
        msgs = ((InternalEObject)newGenres).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__GENRES, null, msgs);
      msgs = basicSetGenres(newGenres, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__GENRES, newGenres, newGenres));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Jobs getJobs()
  {
    return jobs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJobs(Jobs newJobs, NotificationChain msgs)
  {
    Jobs oldJobs = jobs;
    jobs = newJobs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__JOBS, oldJobs, newJobs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJobs(Jobs newJobs)
  {
    if (newJobs != jobs)
    {
      NotificationChain msgs = null;
      if (jobs != null)
        msgs = ((InternalEObject)jobs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__JOBS, null, msgs);
      if (newJobs != null)
        msgs = ((InternalEObject)newJobs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__JOBS, null, msgs);
      msgs = basicSetJobs(newJobs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__JOBS, newJobs, newJobs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScriptData getData()
  {
    return data;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetData(ScriptData newData, NotificationChain msgs)
  {
    ScriptData oldData = data;
    data = newData;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__DATA, oldData, newData);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setData(ScriptData newData)
  {
    if (newData != data)
    {
      NotificationChain msgs = null;
      if (data != null)
        msgs = ((InternalEObject)data).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__DATA, null, msgs);
      if (newData != null)
        msgs = ((InternalEObject)newData).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__DATA, null, msgs);
      msgs = basicSetData(newData, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__DATA, newData, newData));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProgrammeGroups getGroups()
  {
    return groups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGroups(ProgrammeGroups newGroups, NotificationChain msgs)
  {
    ProgrammeGroups oldGroups = groups;
    groups = newGroups;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__GROUPS, oldGroups, newGroups);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroups(ProgrammeGroups newGroups)
  {
    if (newGroups != groups)
    {
      NotificationChain msgs = null;
      if (groups != null)
        msgs = ((InternalEObject)groups).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__GROUPS, null, msgs);
      if (newGroups != null)
        msgs = ((InternalEObject)newGroups).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__GROUPS, null, msgs);
      msgs = basicSetGroups(newGroups, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__GROUPS, newGroups, newGroups));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Episodes getEpisodes()
  {
    return episodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEpisodes(Episodes newEpisodes, NotificationChain msgs)
  {
    Episodes oldEpisodes = episodes;
    episodes = newEpisodes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__EPISODES, oldEpisodes, newEpisodes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEpisodes(Episodes newEpisodes)
  {
    if (newEpisodes != episodes)
    {
      NotificationChain msgs = null;
      if (episodes != null)
        msgs = ((InternalEObject)episodes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__EPISODES, null, msgs);
      if (newEpisodes != null)
        msgs = ((InternalEObject)newEpisodes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__EPISODES, null, msgs);
      msgs = basicSetEpisodes(newEpisodes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__EPISODES, newEpisodes, newEpisodes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StudioSize getStudioSize()
  {
    return studioSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStudioSize(StudioSize newStudioSize, NotificationChain msgs)
  {
    StudioSize oldStudioSize = studioSize;
    studioSize = newStudioSize;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE, oldStudioSize, newStudioSize);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStudioSize(StudioSize newStudioSize)
  {
    if (newStudioSize != studioSize)
    {
      NotificationChain msgs = null;
      if (studioSize != null)
        msgs = ((InternalEObject)studioSize).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE, null, msgs);
      if (newStudioSize != null)
        msgs = ((InternalEObject)newStudioSize).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE, null, msgs);
      msgs = basicSetStudioSize(newStudioSize, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE, newStudioSize, newStudioSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Blocks getBlocks()
  {
    return blocks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlocks(Blocks newBlocks, NotificationChain msgs)
  {
    Blocks oldBlocks = blocks;
    blocks = newBlocks;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__BLOCKS, oldBlocks, newBlocks);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBlocks(Blocks newBlocks)
  {
    if (newBlocks != blocks)
    {
      NotificationChain msgs = null;
      if (blocks != null)
        msgs = ((InternalEObject)blocks).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__BLOCKS, null, msgs);
      if (newBlocks != null)
        msgs = ((InternalEObject)newBlocks).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__BLOCKS, null, msgs);
      msgs = basicSetBlocks(newBlocks, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__BLOCKS, newBlocks, newBlocks));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Price getPrice()
  {
    return price;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrice(Price newPrice, NotificationChain msgs)
  {
    Price oldPrice = price;
    price = newPrice;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PRICE, oldPrice, newPrice);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrice(Price newPrice)
  {
    if (newPrice != price)
    {
      NotificationChain msgs = null;
      if (price != null)
        msgs = ((InternalEObject)price).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__PRICE, null, msgs);
      if (newPrice != null)
        msgs = ((InternalEObject)newPrice).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__PRICE, null, msgs);
      msgs = basicSetPrice(newPrice, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PRICE, newPrice, newPrice));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Potential getPotential()
  {
    return potential;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPotential(Potential newPotential, NotificationChain msgs)
  {
    Potential oldPotential = potential;
    potential = newPotential;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL, oldPotential, newPotential);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPotential(Potential newPotential)
  {
    if (newPotential != potential)
    {
      NotificationChain msgs = null;
      if (potential != null)
        msgs = ((InternalEObject)potential).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL, null, msgs);
      if (newPotential != null)
        msgs = ((InternalEObject)newPotential).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL, null, msgs);
      msgs = basicSetPotential(newPotential, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL, newPotential, newPotential));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Outcome getOutcome()
  {
    return outcome;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOutcome(Outcome newOutcome, NotificationChain msgs)
  {
    Outcome oldOutcome = outcome;
    outcome = newOutcome;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__OUTCOME, oldOutcome, newOutcome);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOutcome(Outcome newOutcome)
  {
    if (newOutcome != outcome)
    {
      NotificationChain msgs = null;
      if (outcome != null)
        msgs = ((InternalEObject)outcome).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__OUTCOME, null, msgs);
      if (newOutcome != null)
        msgs = ((InternalEObject)newOutcome).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__OUTCOME, null, msgs);
      msgs = basicSetOutcome(newOutcome, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__OUTCOME, newOutcome, newOutcome));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Review getReview()
  {
    return review;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReview(Review newReview, NotificationChain msgs)
  {
    Review oldReview = review;
    review = newReview;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__REVIEW, oldReview, newReview);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReview(Review newReview)
  {
    if (newReview != review)
    {
      NotificationChain msgs = null;
      if (review != null)
        msgs = ((InternalEObject)review).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__REVIEW, null, msgs);
      if (newReview != null)
        msgs = ((InternalEObject)newReview).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__REVIEW, null, msgs);
      msgs = basicSetReview(newReview, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__REVIEW, newReview, newReview));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Speed getSpeed()
  {
    return speed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSpeed(Speed newSpeed, NotificationChain msgs)
  {
    Speed oldSpeed = speed;
    speed = newSpeed;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__SPEED, oldSpeed, newSpeed);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpeed(Speed newSpeed)
  {
    if (newSpeed != speed)
    {
      NotificationChain msgs = null;
      if (speed != null)
        msgs = ((InternalEObject)speed).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__SPEED, null, msgs);
      if (newSpeed != null)
        msgs = ((InternalEObject)newSpeed).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__SPEED, null, msgs);
      msgs = basicSetSpeed(newSpeed, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__SPEED, newSpeed, newSpeed));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProductionTime getProductionTime()
  {
    return productionTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProductionTime(ProductionTime newProductionTime, NotificationChain msgs)
  {
    ProductionTime oldProductionTime = productionTime;
    productionTime = newProductionTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME, oldProductionTime, newProductionTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProductionTime(ProductionTime newProductionTime)
  {
    if (newProductionTime != productionTime)
    {
      NotificationChain msgs = null;
      if (productionTime != null)
        msgs = ((InternalEObject)productionTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME, null, msgs);
      if (newProductionTime != null)
        msgs = ((InternalEObject)newProductionTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME, null, msgs);
      msgs = basicSetProductionTime(newProductionTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME, newProductionTime, newProductionTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScriptChildren getChildren()
  {
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChildren(ScriptChildren newChildren, NotificationChain msgs)
  {
    ScriptChildren oldChildren = children;
    children = newChildren;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__CHILDREN, oldChildren, newChildren);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChildren(ScriptChildren newChildren)
  {
    if (newChildren != children)
    {
      NotificationChain msgs = null;
      if (children != null)
        msgs = ((InternalEObject)children).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__CHILDREN, null, msgs);
      if (newChildren != null)
        msgs = ((InternalEObject)newChildren).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__CHILDREN, null, msgs);
      msgs = basicSetChildren(newChildren, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__CHILDREN, newChildren, newChildren));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TemplateProgrammeModifiers getProgDataModifiers()
  {
    return progDataModifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProgDataModifiers(TemplateProgrammeModifiers newProgDataModifiers, NotificationChain msgs)
  {
    TemplateProgrammeModifiers oldProgDataModifiers = progDataModifiers;
    progDataModifiers = newProgDataModifiers;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS, oldProgDataModifiers, newProgDataModifiers);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProgDataModifiers(TemplateProgrammeModifiers newProgDataModifiers)
  {
    if (newProgDataModifiers != progDataModifiers)
    {
      NotificationChain msgs = null;
      if (progDataModifiers != null)
        msgs = ((InternalEObject)progDataModifiers).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS, null, msgs);
      if (newProgDataModifiers != null)
        msgs = ((InternalEObject)newProgDataModifiers).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS, null, msgs);
      msgs = basicSetProgDataModifiers(newProgDataModifiers, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS, newProgDataModifiers, newProgDataModifiers));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL:
        return basicSetTitle_original(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__GENRES:
        return basicSetGenres(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__JOBS:
        return basicSetJobs(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__DATA:
        return basicSetData(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__GROUPS:
        return basicSetGroups(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__EPISODES:
        return basicSetEpisodes(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE:
        return basicSetStudioSize(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__BLOCKS:
        return basicSetBlocks(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__PRICE:
        return basicSetPrice(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL:
        return basicSetPotential(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__OUTCOME:
        return basicSetOutcome(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__REVIEW:
        return basicSetReview(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__SPEED:
        return basicSetSpeed(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME:
        return basicSetProductionTime(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__CHILDREN:
        return basicSetChildren(null, msgs);
      case DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS:
        return basicSetProgDataModifiers(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCT:
        return getProduct();
      case DatabasePackage.SCRIPT_TEMPLATE__LICENCE_TYPE:
        return getLicenceType();
      case DatabasePackage.SCRIPT_TEMPLATE__INDEX:
        return getIndex();
      case DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL:
        return getTitle_original();
      case DatabasePackage.SCRIPT_TEMPLATE__GENRES:
        return getGenres();
      case DatabasePackage.SCRIPT_TEMPLATE__JOBS:
        return getJobs();
      case DatabasePackage.SCRIPT_TEMPLATE__DATA:
        return getData();
      case DatabasePackage.SCRIPT_TEMPLATE__GROUPS:
        return getGroups();
      case DatabasePackage.SCRIPT_TEMPLATE__EPISODES:
        return getEpisodes();
      case DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE:
        return getStudioSize();
      case DatabasePackage.SCRIPT_TEMPLATE__BLOCKS:
        return getBlocks();
      case DatabasePackage.SCRIPT_TEMPLATE__PRICE:
        return getPrice();
      case DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL:
        return getPotential();
      case DatabasePackage.SCRIPT_TEMPLATE__OUTCOME:
        return getOutcome();
      case DatabasePackage.SCRIPT_TEMPLATE__REVIEW:
        return getReview();
      case DatabasePackage.SCRIPT_TEMPLATE__SPEED:
        return getSpeed();
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME:
        return getProductionTime();
      case DatabasePackage.SCRIPT_TEMPLATE__CHILDREN:
        return getChildren();
      case DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS:
        return getProgDataModifiers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCT:
        setProduct((String)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__LICENCE_TYPE:
        setLicenceType((String)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__INDEX:
        setIndex((String)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL:
        setTitle_original((TitleOriginal)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__GENRES:
        setGenres((ScriptGenres)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__JOBS:
        setJobs((Jobs)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__DATA:
        setData((ScriptData)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__GROUPS:
        setGroups((ProgrammeGroups)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__EPISODES:
        setEpisodes((Episodes)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE:
        setStudioSize((StudioSize)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__BLOCKS:
        setBlocks((Blocks)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__PRICE:
        setPrice((Price)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL:
        setPotential((Potential)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__OUTCOME:
        setOutcome((Outcome)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__REVIEW:
        setReview((Review)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__SPEED:
        setSpeed((Speed)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME:
        setProductionTime((ProductionTime)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__CHILDREN:
        setChildren((ScriptChildren)newValue);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS:
        setProgDataModifiers((TemplateProgrammeModifiers)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCT:
        setProduct(PRODUCT_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__LICENCE_TYPE:
        setLicenceType(LICENCE_TYPE_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__INDEX:
        setIndex(INDEX_EDEFAULT);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL:
        setTitle_original((TitleOriginal)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__GENRES:
        setGenres((ScriptGenres)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__JOBS:
        setJobs((Jobs)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__DATA:
        setData((ScriptData)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__GROUPS:
        setGroups((ProgrammeGroups)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__EPISODES:
        setEpisodes((Episodes)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE:
        setStudioSize((StudioSize)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__BLOCKS:
        setBlocks((Blocks)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__PRICE:
        setPrice((Price)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL:
        setPotential((Potential)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__OUTCOME:
        setOutcome((Outcome)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__REVIEW:
        setReview((Review)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__SPEED:
        setSpeed((Speed)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME:
        setProductionTime((ProductionTime)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__CHILDREN:
        setChildren((ScriptChildren)null);
        return;
      case DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS:
        setProgDataModifiers((TemplateProgrammeModifiers)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCT:
        return PRODUCT_EDEFAULT == null ? product != null : !PRODUCT_EDEFAULT.equals(product);
      case DatabasePackage.SCRIPT_TEMPLATE__LICENCE_TYPE:
        return LICENCE_TYPE_EDEFAULT == null ? licenceType != null : !LICENCE_TYPE_EDEFAULT.equals(licenceType);
      case DatabasePackage.SCRIPT_TEMPLATE__INDEX:
        return INDEX_EDEFAULT == null ? index != null : !INDEX_EDEFAULT.equals(index);
      case DatabasePackage.SCRIPT_TEMPLATE__TITLE_ORIGINAL:
        return title_original != null;
      case DatabasePackage.SCRIPT_TEMPLATE__GENRES:
        return genres != null;
      case DatabasePackage.SCRIPT_TEMPLATE__JOBS:
        return jobs != null;
      case DatabasePackage.SCRIPT_TEMPLATE__DATA:
        return data != null;
      case DatabasePackage.SCRIPT_TEMPLATE__GROUPS:
        return groups != null;
      case DatabasePackage.SCRIPT_TEMPLATE__EPISODES:
        return episodes != null;
      case DatabasePackage.SCRIPT_TEMPLATE__STUDIO_SIZE:
        return studioSize != null;
      case DatabasePackage.SCRIPT_TEMPLATE__BLOCKS:
        return blocks != null;
      case DatabasePackage.SCRIPT_TEMPLATE__PRICE:
        return price != null;
      case DatabasePackage.SCRIPT_TEMPLATE__POTENTIAL:
        return potential != null;
      case DatabasePackage.SCRIPT_TEMPLATE__OUTCOME:
        return outcome != null;
      case DatabasePackage.SCRIPT_TEMPLATE__REVIEW:
        return review != null;
      case DatabasePackage.SCRIPT_TEMPLATE__SPEED:
        return speed != null;
      case DatabasePackage.SCRIPT_TEMPLATE__PRODUCTION_TIME:
        return productionTime != null;
      case DatabasePackage.SCRIPT_TEMPLATE__CHILDREN:
        return children != null;
      case DatabasePackage.SCRIPT_TEMPLATE__PROG_DATA_MODIFIERS:
        return progDataModifiers != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (product: ");
    result.append(product);
    result.append(", licenceType: ");
    result.append(licenceType);
    result.append(", index: ");
    result.append(index);
    result.append(')');
    return result.toString();
  }

} //ScriptTemplateImpl
