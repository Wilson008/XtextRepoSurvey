/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.AchievementData;
import org.tvtower.db.database.DatabasePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Achievement Data</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.AchievementDataImpl#getFlags <em>Flags</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementDataImpl#getGroup <em>Group</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementDataImpl#getCategory <em>Category</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementDataImpl#getSpriteFinished <em>Sprite Finished</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementDataImpl#getSpriteUnfinished <em>Sprite Unfinished</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.AchievementDataImpl#getIndex <em>Index</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AchievementDataImpl extends MinimalEObjectImpl.Container implements AchievementData
{
  /**
   * The default value of the '{@link #getFlags() <em>Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlags()
   * @generated
   * @ordered
   */
  protected static final String FLAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFlags() <em>Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFlags()
   * @generated
   * @ordered
   */
  protected String flags = FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getGroup() <em>Group</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected static final String GROUP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGroup() <em>Group</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected String group = GROUP_EDEFAULT;

  /**
   * The default value of the '{@link #getCategory() <em>Category</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCategory()
   * @generated
   * @ordered
   */
  protected static final String CATEGORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCategory() <em>Category</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCategory()
   * @generated
   * @ordered
   */
  protected String category = CATEGORY_EDEFAULT;

  /**
   * The default value of the '{@link #getSpriteFinished() <em>Sprite Finished</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpriteFinished()
   * @generated
   * @ordered
   */
  protected static final String SPRITE_FINISHED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpriteFinished() <em>Sprite Finished</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpriteFinished()
   * @generated
   * @ordered
   */
  protected String spriteFinished = SPRITE_FINISHED_EDEFAULT;

  /**
   * The default value of the '{@link #getSpriteUnfinished() <em>Sprite Unfinished</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpriteUnfinished()
   * @generated
   * @ordered
   */
  protected static final String SPRITE_UNFINISHED_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpriteUnfinished() <em>Sprite Unfinished</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpriteUnfinished()
   * @generated
   * @ordered
   */
  protected String spriteUnfinished = SPRITE_UNFINISHED_EDEFAULT;

  /**
   * The default value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected static final String INDEX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected String index = INDEX_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AchievementDataImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.ACHIEVEMENT_DATA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFlags()
  {
    return flags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFlags(String newFlags)
  {
    String oldFlags = flags;
    flags = newFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT_DATA__FLAGS, oldFlags, flags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGroup()
  {
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroup(String newGroup)
  {
    String oldGroup = group;
    group = newGroup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT_DATA__GROUP, oldGroup, group));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCategory()
  {
    return category;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCategory(String newCategory)
  {
    String oldCategory = category;
    category = newCategory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT_DATA__CATEGORY, oldCategory, category));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSpriteFinished()
  {
    return spriteFinished;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpriteFinished(String newSpriteFinished)
  {
    String oldSpriteFinished = spriteFinished;
    spriteFinished = newSpriteFinished;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT_DATA__SPRITE_FINISHED, oldSpriteFinished, spriteFinished));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSpriteUnfinished()
  {
    return spriteUnfinished;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpriteUnfinished(String newSpriteUnfinished)
  {
    String oldSpriteUnfinished = spriteUnfinished;
    spriteUnfinished = newSpriteUnfinished;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT_DATA__SPRITE_UNFINISHED, oldSpriteUnfinished, spriteUnfinished));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIndex(String newIndex)
  {
    String oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.ACHIEVEMENT_DATA__INDEX, oldIndex, index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT_DATA__FLAGS:
        return getFlags();
      case DatabasePackage.ACHIEVEMENT_DATA__GROUP:
        return getGroup();
      case DatabasePackage.ACHIEVEMENT_DATA__CATEGORY:
        return getCategory();
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_FINISHED:
        return getSpriteFinished();
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_UNFINISHED:
        return getSpriteUnfinished();
      case DatabasePackage.ACHIEVEMENT_DATA__INDEX:
        return getIndex();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT_DATA__FLAGS:
        setFlags((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__GROUP:
        setGroup((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__CATEGORY:
        setCategory((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_FINISHED:
        setSpriteFinished((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_UNFINISHED:
        setSpriteUnfinished((String)newValue);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__INDEX:
        setIndex((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT_DATA__FLAGS:
        setFlags(FLAGS_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__GROUP:
        setGroup(GROUP_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__CATEGORY:
        setCategory(CATEGORY_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_FINISHED:
        setSpriteFinished(SPRITE_FINISHED_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_UNFINISHED:
        setSpriteUnfinished(SPRITE_UNFINISHED_EDEFAULT);
        return;
      case DatabasePackage.ACHIEVEMENT_DATA__INDEX:
        setIndex(INDEX_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.ACHIEVEMENT_DATA__FLAGS:
        return FLAGS_EDEFAULT == null ? flags != null : !FLAGS_EDEFAULT.equals(flags);
      case DatabasePackage.ACHIEVEMENT_DATA__GROUP:
        return GROUP_EDEFAULT == null ? group != null : !GROUP_EDEFAULT.equals(group);
      case DatabasePackage.ACHIEVEMENT_DATA__CATEGORY:
        return CATEGORY_EDEFAULT == null ? category != null : !CATEGORY_EDEFAULT.equals(category);
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_FINISHED:
        return SPRITE_FINISHED_EDEFAULT == null ? spriteFinished != null : !SPRITE_FINISHED_EDEFAULT.equals(spriteFinished);
      case DatabasePackage.ACHIEVEMENT_DATA__SPRITE_UNFINISHED:
        return SPRITE_UNFINISHED_EDEFAULT == null ? spriteUnfinished != null : !SPRITE_UNFINISHED_EDEFAULT.equals(spriteUnfinished);
      case DatabasePackage.ACHIEVEMENT_DATA__INDEX:
        return INDEX_EDEFAULT == null ? index != null : !INDEX_EDEFAULT.equals(index);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (flags: ");
    result.append(flags);
    result.append(", group: ");
    result.append(group);
    result.append(", category: ");
    result.append(category);
    result.append(", spriteFinished: ");
    result.append(spriteFinished);
    result.append(", spriteUnfinished: ");
    result.append(spriteUnfinished);
    result.append(", index: ");
    result.append(index);
    result.append(')');
    return result.toString();
  }

} //AchievementDataImpl
