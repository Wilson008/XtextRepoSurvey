/**
 * generated by Xtext 2.35.0
 */
package org.tvtower.db.database.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.tvtower.db.database.DatabasePackage;
import org.tvtower.db.database.LanguageString;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Language String</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.tvtower.db.database.impl.LanguageStringImpl#getLangage <em>Langage</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.LanguageStringImpl#getText <em>Text</em>}</li>
 *   <li>{@link org.tvtower.db.database.impl.LanguageStringImpl#getLangage2 <em>Langage2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LanguageStringImpl extends MinimalEObjectImpl.Container implements LanguageString
{
  /**
   * The default value of the '{@link #getLangage() <em>Langage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLangage()
   * @generated
   * @ordered
   */
  protected static final String LANGAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLangage() <em>Langage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLangage()
   * @generated
   * @ordered
   */
  protected String langage = LANGAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getText() <em>Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected static final String TEXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected String text = TEXT_EDEFAULT;

  /**
   * The default value of the '{@link #getLangage2() <em>Langage2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLangage2()
   * @generated
   * @ordered
   */
  protected static final String LANGAGE2_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLangage2() <em>Langage2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLangage2()
   * @generated
   * @ordered
   */
  protected String langage2 = LANGAGE2_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LanguageStringImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DatabasePackage.Literals.LANGUAGE_STRING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLangage()
  {
    return langage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLangage(String newLangage)
  {
    String oldLangage = langage;
    langage = newLangage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.LANGUAGE_STRING__LANGAGE, oldLangage, langage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getText()
  {
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setText(String newText)
  {
    String oldText = text;
    text = newText;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.LANGUAGE_STRING__TEXT, oldText, text));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLangage2()
  {
    return langage2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLangage2(String newLangage2)
  {
    String oldLangage2 = langage2;
    langage2 = newLangage2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DatabasePackage.LANGUAGE_STRING__LANGAGE2, oldLangage2, langage2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DatabasePackage.LANGUAGE_STRING__LANGAGE:
        return getLangage();
      case DatabasePackage.LANGUAGE_STRING__TEXT:
        return getText();
      case DatabasePackage.LANGUAGE_STRING__LANGAGE2:
        return getLangage2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DatabasePackage.LANGUAGE_STRING__LANGAGE:
        setLangage((String)newValue);
        return;
      case DatabasePackage.LANGUAGE_STRING__TEXT:
        setText((String)newValue);
        return;
      case DatabasePackage.LANGUAGE_STRING__LANGAGE2:
        setLangage2((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.LANGUAGE_STRING__LANGAGE:
        setLangage(LANGAGE_EDEFAULT);
        return;
      case DatabasePackage.LANGUAGE_STRING__TEXT:
        setText(TEXT_EDEFAULT);
        return;
      case DatabasePackage.LANGUAGE_STRING__LANGAGE2:
        setLangage2(LANGAGE2_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DatabasePackage.LANGUAGE_STRING__LANGAGE:
        return LANGAGE_EDEFAULT == null ? langage != null : !LANGAGE_EDEFAULT.equals(langage);
      case DatabasePackage.LANGUAGE_STRING__TEXT:
        return TEXT_EDEFAULT == null ? text != null : !TEXT_EDEFAULT.equals(text);
      case DatabasePackage.LANGUAGE_STRING__LANGAGE2:
        return LANGAGE2_EDEFAULT == null ? langage2 != null : !LANGAGE2_EDEFAULT.equals(langage2);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (langage: ");
    result.append(langage);
    result.append(", text: ");
    result.append(text);
    result.append(", langage2: ");
    result.append(langage2);
    result.append(')');
    return result.toString();
  }

} //LanguageStringImpl
