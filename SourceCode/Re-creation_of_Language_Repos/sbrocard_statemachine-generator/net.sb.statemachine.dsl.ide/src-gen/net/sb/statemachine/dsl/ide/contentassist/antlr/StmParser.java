/*
 * generated by Xtext 2.35.0
 */
package net.sb.statemachine.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import net.sb.statemachine.dsl.ide.contentassist.antlr.internal.InternalStmParser;
import net.sb.statemachine.dsl.services.StmGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class StmParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StmGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StmGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatemachineAccess().getGroup(), "rule__Statemachine__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
			builder.put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
			builder.put(grammarAccess.getStateAccess().getGroup_7(), "rule__State__Group_7__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
			builder.put(grammarAccess.getSelfEventAccess().getGroup(), "rule__SelfEvent__Group__0");
			builder.put(grammarAccess.getSelfEventAccess().getGroup_1(), "rule__SelfEvent__Group_1__0");
			builder.put(grammarAccess.getGuardCallAccess().getGroup(), "rule__GuardCall__Group__0");
			builder.put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
			builder.put(grammarAccess.getGuardAccess().getGroup_1(), "rule__Guard__Group_1__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getStatemachineAccess().getEventsAssignment_2(), "rule__Statemachine__EventsAssignment_2");
			builder.put(grammarAccess.getStatemachineAccess().getCommandsAssignment_5(), "rule__Statemachine__CommandsAssignment_5");
			builder.put(grammarAccess.getStatemachineAccess().getGuardsAssignment_8(), "rule__Statemachine__GuardsAssignment_8");
			builder.put(grammarAccess.getStatemachineAccess().getStatesAssignment_10(), "rule__Statemachine__StatesAssignment_10");
			builder.put(grammarAccess.getEventAccess().getNameAssignment(), "rule__Event__NameAssignment");
			builder.put(grammarAccess.getCommandAccess().getNameAssignment(), "rule__Command__NameAssignment");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getStateAccess().getEntryActionsAssignment_2_2(), "rule__State__EntryActionsAssignment_2_2");
			builder.put(grammarAccess.getStateAccess().getDoActionAssignment_3_1(), "rule__State__DoActionAssignment_3_1");
			builder.put(grammarAccess.getStateAccess().getStopActionAssignment_3_2(), "rule__State__StopActionAssignment_3_2");
			builder.put(grammarAccess.getStateAccess().getStatesAssignment_4(), "rule__State__StatesAssignment_4");
			builder.put(grammarAccess.getStateAccess().getSelfEventsAssignment_5(), "rule__State__SelfEventsAssignment_5");
			builder.put(grammarAccess.getStateAccess().getTransitionsAssignment_6(), "rule__State__TransitionsAssignment_6");
			builder.put(grammarAccess.getStateAccess().getExitActionsAssignment_7_2(), "rule__State__ExitActionsAssignment_7_2");
			builder.put(grammarAccess.getTransitionAccess().getEventAssignment_0(), "rule__Transition__EventAssignment_0");
			builder.put(grammarAccess.getTransitionAccess().getGuardAssignment_1_1(), "rule__Transition__GuardAssignment_1_1");
			builder.put(grammarAccess.getTransitionAccess().getStateAssignment_3(), "rule__Transition__StateAssignment_3");
			builder.put(grammarAccess.getTransitionAccess().getActionAssignment_4_1(), "rule__Transition__ActionAssignment_4_1");
			builder.put(grammarAccess.getSelfEventAccess().getEventAssignment_0(), "rule__SelfEvent__EventAssignment_0");
			builder.put(grammarAccess.getSelfEventAccess().getGuardAssignment_1_1(), "rule__SelfEvent__GuardAssignment_1_1");
			builder.put(grammarAccess.getSelfEventAccess().getActionAssignment_3(), "rule__SelfEvent__ActionAssignment_3");
			builder.put(grammarAccess.getGuardCallAccess().getGuardAssignment_0(), "rule__GuardCall__GuardAssignment_0");
			builder.put(grammarAccess.getGuardCallAccess().getParametersAssignment_1(), "rule__GuardCall__ParametersAssignment_1");
			builder.put(grammarAccess.getGuardAccess().getNameAssignment_0(), "rule__Guard__NameAssignment_0");
			builder.put(grammarAccess.getGuardAccess().getParametersAssignment_1_1(), "rule__Guard__ParametersAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StmGrammarAccess grammarAccess;

	@Override
	protected InternalStmParser createParser() {
		InternalStmParser result = new InternalStmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
