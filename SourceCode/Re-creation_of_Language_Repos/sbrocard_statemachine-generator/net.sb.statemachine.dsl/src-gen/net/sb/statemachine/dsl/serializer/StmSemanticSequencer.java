/*
 * generated by Xtext 2.35.0
 */
package net.sb.statemachine.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import net.sb.statemachine.dsl.services.StmGrammarAccess;
import net.sb.statemachine.dsl.stm.Command;
import net.sb.statemachine.dsl.stm.Event;
import net.sb.statemachine.dsl.stm.Guard;
import net.sb.statemachine.dsl.stm.GuardCall;
import net.sb.statemachine.dsl.stm.SelfEvent;
import net.sb.statemachine.dsl.stm.State;
import net.sb.statemachine.dsl.stm.Statemachine;
import net.sb.statemachine.dsl.stm.StmPackage;
import net.sb.statemachine.dsl.stm.Transition;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class StmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private StmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == StmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case StmPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case StmPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case StmPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case StmPackage.GUARD_CALL:
				sequence_GuardCall(context, (GuardCall) semanticObject); 
				return; 
			case StmPackage.PARAMETER:
				sequence_Parameter(context, (net.sb.statemachine.dsl.stm.Parameter) semanticObject); 
				return; 
			case StmPackage.SELF_EVENT:
				sequence_SelfEvent(context, (SelfEvent) semanticObject); 
				return; 
			case StmPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case StmPackage.STATEMACHINE:
				sequence_Statemachine(context, (Statemachine) semanticObject); 
				return; 
			case StmPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StmPackage.Literals.COMMAND__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StmPackage.Literals.COMMAND__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StmPackage.Literals.EVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StmPackage.Literals.EVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GuardCall returns GuardCall
	 *
	 * Constraint:
	 *     (guard=[Guard|ID] parameters+=ID?)
	 * </pre>
	 */
	protected void sequence_GuardCall(ISerializationContext context, GuardCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     (name=ID parameters+=Parameter?)
	 * </pre>
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID type=ID)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, net.sb.statemachine.dsl.stm.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, StmPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StmPackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, StmPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, StmPackage.Literals.PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getTypeIDTerminalRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SelfEvent returns SelfEvent
	 *
	 * Constraint:
	 *     (event=[Event|ID] guard=GuardCall? action=[Command|ID])
	 * </pre>
	 */
	protected void sequence_SelfEvent(ISerializationContext context, SelfEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         entryActions+=[Command|ID]* 
	 *         (doAction=[Command|ID] stopAction=[Command|ID])? 
	 *         states+=State* 
	 *         selfEvents+=SelfEvent* 
	 *         transitions+=Transition* 
	 *         exitActions+=[Command|ID]*
	 *     )
	 * </pre>
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statemachine returns Statemachine
	 *
	 * Constraint:
	 *     (events+=Event* commands+=Command* guards+=Guard* states+=State*)
	 * </pre>
	 */
	protected void sequence_Statemachine(ISerializationContext context, Statemachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (event=[Event|ID] guard=GuardCall? state=[State|ID] action=[Command|ID]?)
	 * </pre>
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
