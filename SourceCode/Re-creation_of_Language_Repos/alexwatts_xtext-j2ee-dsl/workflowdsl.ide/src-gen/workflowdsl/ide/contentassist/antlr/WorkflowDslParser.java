/*
 * generated by Xtext 2.35.0
 */
package workflowdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import workflowdsl.ide.contentassist.antlr.internal.InternalWorkflowDslParser;
import workflowdsl.services.WorkflowDslGrammarAccess;

public class WorkflowDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WorkflowDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WorkflowDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
			builder.put(grammarAccess.getServiceTaskAccess().getAlternatives(), "rule__ServiceTask__Alternatives");
			builder.put(grammarAccess.getGatewayAccess().getAlternatives(), "rule__Gateway__Alternatives");
			builder.put(grammarAccess.getDivergingGatewayAccess().getAlternatives(), "rule__DivergingGateway__Alternatives");
			builder.put(grammarAccess.getConvergingGatewayAccess().getAlternatives(), "rule__ConvergingGateway__Alternatives");
			builder.put(grammarAccess.getConnectorAccess().getAlternatives(), "rule__Connector__Alternatives");
			builder.put(grammarAccess.getInputDataAccess().getAlternatives(), "rule__InputData__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getGroup(), "rule__WorkflowDefinition__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getMarketNameAccess().getGroup(), "rule__MarketName__Group__0");
			builder.put(grammarAccess.getClassNameAccess().getGroup(), "rule__ClassName__Group__0");
			builder.put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
			builder.put(grammarAccess.getStringBasedConditionalVaraibleAccess().getGroup(), "rule__StringBasedConditionalVaraible__Group__0");
			builder.put(grammarAccess.getStartNodeAccess().getGroup(), "rule__StartNode__Group__0");
			builder.put(grammarAccess.getEndNodeAccess().getGroup(), "rule__EndNode__Group__0");
			builder.put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
			builder.put(grammarAccess.getAsyncronousServiceTaskAccess().getGroup(), "rule__AsyncronousServiceTask__Group__0");
			builder.put(grammarAccess.getSyncronousServiceTaskAccess().getGroup(), "rule__SyncronousServiceTask__Group__0");
			builder.put(grammarAccess.getExlcusiveDivergingAccess().getGroup(), "rule__ExlcusiveDiverging__Group__0");
			builder.put(grammarAccess.getParallelDivergingAccess().getGroup(), "rule__ParallelDiverging__Group__0");
			builder.put(grammarAccess.getExclusiveConvergingAccess().getGroup(), "rule__ExclusiveConverging__Group__0");
			builder.put(grammarAccess.getParallelConvergingAccess().getGroup(), "rule__ParallelConverging__Group__0");
			builder.put(grammarAccess.getBasicConnectorAccess().getGroup(), "rule__BasicConnector__Group__0");
			builder.put(grammarAccess.getTaskNameInputAccess().getGroup(), "rule__TaskNameInput__Group__0");
			builder.put(grammarAccess.getVariableBasedInputAccess().getGroup(), "rule__VariableBasedInput__Group__0");
			builder.put(grammarAccess.getEventBasedInputAccess().getGroup(), "rule__EventBasedInput__Group__0");
			builder.put(grammarAccess.getOutputDataAccess().getGroup(), "rule__OutputData__Group__0");
			builder.put(grammarAccess.getConditionalConnectorAccess().getGroup(), "rule__ConditionalConnector__Group__0");
			builder.put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
			builder.put(grammarAccess.getProcessVariableAccess().getGroup(), "rule__ProcessVariable__Group__0");
			builder.put(grammarAccess.getFireSignalAccess().getGroup(), "rule__FireSignal__Group__0");
			builder.put(grammarAccess.getAssertFlowAccess().getGroup(), "rule__AssertFlow__Group__0");
			builder.put(grammarAccess.getAssertWaitAccess().getGroup(), "rule__AssertWait__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getWorkflowDefinitionsAssignment_1(), "rule__Model__WorkflowDefinitionsAssignment_1");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getNameAssignment_1(), "rule__WorkflowDefinition__NameAssignment_1");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getClassNameAssignment_3(), "rule__WorkflowDefinition__ClassNameAssignment_3");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getPackagesAssignment_4(), "rule__WorkflowDefinition__PackagesAssignment_4");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getEventsAssignment_5(), "rule__WorkflowDefinition__EventsAssignment_5");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getVariablesAssignment_6(), "rule__WorkflowDefinition__VariablesAssignment_6");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getNodesAssignment_7(), "rule__WorkflowDefinition__NodesAssignment_7");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getConnectorsAssignment_8(), "rule__WorkflowDefinition__ConnectorsAssignment_8");
			builder.put(grammarAccess.getWorkflowDefinitionAccess().getTestsAssignment_9(), "rule__WorkflowDefinition__TestsAssignment_9");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_1(), "rule__Package__NameAssignment_1");
			builder.put(grammarAccess.getMarketNameAccess().getMarketNameAssignment_1(), "rule__MarketName__MarketNameAssignment_1");
			builder.put(grammarAccess.getClassNameAccess().getClassNameAssignment_1(), "rule__ClassName__ClassNameAssignment_1");
			builder.put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
			builder.put(grammarAccess.getStringBasedConditionalVaraibleAccess().getNameAssignment_1(), "rule__StringBasedConditionalVaraible__NameAssignment_1");
			builder.put(grammarAccess.getStartNodeAccess().getNameAssignment_1(), "rule__StartNode__NameAssignment_1");
			builder.put(grammarAccess.getEndNodeAccess().getNameAssignment_1(), "rule__EndNode__NameAssignment_1");
			builder.put(grammarAccess.getSignalAccess().getNameAssignment_1(), "rule__Signal__NameAssignment_1");
			builder.put(grammarAccess.getSignalAccess().getEventAssignment_3(), "rule__Signal__EventAssignment_3");
			builder.put(grammarAccess.getSignalAccess().getOutputAssignment_4(), "rule__Signal__OutputAssignment_4");
			builder.put(grammarAccess.getAsyncronousServiceTaskAccess().getNameAssignment_1(), "rule__AsyncronousServiceTask__NameAssignment_1");
			builder.put(grammarAccess.getAsyncronousServiceTaskAccess().getInputsAssignment_3(), "rule__AsyncronousServiceTask__InputsAssignment_3");
			builder.put(grammarAccess.getAsyncronousServiceTaskAccess().getOutputAssignment_4(), "rule__AsyncronousServiceTask__OutputAssignment_4");
			builder.put(grammarAccess.getSyncronousServiceTaskAccess().getNameAssignment_1(), "rule__SyncronousServiceTask__NameAssignment_1");
			builder.put(grammarAccess.getSyncronousServiceTaskAccess().getInputsAssignment_3(), "rule__SyncronousServiceTask__InputsAssignment_3");
			builder.put(grammarAccess.getSyncronousServiceTaskAccess().getOutputAssignment_4(), "rule__SyncronousServiceTask__OutputAssignment_4");
			builder.put(grammarAccess.getExlcusiveDivergingAccess().getNameAssignment_1(), "rule__ExlcusiveDiverging__NameAssignment_1");
			builder.put(grammarAccess.getParallelDivergingAccess().getNameAssignment_1(), "rule__ParallelDiverging__NameAssignment_1");
			builder.put(grammarAccess.getExclusiveConvergingAccess().getNameAssignment_1(), "rule__ExclusiveConverging__NameAssignment_1");
			builder.put(grammarAccess.getParallelConvergingAccess().getNameAssignment_1(), "rule__ParallelConverging__NameAssignment_1");
			builder.put(grammarAccess.getBasicConnectorAccess().getFromAssignment_1(), "rule__BasicConnector__FromAssignment_1");
			builder.put(grammarAccess.getBasicConnectorAccess().getToAssignment_2(), "rule__BasicConnector__ToAssignment_2");
			builder.put(grammarAccess.getVariableBasedInputAccess().getVariableAssignment_1(), "rule__VariableBasedInput__VariableAssignment_1");
			builder.put(grammarAccess.getVariableBasedInputAccess().getEventParameterNameAssignment_2(), "rule__VariableBasedInput__EventParameterNameAssignment_2");
			builder.put(grammarAccess.getEventBasedInputAccess().getEventAssignment_1(), "rule__EventBasedInput__EventAssignment_1");
			builder.put(grammarAccess.getEventBasedInputAccess().getVariableAssignment_2(), "rule__EventBasedInput__VariableAssignment_2");
			builder.put(grammarAccess.getEventBasedInputAccess().getEventParameterNameAssignment_3(), "rule__EventBasedInput__EventParameterNameAssignment_3");
			builder.put(grammarAccess.getOutputDataAccess().getValueAssignment_1(), "rule__OutputData__ValueAssignment_1");
			builder.put(grammarAccess.getConditionalConnectorAccess().getNameAssignment_1(), "rule__ConditionalConnector__NameAssignment_1");
			builder.put(grammarAccess.getConditionalConnectorAccess().getFromAssignment_2(), "rule__ConditionalConnector__FromAssignment_2");
			builder.put(grammarAccess.getConditionalConnectorAccess().getToAssignment_3(), "rule__ConditionalConnector__ToAssignment_3");
			builder.put(grammarAccess.getConditionalConnectorAccess().getEventAssignment_5(), "rule__ConditionalConnector__EventAssignment_5");
			builder.put(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionAssignment_6(), "rule__ConditionalConnector__StringBasedConditionalExpressionAssignment_6");
			builder.put(grammarAccess.getConditionalConnectorAccess().getValueAssignment_7(), "rule__ConditionalConnector__ValueAssignment_7");
			builder.put(grammarAccess.getTestAccess().getNameAssignment_1(), "rule__Test__NameAssignment_1");
			builder.put(grammarAccess.getTestAccess().getProcessVariablesAssignment_3(), "rule__Test__ProcessVariablesAssignment_3");
			builder.put(grammarAccess.getTestAccess().getFireSignalAssignment_4(), "rule__Test__FireSignalAssignment_4");
			builder.put(grammarAccess.getTestAccess().getAssertFlowAssignment_5(), "rule__Test__AssertFlowAssignment_5");
			builder.put(grammarAccess.getTestAccess().getAssertWaitAssignment_6(), "rule__Test__AssertWaitAssignment_6");
			builder.put(grammarAccess.getProcessVariableAccess().getVariableAssignment_1(), "rule__ProcessVariable__VariableAssignment_1");
			builder.put(grammarAccess.getProcessVariableAccess().getValueAssignment_2(), "rule__ProcessVariable__ValueAssignment_2");
			builder.put(grammarAccess.getFireSignalAccess().getFireSignalAssignment_1(), "rule__FireSignal__FireSignalAssignment_1");
			builder.put(grammarAccess.getFireSignalAccess().getCaseAssignment_3(), "rule__FireSignal__CaseAssignment_3");
			builder.put(grammarAccess.getAssertFlowAccess().getNodesAssignment_2(), "rule__AssertFlow__NodesAssignment_2");
			builder.put(grammarAccess.getAssertWaitAccess().getNodesAssignment_2(), "rule__AssertWait__NodesAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WorkflowDslGrammarAccess grammarAccess;

	@Override
	protected InternalWorkflowDslParser createParser() {
		InternalWorkflowDslParser result = new InternalWorkflowDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WorkflowDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WorkflowDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
