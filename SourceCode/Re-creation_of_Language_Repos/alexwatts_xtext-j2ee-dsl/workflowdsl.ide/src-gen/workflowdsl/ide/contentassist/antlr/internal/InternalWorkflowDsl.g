/*
 * generated by Xtext 2.35.0
 */
grammar InternalWorkflowDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package workflowdsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package workflowdsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import workflowdsl.services.WorkflowDslGrammarAccess;

}
@parser::members {
	private WorkflowDslGrammarAccess grammarAccess;

	public void setGrammarAccess(WorkflowDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWorkflowDefinition
entryRuleWorkflowDefinition
:
{ before(grammarAccess.getWorkflowDefinitionRule()); }
	 ruleWorkflowDefinition
{ after(grammarAccess.getWorkflowDefinitionRule()); } 
	 EOF 
;

// Rule WorkflowDefinition
ruleWorkflowDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getGroup()); }
		(rule__WorkflowDefinition__Group__0)
		{ after(grammarAccess.getWorkflowDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackage
entryRulePackage
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageAccess().getGroup()); }
		(rule__Package__Group__0)
		{ after(grammarAccess.getPackageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassName
entryRuleClassName
:
{ before(grammarAccess.getClassNameRule()); }
	 ruleClassName
{ after(grammarAccess.getClassNameRule()); } 
	 EOF 
;

// Rule ClassName
ruleClassName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassNameAccess().getGroup()); }
		(rule__ClassName__Group__0)
		{ after(grammarAccess.getClassNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getStringBasedConditionalVaraibleParserRuleCall()); }
		ruleStringBasedConditionalVaraible
		{ after(grammarAccess.getVariableAccess().getStringBasedConditionalVaraibleParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringBasedConditionalVaraible
entryRuleStringBasedConditionalVaraible
:
{ before(grammarAccess.getStringBasedConditionalVaraibleRule()); }
	 ruleStringBasedConditionalVaraible
{ after(grammarAccess.getStringBasedConditionalVaraibleRule()); } 
	 EOF 
;

// Rule StringBasedConditionalVaraible
ruleStringBasedConditionalVaraible 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringBasedConditionalVaraibleAccess().getGroup()); }
		(rule__StringBasedConditionalVaraible__Group__0)
		{ after(grammarAccess.getStringBasedConditionalVaraibleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getAlternatives()); }
		(rule__Node__Alternatives)
		{ after(grammarAccess.getNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleServiceTask
entryRuleServiceTask
:
{ before(grammarAccess.getServiceTaskRule()); }
	 ruleServiceTask
{ after(grammarAccess.getServiceTaskRule()); } 
	 EOF 
;

// Rule ServiceTask
ruleServiceTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getServiceTaskAccess().getAlternatives()); }
		(rule__ServiceTask__Alternatives)
		{ after(grammarAccess.getServiceTaskAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGateway
entryRuleGateway
:
{ before(grammarAccess.getGatewayRule()); }
	 ruleGateway
{ after(grammarAccess.getGatewayRule()); } 
	 EOF 
;

// Rule Gateway
ruleGateway 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGatewayAccess().getAlternatives()); }
		(rule__Gateway__Alternatives)
		{ after(grammarAccess.getGatewayAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivergingGateway
entryRuleDivergingGateway
:
{ before(grammarAccess.getDivergingGatewayRule()); }
	 ruleDivergingGateway
{ after(grammarAccess.getDivergingGatewayRule()); } 
	 EOF 
;

// Rule DivergingGateway
ruleDivergingGateway 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivergingGatewayAccess().getAlternatives()); }
		(rule__DivergingGateway__Alternatives)
		{ after(grammarAccess.getDivergingGatewayAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConvergingGateway
entryRuleConvergingGateway
:
{ before(grammarAccess.getConvergingGatewayRule()); }
	 ruleConvergingGateway
{ after(grammarAccess.getConvergingGatewayRule()); } 
	 EOF 
;

// Rule ConvergingGateway
ruleConvergingGateway 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConvergingGatewayAccess().getAlternatives()); }
		(rule__ConvergingGateway__Alternatives)
		{ after(grammarAccess.getConvergingGatewayAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartNode
entryRuleStartNode
:
{ before(grammarAccess.getStartNodeRule()); }
	 ruleStartNode
{ after(grammarAccess.getStartNodeRule()); } 
	 EOF 
;

// Rule StartNode
ruleStartNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartNodeAccess().getGroup()); }
		(rule__StartNode__Group__0)
		{ after(grammarAccess.getStartNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndNode
entryRuleEndNode
:
{ before(grammarAccess.getEndNodeRule()); }
	 ruleEndNode
{ after(grammarAccess.getEndNodeRule()); } 
	 EOF 
;

// Rule EndNode
ruleEndNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndNodeAccess().getGroup()); }
		(rule__EndNode__Group__0)
		{ after(grammarAccess.getEndNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSignal
entryRuleSignal
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignalAccess().getGroup()); }
		(rule__Signal__Group__0)
		{ after(grammarAccess.getSignalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAsyncronousServiceTask
entryRuleAsyncronousServiceTask
:
{ before(grammarAccess.getAsyncronousServiceTaskRule()); }
	 ruleAsyncronousServiceTask
{ after(grammarAccess.getAsyncronousServiceTaskRule()); } 
	 EOF 
;

// Rule AsyncronousServiceTask
ruleAsyncronousServiceTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsyncronousServiceTaskAccess().getGroup()); }
		(rule__AsyncronousServiceTask__Group__0)
		{ after(grammarAccess.getAsyncronousServiceTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSyncronousServiceTask
entryRuleSyncronousServiceTask
:
{ before(grammarAccess.getSyncronousServiceTaskRule()); }
	 ruleSyncronousServiceTask
{ after(grammarAccess.getSyncronousServiceTaskRule()); } 
	 EOF 
;

// Rule SyncronousServiceTask
ruleSyncronousServiceTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSyncronousServiceTaskAccess().getGroup()); }
		(rule__SyncronousServiceTask__Group__0)
		{ after(grammarAccess.getSyncronousServiceTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExlcusiveDiverging
entryRuleExlcusiveDiverging
:
{ before(grammarAccess.getExlcusiveDivergingRule()); }
	 ruleExlcusiveDiverging
{ after(grammarAccess.getExlcusiveDivergingRule()); } 
	 EOF 
;

// Rule ExlcusiveDiverging
ruleExlcusiveDiverging 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExlcusiveDivergingAccess().getGroup()); }
		(rule__ExlcusiveDiverging__Group__0)
		{ after(grammarAccess.getExlcusiveDivergingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParallelDiverging
entryRuleParallelDiverging
:
{ before(grammarAccess.getParallelDivergingRule()); }
	 ruleParallelDiverging
{ after(grammarAccess.getParallelDivergingRule()); } 
	 EOF 
;

// Rule ParallelDiverging
ruleParallelDiverging 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParallelDivergingAccess().getGroup()); }
		(rule__ParallelDiverging__Group__0)
		{ after(grammarAccess.getParallelDivergingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExclusiveConverging
entryRuleExclusiveConverging
:
{ before(grammarAccess.getExclusiveConvergingRule()); }
	 ruleExclusiveConverging
{ after(grammarAccess.getExclusiveConvergingRule()); } 
	 EOF 
;

// Rule ExclusiveConverging
ruleExclusiveConverging 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExclusiveConvergingAccess().getGroup()); }
		(rule__ExclusiveConverging__Group__0)
		{ after(grammarAccess.getExclusiveConvergingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParallelConverging
entryRuleParallelConverging
:
{ before(grammarAccess.getParallelConvergingRule()); }
	 ruleParallelConverging
{ after(grammarAccess.getParallelConvergingRule()); } 
	 EOF 
;

// Rule ParallelConverging
ruleParallelConverging 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParallelConvergingAccess().getGroup()); }
		(rule__ParallelConverging__Group__0)
		{ after(grammarAccess.getParallelConvergingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConnector
entryRuleConnector
:
{ before(grammarAccess.getConnectorRule()); }
	 ruleConnector
{ after(grammarAccess.getConnectorRule()); } 
	 EOF 
;

// Rule Connector
ruleConnector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConnectorAccess().getAlternatives()); }
		(rule__Connector__Alternatives)
		{ after(grammarAccess.getConnectorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicConnector
entryRuleBasicConnector
:
{ before(grammarAccess.getBasicConnectorRule()); }
	 ruleBasicConnector
{ after(grammarAccess.getBasicConnectorRule()); } 
	 EOF 
;

// Rule BasicConnector
ruleBasicConnector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicConnectorAccess().getGroup()); }
		(rule__BasicConnector__Group__0)
		{ after(grammarAccess.getBasicConnectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInputData
entryRuleInputData
:
{ before(grammarAccess.getInputDataRule()); }
	 ruleInputData
{ after(grammarAccess.getInputDataRule()); } 
	 EOF 
;

// Rule InputData
ruleInputData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputDataAccess().getAlternatives()); }
		(rule__InputData__Alternatives)
		{ after(grammarAccess.getInputDataAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTaskNameInput
entryRuleTaskNameInput
:
{ before(grammarAccess.getTaskNameInputRule()); }
	 ruleTaskNameInput
{ after(grammarAccess.getTaskNameInputRule()); } 
	 EOF 
;

// Rule TaskNameInput
ruleTaskNameInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskNameInputAccess().getGroup()); }
		(rule__TaskNameInput__Group__0)
		{ after(grammarAccess.getTaskNameInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableBasedInput
entryRuleVariableBasedInput
:
{ before(grammarAccess.getVariableBasedInputRule()); }
	 ruleVariableBasedInput
{ after(grammarAccess.getVariableBasedInputRule()); } 
	 EOF 
;

// Rule VariableBasedInput
ruleVariableBasedInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableBasedInputAccess().getGroup()); }
		(rule__VariableBasedInput__Group__0)
		{ after(grammarAccess.getVariableBasedInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventBasedInput
entryRuleEventBasedInput
:
{ before(grammarAccess.getEventBasedInputRule()); }
	 ruleEventBasedInput
{ after(grammarAccess.getEventBasedInputRule()); } 
	 EOF 
;

// Rule EventBasedInput
ruleEventBasedInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventBasedInputAccess().getGroup()); }
		(rule__EventBasedInput__Group__0)
		{ after(grammarAccess.getEventBasedInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutputData
entryRuleOutputData
:
{ before(grammarAccess.getOutputDataRule()); }
	 ruleOutputData
{ after(grammarAccess.getOutputDataRule()); } 
	 EOF 
;

// Rule OutputData
ruleOutputData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputDataAccess().getGroup()); }
		(rule__OutputData__Group__0)
		{ after(grammarAccess.getOutputDataAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalConnector
entryRuleConditionalConnector
:
{ before(grammarAccess.getConditionalConnectorRule()); }
	 ruleConditionalConnector
{ after(grammarAccess.getConditionalConnectorRule()); } 
	 EOF 
;

// Rule ConditionalConnector
ruleConditionalConnector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getGroup()); }
		(rule__ConditionalConnector__Group__0)
		{ after(grammarAccess.getConditionalConnectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTest
entryRuleTest
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestAccess().getGroup()); }
		(rule__Test__Group__0)
		{ after(grammarAccess.getTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcessVariable
entryRuleProcessVariable
:
{ before(grammarAccess.getProcessVariableRule()); }
	 ruleProcessVariable
{ after(grammarAccess.getProcessVariableRule()); } 
	 EOF 
;

// Rule ProcessVariable
ruleProcessVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcessVariableAccess().getGroup()); }
		(rule__ProcessVariable__Group__0)
		{ after(grammarAccess.getProcessVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFireSignal
entryRuleFireSignal
:
{ before(grammarAccess.getFireSignalRule()); }
	 ruleFireSignal
{ after(grammarAccess.getFireSignalRule()); } 
	 EOF 
;

// Rule FireSignal
ruleFireSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFireSignalAccess().getGroup()); }
		(rule__FireSignal__Group__0)
		{ after(grammarAccess.getFireSignalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertFlow
entryRuleAssertFlow
:
{ before(grammarAccess.getAssertFlowRule()); }
	 ruleAssertFlow
{ after(grammarAccess.getAssertFlowRule()); } 
	 EOF 
;

// Rule AssertFlow
ruleAssertFlow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertFlowAccess().getGroup()); }
		(rule__AssertFlow__Group__0)
		{ after(grammarAccess.getAssertFlowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssertWait
entryRuleAssertWait
:
{ before(grammarAccess.getAssertWaitRule()); }
	 ruleAssertWait
{ after(grammarAccess.getAssertWaitRule()); } 
	 EOF 
;

// Rule AssertWait
ruleAssertWait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssertWaitAccess().getGroup()); }
		(rule__AssertWait__Group__0)
		{ after(grammarAccess.getAssertWaitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard
:
{ before(grammarAccess.getQualifiedNameWithWildCardRule()); }
	 ruleQualifiedNameWithWildCard
{ after(grammarAccess.getQualifiedNameWithWildCardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
		(rule__QualifiedNameWithWildCard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getStartNodeParserRuleCall_0()); }
		ruleStartNode
		{ after(grammarAccess.getNodeAccess().getStartNodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getEndNodeParserRuleCall_1()); }
		ruleEndNode
		{ after(grammarAccess.getNodeAccess().getEndNodeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getServiceTaskParserRuleCall_2()); }
		ruleServiceTask
		{ after(grammarAccess.getNodeAccess().getServiceTaskParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getGatewayParserRuleCall_3()); }
		ruleGateway
		{ after(grammarAccess.getNodeAccess().getGatewayParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getSignalParserRuleCall_4()); }
		ruleSignal
		{ after(grammarAccess.getNodeAccess().getSignalParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ServiceTask__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getServiceTaskAccess().getAsyncronousServiceTaskParserRuleCall_0()); }
		ruleAsyncronousServiceTask
		{ after(grammarAccess.getServiceTaskAccess().getAsyncronousServiceTaskParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getServiceTaskAccess().getSyncronousServiceTaskParserRuleCall_1()); }
		ruleSyncronousServiceTask
		{ after(grammarAccess.getServiceTaskAccess().getSyncronousServiceTaskParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGatewayAccess().getDivergingGatewayParserRuleCall_0()); }
		ruleDivergingGateway
		{ after(grammarAccess.getGatewayAccess().getDivergingGatewayParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGatewayAccess().getConvergingGatewayParserRuleCall_1()); }
		ruleConvergingGateway
		{ after(grammarAccess.getGatewayAccess().getConvergingGatewayParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivergingGateway__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivergingGatewayAccess().getExlcusiveDivergingParserRuleCall_0()); }
		ruleExlcusiveDiverging
		{ after(grammarAccess.getDivergingGatewayAccess().getExlcusiveDivergingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDivergingGatewayAccess().getParallelDivergingParserRuleCall_1()); }
		ruleParallelDiverging
		{ after(grammarAccess.getDivergingGatewayAccess().getParallelDivergingParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConvergingGateway__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConvergingGatewayAccess().getExclusiveConvergingParserRuleCall_0()); }
		ruleExclusiveConverging
		{ after(grammarAccess.getConvergingGatewayAccess().getExclusiveConvergingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConvergingGatewayAccess().getParallelConvergingParserRuleCall_1()); }
		ruleParallelConverging
		{ after(grammarAccess.getConvergingGatewayAccess().getParallelConvergingParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Connector__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConnectorAccess().getBasicConnectorParserRuleCall_0()); }
		ruleBasicConnector
		{ after(grammarAccess.getConnectorAccess().getBasicConnectorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConnectorAccess().getConditionalConnectorParserRuleCall_1()); }
		ruleConditionalConnector
		{ after(grammarAccess.getConnectorAccess().getConditionalConnectorParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InputData__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputDataAccess().getTaskNameInputParserRuleCall_0()); }
		ruleTaskNameInput
		{ after(grammarAccess.getInputDataAccess().getTaskNameInputParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInputDataAccess().getVariableBasedInputParserRuleCall_1()); }
		ruleVariableBasedInput
		{ after(grammarAccess.getInputDataAccess().getVariableBasedInputParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInputDataAccess().getEventBasedInputParserRuleCall_2()); }
		ruleEventBasedInput
		{ after(grammarAccess.getInputDataAccess().getEventBasedInputParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
		(rule__Model__ImportsAssignment_0)
		{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getImportsAssignment_0()); }
		(rule__Model__ImportsAssignment_0)*
		{ after(grammarAccess.getModelAccess().getImportsAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getWorkflowDefinitionsAssignment_1()); }
		(rule__Model__WorkflowDefinitionsAssignment_1)
		{ after(grammarAccess.getModelAccess().getWorkflowDefinitionsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getWorkflowDefinitionsAssignment_1()); }
		(rule__Model__WorkflowDefinitionsAssignment_1)*
		{ after(grammarAccess.getModelAccess().getWorkflowDefinitionsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
	(rule__Import__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WorkflowDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__0__Impl
	rule__WorkflowDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getWorkflowDefinitionKeyword_0()); }
	'workflow definition'
	{ after(grammarAccess.getWorkflowDefinitionAccess().getWorkflowDefinitionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__1__Impl
	rule__WorkflowDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getNameAssignment_1()); }
	(rule__WorkflowDefinition__NameAssignment_1)
	{ after(grammarAccess.getWorkflowDefinitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__2__Impl
	rule__WorkflowDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWorkflowDefinitionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__3__Impl
	rule__WorkflowDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getClassNameAssignment_3()); }
	(rule__WorkflowDefinition__ClassNameAssignment_3)
	{ after(grammarAccess.getWorkflowDefinitionAccess().getClassNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__4__Impl
	rule__WorkflowDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getPackagesAssignment_4()); }
	(rule__WorkflowDefinition__PackagesAssignment_4)
	{ after(grammarAccess.getWorkflowDefinitionAccess().getPackagesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__5__Impl
	rule__WorkflowDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getEventsAssignment_5()); }
	(rule__WorkflowDefinition__EventsAssignment_5)*
	{ after(grammarAccess.getWorkflowDefinitionAccess().getEventsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__6__Impl
	rule__WorkflowDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getVariablesAssignment_6()); }
	(rule__WorkflowDefinition__VariablesAssignment_6)*
	{ after(grammarAccess.getWorkflowDefinitionAccess().getVariablesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__7__Impl
	rule__WorkflowDefinition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getNodesAssignment_7()); }
		(rule__WorkflowDefinition__NodesAssignment_7)
		{ after(grammarAccess.getWorkflowDefinitionAccess().getNodesAssignment_7()); }
	)
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getNodesAssignment_7()); }
		(rule__WorkflowDefinition__NodesAssignment_7)*
		{ after(grammarAccess.getWorkflowDefinitionAccess().getNodesAssignment_7()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__8__Impl
	rule__WorkflowDefinition__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getConnectorsAssignment_8()); }
		(rule__WorkflowDefinition__ConnectorsAssignment_8)
		{ after(grammarAccess.getWorkflowDefinitionAccess().getConnectorsAssignment_8()); }
	)
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getConnectorsAssignment_8()); }
		(rule__WorkflowDefinition__ConnectorsAssignment_8)*
		{ after(grammarAccess.getWorkflowDefinitionAccess().getConnectorsAssignment_8()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__9__Impl
	rule__WorkflowDefinition__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getTestsAssignment_9()); }
		(rule__WorkflowDefinition__TestsAssignment_9)
		{ after(grammarAccess.getWorkflowDefinitionAccess().getTestsAssignment_9()); }
	)
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getTestsAssignment_9()); }
		(rule__WorkflowDefinition__TestsAssignment_9)*
		{ after(grammarAccess.getWorkflowDefinitionAccess().getTestsAssignment_9()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WorkflowDefinition__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkflowDefinitionAccess().getRightCurlyBracketKeyword_10()); }
	'}'
	{ after(grammarAccess.getWorkflowDefinitionAccess().getRightCurlyBracketKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getNameAssignment_1()); }
	(rule__Package__NameAssignment_1)
	{ after(grammarAccess.getPackageAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassName__Group__0__Impl
	rule__ClassName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassNameAccess().getClassNameKeyword_0()); }
	'class name'
	{ after(grammarAccess.getClassNameAccess().getClassNameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassNameAccess().getClassNameAssignment_1()); }
	(rule__ClassName__ClassNameAssignment_1)
	{ after(grammarAccess.getClassNameAccess().getClassNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventKeyword_0()); }
	'event'
	{ after(grammarAccess.getEventAccess().getEventKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
	(rule__Event__NameAssignment_1)
	{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringBasedConditionalVaraible__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringBasedConditionalVaraible__Group__0__Impl
	rule__StringBasedConditionalVaraible__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringBasedConditionalVaraible__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringBasedConditionalVaraibleAccess().getStringBasedConditionalVariableKeyword_0()); }
	'string based conditional variable'
	{ after(grammarAccess.getStringBasedConditionalVaraibleAccess().getStringBasedConditionalVariableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringBasedConditionalVaraible__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringBasedConditionalVaraible__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringBasedConditionalVaraible__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringBasedConditionalVaraibleAccess().getNameAssignment_1()); }
	(rule__StringBasedConditionalVaraible__NameAssignment_1)
	{ after(grammarAccess.getStringBasedConditionalVaraibleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StartNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartNode__Group__0__Impl
	rule__StartNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartNodeAccess().getStartNodeKeyword_0()); }
	'start node'
	{ after(grammarAccess.getStartNodeAccess().getStartNodeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartNodeAccess().getNameAssignment_1()); }
	(rule__StartNode__NameAssignment_1)
	{ after(grammarAccess.getStartNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EndNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndNode__Group__0__Impl
	rule__EndNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndNodeAccess().getEndNodeKeyword_0()); }
	'end node'
	{ after(grammarAccess.getEndNodeAccess().getEndNodeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndNodeAccess().getNameAssignment_1()); }
	(rule__EndNode__NameAssignment_1)
	{ after(grammarAccess.getEndNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__0__Impl
	rule__Signal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getSignalKeyword_0()); }
	'signal'
	{ after(grammarAccess.getSignalAccess().getSignalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__1__Impl
	rule__Signal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getNameAssignment_1()); }
	(rule__Signal__NameAssignment_1)
	{ after(grammarAccess.getSignalAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__2__Impl
	rule__Signal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSignalAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__3__Impl
	rule__Signal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getEventAssignment_3()); }
	(rule__Signal__EventAssignment_3)
	{ after(grammarAccess.getSignalAccess().getEventAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__4__Impl
	rule__Signal__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getOutputAssignment_4()); }
	(rule__Signal__OutputAssignment_4)?
	{ after(grammarAccess.getSignalAccess().getOutputAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSignalAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AsyncronousServiceTask__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsyncronousServiceTask__Group__0__Impl
	rule__AsyncronousServiceTask__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncronousServiceTaskAccess().getAsyncronousTaskKeyword_0()); }
	'asyncronous task'
	{ after(grammarAccess.getAsyncronousServiceTaskAccess().getAsyncronousTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsyncronousServiceTask__Group__1__Impl
	rule__AsyncronousServiceTask__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncronousServiceTaskAccess().getNameAssignment_1()); }
	(rule__AsyncronousServiceTask__NameAssignment_1)
	{ after(grammarAccess.getAsyncronousServiceTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsyncronousServiceTask__Group__2__Impl
	rule__AsyncronousServiceTask__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncronousServiceTaskAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getAsyncronousServiceTaskAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsyncronousServiceTask__Group__3__Impl
	rule__AsyncronousServiceTask__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncronousServiceTaskAccess().getInputsAssignment_3()); }
	(rule__AsyncronousServiceTask__InputsAssignment_3)*
	{ after(grammarAccess.getAsyncronousServiceTaskAccess().getInputsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsyncronousServiceTask__Group__4__Impl
	rule__AsyncronousServiceTask__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncronousServiceTaskAccess().getOutputAssignment_4()); }
	(rule__AsyncronousServiceTask__OutputAssignment_4)?
	{ after(grammarAccess.getAsyncronousServiceTaskAccess().getOutputAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsyncronousServiceTask__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsyncronousServiceTaskAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getAsyncronousServiceTaskAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SyncronousServiceTask__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SyncronousServiceTask__Group__0__Impl
	rule__SyncronousServiceTask__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSyncronousServiceTaskAccess().getSyncronousTaskKeyword_0()); }
	'syncronous task'
	{ after(grammarAccess.getSyncronousServiceTaskAccess().getSyncronousTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SyncronousServiceTask__Group__1__Impl
	rule__SyncronousServiceTask__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSyncronousServiceTaskAccess().getNameAssignment_1()); }
	(rule__SyncronousServiceTask__NameAssignment_1)
	{ after(grammarAccess.getSyncronousServiceTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SyncronousServiceTask__Group__2__Impl
	rule__SyncronousServiceTask__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSyncronousServiceTaskAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSyncronousServiceTaskAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SyncronousServiceTask__Group__3__Impl
	rule__SyncronousServiceTask__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSyncronousServiceTaskAccess().getInputsAssignment_3()); }
	(rule__SyncronousServiceTask__InputsAssignment_3)*
	{ after(grammarAccess.getSyncronousServiceTaskAccess().getInputsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SyncronousServiceTask__Group__4__Impl
	rule__SyncronousServiceTask__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSyncronousServiceTaskAccess().getOutputAssignment_4()); }
	(rule__SyncronousServiceTask__OutputAssignment_4)?
	{ after(grammarAccess.getSyncronousServiceTaskAccess().getOutputAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SyncronousServiceTask__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSyncronousServiceTaskAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSyncronousServiceTaskAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExlcusiveDiverging__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExlcusiveDiverging__Group__0__Impl
	rule__ExlcusiveDiverging__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExlcusiveDiverging__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExlcusiveDivergingAccess().getExclusiveDivergingKeyword_0()); }
	'exclusive diverging'
	{ after(grammarAccess.getExlcusiveDivergingAccess().getExclusiveDivergingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExlcusiveDiverging__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExlcusiveDiverging__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExlcusiveDiverging__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExlcusiveDivergingAccess().getNameAssignment_1()); }
	(rule__ExlcusiveDiverging__NameAssignment_1)
	{ after(grammarAccess.getExlcusiveDivergingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelDiverging__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelDiverging__Group__0__Impl
	rule__ParallelDiverging__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelDiverging__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParallelDivergingAccess().getParallelDivergingKeyword_0()); }
	'parallel diverging'
	{ after(grammarAccess.getParallelDivergingAccess().getParallelDivergingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelDiverging__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelDiverging__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelDiverging__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParallelDivergingAccess().getNameAssignment_1()); }
	(rule__ParallelDiverging__NameAssignment_1)
	{ after(grammarAccess.getParallelDivergingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExclusiveConverging__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusiveConverging__Group__0__Impl
	rule__ExclusiveConverging__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveConverging__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusiveConvergingAccess().getExclusiveConvergingKeyword_0()); }
	'exclusive converging'
	{ after(grammarAccess.getExclusiveConvergingAccess().getExclusiveConvergingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveConverging__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExclusiveConverging__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveConverging__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExclusiveConvergingAccess().getNameAssignment_1()); }
	(rule__ExclusiveConverging__NameAssignment_1)
	{ after(grammarAccess.getExclusiveConvergingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelConverging__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelConverging__Group__0__Impl
	rule__ParallelConverging__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelConverging__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParallelConvergingAccess().getParallelConvergingKeyword_0()); }
	'parallel converging'
	{ after(grammarAccess.getParallelConvergingAccess().getParallelConvergingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelConverging__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParallelConverging__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelConverging__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParallelConvergingAccess().getNameAssignment_1()); }
	(rule__ParallelConverging__NameAssignment_1)
	{ after(grammarAccess.getParallelConvergingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasicConnector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicConnector__Group__0__Impl
	rule__BasicConnector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConnectorAccess().getConnectKeyword_0()); }
	'connect'
	{ after(grammarAccess.getBasicConnectorAccess().getConnectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicConnector__Group__1__Impl
	rule__BasicConnector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConnectorAccess().getFromAssignment_1()); }
	(rule__BasicConnector__FromAssignment_1)
	{ after(grammarAccess.getBasicConnectorAccess().getFromAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicConnector__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicConnectorAccess().getToAssignment_2()); }
	(rule__BasicConnector__ToAssignment_2)
	{ after(grammarAccess.getBasicConnectorAccess().getToAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TaskNameInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TaskNameInput__Group__0__Impl
	rule__TaskNameInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskNameInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskNameInputAccess().getTaskNameInputKeyword_0()); }
	'task name input'
	{ after(grammarAccess.getTaskNameInputAccess().getTaskNameInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskNameInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TaskNameInput__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TaskNameInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskNameInputAccess().getTaskNameInputAction_1()); }
	()
	{ after(grammarAccess.getTaskNameInputAccess().getTaskNameInputAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableBasedInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableBasedInput__Group__0__Impl
	rule__VariableBasedInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableBasedInputAccess().getVariableBasedInputKeyword_0()); }
	'variable based input'
	{ after(grammarAccess.getVariableBasedInputAccess().getVariableBasedInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableBasedInput__Group__1__Impl
	rule__VariableBasedInput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableBasedInputAccess().getVariableAssignment_1()); }
	(rule__VariableBasedInput__VariableAssignment_1)
	{ after(grammarAccess.getVariableBasedInputAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableBasedInput__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableBasedInputAccess().getEventParameterNameAssignment_2()); }
	(rule__VariableBasedInput__EventParameterNameAssignment_2)
	{ after(grammarAccess.getVariableBasedInputAccess().getEventParameterNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EventBasedInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventBasedInput__Group__0__Impl
	rule__EventBasedInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventBasedInputAccess().getMapBasedInputKeyword_0()); }
	'map based input'
	{ after(grammarAccess.getEventBasedInputAccess().getMapBasedInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventBasedInput__Group__1__Impl
	rule__EventBasedInput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventBasedInputAccess().getEventAssignment_1()); }
	(rule__EventBasedInput__EventAssignment_1)
	{ after(grammarAccess.getEventBasedInputAccess().getEventAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventBasedInput__Group__2__Impl
	rule__EventBasedInput__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventBasedInputAccess().getVariableAssignment_2()); }
	(rule__EventBasedInput__VariableAssignment_2)
	{ after(grammarAccess.getEventBasedInputAccess().getVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EventBasedInput__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventBasedInputAccess().getEventParameterNameAssignment_3()); }
	(rule__EventBasedInput__EventParameterNameAssignment_3)
	{ after(grammarAccess.getEventBasedInputAccess().getEventParameterNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OutputData__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputData__Group__0__Impl
	rule__OutputData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputData__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputDataAccess().getOutputKeyword_0()); }
	'output'
	{ after(grammarAccess.getOutputDataAccess().getOutputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputData__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OutputData__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputData__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputDataAccess().getValueAssignment_1()); }
	(rule__OutputData__ValueAssignment_1)
	{ after(grammarAccess.getOutputDataAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalConnector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__0__Impl
	rule__ConditionalConnector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getConditionalConnectorKeyword_0()); }
	'conditional connector'
	{ after(grammarAccess.getConditionalConnectorAccess().getConditionalConnectorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__1__Impl
	rule__ConditionalConnector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getNameAssignment_1()); }
	(rule__ConditionalConnector__NameAssignment_1)
	{ after(grammarAccess.getConditionalConnectorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__2__Impl
	rule__ConditionalConnector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getFromAssignment_2()); }
	(rule__ConditionalConnector__FromAssignment_2)
	{ after(grammarAccess.getConditionalConnectorAccess().getFromAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__3__Impl
	rule__ConditionalConnector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getToAssignment_3()); }
	(rule__ConditionalConnector__ToAssignment_3)
	{ after(grammarAccess.getConditionalConnectorAccess().getToAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__4__Impl
	rule__ConditionalConnector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getConditionalConnectorAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__5__Impl
	rule__ConditionalConnector__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getEventAssignment_5()); }
	(rule__ConditionalConnector__EventAssignment_5)
	{ after(grammarAccess.getConditionalConnectorAccess().getEventAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__6__Impl
	rule__ConditionalConnector__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionAssignment_6()); }
	(rule__ConditionalConnector__StringBasedConditionalExpressionAssignment_6)
	{ after(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__7__Impl
	rule__ConditionalConnector__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getValueAssignment_7()); }
	(rule__ConditionalConnector__ValueAssignment_7)
	{ after(grammarAccess.getConditionalConnectorAccess().getValueAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalConnector__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalConnectorAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getConditionalConnectorAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }
	'test'
	{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getNameAssignment_1()); }
	(rule__Test__NameAssignment_1)
	{ after(grammarAccess.getTestAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getProcessVariablesAssignment_3()); }
	(rule__Test__ProcessVariablesAssignment_3)*
	{ after(grammarAccess.getTestAccess().getProcessVariablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__4__Impl
	rule__Test__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getFireSignalAssignment_4()); }
	(rule__Test__FireSignalAssignment_4)*
	{ after(grammarAccess.getTestAccess().getFireSignalAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__5__Impl
	rule__Test__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getAssertFlowAssignment_5()); }
	(rule__Test__AssertFlowAssignment_5)*
	{ after(grammarAccess.getTestAccess().getAssertFlowAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__6__Impl
	rule__Test__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getAssertWaitAssignment_6()); }
	(rule__Test__AssertWaitAssignment_6)*
	{ after(grammarAccess.getTestAccess().getAssertWaitAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessVariable__Group__0__Impl
	rule__ProcessVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessVariableAccess().getProcessVariableKeyword_0()); }
	'process variable'
	{ after(grammarAccess.getProcessVariableAccess().getProcessVariableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessVariable__Group__1__Impl
	rule__ProcessVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessVariableAccess().getVariableAssignment_1()); }
	(rule__ProcessVariable__VariableAssignment_1)
	{ after(grammarAccess.getProcessVariableAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ProcessVariable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProcessVariableAccess().getValueAssignment_2()); }
	(rule__ProcessVariable__ValueAssignment_2)
	{ after(grammarAccess.getProcessVariableAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FireSignal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FireSignal__Group__0__Impl
	rule__FireSignal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFireSignalAccess().getFireSignalKeyword_0()); }
	'fire signal'
	{ after(grammarAccess.getFireSignalAccess().getFireSignalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FireSignal__Group__1__Impl
	rule__FireSignal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFireSignalAccess().getFireSignalAssignment_1()); }
	(rule__FireSignal__FireSignalAssignment_1)
	{ after(grammarAccess.getFireSignalAccess().getFireSignalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FireSignal__Group__2__Impl
	rule__FireSignal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFireSignalAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getFireSignalAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FireSignal__Group__3__Impl
	rule__FireSignal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFireSignalAccess().getCaseAssignment_3()); }
	(rule__FireSignal__CaseAssignment_3)?
	{ after(grammarAccess.getFireSignalAccess().getCaseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FireSignal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFireSignalAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getFireSignalAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssertFlow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertFlow__Group__0__Impl
	rule__AssertFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertFlowAccess().getAssertflowKeyword_0()); }
	'assertflow'
	{ after(grammarAccess.getAssertFlowAccess().getAssertflowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertFlow__Group__1__Impl
	rule__AssertFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertFlowAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAssertFlowAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertFlow__Group__2__Impl
	rule__AssertFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAssertFlowAccess().getNodesAssignment_2()); }
		(rule__AssertFlow__NodesAssignment_2)
		{ after(grammarAccess.getAssertFlowAccess().getNodesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getAssertFlowAccess().getNodesAssignment_2()); }
		(rule__AssertFlow__NodesAssignment_2)*
		{ after(grammarAccess.getAssertFlowAccess().getNodesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertFlow__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertFlowAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getAssertFlowAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssertWait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertWait__Group__0__Impl
	rule__AssertWait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertWaitAccess().getAssertWaitKeyword_0()); }
	'assertWait'
	{ after(grammarAccess.getAssertWaitAccess().getAssertWaitKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertWait__Group__1__Impl
	rule__AssertWait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertWaitAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getAssertWaitAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertWait__Group__2__Impl
	rule__AssertWait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAssertWaitAccess().getNodesAssignment_2()); }
		(rule__AssertWait__NodesAssignment_2)
		{ after(grammarAccess.getAssertWaitAccess().getNodesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getAssertWaitAccess().getNodesAssignment_2()); }
		(rule__AssertWait__NodesAssignment_2)*
		{ after(grammarAccess.getAssertWaitAccess().getNodesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssertWait__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssertWaitAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getAssertWaitAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildCard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildCard__Group__0__Impl
	rule__QualifiedNameWithWildCard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildCard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildCard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
	('.*')?
	{ after(grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__WorkflowDefinitionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWorkflowDefinitionsWorkflowDefinitionParserRuleCall_1_0()); }
		ruleWorkflowDefinition
		{ after(grammarAccess.getModelAccess().getWorkflowDefinitionsWorkflowDefinitionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildCard
		{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWorkflowDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__ClassNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getClassNameClassNameParserRuleCall_3_0()); }
		ruleClassName
		{ after(grammarAccess.getWorkflowDefinitionAccess().getClassNameClassNameParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__PackagesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getPackagesPackageParserRuleCall_4_0()); }
		rulePackage
		{ after(grammarAccess.getWorkflowDefinitionAccess().getPackagesPackageParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__EventsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getEventsEventParserRuleCall_5_0()); }
		ruleEvent
		{ after(grammarAccess.getWorkflowDefinitionAccess().getEventsEventParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__VariablesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getVariablesVariableParserRuleCall_6_0()); }
		ruleVariable
		{ after(grammarAccess.getWorkflowDefinitionAccess().getVariablesVariableParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__NodesAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getNodesNodeParserRuleCall_7_0()); }
		ruleNode
		{ after(grammarAccess.getWorkflowDefinitionAccess().getNodesNodeParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__ConnectorsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getConnectorsConnectorParserRuleCall_8_0()); }
		ruleConnector
		{ after(grammarAccess.getWorkflowDefinitionAccess().getConnectorsConnectorParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkflowDefinition__TestsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkflowDefinitionAccess().getTestsTestParserRuleCall_9_0()); }
		ruleTest
		{ after(grammarAccess.getWorkflowDefinitionAccess().getTestsTestParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__ClassNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassNameAccess().getClassNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getClassNameAccess().getClassNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringBasedConditionalVaraible__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringBasedConditionalVaraibleAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStringBasedConditionalVaraibleAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartNode__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStartNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndNode__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEndNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEndNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__EventAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getEventEventCrossReference_3_0()); }
		(
			{ before(grammarAccess.getSignalAccess().getEventEventIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSignalAccess().getEventEventIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getSignalAccess().getEventEventCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__OutputAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getOutputOutputDataParserRuleCall_4_0()); }
		ruleOutputData
		{ after(grammarAccess.getSignalAccess().getOutputOutputDataParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsyncronousServiceTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAsyncronousServiceTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__InputsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsyncronousServiceTaskAccess().getInputsInputDataParserRuleCall_3_0()); }
		ruleInputData
		{ after(grammarAccess.getAsyncronousServiceTaskAccess().getInputsInputDataParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsyncronousServiceTask__OutputAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsyncronousServiceTaskAccess().getOutputOutputDataParserRuleCall_4_0()); }
		ruleOutputData
		{ after(grammarAccess.getAsyncronousServiceTaskAccess().getOutputOutputDataParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSyncronousServiceTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSyncronousServiceTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__InputsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSyncronousServiceTaskAccess().getInputsInputDataParserRuleCall_3_0()); }
		ruleInputData
		{ after(grammarAccess.getSyncronousServiceTaskAccess().getInputsInputDataParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SyncronousServiceTask__OutputAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSyncronousServiceTaskAccess().getOutputOutputDataParserRuleCall_4_0()); }
		ruleOutputData
		{ after(grammarAccess.getSyncronousServiceTaskAccess().getOutputOutputDataParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExlcusiveDiverging__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExlcusiveDivergingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExlcusiveDivergingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelDiverging__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParallelDivergingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParallelDivergingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExclusiveConverging__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExclusiveConvergingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExclusiveConvergingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelConverging__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParallelConvergingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParallelConvergingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__FromAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicConnectorAccess().getFromNodeCrossReference_1_0()); }
		(
			{ before(grammarAccess.getBasicConnectorAccess().getFromNodeIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getBasicConnectorAccess().getFromNodeIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getBasicConnectorAccess().getFromNodeCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicConnector__ToAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicConnectorAccess().getToNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getBasicConnectorAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getBasicConnectorAccess().getToNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getBasicConnectorAccess().getToNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableBasedInputAccess().getVariableStringBasedConditionalVaraibleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getVariableBasedInputAccess().getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableBasedInputAccess().getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getVariableBasedInputAccess().getVariableStringBasedConditionalVaraibleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableBasedInput__EventParameterNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableBasedInputAccess().getEventParameterNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getVariableBasedInputAccess().getEventParameterNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__EventAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventBasedInputAccess().getEventEventCrossReference_1_0()); }
		(
			{ before(grammarAccess.getEventBasedInputAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEventBasedInputAccess().getEventEventIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getEventBasedInputAccess().getEventEventCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventBasedInputAccess().getVariableStringBasedConditionalVaraibleCrossReference_2_0()); }
		(
			{ before(grammarAccess.getEventBasedInputAccess().getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEventBasedInputAccess().getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getEventBasedInputAccess().getVariableStringBasedConditionalVaraibleCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventBasedInput__EventParameterNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventBasedInputAccess().getEventParameterNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getEventBasedInputAccess().getEventParameterNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputData__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputDataAccess().getValueStringBasedConditionalVaraibleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getOutputDataAccess().getValueStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOutputDataAccess().getValueStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getOutputDataAccess().getValueStringBasedConditionalVaraibleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConditionalConnectorAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__FromAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getFromNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getConditionalConnectorAccess().getFromNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionalConnectorAccess().getFromNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getConditionalConnectorAccess().getFromNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__ToAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getToNodeCrossReference_3_0()); }
		(
			{ before(grammarAccess.getConditionalConnectorAccess().getToNodeIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionalConnectorAccess().getToNodeIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getConditionalConnectorAccess().getToNodeCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__EventAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getEventEventCrossReference_5_0()); }
		(
			{ before(grammarAccess.getConditionalConnectorAccess().getEventEventIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionalConnectorAccess().getEventEventIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getConditionalConnectorAccess().getEventEventCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__StringBasedConditionalExpressionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0()); }
		(
			{ before(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionStringBasedConditionalVaraibleIDTerminalRuleCall_6_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionStringBasedConditionalVaraibleIDTerminalRuleCall_6_0_1()); }
		)
		{ after(grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalConnector__ValueAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalConnectorAccess().getValueSTRINGTerminalRuleCall_7_0()); }
		RULE_STRING
		{ after(grammarAccess.getConditionalConnectorAccess().getValueSTRINGTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__ProcessVariablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getProcessVariablesProcessVariableParserRuleCall_3_0()); }
		ruleProcessVariable
		{ after(grammarAccess.getTestAccess().getProcessVariablesProcessVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__FireSignalAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getFireSignalFireSignalParserRuleCall_4_0()); }
		ruleFireSignal
		{ after(grammarAccess.getTestAccess().getFireSignalFireSignalParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__AssertFlowAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getAssertFlowAssertFlowParserRuleCall_5_0()); }
		ruleAssertFlow
		{ after(grammarAccess.getTestAccess().getAssertFlowAssertFlowParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__AssertWaitAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getAssertWaitAssertWaitParserRuleCall_6_0()); }
		ruleAssertWait
		{ after(grammarAccess.getTestAccess().getAssertWaitAssertWaitParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessVariableAccess().getVariableStringBasedConditionalVaraibleCrossReference_1_0()); }
		(
			{ before(grammarAccess.getProcessVariableAccess().getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getProcessVariableAccess().getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getProcessVariableAccess().getVariableStringBasedConditionalVaraibleCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessVariable__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcessVariableAccess().getValueConditionalConnectorCrossReference_2_0()); }
		(
			{ before(grammarAccess.getProcessVariableAccess().getValueConditionalConnectorIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getProcessVariableAccess().getValueConditionalConnectorIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getProcessVariableAccess().getValueConditionalConnectorCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__FireSignalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFireSignalAccess().getFireSignalSignalCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFireSignalAccess().getFireSignalSignalIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFireSignalAccess().getFireSignalSignalIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFireSignalAccess().getFireSignalSignalCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FireSignal__CaseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFireSignalAccess().getCaseConditionalConnectorCrossReference_3_0()); }
		(
			{ before(grammarAccess.getFireSignalAccess().getCaseConditionalConnectorIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFireSignalAccess().getCaseConditionalConnectorIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getFireSignalAccess().getCaseConditionalConnectorCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertFlow__NodesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertFlowAccess().getNodesNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getAssertFlowAccess().getNodesNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssertFlowAccess().getNodesNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getAssertFlowAccess().getNodesNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertWait__NodesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssertWaitAccess().getNodesNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getAssertWaitAccess().getNodesNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssertWaitAccess().getNodesNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getAssertWaitAccess().getNodesNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
