/**
 * generated by Xtext 2.35.0
 */
package jpadsl.jPADsl.impl;

import java.util.Collection;

import jpadsl.jPADsl.Cacheable;
import jpadsl.jPADsl.DatabaseMode;
import jpadsl.jPADsl.Entity;
import jpadsl.jPADsl.Feature;
import jpadsl.jPADsl.Identifier;
import jpadsl.jPADsl.Import;
import jpadsl.jPADsl.JPADslPackage;
import jpadsl.jPADsl.ReadOnly;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getDatabaseVendor <em>Database Vendor</em>}</li>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getSuperType <em>Super Type</em>}</li>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getReadOnly <em>Read Only</em>}</li>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getCacheable <em>Cacheable</em>}</li>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getIdentifier <em>Identifier</em>}</li>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link jpadsl.jPADsl.impl.EntityImpl#getFeatures <em>Features</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityImpl extends TypeImpl implements Entity
{
  /**
   * The cached value of the '{@link #getDatabaseVendor() <em>Database Vendor</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDatabaseVendor()
   * @generated
   * @ordered
   */
  protected DatabaseMode databaseVendor;

  /**
   * The cached value of the '{@link #getSuperType() <em>Super Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSuperType()
   * @generated
   * @ordered
   */
  protected Entity superType;

  /**
   * The cached value of the '{@link #getReadOnly() <em>Read Only</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReadOnly()
   * @generated
   * @ordered
   */
  protected ReadOnly readOnly;

  /**
   * The cached value of the '{@link #getCacheable() <em>Cacheable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCacheable()
   * @generated
   * @ordered
   */
  protected Cacheable cacheable;

  /**
   * The cached value of the '{@link #getIdentifier() <em>Identifier</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifier()
   * @generated
   * @ordered
   */
  protected Identifier identifier;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getFeatures() <em>Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatures()
   * @generated
   * @ordered
   */
  protected EList<Feature> features;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPADslPackage.Literals.ENTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseMode getDatabaseVendor()
  {
    if (databaseVendor != null && databaseVendor.eIsProxy())
    {
      InternalEObject oldDatabaseVendor = (InternalEObject)databaseVendor;
      databaseVendor = (DatabaseMode)eResolveProxy(oldDatabaseVendor);
      if (databaseVendor != oldDatabaseVendor)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JPADslPackage.ENTITY__DATABASE_VENDOR, oldDatabaseVendor, databaseVendor));
      }
    }
    return databaseVendor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatabaseMode basicGetDatabaseVendor()
  {
    return databaseVendor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDatabaseVendor(DatabaseMode newDatabaseVendor)
  {
    DatabaseMode oldDatabaseVendor = databaseVendor;
    databaseVendor = newDatabaseVendor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__DATABASE_VENDOR, oldDatabaseVendor, databaseVendor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getSuperType()
  {
    if (superType != null && superType.eIsProxy())
    {
      InternalEObject oldSuperType = (InternalEObject)superType;
      superType = (Entity)eResolveProxy(oldSuperType);
      if (superType != oldSuperType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JPADslPackage.ENTITY__SUPER_TYPE, oldSuperType, superType));
      }
    }
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetSuperType()
  {
    return superType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSuperType(Entity newSuperType)
  {
    Entity oldSuperType = superType;
    superType = newSuperType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__SUPER_TYPE, oldSuperType, superType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadOnly getReadOnly()
  {
    return readOnly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReadOnly(ReadOnly newReadOnly, NotificationChain msgs)
  {
    ReadOnly oldReadOnly = readOnly;
    readOnly = newReadOnly;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__READ_ONLY, oldReadOnly, newReadOnly);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReadOnly(ReadOnly newReadOnly)
  {
    if (newReadOnly != readOnly)
    {
      NotificationChain msgs = null;
      if (readOnly != null)
        msgs = ((InternalEObject)readOnly).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPADslPackage.ENTITY__READ_ONLY, null, msgs);
      if (newReadOnly != null)
        msgs = ((InternalEObject)newReadOnly).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPADslPackage.ENTITY__READ_ONLY, null, msgs);
      msgs = basicSetReadOnly(newReadOnly, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__READ_ONLY, newReadOnly, newReadOnly));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cacheable getCacheable()
  {
    return cacheable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCacheable(Cacheable newCacheable, NotificationChain msgs)
  {
    Cacheable oldCacheable = cacheable;
    cacheable = newCacheable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__CACHEABLE, oldCacheable, newCacheable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCacheable(Cacheable newCacheable)
  {
    if (newCacheable != cacheable)
    {
      NotificationChain msgs = null;
      if (cacheable != null)
        msgs = ((InternalEObject)cacheable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPADslPackage.ENTITY__CACHEABLE, null, msgs);
      if (newCacheable != null)
        msgs = ((InternalEObject)newCacheable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPADslPackage.ENTITY__CACHEABLE, null, msgs);
      msgs = basicSetCacheable(newCacheable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__CACHEABLE, newCacheable, newCacheable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identifier getIdentifier()
  {
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdentifier(Identifier newIdentifier, NotificationChain msgs)
  {
    Identifier oldIdentifier = identifier;
    identifier = newIdentifier;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__IDENTIFIER, oldIdentifier, newIdentifier);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIdentifier(Identifier newIdentifier)
  {
    if (newIdentifier != identifier)
    {
      NotificationChain msgs = null;
      if (identifier != null)
        msgs = ((InternalEObject)identifier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPADslPackage.ENTITY__IDENTIFIER, null, msgs);
      if (newIdentifier != null)
        msgs = ((InternalEObject)newIdentifier).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPADslPackage.ENTITY__IDENTIFIER, null, msgs);
      msgs = basicSetIdentifier(newIdentifier, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPADslPackage.ENTITY__IDENTIFIER, newIdentifier, newIdentifier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, JPADslPackage.ENTITY__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Feature> getFeatures()
  {
    if (features == null)
    {
      features = new EObjectContainmentEList<Feature>(Feature.class, this, JPADslPackage.ENTITY__FEATURES);
    }
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPADslPackage.ENTITY__READ_ONLY:
        return basicSetReadOnly(null, msgs);
      case JPADslPackage.ENTITY__CACHEABLE:
        return basicSetCacheable(null, msgs);
      case JPADslPackage.ENTITY__IDENTIFIER:
        return basicSetIdentifier(null, msgs);
      case JPADslPackage.ENTITY__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case JPADslPackage.ENTITY__FEATURES:
        return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPADslPackage.ENTITY__DATABASE_VENDOR:
        if (resolve) return getDatabaseVendor();
        return basicGetDatabaseVendor();
      case JPADslPackage.ENTITY__SUPER_TYPE:
        if (resolve) return getSuperType();
        return basicGetSuperType();
      case JPADslPackage.ENTITY__READ_ONLY:
        return getReadOnly();
      case JPADslPackage.ENTITY__CACHEABLE:
        return getCacheable();
      case JPADslPackage.ENTITY__IDENTIFIER:
        return getIdentifier();
      case JPADslPackage.ENTITY__IMPORTS:
        return getImports();
      case JPADslPackage.ENTITY__FEATURES:
        return getFeatures();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPADslPackage.ENTITY__DATABASE_VENDOR:
        setDatabaseVendor((DatabaseMode)newValue);
        return;
      case JPADslPackage.ENTITY__SUPER_TYPE:
        setSuperType((Entity)newValue);
        return;
      case JPADslPackage.ENTITY__READ_ONLY:
        setReadOnly((ReadOnly)newValue);
        return;
      case JPADslPackage.ENTITY__CACHEABLE:
        setCacheable((Cacheable)newValue);
        return;
      case JPADslPackage.ENTITY__IDENTIFIER:
        setIdentifier((Identifier)newValue);
        return;
      case JPADslPackage.ENTITY__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case JPADslPackage.ENTITY__FEATURES:
        getFeatures().clear();
        getFeatures().addAll((Collection<? extends Feature>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPADslPackage.ENTITY__DATABASE_VENDOR:
        setDatabaseVendor((DatabaseMode)null);
        return;
      case JPADslPackage.ENTITY__SUPER_TYPE:
        setSuperType((Entity)null);
        return;
      case JPADslPackage.ENTITY__READ_ONLY:
        setReadOnly((ReadOnly)null);
        return;
      case JPADslPackage.ENTITY__CACHEABLE:
        setCacheable((Cacheable)null);
        return;
      case JPADslPackage.ENTITY__IDENTIFIER:
        setIdentifier((Identifier)null);
        return;
      case JPADslPackage.ENTITY__IMPORTS:
        getImports().clear();
        return;
      case JPADslPackage.ENTITY__FEATURES:
        getFeatures().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPADslPackage.ENTITY__DATABASE_VENDOR:
        return databaseVendor != null;
      case JPADslPackage.ENTITY__SUPER_TYPE:
        return superType != null;
      case JPADslPackage.ENTITY__READ_ONLY:
        return readOnly != null;
      case JPADslPackage.ENTITY__CACHEABLE:
        return cacheable != null;
      case JPADslPackage.ENTITY__IDENTIFIER:
        return identifier != null;
      case JPADslPackage.ENTITY__IMPORTS:
        return imports != null && !imports.isEmpty();
      case JPADslPackage.ENTITY__FEATURES:
        return features != null && !features.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //EntityImpl
