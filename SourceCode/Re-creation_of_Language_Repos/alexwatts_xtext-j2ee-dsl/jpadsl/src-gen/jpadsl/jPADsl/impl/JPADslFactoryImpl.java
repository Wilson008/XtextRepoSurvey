/**
 * generated by Xtext 2.35.0
 */
package jpadsl.jPADsl.impl;

import jpadsl.jPADsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JPADslFactoryImpl extends EFactoryImpl implements JPADslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JPADslFactory init()
  {
    try
    {
      JPADslFactory theJPADslFactory = (JPADslFactory)EPackage.Registry.INSTANCE.getEFactory(JPADslPackage.eNS_URI);
      if (theJPADslFactory != null)
      {
        return theJPADslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JPADslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JPADslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JPADslPackage.MODEL: return createModel();
      case JPADslPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case JPADslPackage.IMPORT: return createImport();
      case JPADslPackage.PACKAGE_DECLARATION: return createPackageDeclaration();
      case JPADslPackage.TYPE: return createType();
      case JPADslPackage.DATA_TYPE: return createDataType();
      case JPADslPackage.DATABASE_MODE: return createDatabaseMode();
      case JPADslPackage.ENTITY: return createEntity();
      case JPADslPackage.READ_ONLY: return createReadOnly();
      case JPADslPackage.CACHEABLE: return createCacheable();
      case JPADslPackage.IDENTIFIER: return createIdentifier();
      case JPADslPackage.UNIQUE_IDENTIFER_COLUMN: return createUniqueIdentiferColumn();
      case JPADslPackage.EMBEDDED_UNIQUE_IDENTIFER: return createEmbeddedUniqueIdentifer();
      case JPADslPackage.FEATURE: return createFeature();
      case JPADslPackage.STRUCTURAL_FEATURE: return createStructuralFeature();
      case JPADslPackage.ATTRIBUTE: return createAttribute();
      case JPADslPackage.STATIC_ATTRIBUTE: return createStaticAttribute();
      case JPADslPackage.INTERNAL_ATTRIBUTE: return createInternalAttribute();
      case JPADslPackage.RELATIONSHIP_ATTRIBUTE: return createRelationshipAttribute();
      case JPADslPackage.SINGULAR_RELATIONSHIP_ATTRIBUTE: return createSingularRelationshipAttribute();
      case JPADslPackage.MULTIPLE_RELATIONSHIP_ATTRIBUTE: return createMultipleRelationshipAttribute();
      case JPADslPackage.READ_ONLY_INTERNAL_ATTRIBUTE: return createReadOnlyInternalAttribute();
      case JPADslPackage.UPDATABLE_INTERNAL_ATTRIBUTE: return createUpdatableInternalAttribute();
      case JPADslPackage.TRANSIENT_ATTRIBUTE: return createTransientAttribute();
      case JPADslPackage.ID_ATTRIBUTE: return createIdAttribute();
      case JPADslPackage.ONE_TO_ONE_RELATIONSHIP_ATTRIBUTE: return createOneToOneRelationshipAttribute();
      case JPADslPackage.ONE_TO_ONE_MAPPED_BY_RELATIONSHIP_ATTRIBUTE: return createOneToOneMappedByRelationshipAttribute();
      case JPADslPackage.ONE_TO_MANY_JOIN_TABLE_RELATIONSHIP_ATTRIBUTE: return createOneToManyJoinTableRelationshipAttribute();
      case JPADslPackage.ONE_TO_MANY_JOIN_COLUMN_RELATIONSHIP_ATTRIBUTE: return createOneToManyJoinColumnRelationshipAttribute();
      case JPADslPackage.ONE_TO_MANY_MAPPED_BY_RELATIONSHIP_ATTRIBUTE: return createOneToManyMappedByRelationshipAttribute();
      case JPADslPackage.MANY_TO_ONE_JOIN_COLUMN_RELATION_SHIP_ATTRIBUTE: return createManyToOneJoinColumnRelationShipAttribute();
      case JPADslPackage.MANY_TO_ONE_JOIN_TABLE_RELATION_SHIP_ATTRIBUTE: return createManyToOneJoinTableRelationShipAttribute();
      case JPADslPackage.MANY_TO_ONE_MAPPED_BY_RELATION_SHIP_ATTRIBUTE: return createManyToOneMappedByRelationShipAttribute();
      case JPADslPackage.MANY_TO_MANY_RELATIONSHIP_ATTRIBUTE: return createManyToManyRelationshipAttribute();
      case JPADslPackage.MANY_TO_MANY_MAPPED_BY_RELATIONSHIP_ATTRIBUTE: return createManyToManyMappedByRelationshipAttribute();
      case JPADslPackage.REFERENCE: return createReference();
      case JPADslPackage.OPERATION: return createOperation();
      case JPADslPackage.PARAMETER: return createParameter();
      case JPADslPackage.TYPED_ELEMENT: return createTypedElement();
      case JPADslPackage.TYPE_REF: return createTypeRef();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JPADslPackage.VISIBILITY:
        return createVisibilityFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JPADslPackage.VISIBILITY:
        return convertVisibilityToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDeclaration createPackageDeclaration()
  {
    PackageDeclarationImpl packageDeclaration = new PackageDeclarationImpl();
    return packageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseMode createDatabaseMode()
  {
    DatabaseModeImpl databaseMode = new DatabaseModeImpl();
    return databaseMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadOnly createReadOnly()
  {
    ReadOnlyImpl readOnly = new ReadOnlyImpl();
    return readOnly;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cacheable createCacheable()
  {
    CacheableImpl cacheable = new CacheableImpl();
    return cacheable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identifier createIdentifier()
  {
    IdentifierImpl identifier = new IdentifierImpl();
    return identifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniqueIdentiferColumn createUniqueIdentiferColumn()
  {
    UniqueIdentiferColumnImpl uniqueIdentiferColumn = new UniqueIdentiferColumnImpl();
    return uniqueIdentiferColumn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmbeddedUniqueIdentifer createEmbeddedUniqueIdentifer()
  {
    EmbeddedUniqueIdentiferImpl embeddedUniqueIdentifer = new EmbeddedUniqueIdentiferImpl();
    return embeddedUniqueIdentifer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StructuralFeature createStructuralFeature()
  {
    StructuralFeatureImpl structuralFeature = new StructuralFeatureImpl();
    return structuralFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StaticAttribute createStaticAttribute()
  {
    StaticAttributeImpl staticAttribute = new StaticAttributeImpl();
    return staticAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InternalAttribute createInternalAttribute()
  {
    InternalAttributeImpl internalAttribute = new InternalAttributeImpl();
    return internalAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationshipAttribute createRelationshipAttribute()
  {
    RelationshipAttributeImpl relationshipAttribute = new RelationshipAttributeImpl();
    return relationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingularRelationshipAttribute createSingularRelationshipAttribute()
  {
    SingularRelationshipAttributeImpl singularRelationshipAttribute = new SingularRelationshipAttributeImpl();
    return singularRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultipleRelationshipAttribute createMultipleRelationshipAttribute()
  {
    MultipleRelationshipAttributeImpl multipleRelationshipAttribute = new MultipleRelationshipAttributeImpl();
    return multipleRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReadOnlyInternalAttribute createReadOnlyInternalAttribute()
  {
    ReadOnlyInternalAttributeImpl readOnlyInternalAttribute = new ReadOnlyInternalAttributeImpl();
    return readOnlyInternalAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdatableInternalAttribute createUpdatableInternalAttribute()
  {
    UpdatableInternalAttributeImpl updatableInternalAttribute = new UpdatableInternalAttributeImpl();
    return updatableInternalAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TransientAttribute createTransientAttribute()
  {
    TransientAttributeImpl transientAttribute = new TransientAttributeImpl();
    return transientAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdAttribute createIdAttribute()
  {
    IdAttributeImpl idAttribute = new IdAttributeImpl();
    return idAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneToOneRelationshipAttribute createOneToOneRelationshipAttribute()
  {
    OneToOneRelationshipAttributeImpl oneToOneRelationshipAttribute = new OneToOneRelationshipAttributeImpl();
    return oneToOneRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneToOneMappedByRelationshipAttribute createOneToOneMappedByRelationshipAttribute()
  {
    OneToOneMappedByRelationshipAttributeImpl oneToOneMappedByRelationshipAttribute = new OneToOneMappedByRelationshipAttributeImpl();
    return oneToOneMappedByRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneToManyJoinTableRelationshipAttribute createOneToManyJoinTableRelationshipAttribute()
  {
    OneToManyJoinTableRelationshipAttributeImpl oneToManyJoinTableRelationshipAttribute = new OneToManyJoinTableRelationshipAttributeImpl();
    return oneToManyJoinTableRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneToManyJoinColumnRelationshipAttribute createOneToManyJoinColumnRelationshipAttribute()
  {
    OneToManyJoinColumnRelationshipAttributeImpl oneToManyJoinColumnRelationshipAttribute = new OneToManyJoinColumnRelationshipAttributeImpl();
    return oneToManyJoinColumnRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneToManyMappedByRelationshipAttribute createOneToManyMappedByRelationshipAttribute()
  {
    OneToManyMappedByRelationshipAttributeImpl oneToManyMappedByRelationshipAttribute = new OneToManyMappedByRelationshipAttributeImpl();
    return oneToManyMappedByRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManyToOneJoinColumnRelationShipAttribute createManyToOneJoinColumnRelationShipAttribute()
  {
    ManyToOneJoinColumnRelationShipAttributeImpl manyToOneJoinColumnRelationShipAttribute = new ManyToOneJoinColumnRelationShipAttributeImpl();
    return manyToOneJoinColumnRelationShipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManyToOneJoinTableRelationShipAttribute createManyToOneJoinTableRelationShipAttribute()
  {
    ManyToOneJoinTableRelationShipAttributeImpl manyToOneJoinTableRelationShipAttribute = new ManyToOneJoinTableRelationShipAttributeImpl();
    return manyToOneJoinTableRelationShipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManyToOneMappedByRelationShipAttribute createManyToOneMappedByRelationShipAttribute()
  {
    ManyToOneMappedByRelationShipAttributeImpl manyToOneMappedByRelationShipAttribute = new ManyToOneMappedByRelationShipAttributeImpl();
    return manyToOneMappedByRelationShipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManyToManyRelationshipAttribute createManyToManyRelationshipAttribute()
  {
    ManyToManyRelationshipAttributeImpl manyToManyRelationshipAttribute = new ManyToManyRelationshipAttributeImpl();
    return manyToManyRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ManyToManyMappedByRelationshipAttribute createManyToManyMappedByRelationshipAttribute()
  {
    ManyToManyMappedByRelationshipAttributeImpl manyToManyMappedByRelationshipAttribute = new ManyToManyMappedByRelationshipAttributeImpl();
    return manyToManyMappedByRelationshipAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypedElement createTypedElement()
  {
    TypedElementImpl typedElement = new TypedElementImpl();
    return typedElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeRef createTypeRef()
  {
    TypeRefImpl typeRef = new TypeRefImpl();
    return typeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Visibility createVisibilityFromString(EDataType eDataType, String initialValue)
  {
    Visibility result = Visibility.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVisibilityToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JPADslPackage getJPADslPackage()
  {
    return (JPADslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JPADslPackage getPackage()
  {
    return JPADslPackage.eINSTANCE;
  }

} //JPADslFactoryImpl
