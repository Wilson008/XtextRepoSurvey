/**
 * generated by Xtext 2.35.0
 */
package jpadsl.jPADsl.impl;

import jpadsl.jPADsl.AbstractElement;
import jpadsl.jPADsl.Attribute;
import jpadsl.jPADsl.Cacheable;
import jpadsl.jPADsl.DataType;
import jpadsl.jPADsl.DatabaseMode;
import jpadsl.jPADsl.EmbeddedUniqueIdentifer;
import jpadsl.jPADsl.Entity;
import jpadsl.jPADsl.Feature;
import jpadsl.jPADsl.IdAttribute;
import jpadsl.jPADsl.Identifier;
import jpadsl.jPADsl.Import;
import jpadsl.jPADsl.InternalAttribute;
import jpadsl.jPADsl.JPADslFactory;
import jpadsl.jPADsl.JPADslPackage;
import jpadsl.jPADsl.ManyToManyMappedByRelationshipAttribute;
import jpadsl.jPADsl.ManyToManyRelationshipAttribute;
import jpadsl.jPADsl.ManyToOneJoinColumnRelationShipAttribute;
import jpadsl.jPADsl.ManyToOneJoinTableRelationShipAttribute;
import jpadsl.jPADsl.ManyToOneMappedByRelationShipAttribute;
import jpadsl.jPADsl.Model;
import jpadsl.jPADsl.MultipleRelationshipAttribute;
import jpadsl.jPADsl.OneToManyJoinColumnRelationshipAttribute;
import jpadsl.jPADsl.OneToManyJoinTableRelationshipAttribute;
import jpadsl.jPADsl.OneToManyMappedByRelationshipAttribute;
import jpadsl.jPADsl.OneToOneMappedByRelationshipAttribute;
import jpadsl.jPADsl.OneToOneRelationshipAttribute;
import jpadsl.jPADsl.Operation;
import jpadsl.jPADsl.PackageDeclaration;
import jpadsl.jPADsl.Parameter;
import jpadsl.jPADsl.ReadOnly;
import jpadsl.jPADsl.ReadOnlyInternalAttribute;
import jpadsl.jPADsl.Reference;
import jpadsl.jPADsl.RelationshipAttribute;
import jpadsl.jPADsl.SingularRelationshipAttribute;
import jpadsl.jPADsl.StaticAttribute;
import jpadsl.jPADsl.StructuralFeature;
import jpadsl.jPADsl.TransientAttribute;
import jpadsl.jPADsl.Type;
import jpadsl.jPADsl.TypeRef;
import jpadsl.jPADsl.TypedElement;
import jpadsl.jPADsl.UniqueIdentiferColumn;
import jpadsl.jPADsl.UpdatableInternalAttribute;
import jpadsl.jPADsl.Visibility;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JPADslPackageImpl extends EPackageImpl implements JPADslPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass abstractElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass importEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass packageDeclarationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dataTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass databaseModeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass entityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass readOnlyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass cacheableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass identifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass uniqueIdentiferColumnEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass embeddedUniqueIdentiferEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass featureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass structuralFeatureEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass attributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass staticAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass internalAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singularRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multipleRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass readOnlyInternalAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass updatableInternalAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass transientAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass idAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass oneToOneRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass oneToOneMappedByRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass oneToManyJoinTableRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass oneToManyJoinColumnRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass oneToManyMappedByRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass manyToOneJoinColumnRelationShipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass manyToOneJoinTableRelationShipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass manyToOneMappedByRelationShipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass manyToManyRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass manyToManyMappedByRelationshipAttributeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass referenceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass operationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typedElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass typeRefEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum visibilityEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see jpadsl.jPADsl.JPADslPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private JPADslPackageImpl()
  {
    super(eNS_URI, JPADslFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link JPADslPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static JPADslPackage init()
  {
    if (isInited) return (JPADslPackage)EPackage.Registry.INSTANCE.getEPackage(JPADslPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredJPADslPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    JPADslPackageImpl theJPADslPackage = registeredJPADslPackage instanceof JPADslPackageImpl ? (JPADslPackageImpl)registeredJPADslPackage : new JPADslPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theJPADslPackage.createPackageContents();

    // Initialize created meta-data
    theJPADslPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theJPADslPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(JPADslPackage.eNS_URI, theJPADslPackage);
    return theJPADslPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Elements()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAbstractElement()
  {
    return abstractElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getImport()
  {
    return importEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImport_ImportedNamespace()
  {
    return (EAttribute)importEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPackageDeclaration()
  {
    return packageDeclarationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPackageDeclaration_Name()
  {
    return (EAttribute)packageDeclarationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPackageDeclaration_DatabaseModes()
  {
    return (EReference)packageDeclarationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPackageDeclaration_Elements()
  {
    return (EReference)packageDeclarationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getType()
  {
    return typeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getType_Name()
  {
    return (EAttribute)typeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDataType()
  {
    return dataTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDatabaseMode()
  {
    return databaseModeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDatabaseMode_Name()
  {
    return (EAttribute)databaseModeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEntity()
  {
    return entityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_DatabaseVendor()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_SuperType()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_ReadOnly()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_Cacheable()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_Identifier()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_Imports()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEntity_Features()
  {
    return (EReference)entityEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReadOnly()
  {
    return readOnlyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getReadOnly_TableName()
  {
    return (EAttribute)readOnlyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getReadOnly_IdColumn()
  {
    return (EAttribute)readOnlyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCacheable()
  {
    return cacheableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIdentifier()
  {
    return identifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIdentifier_Name()
  {
    return (EAttribute)identifierEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUniqueIdentiferColumn()
  {
    return uniqueIdentiferColumnEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEmbeddedUniqueIdentifer()
  {
    return embeddedUniqueIdentiferEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFeature()
  {
    return featureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStructuralFeature()
  {
    return structuralFeatureEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAttribute()
  {
    return attributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStaticAttribute()
  {
    return staticAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInternalAttribute()
  {
    return internalAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRelationshipAttribute()
  {
    return relationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSingularRelationshipAttribute()
  {
    return singularRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultipleRelationshipAttribute()
  {
    return multipleRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReadOnlyInternalAttribute()
  {
    return readOnlyInternalAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getUpdatableInternalAttribute()
  {
    return updatableInternalAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTransientAttribute()
  {
    return transientAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIdAttribute()
  {
    return idAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOneToOneRelationshipAttribute()
  {
    return oneToOneRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOneToOneRelationshipAttribute_JoinColumnOverride()
  {
    return (EAttribute)oneToOneRelationshipAttributeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOneToOneMappedByRelationshipAttribute()
  {
    return oneToOneMappedByRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOneToManyJoinTableRelationshipAttribute()
  {
    return oneToManyJoinTableRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOneToManyJoinColumnRelationshipAttribute()
  {
    return oneToManyJoinColumnRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOneToManyMappedByRelationshipAttribute()
  {
    return oneToManyMappedByRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getManyToOneJoinColumnRelationShipAttribute()
  {
    return manyToOneJoinColumnRelationShipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getManyToOneJoinColumnRelationShipAttribute_JoinColumnOverride()
  {
    return (EAttribute)manyToOneJoinColumnRelationShipAttributeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getManyToOneJoinTableRelationShipAttribute()
  {
    return manyToOneJoinTableRelationShipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getManyToOneMappedByRelationShipAttribute()
  {
    return manyToOneMappedByRelationShipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getManyToManyRelationshipAttribute()
  {
    return manyToManyRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getManyToManyMappedByRelationshipAttribute()
  {
    return manyToManyMappedByRelationshipAttributeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getReference()
  {
    return referenceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getReference_Opposite()
  {
    return (EReference)referenceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOperation()
  {
    return operationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getOperation_Visibility()
  {
    return (EAttribute)operationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOperation_Params()
  {
    return (EReference)operationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParameter()
  {
    return parameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTypedElement()
  {
    return typedElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTypedElement_Name()
  {
    return (EAttribute)typedElementEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTypedElement_Type()
  {
    return (EReference)typedElementEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTypeRef()
  {
    return typeRefEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTypeRef_Referenced()
  {
    return (EReference)typeRefEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTypeRef_Multi()
  {
    return (EAttribute)typeRefEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getVisibility()
  {
    return visibilityEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JPADslFactory getJPADslFactory()
  {
    return (JPADslFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__ELEMENTS);

    abstractElementEClass = createEClass(ABSTRACT_ELEMENT);

    importEClass = createEClass(IMPORT);
    createEAttribute(importEClass, IMPORT__IMPORTED_NAMESPACE);

    packageDeclarationEClass = createEClass(PACKAGE_DECLARATION);
    createEAttribute(packageDeclarationEClass, PACKAGE_DECLARATION__NAME);
    createEReference(packageDeclarationEClass, PACKAGE_DECLARATION__DATABASE_MODES);
    createEReference(packageDeclarationEClass, PACKAGE_DECLARATION__ELEMENTS);

    typeEClass = createEClass(TYPE);
    createEAttribute(typeEClass, TYPE__NAME);

    dataTypeEClass = createEClass(DATA_TYPE);

    databaseModeEClass = createEClass(DATABASE_MODE);
    createEAttribute(databaseModeEClass, DATABASE_MODE__NAME);

    entityEClass = createEClass(ENTITY);
    createEReference(entityEClass, ENTITY__DATABASE_VENDOR);
    createEReference(entityEClass, ENTITY__SUPER_TYPE);
    createEReference(entityEClass, ENTITY__READ_ONLY);
    createEReference(entityEClass, ENTITY__CACHEABLE);
    createEReference(entityEClass, ENTITY__IDENTIFIER);
    createEReference(entityEClass, ENTITY__IMPORTS);
    createEReference(entityEClass, ENTITY__FEATURES);

    readOnlyEClass = createEClass(READ_ONLY);
    createEAttribute(readOnlyEClass, READ_ONLY__TABLE_NAME);
    createEAttribute(readOnlyEClass, READ_ONLY__ID_COLUMN);

    cacheableEClass = createEClass(CACHEABLE);

    identifierEClass = createEClass(IDENTIFIER);
    createEAttribute(identifierEClass, IDENTIFIER__NAME);

    uniqueIdentiferColumnEClass = createEClass(UNIQUE_IDENTIFER_COLUMN);

    embeddedUniqueIdentiferEClass = createEClass(EMBEDDED_UNIQUE_IDENTIFER);

    featureEClass = createEClass(FEATURE);

    structuralFeatureEClass = createEClass(STRUCTURAL_FEATURE);

    attributeEClass = createEClass(ATTRIBUTE);

    staticAttributeEClass = createEClass(STATIC_ATTRIBUTE);

    internalAttributeEClass = createEClass(INTERNAL_ATTRIBUTE);

    relationshipAttributeEClass = createEClass(RELATIONSHIP_ATTRIBUTE);

    singularRelationshipAttributeEClass = createEClass(SINGULAR_RELATIONSHIP_ATTRIBUTE);

    multipleRelationshipAttributeEClass = createEClass(MULTIPLE_RELATIONSHIP_ATTRIBUTE);

    readOnlyInternalAttributeEClass = createEClass(READ_ONLY_INTERNAL_ATTRIBUTE);

    updatableInternalAttributeEClass = createEClass(UPDATABLE_INTERNAL_ATTRIBUTE);

    transientAttributeEClass = createEClass(TRANSIENT_ATTRIBUTE);

    idAttributeEClass = createEClass(ID_ATTRIBUTE);

    oneToOneRelationshipAttributeEClass = createEClass(ONE_TO_ONE_RELATIONSHIP_ATTRIBUTE);
    createEAttribute(oneToOneRelationshipAttributeEClass, ONE_TO_ONE_RELATIONSHIP_ATTRIBUTE__JOIN_COLUMN_OVERRIDE);

    oneToOneMappedByRelationshipAttributeEClass = createEClass(ONE_TO_ONE_MAPPED_BY_RELATIONSHIP_ATTRIBUTE);

    oneToManyJoinTableRelationshipAttributeEClass = createEClass(ONE_TO_MANY_JOIN_TABLE_RELATIONSHIP_ATTRIBUTE);

    oneToManyJoinColumnRelationshipAttributeEClass = createEClass(ONE_TO_MANY_JOIN_COLUMN_RELATIONSHIP_ATTRIBUTE);

    oneToManyMappedByRelationshipAttributeEClass = createEClass(ONE_TO_MANY_MAPPED_BY_RELATIONSHIP_ATTRIBUTE);

    manyToOneJoinColumnRelationShipAttributeEClass = createEClass(MANY_TO_ONE_JOIN_COLUMN_RELATION_SHIP_ATTRIBUTE);
    createEAttribute(manyToOneJoinColumnRelationShipAttributeEClass, MANY_TO_ONE_JOIN_COLUMN_RELATION_SHIP_ATTRIBUTE__JOIN_COLUMN_OVERRIDE);

    manyToOneJoinTableRelationShipAttributeEClass = createEClass(MANY_TO_ONE_JOIN_TABLE_RELATION_SHIP_ATTRIBUTE);

    manyToOneMappedByRelationShipAttributeEClass = createEClass(MANY_TO_ONE_MAPPED_BY_RELATION_SHIP_ATTRIBUTE);

    manyToManyRelationshipAttributeEClass = createEClass(MANY_TO_MANY_RELATIONSHIP_ATTRIBUTE);

    manyToManyMappedByRelationshipAttributeEClass = createEClass(MANY_TO_MANY_MAPPED_BY_RELATIONSHIP_ATTRIBUTE);

    referenceEClass = createEClass(REFERENCE);
    createEReference(referenceEClass, REFERENCE__OPPOSITE);

    operationEClass = createEClass(OPERATION);
    createEAttribute(operationEClass, OPERATION__VISIBILITY);
    createEReference(operationEClass, OPERATION__PARAMS);

    parameterEClass = createEClass(PARAMETER);

    typedElementEClass = createEClass(TYPED_ELEMENT);
    createEAttribute(typedElementEClass, TYPED_ELEMENT__NAME);
    createEReference(typedElementEClass, TYPED_ELEMENT__TYPE);

    typeRefEClass = createEClass(TYPE_REF);
    createEReference(typeRefEClass, TYPE_REF__REFERENCED);
    createEAttribute(typeRefEClass, TYPE_REF__MULTI);

    // Create enums
    visibilityEEnum = createEEnum(VISIBILITY);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    importEClass.getESuperTypes().add(this.getAbstractElement());
    packageDeclarationEClass.getESuperTypes().add(this.getAbstractElement());
    typeEClass.getESuperTypes().add(this.getAbstractElement());
    dataTypeEClass.getESuperTypes().add(this.getType());
    entityEClass.getESuperTypes().add(this.getType());
    uniqueIdentiferColumnEClass.getESuperTypes().add(this.getIdentifier());
    embeddedUniqueIdentiferEClass.getESuperTypes().add(this.getIdentifier());
    featureEClass.getESuperTypes().add(this.getTypedElement());
    structuralFeatureEClass.getESuperTypes().add(this.getFeature());
    attributeEClass.getESuperTypes().add(this.getStructuralFeature());
    staticAttributeEClass.getESuperTypes().add(this.getAttribute());
    internalAttributeEClass.getESuperTypes().add(this.getAttribute());
    relationshipAttributeEClass.getESuperTypes().add(this.getAbstractElement());
    relationshipAttributeEClass.getESuperTypes().add(this.getAttribute());
    singularRelationshipAttributeEClass.getESuperTypes().add(this.getRelationshipAttribute());
    multipleRelationshipAttributeEClass.getESuperTypes().add(this.getRelationshipAttribute());
    readOnlyInternalAttributeEClass.getESuperTypes().add(this.getInternalAttribute());
    updatableInternalAttributeEClass.getESuperTypes().add(this.getInternalAttribute());
    transientAttributeEClass.getESuperTypes().add(this.getInternalAttribute());
    idAttributeEClass.getESuperTypes().add(this.getInternalAttribute());
    oneToOneRelationshipAttributeEClass.getESuperTypes().add(this.getSingularRelationshipAttribute());
    oneToOneMappedByRelationshipAttributeEClass.getESuperTypes().add(this.getSingularRelationshipAttribute());
    oneToManyJoinTableRelationshipAttributeEClass.getESuperTypes().add(this.getMultipleRelationshipAttribute());
    oneToManyJoinColumnRelationshipAttributeEClass.getESuperTypes().add(this.getMultipleRelationshipAttribute());
    oneToManyMappedByRelationshipAttributeEClass.getESuperTypes().add(this.getMultipleRelationshipAttribute());
    manyToOneJoinColumnRelationShipAttributeEClass.getESuperTypes().add(this.getSingularRelationshipAttribute());
    manyToOneJoinTableRelationShipAttributeEClass.getESuperTypes().add(this.getSingularRelationshipAttribute());
    manyToOneMappedByRelationShipAttributeEClass.getESuperTypes().add(this.getSingularRelationshipAttribute());
    manyToManyRelationshipAttributeEClass.getESuperTypes().add(this.getMultipleRelationshipAttribute());
    manyToManyMappedByRelationshipAttributeEClass.getESuperTypes().add(this.getMultipleRelationshipAttribute());
    referenceEClass.getESuperTypes().add(this.getStructuralFeature());
    operationEClass.getESuperTypes().add(this.getFeature());
    parameterEClass.getESuperTypes().add(this.getTypedElement());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Elements(), this.getAbstractElement(), null, "elements", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(abstractElementEClass, AbstractElement.class, "AbstractElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(importEClass, Import.class, "Import", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getImport_ImportedNamespace(), ecorePackage.getEString(), "importedNamespace", null, 0, 1, Import.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(packageDeclarationEClass, PackageDeclaration.class, "PackageDeclaration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPackageDeclaration_Name(), ecorePackage.getEString(), "name", null, 0, 1, PackageDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPackageDeclaration_DatabaseModes(), this.getDatabaseMode(), null, "databaseModes", null, 0, -1, PackageDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPackageDeclaration_Elements(), this.getAbstractElement(), null, "elements", null, 0, -1, PackageDeclaration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeEClass, Type.class, "Type", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getType_Name(), ecorePackage.getEString(), "name", null, 0, 1, Type.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dataTypeEClass, DataType.class, "DataType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(databaseModeEClass, DatabaseMode.class, "DatabaseMode", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDatabaseMode_Name(), ecorePackage.getEString(), "name", null, 0, 1, DatabaseMode.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(entityEClass, Entity.class, "Entity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEntity_DatabaseVendor(), this.getDatabaseMode(), null, "databaseVendor", null, 0, 1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEntity_SuperType(), this.getEntity(), null, "superType", null, 0, 1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEntity_ReadOnly(), this.getReadOnly(), null, "readOnly", null, 0, 1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEntity_Cacheable(), this.getCacheable(), null, "cacheable", null, 0, 1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEntity_Identifier(), this.getIdentifier(), null, "identifier", null, 0, 1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEntity_Imports(), this.getImport(), null, "imports", null, 0, -1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEntity_Features(), this.getFeature(), null, "features", null, 0, -1, Entity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(readOnlyEClass, ReadOnly.class, "ReadOnly", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getReadOnly_TableName(), ecorePackage.getEString(), "tableName", null, 0, 1, ReadOnly.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getReadOnly_IdColumn(), ecorePackage.getEString(), "idColumn", null, 0, 1, ReadOnly.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(cacheableEClass, Cacheable.class, "Cacheable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(identifierEClass, Identifier.class, "Identifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIdentifier_Name(), ecorePackage.getEString(), "name", null, 0, 1, Identifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(uniqueIdentiferColumnEClass, UniqueIdentiferColumn.class, "UniqueIdentiferColumn", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(embeddedUniqueIdentiferEClass, EmbeddedUniqueIdentifer.class, "EmbeddedUniqueIdentifer", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(featureEClass, Feature.class, "Feature", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(structuralFeatureEClass, StructuralFeature.class, "StructuralFeature", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(attributeEClass, Attribute.class, "Attribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(staticAttributeEClass, StaticAttribute.class, "StaticAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(internalAttributeEClass, InternalAttribute.class, "InternalAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(relationshipAttributeEClass, RelationshipAttribute.class, "RelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(singularRelationshipAttributeEClass, SingularRelationshipAttribute.class, "SingularRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(multipleRelationshipAttributeEClass, MultipleRelationshipAttribute.class, "MultipleRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(readOnlyInternalAttributeEClass, ReadOnlyInternalAttribute.class, "ReadOnlyInternalAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(updatableInternalAttributeEClass, UpdatableInternalAttribute.class, "UpdatableInternalAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(transientAttributeEClass, TransientAttribute.class, "TransientAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(idAttributeEClass, IdAttribute.class, "IdAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(oneToOneRelationshipAttributeEClass, OneToOneRelationshipAttribute.class, "OneToOneRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOneToOneRelationshipAttribute_JoinColumnOverride(), ecorePackage.getEString(), "joinColumnOverride", null, 0, 1, OneToOneRelationshipAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(oneToOneMappedByRelationshipAttributeEClass, OneToOneMappedByRelationshipAttribute.class, "OneToOneMappedByRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(oneToManyJoinTableRelationshipAttributeEClass, OneToManyJoinTableRelationshipAttribute.class, "OneToManyJoinTableRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(oneToManyJoinColumnRelationshipAttributeEClass, OneToManyJoinColumnRelationshipAttribute.class, "OneToManyJoinColumnRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(oneToManyMappedByRelationshipAttributeEClass, OneToManyMappedByRelationshipAttribute.class, "OneToManyMappedByRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(manyToOneJoinColumnRelationShipAttributeEClass, ManyToOneJoinColumnRelationShipAttribute.class, "ManyToOneJoinColumnRelationShipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getManyToOneJoinColumnRelationShipAttribute_JoinColumnOverride(), ecorePackage.getEString(), "joinColumnOverride", null, 0, 1, ManyToOneJoinColumnRelationShipAttribute.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(manyToOneJoinTableRelationShipAttributeEClass, ManyToOneJoinTableRelationShipAttribute.class, "ManyToOneJoinTableRelationShipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(manyToOneMappedByRelationShipAttributeEClass, ManyToOneMappedByRelationShipAttribute.class, "ManyToOneMappedByRelationShipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(manyToManyRelationshipAttributeEClass, ManyToManyRelationshipAttribute.class, "ManyToManyRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(manyToManyMappedByRelationshipAttributeEClass, ManyToManyMappedByRelationshipAttribute.class, "ManyToManyMappedByRelationshipAttribute", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(referenceEClass, Reference.class, "Reference", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getReference_Opposite(), this.getReference(), null, "opposite", null, 0, 1, Reference.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(operationEClass, Operation.class, "Operation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOperation_Visibility(), this.getVisibility(), "visibility", null, 0, 1, Operation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOperation_Params(), this.getParameter(), null, "params", null, 0, -1, Operation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterEClass, Parameter.class, "Parameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(typedElementEClass, TypedElement.class, "TypedElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTypedElement_Name(), ecorePackage.getEString(), "name", null, 0, 1, TypedElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTypedElement_Type(), this.getTypeRef(), null, "type", null, 0, 1, TypedElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(typeRefEClass, TypeRef.class, "TypeRef", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTypeRef_Referenced(), this.getType(), null, "referenced", null, 0, 1, TypeRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTypeRef_Multi(), ecorePackage.getEBoolean(), "multi", null, 0, 1, TypeRef.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(visibilityEEnum, Visibility.class, "Visibility");
    addEEnumLiteral(visibilityEEnum, Visibility.PUBLIC);
    addEEnumLiteral(visibilityEEnum, Visibility.PRIVATE);
    addEEnumLiteral(visibilityEEnum, Visibility.PROTECTED);

    // Create resource
    createResource(eNS_URI);
  }

} //JPADslPackageImpl
