/**
 * generated by Xtext 2.35.0
 */
package jpadsl.jPADsl.util;

import jpadsl.jPADsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see jpadsl.jPADsl.JPADslPackage
 * @generated
 */
public class JPADslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JPADslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JPADslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = JPADslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JPADslSwitch<Adapter> modelSwitch =
    new JPADslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter casePackageDeclaration(PackageDeclaration object)
      {
        return createPackageDeclarationAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseDatabaseMode(DatabaseMode object)
      {
        return createDatabaseModeAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseReadOnly(ReadOnly object)
      {
        return createReadOnlyAdapter();
      }
      @Override
      public Adapter caseCacheable(Cacheable object)
      {
        return createCacheableAdapter();
      }
      @Override
      public Adapter caseIdentifier(Identifier object)
      {
        return createIdentifierAdapter();
      }
      @Override
      public Adapter caseUniqueIdentiferColumn(UniqueIdentiferColumn object)
      {
        return createUniqueIdentiferColumnAdapter();
      }
      @Override
      public Adapter caseEmbeddedUniqueIdentifer(EmbeddedUniqueIdentifer object)
      {
        return createEmbeddedUniqueIdentiferAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseStructuralFeature(StructuralFeature object)
      {
        return createStructuralFeatureAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseStaticAttribute(StaticAttribute object)
      {
        return createStaticAttributeAdapter();
      }
      @Override
      public Adapter caseInternalAttribute(InternalAttribute object)
      {
        return createInternalAttributeAdapter();
      }
      @Override
      public Adapter caseRelationshipAttribute(RelationshipAttribute object)
      {
        return createRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseSingularRelationshipAttribute(SingularRelationshipAttribute object)
      {
        return createSingularRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseMultipleRelationshipAttribute(MultipleRelationshipAttribute object)
      {
        return createMultipleRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseReadOnlyInternalAttribute(ReadOnlyInternalAttribute object)
      {
        return createReadOnlyInternalAttributeAdapter();
      }
      @Override
      public Adapter caseUpdatableInternalAttribute(UpdatableInternalAttribute object)
      {
        return createUpdatableInternalAttributeAdapter();
      }
      @Override
      public Adapter caseTransientAttribute(TransientAttribute object)
      {
        return createTransientAttributeAdapter();
      }
      @Override
      public Adapter caseIdAttribute(IdAttribute object)
      {
        return createIdAttributeAdapter();
      }
      @Override
      public Adapter caseOneToOneRelationshipAttribute(OneToOneRelationshipAttribute object)
      {
        return createOneToOneRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseOneToOneMappedByRelationshipAttribute(OneToOneMappedByRelationshipAttribute object)
      {
        return createOneToOneMappedByRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseOneToManyJoinTableRelationshipAttribute(OneToManyJoinTableRelationshipAttribute object)
      {
        return createOneToManyJoinTableRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseOneToManyJoinColumnRelationshipAttribute(OneToManyJoinColumnRelationshipAttribute object)
      {
        return createOneToManyJoinColumnRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseOneToManyMappedByRelationshipAttribute(OneToManyMappedByRelationshipAttribute object)
      {
        return createOneToManyMappedByRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseManyToOneJoinColumnRelationShipAttribute(ManyToOneJoinColumnRelationShipAttribute object)
      {
        return createManyToOneJoinColumnRelationShipAttributeAdapter();
      }
      @Override
      public Adapter caseManyToOneJoinTableRelationShipAttribute(ManyToOneJoinTableRelationShipAttribute object)
      {
        return createManyToOneJoinTableRelationShipAttributeAdapter();
      }
      @Override
      public Adapter caseManyToOneMappedByRelationShipAttribute(ManyToOneMappedByRelationShipAttribute object)
      {
        return createManyToOneMappedByRelationShipAttributeAdapter();
      }
      @Override
      public Adapter caseManyToManyRelationshipAttribute(ManyToManyRelationshipAttribute object)
      {
        return createManyToManyRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseManyToManyMappedByRelationshipAttribute(ManyToManyMappedByRelationshipAttribute object)
      {
        return createManyToManyMappedByRelationshipAttributeAdapter();
      }
      @Override
      public Adapter caseReference(Reference object)
      {
        return createReferenceAdapter();
      }
      @Override
      public Adapter caseOperation(Operation object)
      {
        return createOperationAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseTypedElement(TypedElement object)
      {
        return createTypedElementAdapter();
      }
      @Override
      public Adapter caseTypeRef(TypeRef object)
      {
        return createTypeRefAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.PackageDeclaration <em>Package Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.PackageDeclaration
   * @generated
   */
  public Adapter createPackageDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.DatabaseMode <em>Database Mode</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.DatabaseMode
   * @generated
   */
  public Adapter createDatabaseModeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ReadOnly <em>Read Only</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ReadOnly
   * @generated
   */
  public Adapter createReadOnlyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Cacheable <em>Cacheable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Cacheable
   * @generated
   */
  public Adapter createCacheableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Identifier <em>Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Identifier
   * @generated
   */
  public Adapter createIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.UniqueIdentiferColumn <em>Unique Identifer Column</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.UniqueIdentiferColumn
   * @generated
   */
  public Adapter createUniqueIdentiferColumnAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.EmbeddedUniqueIdentifer <em>Embedded Unique Identifer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.EmbeddedUniqueIdentifer
   * @generated
   */
  public Adapter createEmbeddedUniqueIdentiferAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.StructuralFeature <em>Structural Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.StructuralFeature
   * @generated
   */
  public Adapter createStructuralFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.StaticAttribute <em>Static Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.StaticAttribute
   * @generated
   */
  public Adapter createStaticAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.InternalAttribute <em>Internal Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.InternalAttribute
   * @generated
   */
  public Adapter createInternalAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.RelationshipAttribute <em>Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.RelationshipAttribute
   * @generated
   */
  public Adapter createRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.SingularRelationshipAttribute <em>Singular Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.SingularRelationshipAttribute
   * @generated
   */
  public Adapter createSingularRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.MultipleRelationshipAttribute <em>Multiple Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.MultipleRelationshipAttribute
   * @generated
   */
  public Adapter createMultipleRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ReadOnlyInternalAttribute <em>Read Only Internal Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ReadOnlyInternalAttribute
   * @generated
   */
  public Adapter createReadOnlyInternalAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.UpdatableInternalAttribute <em>Updatable Internal Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.UpdatableInternalAttribute
   * @generated
   */
  public Adapter createUpdatableInternalAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.TransientAttribute <em>Transient Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.TransientAttribute
   * @generated
   */
  public Adapter createTransientAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.IdAttribute <em>Id Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.IdAttribute
   * @generated
   */
  public Adapter createIdAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.OneToOneRelationshipAttribute <em>One To One Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.OneToOneRelationshipAttribute
   * @generated
   */
  public Adapter createOneToOneRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.OneToOneMappedByRelationshipAttribute <em>One To One Mapped By Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.OneToOneMappedByRelationshipAttribute
   * @generated
   */
  public Adapter createOneToOneMappedByRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.OneToManyJoinTableRelationshipAttribute <em>One To Many Join Table Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.OneToManyJoinTableRelationshipAttribute
   * @generated
   */
  public Adapter createOneToManyJoinTableRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.OneToManyJoinColumnRelationshipAttribute <em>One To Many Join Column Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.OneToManyJoinColumnRelationshipAttribute
   * @generated
   */
  public Adapter createOneToManyJoinColumnRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.OneToManyMappedByRelationshipAttribute <em>One To Many Mapped By Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.OneToManyMappedByRelationshipAttribute
   * @generated
   */
  public Adapter createOneToManyMappedByRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ManyToOneJoinColumnRelationShipAttribute <em>Many To One Join Column Relation Ship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ManyToOneJoinColumnRelationShipAttribute
   * @generated
   */
  public Adapter createManyToOneJoinColumnRelationShipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ManyToOneJoinTableRelationShipAttribute <em>Many To One Join Table Relation Ship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ManyToOneJoinTableRelationShipAttribute
   * @generated
   */
  public Adapter createManyToOneJoinTableRelationShipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ManyToOneMappedByRelationShipAttribute <em>Many To One Mapped By Relation Ship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ManyToOneMappedByRelationShipAttribute
   * @generated
   */
  public Adapter createManyToOneMappedByRelationShipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ManyToManyRelationshipAttribute <em>Many To Many Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ManyToManyRelationshipAttribute
   * @generated
   */
  public Adapter createManyToManyRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.ManyToManyMappedByRelationshipAttribute <em>Many To Many Mapped By Relationship Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.ManyToManyMappedByRelationshipAttribute
   * @generated
   */
  public Adapter createManyToManyMappedByRelationshipAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Reference <em>Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Reference
   * @generated
   */
  public Adapter createReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Operation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Operation
   * @generated
   */
  public Adapter createOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.TypedElement <em>Typed Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.TypedElement
   * @generated
   */
  public Adapter createTypedElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpadsl.jPADsl.TypeRef <em>Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpadsl.jPADsl.TypeRef
   * @generated
   */
  public Adapter createTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //JPADslAdapterFactory
