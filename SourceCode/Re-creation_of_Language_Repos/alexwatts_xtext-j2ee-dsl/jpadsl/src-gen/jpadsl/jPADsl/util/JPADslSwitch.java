/**
 * generated by Xtext 2.35.0
 */
package jpadsl.jPADsl.util;

import jpadsl.jPADsl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see jpadsl.jPADsl.JPADslPackage
 * @generated
 */
public class JPADslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JPADslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JPADslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = JPADslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case JPADslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = caseAbstractElement(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.PACKAGE_DECLARATION:
      {
        PackageDeclaration packageDeclaration = (PackageDeclaration)theEObject;
        T result = casePackageDeclaration(packageDeclaration);
        if (result == null) result = caseAbstractElement(packageDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = caseAbstractElement(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = caseType(dataType);
        if (result == null) result = caseAbstractElement(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.DATABASE_MODE:
      {
        DatabaseMode databaseMode = (DatabaseMode)theEObject;
        T result = caseDatabaseMode(databaseMode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ENTITY:
      {
        Entity entity = (Entity)theEObject;
        T result = caseEntity(entity);
        if (result == null) result = caseType(entity);
        if (result == null) result = caseAbstractElement(entity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.READ_ONLY:
      {
        ReadOnly readOnly = (ReadOnly)theEObject;
        T result = caseReadOnly(readOnly);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.CACHEABLE:
      {
        Cacheable cacheable = (Cacheable)theEObject;
        T result = caseCacheable(cacheable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.IDENTIFIER:
      {
        Identifier identifier = (Identifier)theEObject;
        T result = caseIdentifier(identifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.UNIQUE_IDENTIFER_COLUMN:
      {
        UniqueIdentiferColumn uniqueIdentiferColumn = (UniqueIdentiferColumn)theEObject;
        T result = caseUniqueIdentiferColumn(uniqueIdentiferColumn);
        if (result == null) result = caseIdentifier(uniqueIdentiferColumn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.EMBEDDED_UNIQUE_IDENTIFER:
      {
        EmbeddedUniqueIdentifer embeddedUniqueIdentifer = (EmbeddedUniqueIdentifer)theEObject;
        T result = caseEmbeddedUniqueIdentifer(embeddedUniqueIdentifer);
        if (result == null) result = caseIdentifier(embeddedUniqueIdentifer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = caseTypedElement(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.STRUCTURAL_FEATURE:
      {
        StructuralFeature structuralFeature = (StructuralFeature)theEObject;
        T result = caseStructuralFeature(structuralFeature);
        if (result == null) result = caseFeature(structuralFeature);
        if (result == null) result = caseTypedElement(structuralFeature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = caseStructuralFeature(attribute);
        if (result == null) result = caseFeature(attribute);
        if (result == null) result = caseTypedElement(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.STATIC_ATTRIBUTE:
      {
        StaticAttribute staticAttribute = (StaticAttribute)theEObject;
        T result = caseStaticAttribute(staticAttribute);
        if (result == null) result = caseAttribute(staticAttribute);
        if (result == null) result = caseStructuralFeature(staticAttribute);
        if (result == null) result = caseFeature(staticAttribute);
        if (result == null) result = caseTypedElement(staticAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.INTERNAL_ATTRIBUTE:
      {
        InternalAttribute internalAttribute = (InternalAttribute)theEObject;
        T result = caseInternalAttribute(internalAttribute);
        if (result == null) result = caseAttribute(internalAttribute);
        if (result == null) result = caseStructuralFeature(internalAttribute);
        if (result == null) result = caseFeature(internalAttribute);
        if (result == null) result = caseTypedElement(internalAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.RELATIONSHIP_ATTRIBUTE:
      {
        RelationshipAttribute relationshipAttribute = (RelationshipAttribute)theEObject;
        T result = caseRelationshipAttribute(relationshipAttribute);
        if (result == null) result = caseAbstractElement(relationshipAttribute);
        if (result == null) result = caseAttribute(relationshipAttribute);
        if (result == null) result = caseStructuralFeature(relationshipAttribute);
        if (result == null) result = caseFeature(relationshipAttribute);
        if (result == null) result = caseTypedElement(relationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.SINGULAR_RELATIONSHIP_ATTRIBUTE:
      {
        SingularRelationshipAttribute singularRelationshipAttribute = (SingularRelationshipAttribute)theEObject;
        T result = caseSingularRelationshipAttribute(singularRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(singularRelationshipAttribute);
        if (result == null) result = caseAbstractElement(singularRelationshipAttribute);
        if (result == null) result = caseAttribute(singularRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(singularRelationshipAttribute);
        if (result == null) result = caseFeature(singularRelationshipAttribute);
        if (result == null) result = caseTypedElement(singularRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.MULTIPLE_RELATIONSHIP_ATTRIBUTE:
      {
        MultipleRelationshipAttribute multipleRelationshipAttribute = (MultipleRelationshipAttribute)theEObject;
        T result = caseMultipleRelationshipAttribute(multipleRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(multipleRelationshipAttribute);
        if (result == null) result = caseAbstractElement(multipleRelationshipAttribute);
        if (result == null) result = caseAttribute(multipleRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(multipleRelationshipAttribute);
        if (result == null) result = caseFeature(multipleRelationshipAttribute);
        if (result == null) result = caseTypedElement(multipleRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.READ_ONLY_INTERNAL_ATTRIBUTE:
      {
        ReadOnlyInternalAttribute readOnlyInternalAttribute = (ReadOnlyInternalAttribute)theEObject;
        T result = caseReadOnlyInternalAttribute(readOnlyInternalAttribute);
        if (result == null) result = caseInternalAttribute(readOnlyInternalAttribute);
        if (result == null) result = caseAttribute(readOnlyInternalAttribute);
        if (result == null) result = caseStructuralFeature(readOnlyInternalAttribute);
        if (result == null) result = caseFeature(readOnlyInternalAttribute);
        if (result == null) result = caseTypedElement(readOnlyInternalAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.UPDATABLE_INTERNAL_ATTRIBUTE:
      {
        UpdatableInternalAttribute updatableInternalAttribute = (UpdatableInternalAttribute)theEObject;
        T result = caseUpdatableInternalAttribute(updatableInternalAttribute);
        if (result == null) result = caseInternalAttribute(updatableInternalAttribute);
        if (result == null) result = caseAttribute(updatableInternalAttribute);
        if (result == null) result = caseStructuralFeature(updatableInternalAttribute);
        if (result == null) result = caseFeature(updatableInternalAttribute);
        if (result == null) result = caseTypedElement(updatableInternalAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.TRANSIENT_ATTRIBUTE:
      {
        TransientAttribute transientAttribute = (TransientAttribute)theEObject;
        T result = caseTransientAttribute(transientAttribute);
        if (result == null) result = caseInternalAttribute(transientAttribute);
        if (result == null) result = caseAttribute(transientAttribute);
        if (result == null) result = caseStructuralFeature(transientAttribute);
        if (result == null) result = caseFeature(transientAttribute);
        if (result == null) result = caseTypedElement(transientAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ID_ATTRIBUTE:
      {
        IdAttribute idAttribute = (IdAttribute)theEObject;
        T result = caseIdAttribute(idAttribute);
        if (result == null) result = caseInternalAttribute(idAttribute);
        if (result == null) result = caseAttribute(idAttribute);
        if (result == null) result = caseStructuralFeature(idAttribute);
        if (result == null) result = caseFeature(idAttribute);
        if (result == null) result = caseTypedElement(idAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ONE_TO_ONE_RELATIONSHIP_ATTRIBUTE:
      {
        OneToOneRelationshipAttribute oneToOneRelationshipAttribute = (OneToOneRelationshipAttribute)theEObject;
        T result = caseOneToOneRelationshipAttribute(oneToOneRelationshipAttribute);
        if (result == null) result = caseSingularRelationshipAttribute(oneToOneRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(oneToOneRelationshipAttribute);
        if (result == null) result = caseAbstractElement(oneToOneRelationshipAttribute);
        if (result == null) result = caseAttribute(oneToOneRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(oneToOneRelationshipAttribute);
        if (result == null) result = caseFeature(oneToOneRelationshipAttribute);
        if (result == null) result = caseTypedElement(oneToOneRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ONE_TO_ONE_MAPPED_BY_RELATIONSHIP_ATTRIBUTE:
      {
        OneToOneMappedByRelationshipAttribute oneToOneMappedByRelationshipAttribute = (OneToOneMappedByRelationshipAttribute)theEObject;
        T result = caseOneToOneMappedByRelationshipAttribute(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseSingularRelationshipAttribute(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseAbstractElement(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseAttribute(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseFeature(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = caseTypedElement(oneToOneMappedByRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ONE_TO_MANY_JOIN_TABLE_RELATIONSHIP_ATTRIBUTE:
      {
        OneToManyJoinTableRelationshipAttribute oneToManyJoinTableRelationshipAttribute = (OneToManyJoinTableRelationshipAttribute)theEObject;
        T result = caseOneToManyJoinTableRelationshipAttribute(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseMultipleRelationshipAttribute(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseAbstractElement(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseAttribute(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseFeature(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = caseTypedElement(oneToManyJoinTableRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ONE_TO_MANY_JOIN_COLUMN_RELATIONSHIP_ATTRIBUTE:
      {
        OneToManyJoinColumnRelationshipAttribute oneToManyJoinColumnRelationshipAttribute = (OneToManyJoinColumnRelationshipAttribute)theEObject;
        T result = caseOneToManyJoinColumnRelationshipAttribute(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseMultipleRelationshipAttribute(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseAbstractElement(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseAttribute(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseFeature(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = caseTypedElement(oneToManyJoinColumnRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.ONE_TO_MANY_MAPPED_BY_RELATIONSHIP_ATTRIBUTE:
      {
        OneToManyMappedByRelationshipAttribute oneToManyMappedByRelationshipAttribute = (OneToManyMappedByRelationshipAttribute)theEObject;
        T result = caseOneToManyMappedByRelationshipAttribute(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseMultipleRelationshipAttribute(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseAbstractElement(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseAttribute(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseFeature(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = caseTypedElement(oneToManyMappedByRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.MANY_TO_ONE_JOIN_COLUMN_RELATION_SHIP_ATTRIBUTE:
      {
        ManyToOneJoinColumnRelationShipAttribute manyToOneJoinColumnRelationShipAttribute = (ManyToOneJoinColumnRelationShipAttribute)theEObject;
        T result = caseManyToOneJoinColumnRelationShipAttribute(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseSingularRelationshipAttribute(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseRelationshipAttribute(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseAbstractElement(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseAttribute(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseStructuralFeature(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseFeature(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = caseTypedElement(manyToOneJoinColumnRelationShipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.MANY_TO_ONE_JOIN_TABLE_RELATION_SHIP_ATTRIBUTE:
      {
        ManyToOneJoinTableRelationShipAttribute manyToOneJoinTableRelationShipAttribute = (ManyToOneJoinTableRelationShipAttribute)theEObject;
        T result = caseManyToOneJoinTableRelationShipAttribute(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseSingularRelationshipAttribute(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseRelationshipAttribute(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseAbstractElement(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseAttribute(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseStructuralFeature(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseFeature(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = caseTypedElement(manyToOneJoinTableRelationShipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.MANY_TO_ONE_MAPPED_BY_RELATION_SHIP_ATTRIBUTE:
      {
        ManyToOneMappedByRelationShipAttribute manyToOneMappedByRelationShipAttribute = (ManyToOneMappedByRelationShipAttribute)theEObject;
        T result = caseManyToOneMappedByRelationShipAttribute(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseSingularRelationshipAttribute(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseRelationshipAttribute(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseAbstractElement(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseAttribute(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseStructuralFeature(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseFeature(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = caseTypedElement(manyToOneMappedByRelationShipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.MANY_TO_MANY_RELATIONSHIP_ATTRIBUTE:
      {
        ManyToManyRelationshipAttribute manyToManyRelationshipAttribute = (ManyToManyRelationshipAttribute)theEObject;
        T result = caseManyToManyRelationshipAttribute(manyToManyRelationshipAttribute);
        if (result == null) result = caseMultipleRelationshipAttribute(manyToManyRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(manyToManyRelationshipAttribute);
        if (result == null) result = caseAbstractElement(manyToManyRelationshipAttribute);
        if (result == null) result = caseAttribute(manyToManyRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(manyToManyRelationshipAttribute);
        if (result == null) result = caseFeature(manyToManyRelationshipAttribute);
        if (result == null) result = caseTypedElement(manyToManyRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.MANY_TO_MANY_MAPPED_BY_RELATIONSHIP_ATTRIBUTE:
      {
        ManyToManyMappedByRelationshipAttribute manyToManyMappedByRelationshipAttribute = (ManyToManyMappedByRelationshipAttribute)theEObject;
        T result = caseManyToManyMappedByRelationshipAttribute(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseMultipleRelationshipAttribute(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseRelationshipAttribute(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseAbstractElement(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseAttribute(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseStructuralFeature(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseFeature(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = caseTypedElement(manyToManyMappedByRelationshipAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.REFERENCE:
      {
        Reference reference = (Reference)theEObject;
        T result = caseReference(reference);
        if (result == null) result = caseStructuralFeature(reference);
        if (result == null) result = caseFeature(reference);
        if (result == null) result = caseTypedElement(reference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = caseFeature(operation);
        if (result == null) result = caseTypedElement(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseTypedElement(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.TYPED_ELEMENT:
      {
        TypedElement typedElement = (TypedElement)theEObject;
        T result = caseTypedElement(typedElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case JPADslPackage.TYPE_REF:
      {
        TypeRef typeRef = (TypeRef)theEObject;
        T result = caseTypeRef(typeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackageDeclaration(PackageDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Database Mode</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Database Mode</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDatabaseMode(DatabaseMode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntity(Entity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read Only</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read Only</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadOnly(ReadOnly object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cacheable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cacheable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCacheable(Cacheable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdentifier(Identifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unique Identifer Column</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unique Identifer Column</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniqueIdentiferColumn(UniqueIdentiferColumn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Embedded Unique Identifer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Embedded Unique Identifer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmbeddedUniqueIdentifer(EmbeddedUniqueIdentifer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Structural Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Structural Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructuralFeature(StructuralFeature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Static Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Static Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStaticAttribute(StaticAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Internal Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Internal Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInternalAttribute(InternalAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationshipAttribute(RelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Singular Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Singular Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingularRelationshipAttribute(SingularRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiple Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiple Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultipleRelationshipAttribute(MultipleRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Read Only Internal Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Read Only Internal Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReadOnlyInternalAttribute(ReadOnlyInternalAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Updatable Internal Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Updatable Internal Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUpdatableInternalAttribute(UpdatableInternalAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transient Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transient Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransientAttribute(TransientAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Id Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Id Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIdAttribute(IdAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One To One Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One To One Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneToOneRelationshipAttribute(OneToOneRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One To One Mapped By Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One To One Mapped By Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneToOneMappedByRelationshipAttribute(OneToOneMappedByRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One To Many Join Table Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One To Many Join Table Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneToManyJoinTableRelationshipAttribute(OneToManyJoinTableRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One To Many Join Column Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One To Many Join Column Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneToManyJoinColumnRelationshipAttribute(OneToManyJoinColumnRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One To Many Mapped By Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One To Many Mapped By Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneToManyMappedByRelationshipAttribute(OneToManyMappedByRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Many To One Join Column Relation Ship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Many To One Join Column Relation Ship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManyToOneJoinColumnRelationShipAttribute(ManyToOneJoinColumnRelationShipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Many To One Join Table Relation Ship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Many To One Join Table Relation Ship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManyToOneJoinTableRelationShipAttribute(ManyToOneJoinTableRelationShipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Many To One Mapped By Relation Ship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Many To One Mapped By Relation Ship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManyToOneMappedByRelationShipAttribute(ManyToOneMappedByRelationShipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Many To Many Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Many To Many Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManyToManyRelationshipAttribute(ManyToManyRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Many To Many Mapped By Relationship Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Many To Many Mapped By Relationship Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseManyToManyMappedByRelationshipAttribute(ManyToManyMappedByRelationshipAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReference(Reference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Typed Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Typed Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypedElement(TypedElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeRef(TypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //JPADslSwitch
