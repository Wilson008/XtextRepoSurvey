/*
 * generated by Xtext 2.35.0
 */
package jpadsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JPADslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//    elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRelationshipAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractElement:
		//    PackageDeclaration | Type | Import | RelationshipAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageDeclaration | Type | Import | RelationshipAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
		
		//Import
		public RuleCall getImportParserRuleCall_2() { return cImportParserRuleCall_2; }
		
		//RelationshipAttribute
		public RuleCall getRelationshipAttributeParserRuleCall_3() { return cRelationshipAttributeParserRuleCall_3; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//    'import' importedNamespace=QualifiedNameWithWildCard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}
	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatabaseModesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatabaseModesDatabaseModeParserRuleCall_3_0 = (RuleCall)cDatabaseModesAssignment_3.eContents().get(0);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsAbstractElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PackageDeclaration:
		//    'package' name=QualifiedName '{'
		//        databaseModes+=DatabaseMode*
		//        elements+=AbstractElement*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{'
		//    databaseModes+=DatabaseMode*
		//    elements+=AbstractElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//databaseModes+=DatabaseMode*
		public Assignment getDatabaseModesAssignment_3() { return cDatabaseModesAssignment_3; }
		
		//DatabaseMode
		public RuleCall getDatabaseModesDatabaseModeParserRuleCall_3_0() { return cDatabaseModesDatabaseModeParserRuleCall_3_0; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_4_0() { return cElementsAbstractElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//    Entity | DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | DataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//DataType
		public RuleCall getDataTypeParserRuleCall_1() { return cDataTypeParserRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataType:
		//    'datatype' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class DatabaseModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.DatabaseMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatabaseModeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DatabaseMode:
		//    'databaseMode' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'databaseMode' name=ID
		public Group getGroup() { return cGroup; }
		
		//'databaseMode'
		public Keyword getDatabaseModeKeyword_0() { return cDatabaseModeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDatabaseVendorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDatabaseVendorDatabaseModeCrossReference_2_0 = (CrossReference)cDatabaseVendorAssignment_2.eContents().get(0);
		private final RuleCall cDatabaseVendorDatabaseModeIDTerminalRuleCall_2_0_1 = (RuleCall)cDatabaseVendorDatabaseModeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_3_1_0.eContents().get(1);
		private final Assignment cReadOnlyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReadOnlyReadOnlyParserRuleCall_4_0 = (RuleCall)cReadOnlyAssignment_4.eContents().get(0);
		private final Assignment cCacheableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCacheableCacheableParserRuleCall_5_0 = (RuleCall)cCacheableAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cIdentifierAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdentifierIdentifierParserRuleCall_7_0 = (RuleCall)cIdentifierAssignment_7.eContents().get(0);
		private final Assignment cImportsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cImportsImportParserRuleCall_8_0 = (RuleCall)cImportsAssignment_8.eContents().get(0);
		private final Assignment cFeaturesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFeaturesFeatureParserRuleCall_9_0 = (RuleCall)cFeaturesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Entity:
		//    'entity' name=ID (databaseVendor=[DatabaseMode])? ('extends' superType=[Entity|ID])? (readOnly=ReadOnly)? (cacheable=Cacheable)? '{'
		//        identifier=Identifier
		//        imports+=Import*
		//        features+=Feature*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID (databaseVendor=[DatabaseMode])? ('extends' superType=[Entity|ID])? (readOnly=ReadOnly)? (cacheable=Cacheable)? '{'
		//    identifier=Identifier
		//    imports+=Import*
		//    features+=Feature*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(databaseVendor=[DatabaseMode])?
		public Assignment getDatabaseVendorAssignment_2() { return cDatabaseVendorAssignment_2; }
		
		//[DatabaseMode]
		public CrossReference getDatabaseVendorDatabaseModeCrossReference_2_0() { return cDatabaseVendorDatabaseModeCrossReference_2_0; }
		
		//ID
		public RuleCall getDatabaseVendorDatabaseModeIDTerminalRuleCall_2_0_1() { return cDatabaseVendorDatabaseModeIDTerminalRuleCall_2_0_1; }
		
		//('extends' superType=[Entity|ID])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superType=[Entity|ID]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//[Entity|ID]
		public CrossReference getSuperTypeEntityCrossReference_3_1_0() { return cSuperTypeEntityCrossReference_3_1_0; }
		
		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_3_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_3_1_0_1; }
		
		//(readOnly=ReadOnly)?
		public Assignment getReadOnlyAssignment_4() { return cReadOnlyAssignment_4; }
		
		//ReadOnly
		public RuleCall getReadOnlyReadOnlyParserRuleCall_4_0() { return cReadOnlyReadOnlyParserRuleCall_4_0; }
		
		//(cacheable=Cacheable)?
		public Assignment getCacheableAssignment_5() { return cCacheableAssignment_5; }
		
		//Cacheable
		public RuleCall getCacheableCacheableParserRuleCall_5_0() { return cCacheableCacheableParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//identifier=Identifier
		public Assignment getIdentifierAssignment_7() { return cIdentifierAssignment_7; }
		
		//Identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_7_0() { return cIdentifierIdentifierParserRuleCall_7_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_8() { return cImportsAssignment_8; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_8_0() { return cImportsImportParserRuleCall_8_0; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_9() { return cFeaturesAssignment_9; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_9_0() { return cFeaturesFeatureParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ReadOnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ReadOnly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadOnlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTableNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cTableNameAssignment_1.eContents().get(0);
		private final Assignment cIdColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdColumnSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdColumnAssignment_2.eContents().get(0);
		
		//ReadOnly:
		//    'read only' tableName=STRING idColumn=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'read only' tableName=STRING idColumn=STRING
		public Group getGroup() { return cGroup; }
		
		//'read only'
		public Keyword getReadOnlyKeyword_0() { return cReadOnlyKeyword_0; }
		
		//tableName=STRING
		public Assignment getTableNameAssignment_1() { return cTableNameAssignment_1; }
		
		//STRING
		public RuleCall getTableNameSTRINGTerminalRuleCall_1_0() { return cTableNameSTRINGTerminalRuleCall_1_0; }
		
		//idColumn=STRING
		public Assignment getIdColumnAssignment_2() { return cIdColumnAssignment_2; }
		
		//STRING
		public RuleCall getIdColumnSTRINGTerminalRuleCall_2_0() { return cIdColumnSTRINGTerminalRuleCall_2_0; }
	}
	public class CacheableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Cacheable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCacheableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCacheableAction_1 = (Action)cGroup.eContents().get(1);
		
		//Cacheable:
		//    'cacheable' {Cacheable};
		@Override public ParserRule getRule() { return rule; }
		
		//'cacheable' {Cacheable}
		public Group getGroup() { return cGroup; }
		
		//'cacheable'
		public Keyword getCacheableKeyword_0() { return cCacheableKeyword_0; }
		
		//{Cacheable}
		public Action getCacheableAction_1() { return cCacheableAction_1; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUniqueIdentiferColumnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmbeddedUniqueIdentiferParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier:
		//    UniqueIdentiferColumn | EmbeddedUniqueIdentifer;
		@Override public ParserRule getRule() { return rule; }
		
		//UniqueIdentiferColumn | EmbeddedUniqueIdentifer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UniqueIdentiferColumn
		public RuleCall getUniqueIdentiferColumnParserRuleCall_0() { return cUniqueIdentiferColumnParserRuleCall_0; }
		
		//EmbeddedUniqueIdentifer
		public RuleCall getEmbeddedUniqueIdentiferParserRuleCall_1() { return cEmbeddedUniqueIdentiferParserRuleCall_1; }
	}
	public class UniqueIdentiferColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.UniqueIdentiferColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUniqueIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//UniqueIdentiferColumn:
		//    'unique id' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'unique id' name=ID
		public Group getGroup() { return cGroup; }
		
		//'unique id'
		public Keyword getUniqueIdKeyword_0() { return cUniqueIdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EmbeddedUniqueIdentiferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.EmbeddedUniqueIdentifer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmbeddedIdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EmbeddedUniqueIdentifer:
		//    'embedded id' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'embedded id' name=ID
		public Group getGroup() { return cGroup; }
		
		//'embedded id'
		public Keyword getEmbeddedIdKeyword_0() { return cEmbeddedIdKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructuralFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//    StructuralFeature | Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//StructuralFeature | Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructuralFeature
		public RuleCall getStructuralFeatureParserRuleCall_0() { return cStructuralFeatureParserRuleCall_0; }
		
		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}
	public class StructuralFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.StructuralFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructuralFeature:
		//    Attribute | Reference;
		@Override public ParserRule getRule() { return rule; }
		
		//Attribute | Reference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }
		
		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInternalAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStaticAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Attribute:
		//    InternalAttribute | RelationshipAttribute | StaticAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//InternalAttribute | RelationshipAttribute | StaticAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InternalAttribute
		public RuleCall getInternalAttributeParserRuleCall_0() { return cInternalAttributeParserRuleCall_0; }
		
		//RelationshipAttribute
		public RuleCall getRelationshipAttributeParserRuleCall_1() { return cRelationshipAttributeParserRuleCall_1; }
		
		//StaticAttribute
		public RuleCall getStaticAttributeParserRuleCall_2() { return cStaticAttributeParserRuleCall_2; }
	}
	public class StaticAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.StaticAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//StaticAttribute:
		//    'staticAttribute' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'staticAttribute' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'staticAttribute'
		public Keyword getStaticAttributeKeyword_0() { return cStaticAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class InternalAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.InternalAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReadOnlyInternalAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUpdatableInternalAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransientAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIdAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InternalAttribute:
		//     ReadOnlyInternalAttribute | UpdatableInternalAttribute | TransientAttribute | IdAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//ReadOnlyInternalAttribute | UpdatableInternalAttribute | TransientAttribute | IdAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ReadOnlyInternalAttribute
		public RuleCall getReadOnlyInternalAttributeParserRuleCall_0() { return cReadOnlyInternalAttributeParserRuleCall_0; }
		
		//UpdatableInternalAttribute
		public RuleCall getUpdatableInternalAttributeParserRuleCall_1() { return cUpdatableInternalAttributeParserRuleCall_1; }
		
		//TransientAttribute
		public RuleCall getTransientAttributeParserRuleCall_2() { return cTransientAttributeParserRuleCall_2; }
		
		//IdAttribute
		public RuleCall getIdAttributeParserRuleCall_3() { return cIdAttributeParserRuleCall_3; }
	}
	public class RelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.RelationshipAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingularRelationshipAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleRelationshipAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RelationshipAttribute:
		//    SingularRelationshipAttribute | MultipleRelationshipAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//SingularRelationshipAttribute | MultipleRelationshipAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingularRelationshipAttribute
		public RuleCall getSingularRelationshipAttributeParserRuleCall_0() { return cSingularRelationshipAttributeParserRuleCall_0; }
		
		//MultipleRelationshipAttribute
		public RuleCall getMultipleRelationshipAttributeParserRuleCall_1() { return cMultipleRelationshipAttributeParserRuleCall_1; }
	}
	public class SingularRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.SingularRelationshipAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneToOneRelationshipAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOneToOneMappedByRelationshipAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManyToOneJoinColumnRelationShipAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cManyToOneJoinTableRelationShipAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cManyToOneMappedByRelationShipAttributeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SingularRelationshipAttribute:
		//    OneToOneRelationshipAttribute | OneToOneMappedByRelationshipAttribute | ManyToOneJoinColumnRelationShipAttribute | ManyToOneJoinTableRelationShipAttribute| ManyToOneMappedByRelationShipAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//OneToOneRelationshipAttribute | OneToOneMappedByRelationshipAttribute | ManyToOneJoinColumnRelationShipAttribute | ManyToOneJoinTableRelationShipAttribute| ManyToOneMappedByRelationShipAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneToOneRelationshipAttribute
		public RuleCall getOneToOneRelationshipAttributeParserRuleCall_0() { return cOneToOneRelationshipAttributeParserRuleCall_0; }
		
		//OneToOneMappedByRelationshipAttribute
		public RuleCall getOneToOneMappedByRelationshipAttributeParserRuleCall_1() { return cOneToOneMappedByRelationshipAttributeParserRuleCall_1; }
		
		//ManyToOneJoinColumnRelationShipAttribute
		public RuleCall getManyToOneJoinColumnRelationShipAttributeParserRuleCall_2() { return cManyToOneJoinColumnRelationShipAttributeParserRuleCall_2; }
		
		//ManyToOneJoinTableRelationShipAttribute
		public RuleCall getManyToOneJoinTableRelationShipAttributeParserRuleCall_3() { return cManyToOneJoinTableRelationShipAttributeParserRuleCall_3; }
		
		//ManyToOneMappedByRelationShipAttribute
		public RuleCall getManyToOneMappedByRelationShipAttributeParserRuleCall_4() { return cManyToOneMappedByRelationShipAttributeParserRuleCall_4; }
	}
	public class MultipleRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.MultipleRelationshipAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneToManyJoinTableRelationshipAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOneToManyMappedByRelationshipAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManyToManyRelationshipAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cManyToManyMappedByRelationshipAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOneToManyJoinColumnRelationshipAttributeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MultipleRelationshipAttribute:
		//          OneToManyJoinTableRelationshipAttribute | OneToManyMappedByRelationshipAttribute |  ManyToManyRelationshipAttribute | ManyToManyMappedByRelationshipAttribute | OneToManyJoinColumnRelationshipAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//OneToManyJoinTableRelationshipAttribute | OneToManyMappedByRelationshipAttribute |  ManyToManyRelationshipAttribute | ManyToManyMappedByRelationshipAttribute | OneToManyJoinColumnRelationshipAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OneToManyJoinTableRelationshipAttribute
		public RuleCall getOneToManyJoinTableRelationshipAttributeParserRuleCall_0() { return cOneToManyJoinTableRelationshipAttributeParserRuleCall_0; }
		
		//OneToManyMappedByRelationshipAttribute
		public RuleCall getOneToManyMappedByRelationshipAttributeParserRuleCall_1() { return cOneToManyMappedByRelationshipAttributeParserRuleCall_1; }
		
		//ManyToManyRelationshipAttribute
		public RuleCall getManyToManyRelationshipAttributeParserRuleCall_2() { return cManyToManyRelationshipAttributeParserRuleCall_2; }
		
		//ManyToManyMappedByRelationshipAttribute
		public RuleCall getManyToManyMappedByRelationshipAttributeParserRuleCall_3() { return cManyToManyMappedByRelationshipAttributeParserRuleCall_3; }
		
		//OneToManyJoinColumnRelationshipAttribute
		public RuleCall getOneToManyJoinColumnRelationshipAttributeParserRuleCall_4() { return cOneToManyJoinColumnRelationshipAttributeParserRuleCall_4; }
	}
	public class ReadOnlyInternalAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ReadOnlyInternalAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeRefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ReadOnlyInternalAttribute:
		//    name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_2_0() { return cTypeTypeRefParserRuleCall_2_0; }
	}
	public class UpdatableInternalAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.UpdatableInternalAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//UpdatableInternalAttribute:
		//    'attribute'  name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute'  name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class TransientAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.TransientAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransientKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//TransientAttribute:
		//    'transient' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'transient' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'transient'
		public Keyword getTransientKeyword_0() { return cTransientKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class IdAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.IdAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//IdAttribute:
		//    'id attribute' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'id attribute' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'id attribute'
		public Keyword getIdAttributeKeyword_0() { return cIdAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class OneToOneRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.OneToOneRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneToOneJoinColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cJoinColumnOverrideAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJoinColumnOverrideSTRINGTerminalRuleCall_4_0 = (RuleCall)cJoinColumnOverrideAssignment_4.eContents().get(0);
		
		//OneToOneRelationshipAttribute:
		//    'one to one join column' name=ID ':' type=TypeRef  (joinColumnOverride=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'one to one join column' name=ID ':' type=TypeRef  (joinColumnOverride=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'one to one join column'
		public Keyword getOneToOneJoinColumnKeyword_0() { return cOneToOneJoinColumnKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
		
		//(joinColumnOverride=STRING)?
		public Assignment getJoinColumnOverrideAssignment_4() { return cJoinColumnOverrideAssignment_4; }
		
		//STRING
		public RuleCall getJoinColumnOverrideSTRINGTerminalRuleCall_4_0() { return cJoinColumnOverrideSTRINGTerminalRuleCall_4_0; }
	}
	public class OneToOneMappedByRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.OneToOneMappedByRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneToOneMappedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//OneToOneMappedByRelationshipAttribute:
		//    'one to one mapped by' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'one to one mapped by' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'one to one mapped by'
		public Keyword getOneToOneMappedByKeyword_0() { return cOneToOneMappedByKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class OneToManyJoinTableRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.OneToManyJoinTableRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneToManyUsingJoinTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//OneToManyJoinTableRelationshipAttribute:
		//    'one to many using join table' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'one to many using join table' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'one to many using join table'
		public Keyword getOneToManyUsingJoinTableKeyword_0() { return cOneToManyUsingJoinTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class OneToManyJoinColumnRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.OneToManyJoinColumnRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneToManyUsingJoinColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//OneToManyJoinColumnRelationshipAttribute:
		//    'one to many using join column' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'one to many using join column' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'one to many using join column'
		public Keyword getOneToManyUsingJoinColumnKeyword_0() { return cOneToManyUsingJoinColumnKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class OneToManyMappedByRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.OneToManyMappedByRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneToManyMappedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//OneToManyMappedByRelationshipAttribute:
		//    'one to many mapped by' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'one to many mapped by' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'one to many mapped by'
		public Keyword getOneToManyMappedByKeyword_0() { return cOneToManyMappedByKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class ManyToOneJoinColumnRelationShipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ManyToOneJoinColumnRelationShipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManyToOneUsingJoinColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cJoinColumnOverrideAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJoinColumnOverrideSTRINGTerminalRuleCall_4_0 = (RuleCall)cJoinColumnOverrideAssignment_4.eContents().get(0);
		
		//ManyToOneJoinColumnRelationShipAttribute:
		//    'many to one using join column' name=ID ':' type=TypeRef (joinColumnOverride=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'many to one using join column' name=ID ':' type=TypeRef (joinColumnOverride=STRING)?
		public Group getGroup() { return cGroup; }
		
		//'many to one using join column'
		public Keyword getManyToOneUsingJoinColumnKeyword_0() { return cManyToOneUsingJoinColumnKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
		
		//(joinColumnOverride=STRING)?
		public Assignment getJoinColumnOverrideAssignment_4() { return cJoinColumnOverrideAssignment_4; }
		
		//STRING
		public RuleCall getJoinColumnOverrideSTRINGTerminalRuleCall_4_0() { return cJoinColumnOverrideSTRINGTerminalRuleCall_4_0; }
	}
	public class ManyToOneJoinTableRelationShipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ManyToOneJoinTableRelationShipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManyToOneUsingJoinTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ManyToOneJoinTableRelationShipAttribute:
		//    'many to one using join table' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'many to one using join table' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'many to one using join table'
		public Keyword getManyToOneUsingJoinTableKeyword_0() { return cManyToOneUsingJoinTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class ManyToOneMappedByRelationShipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ManyToOneMappedByRelationShipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManyToOneMappedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ManyToOneMappedByRelationShipAttribute:
		//    'many to one mapped by' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'many to one mapped by' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'many to one mapped by'
		public Keyword getManyToOneMappedByKeyword_0() { return cManyToOneMappedByKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class ManyToManyRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ManyToManyRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManyToManyJoinTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ManyToManyRelationshipAttribute:
		//    'many to many join table' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'many to many join table' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'many to many join table'
		public Keyword getManyToManyJoinTableKeyword_0() { return cManyToManyJoinTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class ManyToManyMappedByRelationshipAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.ManyToManyMappedByRelationshipAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManyToManyMappedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ManyToManyMappedByRelationshipAttribute:
		//    'many to many mapped by' name=ID ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'many to many mapped by' name=ID ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//'many to many mapped by'
		public Keyword getManyToManyMappedByKeyword_0() { return cManyToManyMappedByKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
	}
	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeRefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOppositeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOppositeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cOppositeReferenceCrossReference_4_1_0 = (CrossReference)cOppositeAssignment_4_1.eContents().get(0);
		private final RuleCall cOppositeReferenceIDTerminalRuleCall_4_1_0_1 = (RuleCall)cOppositeReferenceCrossReference_4_1_0.eContents().get(1);
		
		//Reference:
		//    'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])?
		public Group getGroup() { return cGroup; }
		
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_3_0() { return cTypeTypeRefParserRuleCall_3_0; }
		
		//('opposite' opposite=[Reference])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'opposite'
		public Keyword getOppositeKeyword_4_0() { return cOppositeKeyword_4_0; }
		
		//opposite=[Reference]
		public Assignment getOppositeAssignment_4_1() { return cOppositeAssignment_4_1; }
		
		//[Reference]
		public CrossReference getOppositeReferenceCrossReference_4_1_0() { return cOppositeReferenceCrossReference_4_1_0; }
		
		//ID
		public RuleCall getOppositeReferenceIDTerminalRuleCall_4_1_0_1() { return cOppositeReferenceIDTerminalRuleCall_4_1_0_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cOpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeTypeRefParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		
		//Operation:
		//    visibility=Visibility? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//'op'
		public Keyword getOpKeyword_1() { return cOpKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=Parameter (',' params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }
		
		//(',' params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_7_0() { return cTypeTypeRefParserRuleCall_7_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Parameter:
		//    name=ID type=TypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID type=TypeRef
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type=TypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_1_0() { return cTypeTypeRefParserRuleCall_1_0; }
	}
	public class TypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedElement:
		//    Feature | Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Feature | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReferencedTypeCrossReference_0_0 = (CrossReference)cReferencedAssignment_0.eContents().get(0);
		private final RuleCall cReferencedTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cReferencedTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cMultiAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMultiAsteriskKeyword_1_0 = (Keyword)cMultiAssignment_1.eContents().get(0);
		
		//TypeRef:
		//    referenced=[Type|ID] multi?='*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//referenced=[Type|ID] multi?='*'?
		public Group getGroup() { return cGroup; }
		
		//referenced=[Type|ID]
		public Assignment getReferencedAssignment_0() { return cReferencedAssignment_0; }
		
		//[Type|ID]
		public CrossReference getReferencedTypeCrossReference_0_0() { return cReferencedTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getReferencedTypeIDTerminalRuleCall_0_0_1() { return cReferencedTypeIDTerminalRuleCall_0_0_1; }
		
		//multi?='*'?
		public Assignment getMultiAssignment_1() { return cMultiAssignment_1; }
		
		//'*'
		public Keyword getMultiAsteriskKeyword_1_0() { return cMultiAsteriskKeyword_1_0; }
	}
	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//    QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class VisibilityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "jpadsl.JPADsl.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Visibility:
		//    public | private | protected;
		public EnumRule getRule() { return rule; }
		
		//public | private | protected
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
		
		//protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final ImportElements pImport;
	private final PackageDeclarationElements pPackageDeclaration;
	private final TypeElements pType;
	private final DataTypeElements pDataType;
	private final DatabaseModeElements pDatabaseMode;
	private final EntityElements pEntity;
	private final ReadOnlyElements pReadOnly;
	private final CacheableElements pCacheable;
	private final IdentifierElements pIdentifier;
	private final UniqueIdentiferColumnElements pUniqueIdentiferColumn;
	private final EmbeddedUniqueIdentiferElements pEmbeddedUniqueIdentifer;
	private final FeatureElements pFeature;
	private final StructuralFeatureElements pStructuralFeature;
	private final AttributeElements pAttribute;
	private final StaticAttributeElements pStaticAttribute;
	private final InternalAttributeElements pInternalAttribute;
	private final RelationshipAttributeElements pRelationshipAttribute;
	private final SingularRelationshipAttributeElements pSingularRelationshipAttribute;
	private final MultipleRelationshipAttributeElements pMultipleRelationshipAttribute;
	private final ReadOnlyInternalAttributeElements pReadOnlyInternalAttribute;
	private final UpdatableInternalAttributeElements pUpdatableInternalAttribute;
	private final TransientAttributeElements pTransientAttribute;
	private final IdAttributeElements pIdAttribute;
	private final OneToOneRelationshipAttributeElements pOneToOneRelationshipAttribute;
	private final OneToOneMappedByRelationshipAttributeElements pOneToOneMappedByRelationshipAttribute;
	private final OneToManyJoinTableRelationshipAttributeElements pOneToManyJoinTableRelationshipAttribute;
	private final OneToManyJoinColumnRelationshipAttributeElements pOneToManyJoinColumnRelationshipAttribute;
	private final OneToManyMappedByRelationshipAttributeElements pOneToManyMappedByRelationshipAttribute;
	private final ManyToOneJoinColumnRelationShipAttributeElements pManyToOneJoinColumnRelationShipAttribute;
	private final ManyToOneJoinTableRelationShipAttributeElements pManyToOneJoinTableRelationShipAttribute;
	private final ManyToOneMappedByRelationShipAttributeElements pManyToOneMappedByRelationShipAttribute;
	private final ManyToManyRelationshipAttributeElements pManyToManyRelationshipAttribute;
	private final ManyToManyMappedByRelationshipAttributeElements pManyToManyMappedByRelationshipAttribute;
	private final ReferenceElements pReference;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final TypedElementElements pTypedElement;
	private final TypeRefElements pTypeRef;
	private final VisibilityElements eVisibility;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JPADslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pImport = new ImportElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pType = new TypeElements();
		this.pDataType = new DataTypeElements();
		this.pDatabaseMode = new DatabaseModeElements();
		this.pEntity = new EntityElements();
		this.pReadOnly = new ReadOnlyElements();
		this.pCacheable = new CacheableElements();
		this.pIdentifier = new IdentifierElements();
		this.pUniqueIdentiferColumn = new UniqueIdentiferColumnElements();
		this.pEmbeddedUniqueIdentifer = new EmbeddedUniqueIdentiferElements();
		this.pFeature = new FeatureElements();
		this.pStructuralFeature = new StructuralFeatureElements();
		this.pAttribute = new AttributeElements();
		this.pStaticAttribute = new StaticAttributeElements();
		this.pInternalAttribute = new InternalAttributeElements();
		this.pRelationshipAttribute = new RelationshipAttributeElements();
		this.pSingularRelationshipAttribute = new SingularRelationshipAttributeElements();
		this.pMultipleRelationshipAttribute = new MultipleRelationshipAttributeElements();
		this.pReadOnlyInternalAttribute = new ReadOnlyInternalAttributeElements();
		this.pUpdatableInternalAttribute = new UpdatableInternalAttributeElements();
		this.pTransientAttribute = new TransientAttributeElements();
		this.pIdAttribute = new IdAttributeElements();
		this.pOneToOneRelationshipAttribute = new OneToOneRelationshipAttributeElements();
		this.pOneToOneMappedByRelationshipAttribute = new OneToOneMappedByRelationshipAttributeElements();
		this.pOneToManyJoinTableRelationshipAttribute = new OneToManyJoinTableRelationshipAttributeElements();
		this.pOneToManyJoinColumnRelationshipAttribute = new OneToManyJoinColumnRelationshipAttributeElements();
		this.pOneToManyMappedByRelationshipAttribute = new OneToManyMappedByRelationshipAttributeElements();
		this.pManyToOneJoinColumnRelationShipAttribute = new ManyToOneJoinColumnRelationShipAttributeElements();
		this.pManyToOneJoinTableRelationShipAttribute = new ManyToOneJoinTableRelationShipAttributeElements();
		this.pManyToOneMappedByRelationShipAttribute = new ManyToOneMappedByRelationShipAttributeElements();
		this.pManyToManyRelationshipAttribute = new ManyToManyRelationshipAttributeElements();
		this.pManyToManyMappedByRelationshipAttribute = new ManyToManyMappedByRelationshipAttributeElements();
		this.pReference = new ReferenceElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pTypedElement = new TypedElementElements();
		this.pTypeRef = new TypeRefElements();
		this.eVisibility = new VisibilityElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jpadsl.JPADsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//    PackageDeclaration | Type | Import | RelationshipAttribute;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Import:
	//    'import' importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//PackageDeclaration:
	//    'package' name=QualifiedName '{'
	//        databaseModes+=DatabaseMode*
	//        elements+=AbstractElement*
	//    '}';
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//Type:
	//    Entity | DataType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//DataType:
	//    'datatype' name=ID;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//DatabaseMode:
	//    'databaseMode' name=ID;
	public DatabaseModeElements getDatabaseModeAccess() {
		return pDatabaseMode;
	}
	
	public ParserRule getDatabaseModeRule() {
		return getDatabaseModeAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID (databaseVendor=[DatabaseMode])? ('extends' superType=[Entity|ID])? (readOnly=ReadOnly)? (cacheable=Cacheable)? '{'
	//        identifier=Identifier
	//        imports+=Import*
	//        features+=Feature*
	//    '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//ReadOnly:
	//    'read only' tableName=STRING idColumn=STRING;
	public ReadOnlyElements getReadOnlyAccess() {
		return pReadOnly;
	}
	
	public ParserRule getReadOnlyRule() {
		return getReadOnlyAccess().getRule();
	}
	
	//Cacheable:
	//    'cacheable' {Cacheable};
	public CacheableElements getCacheableAccess() {
		return pCacheable;
	}
	
	public ParserRule getCacheableRule() {
		return getCacheableAccess().getRule();
	}
	
	//Identifier:
	//    UniqueIdentiferColumn | EmbeddedUniqueIdentifer;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//UniqueIdentiferColumn:
	//    'unique id' name=ID;
	public UniqueIdentiferColumnElements getUniqueIdentiferColumnAccess() {
		return pUniqueIdentiferColumn;
	}
	
	public ParserRule getUniqueIdentiferColumnRule() {
		return getUniqueIdentiferColumnAccess().getRule();
	}
	
	//EmbeddedUniqueIdentifer:
	//    'embedded id' name=ID;
	public EmbeddedUniqueIdentiferElements getEmbeddedUniqueIdentiferAccess() {
		return pEmbeddedUniqueIdentifer;
	}
	
	public ParserRule getEmbeddedUniqueIdentiferRule() {
		return getEmbeddedUniqueIdentiferAccess().getRule();
	}
	
	//Feature:
	//    StructuralFeature | Operation;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//StructuralFeature:
	//    Attribute | Reference;
	public StructuralFeatureElements getStructuralFeatureAccess() {
		return pStructuralFeature;
	}
	
	public ParserRule getStructuralFeatureRule() {
		return getStructuralFeatureAccess().getRule();
	}
	
	//Attribute:
	//    InternalAttribute | RelationshipAttribute | StaticAttribute;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//StaticAttribute:
	//    'staticAttribute' name=ID ':' type=TypeRef;
	public StaticAttributeElements getStaticAttributeAccess() {
		return pStaticAttribute;
	}
	
	public ParserRule getStaticAttributeRule() {
		return getStaticAttributeAccess().getRule();
	}
	
	//InternalAttribute:
	//     ReadOnlyInternalAttribute | UpdatableInternalAttribute | TransientAttribute | IdAttribute;
	public InternalAttributeElements getInternalAttributeAccess() {
		return pInternalAttribute;
	}
	
	public ParserRule getInternalAttributeRule() {
		return getInternalAttributeAccess().getRule();
	}
	
	//RelationshipAttribute:
	//    SingularRelationshipAttribute | MultipleRelationshipAttribute;
	public RelationshipAttributeElements getRelationshipAttributeAccess() {
		return pRelationshipAttribute;
	}
	
	public ParserRule getRelationshipAttributeRule() {
		return getRelationshipAttributeAccess().getRule();
	}
	
	//SingularRelationshipAttribute:
	//    OneToOneRelationshipAttribute | OneToOneMappedByRelationshipAttribute | ManyToOneJoinColumnRelationShipAttribute | ManyToOneJoinTableRelationShipAttribute| ManyToOneMappedByRelationShipAttribute;
	public SingularRelationshipAttributeElements getSingularRelationshipAttributeAccess() {
		return pSingularRelationshipAttribute;
	}
	
	public ParserRule getSingularRelationshipAttributeRule() {
		return getSingularRelationshipAttributeAccess().getRule();
	}
	
	//MultipleRelationshipAttribute:
	//          OneToManyJoinTableRelationshipAttribute | OneToManyMappedByRelationshipAttribute |  ManyToManyRelationshipAttribute | ManyToManyMappedByRelationshipAttribute | OneToManyJoinColumnRelationshipAttribute;
	public MultipleRelationshipAttributeElements getMultipleRelationshipAttributeAccess() {
		return pMultipleRelationshipAttribute;
	}
	
	public ParserRule getMultipleRelationshipAttributeRule() {
		return getMultipleRelationshipAttributeAccess().getRule();
	}
	
	//ReadOnlyInternalAttribute:
	//    name=ID ':' type=TypeRef;
	public ReadOnlyInternalAttributeElements getReadOnlyInternalAttributeAccess() {
		return pReadOnlyInternalAttribute;
	}
	
	public ParserRule getReadOnlyInternalAttributeRule() {
		return getReadOnlyInternalAttributeAccess().getRule();
	}
	
	//UpdatableInternalAttribute:
	//    'attribute'  name=ID ':' type=TypeRef;
	public UpdatableInternalAttributeElements getUpdatableInternalAttributeAccess() {
		return pUpdatableInternalAttribute;
	}
	
	public ParserRule getUpdatableInternalAttributeRule() {
		return getUpdatableInternalAttributeAccess().getRule();
	}
	
	//TransientAttribute:
	//    'transient' name=ID ':' type=TypeRef;
	public TransientAttributeElements getTransientAttributeAccess() {
		return pTransientAttribute;
	}
	
	public ParserRule getTransientAttributeRule() {
		return getTransientAttributeAccess().getRule();
	}
	
	//IdAttribute:
	//    'id attribute' name=ID ':' type=TypeRef;
	public IdAttributeElements getIdAttributeAccess() {
		return pIdAttribute;
	}
	
	public ParserRule getIdAttributeRule() {
		return getIdAttributeAccess().getRule();
	}
	
	//OneToOneRelationshipAttribute:
	//    'one to one join column' name=ID ':' type=TypeRef  (joinColumnOverride=STRING)?;
	public OneToOneRelationshipAttributeElements getOneToOneRelationshipAttributeAccess() {
		return pOneToOneRelationshipAttribute;
	}
	
	public ParserRule getOneToOneRelationshipAttributeRule() {
		return getOneToOneRelationshipAttributeAccess().getRule();
	}
	
	//OneToOneMappedByRelationshipAttribute:
	//    'one to one mapped by' name=ID ':' type=TypeRef;
	public OneToOneMappedByRelationshipAttributeElements getOneToOneMappedByRelationshipAttributeAccess() {
		return pOneToOneMappedByRelationshipAttribute;
	}
	
	public ParserRule getOneToOneMappedByRelationshipAttributeRule() {
		return getOneToOneMappedByRelationshipAttributeAccess().getRule();
	}
	
	//OneToManyJoinTableRelationshipAttribute:
	//    'one to many using join table' name=ID ':' type=TypeRef;
	public OneToManyJoinTableRelationshipAttributeElements getOneToManyJoinTableRelationshipAttributeAccess() {
		return pOneToManyJoinTableRelationshipAttribute;
	}
	
	public ParserRule getOneToManyJoinTableRelationshipAttributeRule() {
		return getOneToManyJoinTableRelationshipAttributeAccess().getRule();
	}
	
	//OneToManyJoinColumnRelationshipAttribute:
	//    'one to many using join column' name=ID ':' type=TypeRef;
	public OneToManyJoinColumnRelationshipAttributeElements getOneToManyJoinColumnRelationshipAttributeAccess() {
		return pOneToManyJoinColumnRelationshipAttribute;
	}
	
	public ParserRule getOneToManyJoinColumnRelationshipAttributeRule() {
		return getOneToManyJoinColumnRelationshipAttributeAccess().getRule();
	}
	
	//OneToManyMappedByRelationshipAttribute:
	//    'one to many mapped by' name=ID ':' type=TypeRef;
	public OneToManyMappedByRelationshipAttributeElements getOneToManyMappedByRelationshipAttributeAccess() {
		return pOneToManyMappedByRelationshipAttribute;
	}
	
	public ParserRule getOneToManyMappedByRelationshipAttributeRule() {
		return getOneToManyMappedByRelationshipAttributeAccess().getRule();
	}
	
	//ManyToOneJoinColumnRelationShipAttribute:
	//    'many to one using join column' name=ID ':' type=TypeRef (joinColumnOverride=STRING)?;
	public ManyToOneJoinColumnRelationShipAttributeElements getManyToOneJoinColumnRelationShipAttributeAccess() {
		return pManyToOneJoinColumnRelationShipAttribute;
	}
	
	public ParserRule getManyToOneJoinColumnRelationShipAttributeRule() {
		return getManyToOneJoinColumnRelationShipAttributeAccess().getRule();
	}
	
	//ManyToOneJoinTableRelationShipAttribute:
	//    'many to one using join table' name=ID ':' type=TypeRef;
	public ManyToOneJoinTableRelationShipAttributeElements getManyToOneJoinTableRelationShipAttributeAccess() {
		return pManyToOneJoinTableRelationShipAttribute;
	}
	
	public ParserRule getManyToOneJoinTableRelationShipAttributeRule() {
		return getManyToOneJoinTableRelationShipAttributeAccess().getRule();
	}
	
	//ManyToOneMappedByRelationShipAttribute:
	//    'many to one mapped by' name=ID ':' type=TypeRef;
	public ManyToOneMappedByRelationShipAttributeElements getManyToOneMappedByRelationShipAttributeAccess() {
		return pManyToOneMappedByRelationShipAttribute;
	}
	
	public ParserRule getManyToOneMappedByRelationShipAttributeRule() {
		return getManyToOneMappedByRelationShipAttributeAccess().getRule();
	}
	
	//ManyToManyRelationshipAttribute:
	//    'many to many join table' name=ID ':' type=TypeRef;
	public ManyToManyRelationshipAttributeElements getManyToManyRelationshipAttributeAccess() {
		return pManyToManyRelationshipAttribute;
	}
	
	public ParserRule getManyToManyRelationshipAttributeRule() {
		return getManyToManyRelationshipAttributeAccess().getRule();
	}
	
	//ManyToManyMappedByRelationshipAttribute:
	//    'many to many mapped by' name=ID ':' type=TypeRef;
	public ManyToManyMappedByRelationshipAttributeElements getManyToManyMappedByRelationshipAttributeAccess() {
		return pManyToManyMappedByRelationshipAttribute;
	}
	
	public ParserRule getManyToManyMappedByRelationshipAttributeRule() {
		return getManyToManyMappedByRelationshipAttributeAccess().getRule();
	}
	
	//Reference:
	//    'ref' name=ID ':' type=TypeRef ('opposite' opposite=[Reference])?;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}
	
	//Operation:
	//    visibility=Visibility? 'op' name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' ':' type=TypeRef;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Parameter:
	//    name=ID type=TypeRef;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//TypedElement:
	//    Feature | Parameter;
	public TypedElementElements getTypedElementAccess() {
		return pTypedElement;
	}
	
	public ParserRule getTypedElementRule() {
		return getTypedElementAccess().getRule();
	}
	
	//TypeRef:
	//    referenced=[Type|ID] multi?='*'?;
	public TypeRefElements getTypeRefAccess() {
		return pTypeRef;
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}
	
	//enum Visibility:
	//    public | private | protected;
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	//QualifiedNameWithWildCard:
	//    QualifiedName '.*'?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
