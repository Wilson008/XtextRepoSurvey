/*
 * generated by Xtext 2.35.0
 */
package jpaqldsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class JPAQLDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cXmlDescriptorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cXmlDescriptorXMLDescriptorParserRuleCall_0_0 = (RuleCall)cXmlDescriptorAssignment_0.eContents().get(0);
		private final RuleCall cORM_UNMANAGED_CONTENTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cImportsAndPackageDeclarationHereKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Keyword cPackageKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameQualifiedNameParserRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cORM_UNMANAGED_CONTENTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cNamedQueriesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNamedQueriesNamedQueryParserRuleCall_8_0 = (RuleCall)cNamedQueriesAssignment_8.eContents().get(0);
		private final RuleCall cORM_UNMANAGED_CONTENTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Model:
		//xmlDescriptor=XMLDescriptor
		//(ORM_UNMANAGED_CONTENT)?
		//'<!-- Imports and Package Declaration Here.'
		//imports+=Import*
		//'package' name=QualifiedName
		//'-->'
		//    (ORM_UNMANAGED_CONTENT)?
		//    namedQueries+=NamedQuery*
		//    (ORM_UNMANAGED_CONTENT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//xmlDescriptor=XMLDescriptor
		//(ORM_UNMANAGED_CONTENT)?
		//'<!-- Imports and Package Declaration Here.'
		//imports+=Import*
		//'package' name=QualifiedName
		//'-->'
		//    (ORM_UNMANAGED_CONTENT)?
		//    namedQueries+=NamedQuery*
		//    (ORM_UNMANAGED_CONTENT)?
		public Group getGroup() { return cGroup; }
		
		//xmlDescriptor=XMLDescriptor
		public Assignment getXmlDescriptorAssignment_0() { return cXmlDescriptorAssignment_0; }
		
		//XMLDescriptor
		public RuleCall getXmlDescriptorXMLDescriptorParserRuleCall_0_0() { return cXmlDescriptorXMLDescriptorParserRuleCall_0_0; }
		
		//(ORM_UNMANAGED_CONTENT)?
		public RuleCall getORM_UNMANAGED_CONTENTTerminalRuleCall_1() { return cORM_UNMANAGED_CONTENTTerminalRuleCall_1; }
		
		//'<!-- Imports and Package Declaration Here.'
		public Keyword getImportsAndPackageDeclarationHereKeyword_2() { return cImportsAndPackageDeclarationHereKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//'package'
		public Keyword getPackageKeyword_4() { return cPackageKeyword_4; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_5_0() { return cNameQualifiedNameParserRuleCall_5_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_6; }
		
		//(ORM_UNMANAGED_CONTENT)?
		public RuleCall getORM_UNMANAGED_CONTENTTerminalRuleCall_7() { return cORM_UNMANAGED_CONTENTTerminalRuleCall_7; }
		
		//namedQueries+=NamedQuery*
		public Assignment getNamedQueriesAssignment_8() { return cNamedQueriesAssignment_8; }
		
		//NamedQuery
		public RuleCall getNamedQueriesNamedQueryParserRuleCall_8_0() { return cNamedQueriesNamedQueryParserRuleCall_8_0; }
		
		//(ORM_UNMANAGED_CONTENT)?
		public RuleCall getORM_UNMANAGED_CONTENTTerminalRuleCall_9() { return cORM_UNMANAGED_CONTENTTerminalRuleCall_9; }
	}
	public class NamedQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.NamedQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamedQueryNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cQueryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQlStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQlStatementQLStatementParserRuleCall_4_0 = (RuleCall)cQlStatementAssignment_4.eContents().get(0);
		private final Keyword cQueryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cNamedQueryKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NamedQuery:
		//    '<named-query name="'name=ID'">'
		//        '<query>'
		//            qlStatement=QLStatement
		//        '</query>'
		//    '</named-query>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<named-query name="'name=ID'">'
		//    '<query>'
		//        qlStatement=QLStatement
		//    '</query>'
		//'</named-query>'
		public Group getGroup() { return cGroup; }
		
		//'<named-query name="'
		public Keyword getNamedQueryNameKeyword_0() { return cNamedQueryNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'">'
		public Keyword getQuotationMarkGreaterThanSignKeyword_2() { return cQuotationMarkGreaterThanSignKeyword_2; }
		
		//'<query>'
		public Keyword getQueryKeyword_3() { return cQueryKeyword_3; }
		
		//qlStatement=QLStatement
		public Assignment getQlStatementAssignment_4() { return cQlStatementAssignment_4; }
		
		//QLStatement
		public RuleCall getQlStatementQLStatementParserRuleCall_4_0() { return cQlStatementQLStatementParserRuleCall_4_0; }
		
		//'</query>'
		public Keyword getQueryKeyword_5() { return cQueryKeyword_5; }
		
		//'</named-query>'
		public Keyword getNamedQueryKeyword_6() { return cNamedQueryKeyword_6; }
	}
	public class XMLDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.XMLDescriptor");
		private final Keyword cXmlVersion10EncodingUTF8Keyword = (Keyword)rule.eContents().get(1);
		
		//XMLDescriptor:
		//'<?xml version="1.0" encoding="UTF-8" ?>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'<?xml version="1.0" encoding="UTF-8" ?>'
		public Keyword getXmlVersion10EncodingUTF8Keyword() { return cXmlVersion10EncodingUTF8Keyword; }
	}
	public class QLStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.QLStatement");
		private final Assignment cSelectStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSelectStatementsSelectStatementParserRuleCall_0 = (RuleCall)cSelectStatementsAssignment.eContents().get(0);
		
		//QLStatement:
		//    selectStatements+=SelectStatement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectStatements+=SelectStatement*
		public Assignment getSelectStatementsAssignment() { return cSelectStatementsAssignment; }
		
		//SelectStatement
		public RuleCall getSelectStatementsSelectStatementParserRuleCall_0() { return cSelectStatementsSelectStatementParserRuleCall_0; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSelectClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSelectClauseSelectClauseParserRuleCall_0_0 = (RuleCall)cSelectClauseAssignment_0.eContents().get(0);
		private final Assignment cFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromClauseFromClauseParserRuleCall_1_0 = (RuleCall)cFromClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		
		// //| UpdateStatement | DeleteStatement;
		//SelectStatement:
		//    selectClause=SelectClause fromClause=FromClause (whereClause=WhereClause)? //(groupByClause=GroupByClause) (havingClause=HavingClause) (orderByClause=OrderByClause)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selectClause=SelectClause fromClause=FromClause (whereClause=WhereClause)?
		public Group getGroup() { return cGroup; }
		
		//selectClause=SelectClause
		public Assignment getSelectClauseAssignment_0() { return cSelectClauseAssignment_0; }
		
		//SelectClause
		public RuleCall getSelectClauseSelectClauseParserRuleCall_0_0() { return cSelectClauseSelectClauseParserRuleCall_0_0; }
		
		//fromClause=FromClause
		public Assignment getFromClauseAssignment_1() { return cFromClauseAssignment_1; }
		
		//FromClause
		public RuleCall getFromClauseFromClauseParserRuleCall_1_0() { return cFromClauseFromClauseParserRuleCall_1_0; }
		
		//(whereClause=WhereClause)?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }
	}
	public class FromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.FromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentificationVariableDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentificationVariableDeclarationsIdentificationVariableDeclarationParserRuleCall_1_0 = (RuleCall)cIdentificationVariableDeclarationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentificationVariableDeclarationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cIdentificationVariableDeclarationsAlternatives_2_1_0 = (Alternatives)cIdentificationVariableDeclarationsAssignment_2_1.eContents().get(0);
		private final RuleCall cIdentificationVariableDeclarationsIdentificationVariableDeclarationParserRuleCall_2_1_0_0 = (RuleCall)cIdentificationVariableDeclarationsAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cIdentificationVariableDeclarationsCollectionMemberDeclarationParserRuleCall_2_1_0_1 = (RuleCall)cIdentificationVariableDeclarationsAlternatives_2_1_0.eContents().get(1);
		
		//FromClause:
		//    'FROM' identificationVariableDeclarations+=IdentificationVariableDeclaration (',' identificationVariableDeclarations+=(IdentificationVariableDeclaration | CollectionMemberDeclaration))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' identificationVariableDeclarations+=IdentificationVariableDeclaration (',' identificationVariableDeclarations+=(IdentificationVariableDeclaration | CollectionMemberDeclaration))*
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//identificationVariableDeclarations+=IdentificationVariableDeclaration
		public Assignment getIdentificationVariableDeclarationsAssignment_1() { return cIdentificationVariableDeclarationsAssignment_1; }
		
		//IdentificationVariableDeclaration
		public RuleCall getIdentificationVariableDeclarationsIdentificationVariableDeclarationParserRuleCall_1_0() { return cIdentificationVariableDeclarationsIdentificationVariableDeclarationParserRuleCall_1_0; }
		
		//(',' identificationVariableDeclarations+=(IdentificationVariableDeclaration | CollectionMemberDeclaration))*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//identificationVariableDeclarations+=(IdentificationVariableDeclaration | CollectionMemberDeclaration)
		public Assignment getIdentificationVariableDeclarationsAssignment_2_1() { return cIdentificationVariableDeclarationsAssignment_2_1; }
		
		//(IdentificationVariableDeclaration | CollectionMemberDeclaration)
		public Alternatives getIdentificationVariableDeclarationsAlternatives_2_1_0() { return cIdentificationVariableDeclarationsAlternatives_2_1_0; }
		
		//IdentificationVariableDeclaration
		public RuleCall getIdentificationVariableDeclarationsIdentificationVariableDeclarationParserRuleCall_2_1_0_0() { return cIdentificationVariableDeclarationsIdentificationVariableDeclarationParserRuleCall_2_1_0_0; }
		
		//CollectionMemberDeclaration
		public RuleCall getIdentificationVariableDeclarationsCollectionMemberDeclarationParserRuleCall_2_1_0_1() { return cIdentificationVariableDeclarationsCollectionMemberDeclarationParserRuleCall_2_1_0_1; }
	}
	public class IdentificationVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.IdentificationVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRangeVariableDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRangeVariableDeclarationRangeVariableDeclarationParserRuleCall_0_0 = (RuleCall)cRangeVariableDeclarationAssignment_0.eContents().get(0);
		private final Assignment cJoinsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cJoinsAlternatives_1_0 = (Alternatives)cJoinsAssignment_1.eContents().get(0);
		private final RuleCall cJoinsJoinParserRuleCall_1_0_0 = (RuleCall)cJoinsAlternatives_1_0.eContents().get(0);
		private final RuleCall cJoinsFetchJoinParserRuleCall_1_0_1 = (RuleCall)cJoinsAlternatives_1_0.eContents().get(1);
		
		//IdentificationVariableDeclaration:
		//    rangeVariableDeclaration=RangeVariableDeclaration joins+= ( Join | FetchJoin )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//rangeVariableDeclaration=RangeVariableDeclaration joins+= ( Join | FetchJoin )*
		public Group getGroup() { return cGroup; }
		
		//rangeVariableDeclaration=RangeVariableDeclaration
		public Assignment getRangeVariableDeclarationAssignment_0() { return cRangeVariableDeclarationAssignment_0; }
		
		//RangeVariableDeclaration
		public RuleCall getRangeVariableDeclarationRangeVariableDeclarationParserRuleCall_0_0() { return cRangeVariableDeclarationRangeVariableDeclarationParserRuleCall_0_0; }
		
		//joins+= ( Join | FetchJoin )*
		public Assignment getJoinsAssignment_1() { return cJoinsAssignment_1; }
		
		//( Join | FetchJoin )
		public Alternatives getJoinsAlternatives_1_0() { return cJoinsAlternatives_1_0; }
		
		//Join
		public RuleCall getJoinsJoinParserRuleCall_1_0_0() { return cJoinsJoinParserRuleCall_1_0_0; }
		
		//FetchJoin
		public RuleCall getJoinsFetchJoinParserRuleCall_1_0_1() { return cJoinsFetchJoinParserRuleCall_1_0_1; }
	}
	public class RangeVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.RangeVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractSchemaNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAbstractSchemaNameEntityCrossReference_0_0 = (CrossReference)cAbstractSchemaNameAssignment_0.eContents().get(0);
		private final RuleCall cAbstractSchemaNameEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cAbstractSchemaNameEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cASKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdentificationVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_2_0 = (RuleCall)cIdentificationVariableAssignment_2.eContents().get(0);
		
		//RangeVariableDeclaration:
		//    abstractSchemaName=[jpadsl::Entity] ('AS')? identificationVariable=IdentificationVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//abstractSchemaName=[jpadsl::Entity] ('AS')? identificationVariable=IdentificationVariable
		public Group getGroup() { return cGroup; }
		
		//abstractSchemaName=[jpadsl::Entity]
		public Assignment getAbstractSchemaNameAssignment_0() { return cAbstractSchemaNameAssignment_0; }
		
		//[jpadsl::Entity]
		public CrossReference getAbstractSchemaNameEntityCrossReference_0_0() { return cAbstractSchemaNameEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getAbstractSchemaNameEntityIDTerminalRuleCall_0_0_1() { return cAbstractSchemaNameEntityIDTerminalRuleCall_0_0_1; }
		
		//('AS')?
		public Keyword getASKeyword_1() { return cASKeyword_1; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_2() { return cIdentificationVariableAssignment_2; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_2_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_2_0; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJoinSpecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJoinSpecJoinSpecParserRuleCall_0_0 = (RuleCall)cJoinSpecAssignment_0.eContents().get(0);
		private final Assignment cJoinAssociationPathExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJoinAssociationPathExpressionJPAPathExpressionParserRuleCall_1_0 = (RuleCall)cJoinAssociationPathExpressionAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdentificationVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_3_0 = (RuleCall)cIdentificationVariableAssignment_3.eContents().get(0);
		
		//Join:
		//    joinSpec=JoinSpec joinAssociationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//joinSpec=JoinSpec joinAssociationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		public Group getGroup() { return cGroup; }
		
		//joinSpec=JoinSpec
		public Assignment getJoinSpecAssignment_0() { return cJoinSpecAssignment_0; }
		
		//JoinSpec
		public RuleCall getJoinSpecJoinSpecParserRuleCall_0_0() { return cJoinSpecJoinSpecParserRuleCall_0_0; }
		
		//joinAssociationPathExpression=JPAPathExpression
		public Assignment getJoinAssociationPathExpressionAssignment_1() { return cJoinAssociationPathExpressionAssignment_1; }
		
		//JPAPathExpression
		public RuleCall getJoinAssociationPathExpressionJPAPathExpressionParserRuleCall_1_0() { return cJoinAssociationPathExpressionJPAPathExpressionParserRuleCall_1_0; }
		
		//('AS')?
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_3() { return cIdentificationVariableAssignment_3; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_3_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_3_0; }
	}
	public class FetchJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.FetchJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cJoinSpecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cJoinSpecJoinSpecParserRuleCall_0_0 = (RuleCall)cJoinSpecAssignment_0.eContents().get(0);
		private final Keyword cFETCHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJoinAssociationPathExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoinAssociationPathExpressionJPAPathExpressionParserRuleCall_2_0 = (RuleCall)cJoinAssociationPathExpressionAssignment_2.eContents().get(0);
		private final Keyword cASKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdentificationVariableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_4_0 = (RuleCall)cIdentificationVariableAssignment_4.eContents().get(0);
		
		//FetchJoin:
		//    joinSpec=JoinSpec 'FETCH' joinAssociationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//joinSpec=JoinSpec 'FETCH' joinAssociationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		public Group getGroup() { return cGroup; }
		
		//joinSpec=JoinSpec
		public Assignment getJoinSpecAssignment_0() { return cJoinSpecAssignment_0; }
		
		//JoinSpec
		public RuleCall getJoinSpecJoinSpecParserRuleCall_0_0() { return cJoinSpecJoinSpecParserRuleCall_0_0; }
		
		//'FETCH'
		public Keyword getFETCHKeyword_1() { return cFETCHKeyword_1; }
		
		//joinAssociationPathExpression=JPAPathExpression
		public Assignment getJoinAssociationPathExpressionAssignment_2() { return cJoinAssociationPathExpressionAssignment_2; }
		
		//JPAPathExpression
		public RuleCall getJoinAssociationPathExpressionJPAPathExpressionParserRuleCall_2_0() { return cJoinAssociationPathExpressionJPAPathExpressionParserRuleCall_2_0; }
		
		//('AS')?
		public Keyword getASKeyword_3() { return cASKeyword_3; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_4() { return cIdentificationVariableAssignment_4; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_4_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_4_0; }
	}
	public class JoinSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.JoinSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLEFTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOUTERKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cINNERKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cJOINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//JoinSpec:
		//    ('LEFT'|'OUTER'|'INNER')? 'JOIN'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('LEFT'|'OUTER'|'INNER')? 'JOIN'
		public Group getGroup() { return cGroup; }
		
		//('LEFT'|'OUTER'|'INNER')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'LEFT'
		public Keyword getLEFTKeyword_0_0() { return cLEFTKeyword_0_0; }
		
		//'OUTER'
		public Keyword getOUTERKeyword_0_1() { return cOUTERKeyword_0_1; }
		
		//'INNER'
		public Keyword getINNERKeyword_0_2() { return cINNERKeyword_0_2; }
		
		//'JOIN'
		public Keyword getJOINKeyword_1() { return cJOINKeyword_1; }
	}
	public class JPAPathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.JPAPathExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRootAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRootIdentificationVariableCrossReference_0_0 = (CrossReference)cRootAssignment_0.eContents().get(0);
		private final RuleCall cRootIdentificationVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cRootIdentificationVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cJpaAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJpaAttributesJpaAttributeParserRuleCall_1_1_0 = (RuleCall)cJpaAttributesAssignment_1_1.eContents().get(0);
		
		//JPAPathExpression:
		//    root=[IdentificationVariable]('.'jpaAttributes+=JpaAttribute)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//root=[IdentificationVariable]('.'jpaAttributes+=JpaAttribute)*
		public Group getGroup() { return cGroup; }
		
		//root=[IdentificationVariable]
		public Assignment getRootAssignment_0() { return cRootAssignment_0; }
		
		//[IdentificationVariable]
		public CrossReference getRootIdentificationVariableCrossReference_0_0() { return cRootIdentificationVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getRootIdentificationVariableIDTerminalRuleCall_0_0_1() { return cRootIdentificationVariableIDTerminalRuleCall_0_0_1; }
		
		//('.'jpaAttributes+=JpaAttribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//jpaAttributes+=JpaAttribute
		public Assignment getJpaAttributesAssignment_1_1() { return cJpaAttributesAssignment_1_1; }
		
		//JpaAttribute
		public RuleCall getJpaAttributesJpaAttributeParserRuleCall_1_1_0() { return cJpaAttributesJpaAttributeParserRuleCall_1_1_0; }
	}
	public class JpaAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.JpaAttribute");
		private final Assignment cAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_0 = (CrossReference)cAttributeAssignment.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_1 = (RuleCall)cAttributeAttributeCrossReference_0.eContents().get(1);
		
		//JpaAttribute:
		//    attribute=[jpadsl::Attribute]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[jpadsl::Attribute]
		public Assignment getAttributeAssignment() { return cAttributeAssignment; }
		
		//[jpadsl::Attribute]
		public CrossReference getAttributeAttributeCrossReference_0() { return cAttributeAttributeCrossReference_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_1; }
	}
	public class CollectionMemberDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.CollectionMemberDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCollectionValuedPathExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCollectionValuedPathExpressionJPAPathExpressionParserRuleCall_1_0 = (RuleCall)cCollectionValuedPathExpressionAssignment_1.eContents().get(0);
		private final Keyword cASKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdentificationVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_3_0 = (RuleCall)cIdentificationVariableAssignment_3.eContents().get(0);
		
		//CollectionMemberDeclaration:
		//    'IN' collectionValuedPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'IN' collectionValuedPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		public Group getGroup() { return cGroup; }
		
		//'IN'
		public Keyword getINKeyword_0() { return cINKeyword_0; }
		
		//collectionValuedPathExpression=JPAPathExpression
		public Assignment getCollectionValuedPathExpressionAssignment_1() { return cCollectionValuedPathExpressionAssignment_1; }
		
		//JPAPathExpression
		public RuleCall getCollectionValuedPathExpressionJPAPathExpressionParserRuleCall_1_0() { return cCollectionValuedPathExpressionJPAPathExpressionParserRuleCall_1_0; }
		
		//('AS')?
		public Keyword getASKeyword_2() { return cASKeyword_2; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_3() { return cIdentificationVariableAssignment_3; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_3_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_3_0; }
	}
	public class SelectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SelectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDISTINCTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectExpressionsSelectExpressionParserRuleCall_2_0 = (RuleCall)cSelectExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSelectExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSelectExpressionsSelectExpressionParserRuleCall_3_1_0 = (RuleCall)cSelectExpressionsAssignment_3_1.eContents().get(0);
		
		//SelectClause:
		//    'SELECT' ('DISTINCT')? selectExpressions+=SelectExpression (',' selectExpressions+=SelectExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' ('DISTINCT')? selectExpressions+=SelectExpression (',' selectExpressions+=SelectExpression)*
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//('DISTINCT')?
		public Keyword getDISTINCTKeyword_1() { return cDISTINCTKeyword_1; }
		
		//selectExpressions+=SelectExpression
		public Assignment getSelectExpressionsAssignment_2() { return cSelectExpressionsAssignment_2; }
		
		//SelectExpression
		public RuleCall getSelectExpressionsSelectExpressionParserRuleCall_2_0() { return cSelectExpressionsSelectExpressionParserRuleCall_2_0; }
		
		//(',' selectExpressions+=SelectExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//selectExpressions+=SelectExpression
		public Assignment getSelectExpressionsAssignment_3_1() { return cSelectExpressionsAssignment_3_1; }
		
		//SelectExpression
		public RuleCall getSelectExpressionsSelectExpressionParserRuleCall_3_1_0() { return cSelectExpressionsSelectExpressionParserRuleCall_3_1_0; }
	}
	public class SelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SelectExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cJpaPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cJpaPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cJpaPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cAggregateExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAggregateExpressionAggregateExpressionParserRuleCall_1_0 = (RuleCall)cAggregateExpressionAssignment_1.eContents().get(0);
		private final Assignment cConstructorExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cConstructorExpressionConstructorExpressionParserRuleCall_2_0 = (RuleCall)cConstructorExpressionAssignment_2.eContents().get(0);
		
		//SelectExpression:
		//    jpaPathExpression=JPAPathExpression | aggregateExpression=AggregateExpression | constructorExpression=ConstructorExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//jpaPathExpression=JPAPathExpression | aggregateExpression=AggregateExpression | constructorExpression=ConstructorExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//jpaPathExpression=JPAPathExpression
		public Assignment getJpaPathExpressionAssignment_0() { return cJpaPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getJpaPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cJpaPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//aggregateExpression=AggregateExpression
		public Assignment getAggregateExpressionAssignment_1() { return cAggregateExpressionAssignment_1; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionAggregateExpressionParserRuleCall_1_0() { return cAggregateExpressionAggregateExpressionParserRuleCall_1_0; }
		
		//constructorExpression=ConstructorExpression
		public Assignment getConstructorExpressionAssignment_2() { return cConstructorExpressionAssignment_2; }
		
		//ConstructorExpression
		public RuleCall getConstructorExpressionConstructorExpressionParserRuleCall_2_0() { return cConstructorExpressionConstructorExpressionParserRuleCall_2_0; }
	}
	public class ConstructorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ConstructorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNEWKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstructorNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstructorNameConstructorNameParserRuleCall_1_0 = (RuleCall)cConstructorNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstructorItemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstructorItemsConstructorItemParserRuleCall_3_0 = (RuleCall)cConstructorItemsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstructorItemsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstructorItemsConstructorItemParserRuleCall_4_1_0 = (RuleCall)cConstructorItemsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstructorExpression:
		//    'NEW' constructorName=ConstructorName '(' constructorItems+=ConstructorItem (',' constructorItems+=ConstructorItem)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'NEW' constructorName=ConstructorName '(' constructorItems+=ConstructorItem (',' constructorItems+=ConstructorItem)* ')'
		public Group getGroup() { return cGroup; }
		
		//'NEW'
		public Keyword getNEWKeyword_0() { return cNEWKeyword_0; }
		
		//constructorName=ConstructorName
		public Assignment getConstructorNameAssignment_1() { return cConstructorNameAssignment_1; }
		
		//ConstructorName
		public RuleCall getConstructorNameConstructorNameParserRuleCall_1_0() { return cConstructorNameConstructorNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//constructorItems+=ConstructorItem
		public Assignment getConstructorItemsAssignment_3() { return cConstructorItemsAssignment_3; }
		
		//ConstructorItem
		public RuleCall getConstructorItemsConstructorItemParserRuleCall_3_0() { return cConstructorItemsConstructorItemParserRuleCall_3_0; }
		
		//(',' constructorItems+=ConstructorItem)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//constructorItems+=ConstructorItem
		public Assignment getConstructorItemsAssignment_4_1() { return cConstructorItemsAssignment_4_1; }
		
		//ConstructorItem
		public RuleCall getConstructorItemsConstructorItemParserRuleCall_4_1_0() { return cConstructorItemsConstructorItemParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ConstructorItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ConstructorItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJPAPathExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstructorItem:
		//    JPAPathExpression | AggregateExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//JPAPathExpression | AggregateExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JPAPathExpression
		public RuleCall getJPAPathExpressionParserRuleCall_0() { return cJPAPathExpressionParserRuleCall_0; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionParserRuleCall_1() { return cAggregateExpressionParserRuleCall_1; }
	}
	public class AggregateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.AggregateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAVGKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMAXKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cMINKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cSUMKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cCOUNTKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cDISTINCTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateFieldPathExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateFieldPathExpressionJPAPathExpressionParserRuleCall_2_0 = (RuleCall)cStateFieldPathExpressionAssignment_2.eContents().get(0);
		
		//AggregateExpression:
		//    ( 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT' ) ('DISTINCT')? stateFieldPathExpression=JPAPathExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT' ) ('DISTINCT')? stateFieldPathExpression=JPAPathExpression
		public Group getGroup() { return cGroup; }
		
		//( 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT' )
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'AVG'
		public Keyword getAVGKeyword_0_0() { return cAVGKeyword_0_0; }
		
		//'MAX'
		public Keyword getMAXKeyword_0_1() { return cMAXKeyword_0_1; }
		
		//'MIN'
		public Keyword getMINKeyword_0_2() { return cMINKeyword_0_2; }
		
		//'SUM'
		public Keyword getSUMKeyword_0_3() { return cSUMKeyword_0_3; }
		
		//'COUNT'
		public Keyword getCOUNTKeyword_0_4() { return cCOUNTKeyword_0_4; }
		
		//('DISTINCT')?
		public Keyword getDISTINCTKeyword_1() { return cDISTINCTKeyword_1; }
		
		//stateFieldPathExpression=JPAPathExpression
		public Assignment getStateFieldPathExpressionAssignment_2() { return cStateFieldPathExpressionAssignment_2; }
		
		//JPAPathExpression
		public RuleCall getStateFieldPathExpressionJPAPathExpressionParserRuleCall_2_0() { return cStateFieldPathExpressionJPAPathExpressionParserRuleCall_2_0; }
	}
	public class IdentificationVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.IdentificationVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//IdentificationVariable: name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstructorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ConstructorName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ConstructorName:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionalExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionalExpressionConditionalExpressionParserRuleCall_1_0 = (RuleCall)cConditionalExpressionAssignment_1.eContents().get(0);
		
		////Where
		//WhereClause:
		//    'WHERE' conditionalExpression=ConditionalExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' conditionalExpression=ConditionalExpression
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//conditionalExpression=ConditionalExpression
		public Assignment getConditionalExpressionAssignment_1() { return cConditionalExpressionAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionConditionalExpressionParserRuleCall_1_0() { return cConditionalExpressionConditionalExpressionParserRuleCall_1_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionalTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConditionalExpression returns Expression:
		//    ConditionalTerm ({ConditionalExpression.left=current} 'AND' right=ConditionalTerm)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalTerm ({ConditionalExpression.left=current} 'AND' right=ConditionalTerm)*
		public Group getGroup() { return cGroup; }
		
		//ConditionalTerm
		public RuleCall getConditionalTermParserRuleCall_0() { return cConditionalTermParserRuleCall_0; }
		
		//({ConditionalExpression.left=current} 'AND' right=ConditionalTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionalExpression.left=current}
		public Action getConditionalExpressionLeftAction_1_0() { return cConditionalExpressionLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=ConditionalTerm
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConditionalTerm
		public RuleCall getRightConditionalTermParserRuleCall_1_2_0() { return cRightConditionalTermParserRuleCall_1_2_0; }
	}
	public class ConditionalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ConditionalTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionalFactorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionalTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionalFactorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConditionalTerm returns Expression:
		//    ConditionalFactor ({ConditionalTerm.left=current} 'OR' right=ConditionalFactor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalFactor ({ConditionalTerm.left=current} 'OR' right=ConditionalFactor)*
		public Group getGroup() { return cGroup; }
		
		//ConditionalFactor
		public RuleCall getConditionalFactorParserRuleCall_0() { return cConditionalFactorParserRuleCall_0; }
		
		//({ConditionalTerm.left=current} 'OR' right=ConditionalFactor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionalTerm.left=current}
		public Action getConditionalTermLeftAction_1_0() { return cConditionalTermLeftAction_1_0; }
		
		//'OR'
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=ConditionalFactor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConditionalFactor
		public RuleCall getRightConditionalFactorParserRuleCall_1_2_0() { return cRightConditionalFactorParserRuleCall_1_2_0; }
	}
	public class ConditionalFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ConditionalFactor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConditionalPrimaryAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionalPrimarySimpleConditionalExpressionParserRuleCall_0_1_0 = (RuleCall)cConditionalPrimaryAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionalExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionalExpressionConditionalExpressionParserRuleCall_1_1_0 = (RuleCall)cConditionalExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ConditionalFactor returns Expression:
		//     ('NOT')? conditionalPrimary=SimpleConditionalExpression | '(' conditionalExpression=ConditionalExpression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('NOT')? conditionalPrimary=SimpleConditionalExpression | '(' conditionalExpression=ConditionalExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('NOT')? conditionalPrimary=SimpleConditionalExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//conditionalPrimary=SimpleConditionalExpression
		public Assignment getConditionalPrimaryAssignment_0_1() { return cConditionalPrimaryAssignment_0_1; }
		
		//SimpleConditionalExpression
		public RuleCall getConditionalPrimarySimpleConditionalExpressionParserRuleCall_0_1_0() { return cConditionalPrimarySimpleConditionalExpressionParserRuleCall_0_1_0; }
		
		//'(' conditionalExpression=ConditionalExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//conditionalExpression=ConditionalExpression
		public Assignment getConditionalExpressionAssignment_1_1() { return cConditionalExpressionAssignment_1_1; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionConditionalExpressionParserRuleCall_1_1_0() { return cConditionalExpressionConditionalExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class SimpleConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SimpleConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cComparisionExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cComparisionExpressionComparisonExpressionParserRuleCall_0_0 = (RuleCall)cComparisionExpressionAssignment_0.eContents().get(0);
		private final Assignment cBetweenExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBetweenExpressionBetweenExpressionParserRuleCall_1_0 = (RuleCall)cBetweenExpressionAssignment_1.eContents().get(0);
		private final Assignment cLikeExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLikeExpressionLikeExpressionParserRuleCall_2_0 = (RuleCall)cLikeExpressionAssignment_2.eContents().get(0);
		private final Assignment cInExpressionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cInExpressionInExpressionParserRuleCall_3_0 = (RuleCall)cInExpressionAssignment_3.eContents().get(0);
		private final Assignment cNullComparisionExpressionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNullComparisionExpressionNullComparisonExpressionParserRuleCall_4_0 = (RuleCall)cNullComparisionExpressionAssignment_4.eContents().get(0);
		private final Assignment cEmptyCollectionComparisonExpressionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cEmptyCollectionComparisonExpressionEmptyCollectionComparisonExpressionParserRuleCall_5_0 = (RuleCall)cEmptyCollectionComparisonExpressionAssignment_5.eContents().get(0);
		private final Assignment cCollectionMemberExpressionAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cCollectionMemberExpressionCollectionMemberExpressionParserRuleCall_6_0 = (RuleCall)cCollectionMemberExpressionAssignment_6.eContents().get(0);
		private final Assignment cExistsExpressionAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cExistsExpressionExistsExpressionParserRuleCall_7_0 = (RuleCall)cExistsExpressionAssignment_7.eContents().get(0);
		
		//SimpleConditionalExpression :
		//    comparisionExpression=ComparisonExpression | betweenExpression=BetweenExpression | likeExpression=LikeExpression | inExpression=InExpression | nullComparisionExpression=NullComparisonExpression | emptyCollectionComparisonExpression=EmptyCollectionComparisonExpression | collectionMemberExpression=CollectionMemberExpression | existsExpression=ExistsExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//comparisionExpression=ComparisonExpression | betweenExpression=BetweenExpression | likeExpression=LikeExpression | inExpression=InExpression | nullComparisionExpression=NullComparisonExpression | emptyCollectionComparisonExpression=EmptyCollectionComparisonExpression | collectionMemberExpression=CollectionMemberExpression | existsExpression=ExistsExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//comparisionExpression=ComparisonExpression
		public Assignment getComparisionExpressionAssignment_0() { return cComparisionExpressionAssignment_0; }
		
		//ComparisonExpression
		public RuleCall getComparisionExpressionComparisonExpressionParserRuleCall_0_0() { return cComparisionExpressionComparisonExpressionParserRuleCall_0_0; }
		
		//betweenExpression=BetweenExpression
		public Assignment getBetweenExpressionAssignment_1() { return cBetweenExpressionAssignment_1; }
		
		//BetweenExpression
		public RuleCall getBetweenExpressionBetweenExpressionParserRuleCall_1_0() { return cBetweenExpressionBetweenExpressionParserRuleCall_1_0; }
		
		//likeExpression=LikeExpression
		public Assignment getLikeExpressionAssignment_2() { return cLikeExpressionAssignment_2; }
		
		//LikeExpression
		public RuleCall getLikeExpressionLikeExpressionParserRuleCall_2_0() { return cLikeExpressionLikeExpressionParserRuleCall_2_0; }
		
		//inExpression=InExpression
		public Assignment getInExpressionAssignment_3() { return cInExpressionAssignment_3; }
		
		//InExpression
		public RuleCall getInExpressionInExpressionParserRuleCall_3_0() { return cInExpressionInExpressionParserRuleCall_3_0; }
		
		//nullComparisionExpression=NullComparisonExpression
		public Assignment getNullComparisionExpressionAssignment_4() { return cNullComparisionExpressionAssignment_4; }
		
		//NullComparisonExpression
		public RuleCall getNullComparisionExpressionNullComparisonExpressionParserRuleCall_4_0() { return cNullComparisionExpressionNullComparisonExpressionParserRuleCall_4_0; }
		
		//emptyCollectionComparisonExpression=EmptyCollectionComparisonExpression
		public Assignment getEmptyCollectionComparisonExpressionAssignment_5() { return cEmptyCollectionComparisonExpressionAssignment_5; }
		
		//EmptyCollectionComparisonExpression
		public RuleCall getEmptyCollectionComparisonExpressionEmptyCollectionComparisonExpressionParserRuleCall_5_0() { return cEmptyCollectionComparisonExpressionEmptyCollectionComparisonExpressionParserRuleCall_5_0; }
		
		//collectionMemberExpression=CollectionMemberExpression
		public Assignment getCollectionMemberExpressionAssignment_6() { return cCollectionMemberExpressionAssignment_6; }
		
		//CollectionMemberExpression
		public RuleCall getCollectionMemberExpressionCollectionMemberExpressionParserRuleCall_6_0() { return cCollectionMemberExpressionCollectionMemberExpressionParserRuleCall_6_0; }
		
		//existsExpression=ExistsExpression
		public Assignment getExistsExpressionAssignment_7() { return cExistsExpressionAssignment_7; }
		
		//ExistsExpression
		public RuleCall getExistsExpressionExistsExpressionParserRuleCall_7_0() { return cExistsExpressionExistsExpressionParserRuleCall_7_0; }
	}
	public class BetweenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.BetweenExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrimaryArithmeticExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryArithmeticExpressionArithmeticExpressionParserRuleCall_0_0_0 = (RuleCall)cPrimaryArithmeticExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cNOTKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cBETWEENKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLowerArithmeticExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLowerArithmeticExpressionArithmeticExpressionParserRuleCall_0_3_0 = (RuleCall)cLowerArithmeticExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cANDKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cUpperArithmeticExpressionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cUpperArithmeticExpressionArithmeticExpressionParserRuleCall_0_5_0 = (RuleCall)cUpperArithmeticExpressionAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimaryStringExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryStringExpressionStringExpressionParserRuleCall_1_0_0 = (RuleCall)cPrimaryStringExpressionAssignment_1_0.eContents().get(0);
		private final Keyword cNOTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cBETWEENKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLowerStringExpressionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLowerStringExpressionStringExpressionParserRuleCall_1_3_0 = (RuleCall)cLowerStringExpressionAssignment_1_3.eContents().get(0);
		private final Keyword cANDKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cUpperStringExpressionAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cUpperStringExpressionStringExpressionParserRuleCall_1_5_0 = (RuleCall)cUpperStringExpressionAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPrimaryDateTimeExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPrimaryDateTimeExpressionDateTimeExpressionParserRuleCall_2_0_0 = (RuleCall)cPrimaryDateTimeExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cNOTKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cBETWEENKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLowerDateTimeExpressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cLowerDateTimeExpressionDateTimeExpressionParserRuleCall_2_3_0 = (RuleCall)cLowerDateTimeExpressionAssignment_2_3.eContents().get(0);
		private final Keyword cANDKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cUpperDateTimeExpressionAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cUpperDateTimeExpressionDateTimeExpressionParserRuleCall_2_5_0 = (RuleCall)cUpperDateTimeExpressionAssignment_2_5.eContents().get(0);
		
		//BetweenExpression:
		//    primaryArithmeticExpression=ArithmeticExpression ('NOT')? 'BETWEEN' lowerArithmeticExpression=ArithmeticExpression 'AND' upperArithmeticExpression=ArithmeticExpression |
		//    primaryStringExpression=StringExpression ('NOT')? 'BETWEEN' lowerStringExpression=StringExpression 'AND' upperStringExpression=StringExpression |
		//    primaryDateTimeExpression=DateTimeExpression ('NOT')? 'BETWEEN' lowerDateTimeExpression=DateTimeExpression 'AND' upperDateTimeExpression=DateTimeExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryArithmeticExpression=ArithmeticExpression ('NOT')? 'BETWEEN' lowerArithmeticExpression=ArithmeticExpression 'AND' upperArithmeticExpression=ArithmeticExpression |
		//primaryStringExpression=StringExpression ('NOT')? 'BETWEEN' lowerStringExpression=StringExpression 'AND' upperStringExpression=StringExpression |
		//primaryDateTimeExpression=DateTimeExpression ('NOT')? 'BETWEEN' lowerDateTimeExpression=DateTimeExpression 'AND' upperDateTimeExpression=DateTimeExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primaryArithmeticExpression=ArithmeticExpression ('NOT')? 'BETWEEN' lowerArithmeticExpression=ArithmeticExpression 'AND' upperArithmeticExpression=ArithmeticExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//primaryArithmeticExpression=ArithmeticExpression
		public Assignment getPrimaryArithmeticExpressionAssignment_0_0() { return cPrimaryArithmeticExpressionAssignment_0_0; }
		
		//ArithmeticExpression
		public RuleCall getPrimaryArithmeticExpressionArithmeticExpressionParserRuleCall_0_0_0() { return cPrimaryArithmeticExpressionArithmeticExpressionParserRuleCall_0_0_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_0_1() { return cNOTKeyword_0_1; }
		
		//'BETWEEN'
		public Keyword getBETWEENKeyword_0_2() { return cBETWEENKeyword_0_2; }
		
		//lowerArithmeticExpression=ArithmeticExpression
		public Assignment getLowerArithmeticExpressionAssignment_0_3() { return cLowerArithmeticExpressionAssignment_0_3; }
		
		//ArithmeticExpression
		public RuleCall getLowerArithmeticExpressionArithmeticExpressionParserRuleCall_0_3_0() { return cLowerArithmeticExpressionArithmeticExpressionParserRuleCall_0_3_0; }
		
		//'AND'
		public Keyword getANDKeyword_0_4() { return cANDKeyword_0_4; }
		
		//upperArithmeticExpression=ArithmeticExpression
		public Assignment getUpperArithmeticExpressionAssignment_0_5() { return cUpperArithmeticExpressionAssignment_0_5; }
		
		//ArithmeticExpression
		public RuleCall getUpperArithmeticExpressionArithmeticExpressionParserRuleCall_0_5_0() { return cUpperArithmeticExpressionArithmeticExpressionParserRuleCall_0_5_0; }
		
		//primaryStringExpression=StringExpression ('NOT')? 'BETWEEN' lowerStringExpression=StringExpression 'AND' upperStringExpression=StringExpression
		public Group getGroup_1() { return cGroup_1; }
		
		//primaryStringExpression=StringExpression
		public Assignment getPrimaryStringExpressionAssignment_1_0() { return cPrimaryStringExpressionAssignment_1_0; }
		
		//StringExpression
		public RuleCall getPrimaryStringExpressionStringExpressionParserRuleCall_1_0_0() { return cPrimaryStringExpressionStringExpressionParserRuleCall_1_0_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_1_1() { return cNOTKeyword_1_1; }
		
		//'BETWEEN'
		public Keyword getBETWEENKeyword_1_2() { return cBETWEENKeyword_1_2; }
		
		//lowerStringExpression=StringExpression
		public Assignment getLowerStringExpressionAssignment_1_3() { return cLowerStringExpressionAssignment_1_3; }
		
		//StringExpression
		public RuleCall getLowerStringExpressionStringExpressionParserRuleCall_1_3_0() { return cLowerStringExpressionStringExpressionParserRuleCall_1_3_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_4() { return cANDKeyword_1_4; }
		
		//upperStringExpression=StringExpression
		public Assignment getUpperStringExpressionAssignment_1_5() { return cUpperStringExpressionAssignment_1_5; }
		
		//StringExpression
		public RuleCall getUpperStringExpressionStringExpressionParserRuleCall_1_5_0() { return cUpperStringExpressionStringExpressionParserRuleCall_1_5_0; }
		
		//primaryDateTimeExpression=DateTimeExpression ('NOT')? 'BETWEEN' lowerDateTimeExpression=DateTimeExpression 'AND' upperDateTimeExpression=DateTimeExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//primaryDateTimeExpression=DateTimeExpression
		public Assignment getPrimaryDateTimeExpressionAssignment_2_0() { return cPrimaryDateTimeExpressionAssignment_2_0; }
		
		//DateTimeExpression
		public RuleCall getPrimaryDateTimeExpressionDateTimeExpressionParserRuleCall_2_0_0() { return cPrimaryDateTimeExpressionDateTimeExpressionParserRuleCall_2_0_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_2_1() { return cNOTKeyword_2_1; }
		
		//'BETWEEN'
		public Keyword getBETWEENKeyword_2_2() { return cBETWEENKeyword_2_2; }
		
		//lowerDateTimeExpression=DateTimeExpression
		public Assignment getLowerDateTimeExpressionAssignment_2_3() { return cLowerDateTimeExpressionAssignment_2_3; }
		
		//DateTimeExpression
		public RuleCall getLowerDateTimeExpressionDateTimeExpressionParserRuleCall_2_3_0() { return cLowerDateTimeExpressionDateTimeExpressionParserRuleCall_2_3_0; }
		
		//'AND'
		public Keyword getANDKeyword_2_4() { return cANDKeyword_2_4; }
		
		//upperDateTimeExpression=DateTimeExpression
		public Assignment getUpperDateTimeExpressionAssignment_2_5() { return cUpperDateTimeExpressionAssignment_2_5; }
		
		//DateTimeExpression
		public RuleCall getUpperDateTimeExpressionDateTimeExpressionParserRuleCall_2_5_0() { return cUpperDateTimeExpressionDateTimeExpressionParserRuleCall_2_5_0; }
	}
	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.InExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPathExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0_0 = (RuleCall)cPathExpressionAssignment_0_0.eContents().get(0);
		private final Keyword cNOTKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cINKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cInItemsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cInItemsInItemParserRuleCall_0_4_0 = (RuleCall)cInItemsAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cInItemsAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cInItemsInItemParserRuleCall_0_5_1_0 = (RuleCall)cInItemsAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSubQueryAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_0_0 = (RuleCall)cSubQueryAssignment_1_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//InExpression:
		//    pathExpression=JPAPathExpression ('NOT')? 'IN' '(' inItems+=InItem (',' inItems+=InItem)*  | subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression ('NOT')? 'IN' '(' inItems+=InItem (',' inItems+=InItem)*  | subQuery=SubQuery ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression ('NOT')? 'IN' '(' inItems+=InItem (',' inItems+=InItem)*
		public Group getGroup_0() { return cGroup_0; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0_0() { return cPathExpressionAssignment_0_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_0_1() { return cNOTKeyword_0_1; }
		
		//'IN'
		public Keyword getINKeyword_0_2() { return cINKeyword_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//inItems+=InItem
		public Assignment getInItemsAssignment_0_4() { return cInItemsAssignment_0_4; }
		
		//InItem
		public RuleCall getInItemsInItemParserRuleCall_0_4_0() { return cInItemsInItemParserRuleCall_0_4_0; }
		
		//(',' inItems+=InItem)*
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//','
		public Keyword getCommaKeyword_0_5_0() { return cCommaKeyword_0_5_0; }
		
		//inItems+=InItem
		public Assignment getInItemsAssignment_0_5_1() { return cInItemsAssignment_0_5_1; }
		
		//InItem
		public RuleCall getInItemsInItemParserRuleCall_0_5_1_0() { return cInItemsInItemParserRuleCall_0_5_1_0; }
		
		//subQuery=SubQuery ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_1_0() { return cSubQueryAssignment_1_0; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_0_0() { return cSubQuerySubQueryParserRuleCall_1_0_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
	}
	public class InItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.InItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralLiteralParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cInputParameterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInputParameterInputParameterParserRuleCall_1_0 = (RuleCall)cInputParameterAssignment_1.eContents().get(0);
		
		//InItem:
		//    literal=Literal | inputParameter=InputParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=Literal | inputParameter=InputParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_0() { return cLiteralLiteralParserRuleCall_0_0; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_1() { return cInputParameterAssignment_1; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_1_0() { return cInputParameterInputParameterParserRuleCall_1_0; }
	}
	public class LikeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.LikeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStringExpressionStringExpressionParserRuleCall_0_0 = (RuleCall)cStringExpressionAssignment_0.eContents().get(0);
		private final Keyword cNOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLIKEKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPatternValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPatternValuePatternValueParserRuleCall_3_0 = (RuleCall)cPatternValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cESCAPEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEscapeCharacterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEscapeCharacterEscapeCharacterParserRuleCall_4_1_0 = (RuleCall)cEscapeCharacterAssignment_4_1.eContents().get(0);
		
		//LikeExpression:
		//     stringExpression=StringExpression ('NOT')? 'LIKE' patternValue=PatternValue ('ESCAPE' escapeCharacter=EscapeCharacter)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//stringExpression=StringExpression ('NOT')? 'LIKE' patternValue=PatternValue ('ESCAPE' escapeCharacter=EscapeCharacter)?
		public Group getGroup() { return cGroup; }
		
		//stringExpression=StringExpression
		public Assignment getStringExpressionAssignment_0() { return cStringExpressionAssignment_0; }
		
		//StringExpression
		public RuleCall getStringExpressionStringExpressionParserRuleCall_0_0() { return cStringExpressionStringExpressionParserRuleCall_0_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_1() { return cNOTKeyword_1; }
		
		//'LIKE'
		public Keyword getLIKEKeyword_2() { return cLIKEKeyword_2; }
		
		//patternValue=PatternValue
		public Assignment getPatternValueAssignment_3() { return cPatternValueAssignment_3; }
		
		//PatternValue
		public RuleCall getPatternValuePatternValueParserRuleCall_3_0() { return cPatternValuePatternValueParserRuleCall_3_0; }
		
		//('ESCAPE' escapeCharacter=EscapeCharacter)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ESCAPE'
		public Keyword getESCAPEKeyword_4_0() { return cESCAPEKeyword_4_0; }
		
		//escapeCharacter=EscapeCharacter
		public Assignment getEscapeCharacterAssignment_4_1() { return cEscapeCharacterAssignment_4_1; }
		
		//EscapeCharacter
		public RuleCall getEscapeCharacterEscapeCharacterParserRuleCall_4_1_0() { return cEscapeCharacterEscapeCharacterParserRuleCall_4_1_0; }
	}
	public class NullComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.NullComparisonExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInputParameterAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInputParameterInputParameterParserRuleCall_1_0_0 = (RuleCall)cInputParameterAssignment_1_0.eContents().get(0);
		private final Keyword cISKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cNOTKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cNULLKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//NullComparisonExpression:
		//    pathExpression=JPAPathExpression | inputParameter=InputParameter 'IS' ('NOT')? 'NULL'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | inputParameter=InputParameter 'IS' ('NOT')? 'NULL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//inputParameter=InputParameter 'IS' ('NOT')? 'NULL'
		public Group getGroup_1() { return cGroup_1; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_1_0() { return cInputParameterAssignment_1_0; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_1_0_0() { return cInputParameterInputParameterParserRuleCall_1_0_0; }
		
		//'IS'
		public Keyword getISKeyword_1_1() { return cISKeyword_1_1; }
		
		//('NOT')?
		public Keyword getNOTKeyword_1_2() { return cNOTKeyword_1_2; }
		
		//'NULL'
		public Keyword getNULLKeyword_1_3() { return cNULLKeyword_1_3; }
	}
	public class EmptyCollectionComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.EmptyCollectionComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Keyword cISKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNOTKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEMPTYKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EmptyCollectionComparisonExpression:
		//    pathExpression=JPAPathExpression 'IS' ('NOT')? 'EMPTY'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression 'IS' ('NOT')? 'EMPTY'
		public Group getGroup() { return cGroup; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//'IS'
		public Keyword getISKeyword_1() { return cISKeyword_1; }
		
		//('NOT')?
		public Keyword getNOTKeyword_2() { return cNOTKeyword_2; }
		
		//'EMPTY'
		public Keyword getEMPTYKeyword_3() { return cEMPTYKeyword_3; }
	}
	public class CollectionMemberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.CollectionMemberExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntityExpressionEntityExpressionParserRuleCall_0_0 = (RuleCall)cEntityExpressionAssignment_0.eContents().get(0);
		private final Keyword cNOTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMEMBERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOFKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPathExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_4_0 = (RuleCall)cPathExpressionAssignment_4.eContents().get(0);
		
		//CollectionMemberExpression:
		//    entityExpression=EntityExpression ('NOT')? 'MEMBER' ('OF')? pathExpression=JPAPathExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//entityExpression=EntityExpression ('NOT')? 'MEMBER' ('OF')? pathExpression=JPAPathExpression
		public Group getGroup() { return cGroup; }
		
		//entityExpression=EntityExpression
		public Assignment getEntityExpressionAssignment_0() { return cEntityExpressionAssignment_0; }
		
		//EntityExpression
		public RuleCall getEntityExpressionEntityExpressionParserRuleCall_0_0() { return cEntityExpressionEntityExpressionParserRuleCall_0_0; }
		
		//('NOT')?
		public Keyword getNOTKeyword_1() { return cNOTKeyword_1; }
		
		//'MEMBER'
		public Keyword getMEMBERKeyword_2() { return cMEMBERKeyword_2; }
		
		//('OF')?
		public Keyword getOFKeyword_3() { return cOFKeyword_3; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_4() { return cPathExpressionAssignment_4; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_4_0() { return cPathExpressionJPAPathExpressionParserRuleCall_4_0; }
	}
	public class ExistsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ExistsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEXISTSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubQueryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubQuerySubQueryParserRuleCall_3_0 = (RuleCall)cSubQueryAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExistsExpression:
		//    ('NOT')? 'EXISTS' '(' subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('NOT')? 'EXISTS' '(' subQuery=SubQuery ')'
		public Group getGroup() { return cGroup; }
		
		//('NOT')?
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }
		
		//'EXISTS'
		public Keyword getEXISTSKeyword_1() { return cEXISTSKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_3() { return cSubQueryAssignment_3; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_3_0() { return cSubQuerySubQueryParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AllOrAnyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.AllOrAnyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cALLKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cANYKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSOMEKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubQuerySubQueryParserRuleCall_2_0 = (RuleCall)cSubQueryAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AllOrAnyExpression:
		//    ('ALL' | 'ANY' | 'SOME') '(' subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('ALL' | 'ANY' | 'SOME') '(' subQuery=SubQuery ')'
		public Group getGroup() { return cGroup; }
		
		//('ALL' | 'ANY' | 'SOME')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'ALL'
		public Keyword getALLKeyword_0_0() { return cALLKeyword_0_0; }
		
		//'ANY'
		public Keyword getANYKeyword_0_1() { return cANYKeyword_0_1; }
		
		//'SOME'
		public Keyword getSOMEKeyword_0_2() { return cSOMEKeyword_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_2() { return cSubQueryAssignment_2; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_2_0() { return cSubQuerySubQueryParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ComparisonExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrimaryStringExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrimaryStringExpressionStringExpressionParserRuleCall_0_0_0 = (RuleCall)cPrimaryStringExpressionAssignment_0_0.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_0_1_0 = (RuleCall)cComparisonOperatorAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cSecondaryStringExpressionAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cSecondaryStringExpressionStringExpressionParserRuleCall_0_2_0_0 = (RuleCall)cSecondaryStringExpressionAssignment_0_2_0.eContents().get(0);
		private final Assignment cAllOrAnyExpressionAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_0_2_1_0 = (RuleCall)cAllOrAnyExpressionAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPrimaryBooleanExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrimaryBooleanExpressionBooleanExpressionParserRuleCall_1_0_0 = (RuleCall)cPrimaryBooleanExpressionAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Assignment cSecondaryBooleanExpressionAssignment_1_2_0 = (Assignment)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cSecondaryBooleanExpressionBooleanExpressionParserRuleCall_1_2_0_0 = (RuleCall)cSecondaryBooleanExpressionAssignment_1_2_0.eContents().get(0);
		private final Assignment cAllOrAnyExpressionAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_1_2_1_0 = (RuleCall)cAllOrAnyExpressionAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPrimaryEnumExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPrimaryEnumExpressionEnumExpressionParserRuleCall_2_0_0 = (RuleCall)cPrimaryEnumExpressionAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Assignment cSecondaryEnumExpressionAssignment_2_2_0 = (Assignment)cAlternatives_2_2.eContents().get(0);
		private final RuleCall cSecondaryEnumExpressionEnumExpressionParserRuleCall_2_2_0_0 = (RuleCall)cSecondaryEnumExpressionAssignment_2_2_0.eContents().get(0);
		private final Assignment cAllOrAnyExpressionAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_2_2_1_0 = (RuleCall)cAllOrAnyExpressionAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPrimaryDatetimeExpressionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cPrimaryDatetimeExpressionDateTimeExpressionParserRuleCall_3_0_0 = (RuleCall)cPrimaryDatetimeExpressionAssignment_3_0.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_3_1_0 = (RuleCall)cComparisonOperatorAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cSecondaryDatetimeExpressionAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cSecondaryDatetimeExpressionDateTimeExpressionParserRuleCall_3_2_0_0 = (RuleCall)cSecondaryDatetimeExpressionAssignment_3_2_0.eContents().get(0);
		private final Assignment cAllOrAnyExpressionAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_3_2_1_0 = (RuleCall)cAllOrAnyExpressionAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cPrimaryEntityExpressionAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPrimaryEntityExpressionEntityExpressionParserRuleCall_4_0_0 = (RuleCall)cPrimaryEntityExpressionAssignment_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Assignment cSecondaryEntityExpressionAssignment_4_2_0 = (Assignment)cAlternatives_4_2.eContents().get(0);
		private final RuleCall cSecondaryEntityExpressionEntityExpressionParserRuleCall_4_2_0_0 = (RuleCall)cSecondaryEntityExpressionAssignment_4_2_0.eContents().get(0);
		private final Assignment cAllOrAnyExpressionAssignment_4_2_1 = (Assignment)cAlternatives_4_2.eContents().get(1);
		private final RuleCall cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_4_2_1_0 = (RuleCall)cAllOrAnyExpressionAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cPrimaryArithmeticExpressionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPrimaryArithmeticExpressionArithmeticExpressionParserRuleCall_5_0_0 = (RuleCall)cPrimaryArithmeticExpressionAssignment_5_0.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_5_1_0 = (RuleCall)cComparisonOperatorAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Assignment cSecondaryArithmeticExpressionAssignment_5_2_0 = (Assignment)cAlternatives_5_2.eContents().get(0);
		private final RuleCall cSecondaryArithmeticExpressionArithmeticExpressionParserRuleCall_5_2_0_0 = (RuleCall)cSecondaryArithmeticExpressionAssignment_5_2_0.eContents().get(0);
		private final Assignment cAllOrAnyExpressionAssignment_5_2_1 = (Assignment)cAlternatives_5_2.eContents().get(1);
		private final RuleCall cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_5_2_1_0 = (RuleCall)cAllOrAnyExpressionAssignment_5_2_1.eContents().get(0);
		
		//ComparisonExpression:
		//    primaryStringExpression=StringExpression comparisonOperator=ComparisonOperator (secondaryStringExpression=StringExpression | allOrAnyExpression=AllOrAnyExpression) | primaryBooleanExpression=BooleanExpression ('='|'<>') (secondaryBooleanExpression=BooleanExpression | allOrAnyExpression=AllOrAnyExpression) | primaryEnumExpression=EnumExpression ('='|'<>') (secondaryEnumExpression=EnumExpression | allOrAnyExpression=AllOrAnyExpression) | primaryDatetimeExpression=DateTimeExpression comparisonOperator=ComparisonOperator (secondaryDatetimeExpression=DateTimeExpression | allOrAnyExpression=AllOrAnyExpression) | primaryEntityExpression=EntityExpression ('='|'<>') (secondaryEntityExpression=EntityExpression | allOrAnyExpression=AllOrAnyExpression) | primaryArithmeticExpression=ArithmeticExpression comparisonOperator=ComparisonOperator (secondaryArithmeticExpression=ArithmeticExpression | allOrAnyExpression=AllOrAnyExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//primaryStringExpression=StringExpression comparisonOperator=ComparisonOperator (secondaryStringExpression=StringExpression | allOrAnyExpression=AllOrAnyExpression) | primaryBooleanExpression=BooleanExpression ('='|'<>') (secondaryBooleanExpression=BooleanExpression | allOrAnyExpression=AllOrAnyExpression) | primaryEnumExpression=EnumExpression ('='|'<>') (secondaryEnumExpression=EnumExpression | allOrAnyExpression=AllOrAnyExpression) | primaryDatetimeExpression=DateTimeExpression comparisonOperator=ComparisonOperator (secondaryDatetimeExpression=DateTimeExpression | allOrAnyExpression=AllOrAnyExpression) | primaryEntityExpression=EntityExpression ('='|'<>') (secondaryEntityExpression=EntityExpression | allOrAnyExpression=AllOrAnyExpression) | primaryArithmeticExpression=ArithmeticExpression comparisonOperator=ComparisonOperator (secondaryArithmeticExpression=ArithmeticExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primaryStringExpression=StringExpression comparisonOperator=ComparisonOperator (secondaryStringExpression=StringExpression | allOrAnyExpression=AllOrAnyExpression)
		public Group getGroup_0() { return cGroup_0; }
		
		//primaryStringExpression=StringExpression
		public Assignment getPrimaryStringExpressionAssignment_0_0() { return cPrimaryStringExpressionAssignment_0_0; }
		
		//StringExpression
		public RuleCall getPrimaryStringExpressionStringExpressionParserRuleCall_0_0_0() { return cPrimaryStringExpressionStringExpressionParserRuleCall_0_0_0; }
		
		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_0_1() { return cComparisonOperatorAssignment_0_1; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_0_1_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_0_1_0; }
		
		//(secondaryStringExpression=StringExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//secondaryStringExpression=StringExpression
		public Assignment getSecondaryStringExpressionAssignment_0_2_0() { return cSecondaryStringExpressionAssignment_0_2_0; }
		
		//StringExpression
		public RuleCall getSecondaryStringExpressionStringExpressionParserRuleCall_0_2_0_0() { return cSecondaryStringExpressionStringExpressionParserRuleCall_0_2_0_0; }
		
		//allOrAnyExpression=AllOrAnyExpression
		public Assignment getAllOrAnyExpressionAssignment_0_2_1() { return cAllOrAnyExpressionAssignment_0_2_1; }
		
		//AllOrAnyExpression
		public RuleCall getAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_0_2_1_0() { return cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_0_2_1_0; }
		
		//primaryBooleanExpression=BooleanExpression ('='|'<>') (secondaryBooleanExpression=BooleanExpression | allOrAnyExpression=AllOrAnyExpression)
		public Group getGroup_1() { return cGroup_1; }
		
		//primaryBooleanExpression=BooleanExpression
		public Assignment getPrimaryBooleanExpressionAssignment_1_0() { return cPrimaryBooleanExpressionAssignment_1_0; }
		
		//BooleanExpression
		public RuleCall getPrimaryBooleanExpressionBooleanExpressionParserRuleCall_1_0_0() { return cPrimaryBooleanExpressionBooleanExpressionParserRuleCall_1_0_0; }
		
		//('='|'<>')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1_1_1() { return cLessThanSignGreaterThanSignKeyword_1_1_1; }
		
		//(secondaryBooleanExpression=BooleanExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//secondaryBooleanExpression=BooleanExpression
		public Assignment getSecondaryBooleanExpressionAssignment_1_2_0() { return cSecondaryBooleanExpressionAssignment_1_2_0; }
		
		//BooleanExpression
		public RuleCall getSecondaryBooleanExpressionBooleanExpressionParserRuleCall_1_2_0_0() { return cSecondaryBooleanExpressionBooleanExpressionParserRuleCall_1_2_0_0; }
		
		//allOrAnyExpression=AllOrAnyExpression
		public Assignment getAllOrAnyExpressionAssignment_1_2_1() { return cAllOrAnyExpressionAssignment_1_2_1; }
		
		//AllOrAnyExpression
		public RuleCall getAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_1_2_1_0() { return cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_1_2_1_0; }
		
		//primaryEnumExpression=EnumExpression ('='|'<>') (secondaryEnumExpression=EnumExpression | allOrAnyExpression=AllOrAnyExpression)
		public Group getGroup_2() { return cGroup_2; }
		
		//primaryEnumExpression=EnumExpression
		public Assignment getPrimaryEnumExpressionAssignment_2_0() { return cPrimaryEnumExpressionAssignment_2_0; }
		
		//EnumExpression
		public RuleCall getPrimaryEnumExpressionEnumExpressionParserRuleCall_2_0_0() { return cPrimaryEnumExpressionEnumExpressionParserRuleCall_2_0_0; }
		
		//('='|'<>')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_2_1_1() { return cLessThanSignGreaterThanSignKeyword_2_1_1; }
		
		//(secondaryEnumExpression=EnumExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//secondaryEnumExpression=EnumExpression
		public Assignment getSecondaryEnumExpressionAssignment_2_2_0() { return cSecondaryEnumExpressionAssignment_2_2_0; }
		
		//EnumExpression
		public RuleCall getSecondaryEnumExpressionEnumExpressionParserRuleCall_2_2_0_0() { return cSecondaryEnumExpressionEnumExpressionParserRuleCall_2_2_0_0; }
		
		//allOrAnyExpression=AllOrAnyExpression
		public Assignment getAllOrAnyExpressionAssignment_2_2_1() { return cAllOrAnyExpressionAssignment_2_2_1; }
		
		//AllOrAnyExpression
		public RuleCall getAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_2_2_1_0() { return cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_2_2_1_0; }
		
		//primaryDatetimeExpression=DateTimeExpression comparisonOperator=ComparisonOperator (secondaryDatetimeExpression=DateTimeExpression | allOrAnyExpression=AllOrAnyExpression)
		public Group getGroup_3() { return cGroup_3; }
		
		//primaryDatetimeExpression=DateTimeExpression
		public Assignment getPrimaryDatetimeExpressionAssignment_3_0() { return cPrimaryDatetimeExpressionAssignment_3_0; }
		
		//DateTimeExpression
		public RuleCall getPrimaryDatetimeExpressionDateTimeExpressionParserRuleCall_3_0_0() { return cPrimaryDatetimeExpressionDateTimeExpressionParserRuleCall_3_0_0; }
		
		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_3_1() { return cComparisonOperatorAssignment_3_1; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_3_1_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_3_1_0; }
		
		//(secondaryDatetimeExpression=DateTimeExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//secondaryDatetimeExpression=DateTimeExpression
		public Assignment getSecondaryDatetimeExpressionAssignment_3_2_0() { return cSecondaryDatetimeExpressionAssignment_3_2_0; }
		
		//DateTimeExpression
		public RuleCall getSecondaryDatetimeExpressionDateTimeExpressionParserRuleCall_3_2_0_0() { return cSecondaryDatetimeExpressionDateTimeExpressionParserRuleCall_3_2_0_0; }
		
		//allOrAnyExpression=AllOrAnyExpression
		public Assignment getAllOrAnyExpressionAssignment_3_2_1() { return cAllOrAnyExpressionAssignment_3_2_1; }
		
		//AllOrAnyExpression
		public RuleCall getAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_3_2_1_0() { return cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_3_2_1_0; }
		
		//primaryEntityExpression=EntityExpression ('='|'<>') (secondaryEntityExpression=EntityExpression | allOrAnyExpression=AllOrAnyExpression)
		public Group getGroup_4() { return cGroup_4; }
		
		//primaryEntityExpression=EntityExpression
		public Assignment getPrimaryEntityExpressionAssignment_4_0() { return cPrimaryEntityExpressionAssignment_4_0; }
		
		//EntityExpression
		public RuleCall getPrimaryEntityExpressionEntityExpressionParserRuleCall_4_0_0() { return cPrimaryEntityExpressionEntityExpressionParserRuleCall_4_0_0; }
		
		//('='|'<>')
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1_0() { return cEqualsSignKeyword_4_1_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_4_1_1() { return cLessThanSignGreaterThanSignKeyword_4_1_1; }
		
		//(secondaryEntityExpression=EntityExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }
		
		//secondaryEntityExpression=EntityExpression
		public Assignment getSecondaryEntityExpressionAssignment_4_2_0() { return cSecondaryEntityExpressionAssignment_4_2_0; }
		
		//EntityExpression
		public RuleCall getSecondaryEntityExpressionEntityExpressionParserRuleCall_4_2_0_0() { return cSecondaryEntityExpressionEntityExpressionParserRuleCall_4_2_0_0; }
		
		//allOrAnyExpression=AllOrAnyExpression
		public Assignment getAllOrAnyExpressionAssignment_4_2_1() { return cAllOrAnyExpressionAssignment_4_2_1; }
		
		//AllOrAnyExpression
		public RuleCall getAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_4_2_1_0() { return cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_4_2_1_0; }
		
		//primaryArithmeticExpression=ArithmeticExpression comparisonOperator=ComparisonOperator (secondaryArithmeticExpression=ArithmeticExpression | allOrAnyExpression=AllOrAnyExpression)
		public Group getGroup_5() { return cGroup_5; }
		
		//primaryArithmeticExpression=ArithmeticExpression
		public Assignment getPrimaryArithmeticExpressionAssignment_5_0() { return cPrimaryArithmeticExpressionAssignment_5_0; }
		
		//ArithmeticExpression
		public RuleCall getPrimaryArithmeticExpressionArithmeticExpressionParserRuleCall_5_0_0() { return cPrimaryArithmeticExpressionArithmeticExpressionParserRuleCall_5_0_0; }
		
		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_5_1() { return cComparisonOperatorAssignment_5_1; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_5_1_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_5_1_0; }
		
		//(secondaryArithmeticExpression=ArithmeticExpression | allOrAnyExpression=AllOrAnyExpression)
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }
		
		//secondaryArithmeticExpression=ArithmeticExpression
		public Assignment getSecondaryArithmeticExpressionAssignment_5_2_0() { return cSecondaryArithmeticExpressionAssignment_5_2_0; }
		
		//ArithmeticExpression
		public RuleCall getSecondaryArithmeticExpressionArithmeticExpressionParserRuleCall_5_2_0_0() { return cSecondaryArithmeticExpressionArithmeticExpressionParserRuleCall_5_2_0_0; }
		
		//allOrAnyExpression=AllOrAnyExpression
		public Assignment getAllOrAnyExpressionAssignment_5_2_1() { return cAllOrAnyExpressionAssignment_5_2_1; }
		
		//AllOrAnyExpression
		public RuleCall getAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_5_2_1_0() { return cAllOrAnyExpressionAllOrAnyExpressionParserRuleCall_5_2_1_0; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ComparisonOperator:
		//     '=' | '>' | '>=' | '<' | '<=' | '<>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '>' | '>=' | '<' | '<=' | '<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ArithmeticExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleArithmeticExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_0_0 = (RuleCall)cSimpleArithmeticExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_1_0 = (RuleCall)cSubQueryAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ArithmeticExpression:
		//    simpleArithmeticExpression=SimpleArithmeticExpression | '('subQuery=SubQuery')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleArithmeticExpression=SimpleArithmeticExpression | '('subQuery=SubQuery')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getSimpleArithmeticExpressionAssignment_0() { return cSimpleArithmeticExpressionAssignment_0; }
		
		//SimpleArithmeticExpression
		public RuleCall getSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_0_0() { return cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_0_0; }
		
		//'('subQuery=SubQuery')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_1_1() { return cSubQueryAssignment_1_1; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_1_0() { return cSubQuerySubQueryParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class SimpleArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SimpleArithmeticExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cArithmeticTermAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticTermArithmeticTermParserRuleCall_0_0 = (RuleCall)cArithmeticTermAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cArithmeticTermParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cSimpleArithmeticExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightArithmeticTermParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//SimpleArithmeticExpression returns Expression:
		//    arithmeticTerm=ArithmeticTerm | ArithmeticTerm ({SimpleArithmeticExpression.left=current} ('+'|'-') right=ArithmeticTerm)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//arithmeticTerm=ArithmeticTerm | ArithmeticTerm ({SimpleArithmeticExpression.left=current} ('+'|'-') right=ArithmeticTerm)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arithmeticTerm=ArithmeticTerm
		public Assignment getArithmeticTermAssignment_0() { return cArithmeticTermAssignment_0; }
		
		//ArithmeticTerm
		public RuleCall getArithmeticTermArithmeticTermParserRuleCall_0_0() { return cArithmeticTermArithmeticTermParserRuleCall_0_0; }
		
		//ArithmeticTerm ({SimpleArithmeticExpression.left=current} ('+'|'-') right=ArithmeticTerm)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ArithmeticTerm
		public RuleCall getArithmeticTermParserRuleCall_1_0() { return cArithmeticTermParserRuleCall_1_0; }
		
		//({SimpleArithmeticExpression.left=current} ('+'|'-') right=ArithmeticTerm)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SimpleArithmeticExpression.left=current}
		public Action getSimpleArithmeticExpressionLeftAction_1_1_0() { return cSimpleArithmeticExpressionLeftAction_1_1_0; }
		
		//('+'|'-')
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_1_0() { return cPlusSignKeyword_1_1_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_1_1() { return cHyphenMinusKeyword_1_1_1_1; }
		
		//right=ArithmeticTerm
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ArithmeticTerm
		public RuleCall getRightArithmeticTermParserRuleCall_1_1_2_0() { return cRightArithmeticTermParserRuleCall_1_1_2_0; }
	}
	public class ArithmeticTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ArithmeticTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cArithmeticFactorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticFactorArithmeticFactorParserRuleCall_0_0 = (RuleCall)cArithmeticFactorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cArithmeticFactorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cArithmeticTermLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightArithmeticFactorParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//ArithmeticTerm returns Expression:
		//    arithmeticFactor=ArithmeticFactor | ArithmeticFactor ({ArithmeticTerm.left=current} ('*'|'/') right=ArithmeticFactor)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//arithmeticFactor=ArithmeticFactor | ArithmeticFactor ({ArithmeticTerm.left=current} ('*'|'/') right=ArithmeticFactor)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arithmeticFactor=ArithmeticFactor
		public Assignment getArithmeticFactorAssignment_0() { return cArithmeticFactorAssignment_0; }
		
		//ArithmeticFactor
		public RuleCall getArithmeticFactorArithmeticFactorParserRuleCall_0_0() { return cArithmeticFactorArithmeticFactorParserRuleCall_0_0; }
		
		//ArithmeticFactor ({ArithmeticTerm.left=current} ('*'|'/') right=ArithmeticFactor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ArithmeticFactor
		public RuleCall getArithmeticFactorParserRuleCall_1_0() { return cArithmeticFactorParserRuleCall_1_0; }
		
		//({ArithmeticTerm.left=current} ('*'|'/') right=ArithmeticFactor)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ArithmeticTerm.left=current}
		public Action getArithmeticTermLeftAction_1_1_0() { return cArithmeticTermLeftAction_1_1_0; }
		
		//('*'|'/')
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_1_0() { return cAsteriskKeyword_1_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1_1() { return cSolidusKeyword_1_1_1_1; }
		
		//right=ArithmeticFactor
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//ArithmeticFactor
		public RuleCall getRightArithmeticFactorParserRuleCall_1_1_2_0() { return cRightArithmeticFactorParserRuleCall_1_1_2_0; }
	}
	public class ArithmeticFactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ArithmeticFactor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cArithmeticPrimaryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArithmeticPrimaryArithmeticPrimaryParserRuleCall_1_0 = (RuleCall)cArithmeticPrimaryAssignment_1.eContents().get(0);
		
		//ArithmeticFactor returns Expression:
		//    ('+'|'-')? arithmeticPrimary=ArithmeticPrimary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('+'|'-')? arithmeticPrimary=ArithmeticPrimary
		public Group getGroup() { return cGroup; }
		
		//('+'|'-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//arithmeticPrimary=ArithmeticPrimary
		public Assignment getArithmeticPrimaryAssignment_1() { return cArithmeticPrimaryAssignment_1; }
		
		//ArithmeticPrimary
		public RuleCall getArithmeticPrimaryArithmeticPrimaryParserRuleCall_1_0() { return cArithmeticPrimaryArithmeticPrimaryParserRuleCall_1_0; }
	}
	public class ArithmeticPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ArithmeticPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cNumericLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumericLiteralNumericLiteralParserRuleCall_1_0 = (RuleCall)cNumericLiteralAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSimpleArithmeticExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_2_1_0 = (RuleCall)cSimpleArithmeticExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInputParameterAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cInputParameterInputParameterParserRuleCall_3_0 = (RuleCall)cInputParameterAssignment_3.eContents().get(0);
		private final Assignment cFunctionsReturningNumericsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFunctionsReturningNumericsFunctionsReturningNumericsParserRuleCall_4_0 = (RuleCall)cFunctionsReturningNumericsAssignment_4.eContents().get(0);
		private final Assignment cAggregateExpressionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cAggregateExpressionAggregateExpressionParserRuleCall_5_0 = (RuleCall)cAggregateExpressionAssignment_5.eContents().get(0);
		
		//ArithmeticPrimary :
		//    pathExpression=JPAPathExpression | numericLiteral=NumericLiteral | '('simpleArithmeticExpression=SimpleArithmeticExpression')' | inputParameter=InputParameter | functionsReturningNumerics=FunctionsReturningNumerics | aggregateExpression=AggregateExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | numericLiteral=NumericLiteral | '('simpleArithmeticExpression=SimpleArithmeticExpression')' | inputParameter=InputParameter | functionsReturningNumerics=FunctionsReturningNumerics | aggregateExpression=AggregateExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//numericLiteral=NumericLiteral
		public Assignment getNumericLiteralAssignment_1() { return cNumericLiteralAssignment_1; }
		
		//NumericLiteral
		public RuleCall getNumericLiteralNumericLiteralParserRuleCall_1_0() { return cNumericLiteralNumericLiteralParserRuleCall_1_0; }
		
		//'('simpleArithmeticExpression=SimpleArithmeticExpression')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//simpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getSimpleArithmeticExpressionAssignment_2_1() { return cSimpleArithmeticExpressionAssignment_2_1; }
		
		//SimpleArithmeticExpression
		public RuleCall getSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_2_1_0() { return cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_3() { return cInputParameterAssignment_3; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_3_0() { return cInputParameterInputParameterParserRuleCall_3_0; }
		
		//functionsReturningNumerics=FunctionsReturningNumerics
		public Assignment getFunctionsReturningNumericsAssignment_4() { return cFunctionsReturningNumericsAssignment_4; }
		
		//FunctionsReturningNumerics
		public RuleCall getFunctionsReturningNumericsFunctionsReturningNumericsParserRuleCall_4_0() { return cFunctionsReturningNumericsFunctionsReturningNumericsParserRuleCall_4_0; }
		
		//aggregateExpression=AggregateExpression
		public Assignment getAggregateExpressionAssignment_5() { return cAggregateExpressionAssignment_5; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionAggregateExpressionParserRuleCall_5_0() { return cAggregateExpressionAggregateExpressionParserRuleCall_5_0; }
	}
	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.StringExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringPrimaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_0_0 = (RuleCall)cStringPrimaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_1_0 = (RuleCall)cSubQueryAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StringExpression:
		//    stringPrimary=StringPrimary | '(' subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//stringPrimary=StringPrimary | '(' subQuery=SubQuery ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stringPrimary=StringPrimary
		public Assignment getStringPrimaryAssignment_0() { return cStringPrimaryAssignment_0; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_0_0() { return cStringPrimaryStringPrimaryParserRuleCall_0_0; }
		
		//'(' subQuery=SubQuery ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_1_1() { return cSubQueryAssignment_1_1; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_1_0() { return cSubQuerySubQueryParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class StringPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.StringPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cStringLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralStringLiteralParserRuleCall_1_0 = (RuleCall)cStringLiteralAssignment_1.eContents().get(0);
		private final Assignment cInputParamaterAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInputParamaterInputParameterParserRuleCall_2_0 = (RuleCall)cInputParamaterAssignment_2.eContents().get(0);
		private final Assignment cFunctionsReturningStringsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionsReturningStringsFunctionsReturningStringsParserRuleCall_3_0 = (RuleCall)cFunctionsReturningStringsAssignment_3.eContents().get(0);
		private final Assignment cAggregateExpressionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAggregateExpressionAggregateExpressionParserRuleCall_4_0 = (RuleCall)cAggregateExpressionAssignment_4.eContents().get(0);
		
		//StringPrimary:
		//    pathExpression=JPAPathExpression | stringLiteral=StringLiteral | inputParamater=InputParameter | functionsReturningStrings=FunctionsReturningStrings | aggregateExpression=AggregateExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | stringLiteral=StringLiteral | inputParamater=InputParameter | functionsReturningStrings=FunctionsReturningStrings | aggregateExpression=AggregateExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//stringLiteral=StringLiteral
		public Assignment getStringLiteralAssignment_1() { return cStringLiteralAssignment_1; }
		
		//StringLiteral
		public RuleCall getStringLiteralStringLiteralParserRuleCall_1_0() { return cStringLiteralStringLiteralParserRuleCall_1_0; }
		
		//inputParamater=InputParameter
		public Assignment getInputParamaterAssignment_2() { return cInputParamaterAssignment_2; }
		
		//InputParameter
		public RuleCall getInputParamaterInputParameterParserRuleCall_2_0() { return cInputParamaterInputParameterParserRuleCall_2_0; }
		
		//functionsReturningStrings=FunctionsReturningStrings
		public Assignment getFunctionsReturningStringsAssignment_3() { return cFunctionsReturningStringsAssignment_3; }
		
		//FunctionsReturningStrings
		public RuleCall getFunctionsReturningStringsFunctionsReturningStringsParserRuleCall_3_0() { return cFunctionsReturningStringsFunctionsReturningStringsParserRuleCall_3_0; }
		
		//aggregateExpression=AggregateExpression
		public Assignment getAggregateExpressionAssignment_4() { return cAggregateExpressionAssignment_4; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionAggregateExpressionParserRuleCall_4_0() { return cAggregateExpressionAggregateExpressionParserRuleCall_4_0; }
	}
	public class DateTimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.DateTimeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDateTimePrimaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDateTimePrimaryDateTimePrimaryParserRuleCall_0_0 = (RuleCall)cDateTimePrimaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_1_0 = (RuleCall)cSubQueryAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//DateTimeExpression:
		//     dateTimePrimary=DateTimePrimary | '(' subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//dateTimePrimary=DateTimePrimary | '(' subQuery=SubQuery ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dateTimePrimary=DateTimePrimary
		public Assignment getDateTimePrimaryAssignment_0() { return cDateTimePrimaryAssignment_0; }
		
		//DateTimePrimary
		public RuleCall getDateTimePrimaryDateTimePrimaryParserRuleCall_0_0() { return cDateTimePrimaryDateTimePrimaryParserRuleCall_0_0; }
		
		//'(' subQuery=SubQuery ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_1_1() { return cSubQueryAssignment_1_1; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_1_0() { return cSubQuerySubQueryParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class DateTimePrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.DateTimePrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cInputParameterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInputParameterInputParameterParserRuleCall_1_0 = (RuleCall)cInputParameterAssignment_1.eContents().get(0);
		private final Assignment cFunctionsReturningDateTimeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionsReturningDateTimeFunctionsReturningDateTimeParserRuleCall_2_0 = (RuleCall)cFunctionsReturningDateTimeAssignment_2.eContents().get(0);
		private final Assignment cAggregateExpressionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAggregateExpressionAggregateExpressionParserRuleCall_3_0 = (RuleCall)cAggregateExpressionAssignment_3.eContents().get(0);
		
		//DateTimePrimary:
		//    pathExpression=JPAPathExpression | inputParameter=InputParameter | functionsReturningDateTime=FunctionsReturningDateTime | aggregateExpression=AggregateExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | inputParameter=InputParameter | functionsReturningDateTime=FunctionsReturningDateTime | aggregateExpression=AggregateExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_1() { return cInputParameterAssignment_1; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_1_0() { return cInputParameterInputParameterParserRuleCall_1_0; }
		
		//functionsReturningDateTime=FunctionsReturningDateTime
		public Assignment getFunctionsReturningDateTimeAssignment_2() { return cFunctionsReturningDateTimeAssignment_2; }
		
		//FunctionsReturningDateTime
		public RuleCall getFunctionsReturningDateTimeFunctionsReturningDateTimeParserRuleCall_2_0() { return cFunctionsReturningDateTimeFunctionsReturningDateTimeParserRuleCall_2_0; }
		
		//aggregateExpression=AggregateExpression
		public Assignment getAggregateExpressionAssignment_3() { return cAggregateExpressionAssignment_3; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionAggregateExpressionParserRuleCall_3_0() { return cAggregateExpressionAggregateExpressionParserRuleCall_3_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBooleanPrimaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanPrimaryBooleanPrimaryParserRuleCall_0_0 = (RuleCall)cBooleanPrimaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_1_0 = (RuleCall)cSubQueryAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BooleanExpression:
		//    booleanPrimary=BooleanPrimary | '(' subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//booleanPrimary=BooleanPrimary | '(' subQuery=SubQuery ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//booleanPrimary=BooleanPrimary
		public Assignment getBooleanPrimaryAssignment_0() { return cBooleanPrimaryAssignment_0; }
		
		//BooleanPrimary
		public RuleCall getBooleanPrimaryBooleanPrimaryParserRuleCall_0_0() { return cBooleanPrimaryBooleanPrimaryParserRuleCall_0_0; }
		
		//'(' subQuery=SubQuery ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_1_1() { return cSubQueryAssignment_1_1; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_1_0() { return cSubQuerySubQueryParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class BooleanPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.BooleanPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cBooleanLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralBooleanLiteralParserRuleCall_1_0 = (RuleCall)cBooleanLiteralAssignment_1.eContents().get(0);
		private final Assignment cInputParameterAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInputParameterInputParameterParserRuleCall_2_0 = (RuleCall)cInputParameterAssignment_2.eContents().get(0);
		
		//BooleanPrimary:
		//    pathExpression=JPAPathExpression | booleanLiteral=BooleanLiteral | inputParameter=InputParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | booleanLiteral=BooleanLiteral | inputParameter=InputParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//booleanLiteral=BooleanLiteral
		public Assignment getBooleanLiteralAssignment_1() { return cBooleanLiteralAssignment_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralBooleanLiteralParserRuleCall_1_0() { return cBooleanLiteralBooleanLiteralParserRuleCall_1_0; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_2() { return cInputParameterAssignment_2; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_2_0() { return cInputParameterInputParameterParserRuleCall_2_0; }
	}
	public class EnumExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.EnumExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEnumPrimaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEnumPrimaryEnumPrimaryParserRuleCall_0_0 = (RuleCall)cEnumPrimaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubQueryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubQuerySubQueryParserRuleCall_1_1_0 = (RuleCall)cSubQueryAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EnumExpression:
		//    enumPrimary=EnumPrimary | '(' subQuery=SubQuery ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//enumPrimary=EnumPrimary | '(' subQuery=SubQuery ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//enumPrimary=EnumPrimary
		public Assignment getEnumPrimaryAssignment_0() { return cEnumPrimaryAssignment_0; }
		
		//EnumPrimary
		public RuleCall getEnumPrimaryEnumPrimaryParserRuleCall_0_0() { return cEnumPrimaryEnumPrimaryParserRuleCall_0_0; }
		
		//'(' subQuery=SubQuery ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//subQuery=SubQuery
		public Assignment getSubQueryAssignment_1_1() { return cSubQueryAssignment_1_1; }
		
		//SubQuery
		public RuleCall getSubQuerySubQueryParserRuleCall_1_1_0() { return cSubQuerySubQueryParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class EnumPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.EnumPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cEnumLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumLiteralEnumLiteralParserRuleCall_1_0 = (RuleCall)cEnumLiteralAssignment_1.eContents().get(0);
		private final Assignment cInputParameterAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInputParameterInputParameterParserRuleCall_2_0 = (RuleCall)cInputParameterAssignment_2.eContents().get(0);
		
		//EnumPrimary:
		//    pathExpression=JPAPathExpression | enumLiteral=EnumLiteral | inputParameter=InputParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | enumLiteral=EnumLiteral | inputParameter=InputParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//enumLiteral=EnumLiteral
		public Assignment getEnumLiteralAssignment_1() { return cEnumLiteralAssignment_1; }
		
		//EnumLiteral
		public RuleCall getEnumLiteralEnumLiteralParserRuleCall_1_0() { return cEnumLiteralEnumLiteralParserRuleCall_1_0; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_2() { return cInputParameterAssignment_2; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_2_0() { return cInputParameterInputParameterParserRuleCall_2_0; }
	}
	public class EntityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.EntityExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cSimpleEntityExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleEntityExpressionSimpleEntityExpressionParserRuleCall_1_0 = (RuleCall)cSimpleEntityExpressionAssignment_1.eContents().get(0);
		
		//EntityExpression:
		//    pathExpression=JPAPathExpression | simpleEntityExpression=SimpleEntityExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | simpleEntityExpression=SimpleEntityExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//simpleEntityExpression=SimpleEntityExpression
		public Assignment getSimpleEntityExpressionAssignment_1() { return cSimpleEntityExpressionAssignment_1; }
		
		//SimpleEntityExpression
		public RuleCall getSimpleEntityExpressionSimpleEntityExpressionParserRuleCall_1_0() { return cSimpleEntityExpressionSimpleEntityExpressionParserRuleCall_1_0; }
	}
	public class SimpleEntityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SimpleEntityExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentificationVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_0_0 = (RuleCall)cIdentificationVariableAssignment_0.eContents().get(0);
		private final Assignment cInputParameterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInputParameterInputParameterParserRuleCall_1_0 = (RuleCall)cInputParameterAssignment_1.eContents().get(0);
		
		//SimpleEntityExpression:
		//    identificationVariable=IdentificationVariable | inputParameter=InputParameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//identificationVariable=IdentificationVariable | inputParameter=InputParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_0() { return cIdentificationVariableAssignment_0; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_0_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_0_0; }
		
		//inputParameter=InputParameter
		public Assignment getInputParameterAssignment_1() { return cInputParameterAssignment_1; }
		
		//InputParameter
		public RuleCall getInputParameterInputParameterParserRuleCall_1_0() { return cInputParameterInputParameterParserRuleCall_1_0; }
	}
	public class FunctionsReturningNumericsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.FunctionsReturningNumerics");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLENGTHKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStringPrimaryAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_0_1_0 = (RuleCall)cStringPrimaryAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLOCATEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cStringPrimaryAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_1_1_0_0 = (RuleCall)cStringPrimaryAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cStringSecondaryAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cStringSecondaryStringPrimaryParserRuleCall_1_1_2_0 = (RuleCall)cStringSecondaryAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cSimpleArithmeticExpressionAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cSimpleArithmeticExpressionAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cABSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSimpleArithmeticExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_2_1_0 = (RuleCall)cSimpleArithmeticExpressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cSQRTKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSimpleArithmeticExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_3_1_0 = (RuleCall)cSimpleArithmeticExpressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cMODKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cPrimarySimpleArithmeticExpressionAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cPrimarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_4_1_0_0 = (RuleCall)cPrimarySimpleArithmeticExpressionAssignment_4_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cSecondarySimpleArithmeticExpressionAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cSecondarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_4_1_2_0 = (RuleCall)cSecondarySimpleArithmeticExpressionAssignment_4_1_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cSIZEKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPathExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_5_1_0 = (RuleCall)cPathExpressionAssignment_5_1.eContents().get(0);
		
		//FunctionsReturningNumerics:
		//    'LENGTH'(stringPrimary=StringPrimary) | 'LOCATE'(stringPrimary=StringPrimary',' stringSecondary=StringPrimary(',' simpleArithmeticExpression=SimpleArithmeticExpression)?) | 'ABS'(simpleArithmeticExpression=SimpleArithmeticExpression) | 'SQRT'(simpleArithmeticExpression=SimpleArithmeticExpression) | 'MOD'(primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression) | 'SIZE'(pathExpression=JPAPathExpression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'LENGTH'(stringPrimary=StringPrimary) | 'LOCATE'(stringPrimary=StringPrimary',' stringSecondary=StringPrimary(',' simpleArithmeticExpression=SimpleArithmeticExpression)?) | 'ABS'(simpleArithmeticExpression=SimpleArithmeticExpression) | 'SQRT'(simpleArithmeticExpression=SimpleArithmeticExpression) | 'MOD'(primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression) | 'SIZE'(pathExpression=JPAPathExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'LENGTH'(stringPrimary=StringPrimary)
		public Group getGroup_0() { return cGroup_0; }
		
		//'LENGTH'
		public Keyword getLENGTHKeyword_0_0() { return cLENGTHKeyword_0_0; }
		
		//(stringPrimary=StringPrimary)
		public Assignment getStringPrimaryAssignment_0_1() { return cStringPrimaryAssignment_0_1; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_0_1_0() { return cStringPrimaryStringPrimaryParserRuleCall_0_1_0; }
		
		//'LOCATE'(stringPrimary=StringPrimary',' stringSecondary=StringPrimary(',' simpleArithmeticExpression=SimpleArithmeticExpression)?)
		public Group getGroup_1() { return cGroup_1; }
		
		//'LOCATE'
		public Keyword getLOCATEKeyword_1_0() { return cLOCATEKeyword_1_0; }
		
		//(stringPrimary=StringPrimary',' stringSecondary=StringPrimary(',' simpleArithmeticExpression=SimpleArithmeticExpression)?)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//stringPrimary=StringPrimary
		public Assignment getStringPrimaryAssignment_1_1_0() { return cStringPrimaryAssignment_1_1_0; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_1_1_0_0() { return cStringPrimaryStringPrimaryParserRuleCall_1_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }
		
		//stringSecondary=StringPrimary
		public Assignment getStringSecondaryAssignment_1_1_2() { return cStringSecondaryAssignment_1_1_2; }
		
		//StringPrimary
		public RuleCall getStringSecondaryStringPrimaryParserRuleCall_1_1_2_0() { return cStringSecondaryStringPrimaryParserRuleCall_1_1_2_0; }
		
		//(',' simpleArithmeticExpression=SimpleArithmeticExpression)?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//','
		public Keyword getCommaKeyword_1_1_3_0() { return cCommaKeyword_1_1_3_0; }
		
		//simpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getSimpleArithmeticExpressionAssignment_1_1_3_1() { return cSimpleArithmeticExpressionAssignment_1_1_3_1; }
		
		//SimpleArithmeticExpression
		public RuleCall getSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_3_1_0() { return cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_3_1_0; }
		
		//'ABS'(simpleArithmeticExpression=SimpleArithmeticExpression)
		public Group getGroup_2() { return cGroup_2; }
		
		//'ABS'
		public Keyword getABSKeyword_2_0() { return cABSKeyword_2_0; }
		
		//(simpleArithmeticExpression=SimpleArithmeticExpression)
		public Assignment getSimpleArithmeticExpressionAssignment_2_1() { return cSimpleArithmeticExpressionAssignment_2_1; }
		
		//SimpleArithmeticExpression
		public RuleCall getSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_2_1_0() { return cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_2_1_0; }
		
		//'SQRT'(simpleArithmeticExpression=SimpleArithmeticExpression)
		public Group getGroup_3() { return cGroup_3; }
		
		//'SQRT'
		public Keyword getSQRTKeyword_3_0() { return cSQRTKeyword_3_0; }
		
		//(simpleArithmeticExpression=SimpleArithmeticExpression)
		public Assignment getSimpleArithmeticExpressionAssignment_3_1() { return cSimpleArithmeticExpressionAssignment_3_1; }
		
		//SimpleArithmeticExpression
		public RuleCall getSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_3_1_0() { return cSimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_3_1_0; }
		
		//'MOD'(primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)
		public Group getGroup_4() { return cGroup_4; }
		
		//'MOD'
		public Keyword getMODKeyword_4_0() { return cMODKeyword_4_0; }
		
		//(primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//primarySimpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getPrimarySimpleArithmeticExpressionAssignment_4_1_0() { return cPrimarySimpleArithmeticExpressionAssignment_4_1_0; }
		
		//SimpleArithmeticExpression
		public RuleCall getPrimarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_4_1_0_0() { return cPrimarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_4_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_4_1_1() { return cCommaKeyword_4_1_1; }
		
		//secondarySimpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getSecondarySimpleArithmeticExpressionAssignment_4_1_2() { return cSecondarySimpleArithmeticExpressionAssignment_4_1_2; }
		
		//SimpleArithmeticExpression
		public RuleCall getSecondarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_4_1_2_0() { return cSecondarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_4_1_2_0; }
		
		//'SIZE'(pathExpression=JPAPathExpression)
		public Group getGroup_5() { return cGroup_5; }
		
		//'SIZE'
		public Keyword getSIZEKeyword_5_0() { return cSIZEKeyword_5_0; }
		
		//(pathExpression=JPAPathExpression)
		public Assignment getPathExpressionAssignment_5_1() { return cPathExpressionAssignment_5_1; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_5_1_0() { return cPathExpressionJPAPathExpressionParserRuleCall_5_1_0; }
	}
	public class FunctionsReturningDateTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.FunctionsReturningDateTime");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCURRENT_DATEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCURRENT_TIMEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCURRENT_TIMESTAMPKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//FunctionsReturningDateTime:
		//    'CURRENT_DATE'| 'CURRENT_TIME' | 'CURRENT_TIMESTAMP'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CURRENT_DATE'| 'CURRENT_TIME' | 'CURRENT_TIMESTAMP'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CURRENT_DATE'
		public Keyword getCURRENT_DATEKeyword_0() { return cCURRENT_DATEKeyword_0; }
		
		//'CURRENT_TIME'
		public Keyword getCURRENT_TIMEKeyword_1() { return cCURRENT_TIMEKeyword_1; }
		
		//'CURRENT_TIMESTAMP'
		public Keyword getCURRENT_TIMESTAMPKeyword_2() { return cCURRENT_TIMESTAMPKeyword_2; }
	}
	public class FunctionsReturningStringsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.FunctionsReturningStrings");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCONCATKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cPrimaryStringPrimaryAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cPrimaryStringPrimaryStringPrimaryParserRuleCall_0_1_0_0 = (RuleCall)cPrimaryStringPrimaryAssignment_0_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cSecondaryStringPrimaryAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cSecondaryStringPrimaryStringPrimaryParserRuleCall_0_1_2_0 = (RuleCall)cSecondaryStringPrimaryAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSUBSTRINGKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cStringPrimaryAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_1_1_0_0 = (RuleCall)cStringPrimaryAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cPrimarySimpleArithmeticExpressionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cPrimarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_2_0 = (RuleCall)cPrimarySimpleArithmeticExpressionAssignment_1_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cSecondarySimpleArithmeticExpressionAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cSecondarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_4_0 = (RuleCall)cSecondarySimpleArithmeticExpressionAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cTRIMKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Assignment cTrimSpecificationAssignment_2_1_0_0 = (Assignment)cGroup_2_1_0.eContents().get(0);
		private final RuleCall cTrimSpecificationTrimSpecificationParserRuleCall_2_1_0_0_0 = (RuleCall)cTrimSpecificationAssignment_2_1_0_0.eContents().get(0);
		private final Assignment cTrimCharacterAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cTrimCharacterTrimCharacterParserRuleCall_2_1_0_1_0 = (RuleCall)cTrimCharacterAssignment_2_1_0_1.eContents().get(0);
		private final Keyword cFROMKeyword_2_1_0_2 = (Keyword)cGroup_2_1_0.eContents().get(2);
		private final Assignment cStringPrimaryAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_2_1_1_0 = (RuleCall)cStringPrimaryAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLOWERKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStringPrimaryAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_3_1_0 = (RuleCall)cStringPrimaryAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cUPPERKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStringPrimaryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStringPrimaryStringPrimaryParserRuleCall_4_1_0 = (RuleCall)cStringPrimaryAssignment_4_1.eContents().get(0);
		
		//FunctionsReturningStrings:
		//    'CONCAT'(primaryStringPrimary=StringPrimary',' secondaryStringPrimary=StringPrimary) | 'SUBSTRING'(stringPrimary=StringPrimary',' primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)| 'TRIM'(((trimSpecification=TrimSpecification)? (trimCharacter=TrimCharacter)? 'FROM')? stringPrimary=StringPrimary) | 'LOWER'(stringPrimary=StringPrimary) | 'UPPER'(stringPrimary=StringPrimary)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CONCAT'(primaryStringPrimary=StringPrimary',' secondaryStringPrimary=StringPrimary) | 'SUBSTRING'(stringPrimary=StringPrimary',' primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)| 'TRIM'(((trimSpecification=TrimSpecification)? (trimCharacter=TrimCharacter)? 'FROM')? stringPrimary=StringPrimary) | 'LOWER'(stringPrimary=StringPrimary) | 'UPPER'(stringPrimary=StringPrimary)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CONCAT'(primaryStringPrimary=StringPrimary',' secondaryStringPrimary=StringPrimary)
		public Group getGroup_0() { return cGroup_0; }
		
		//'CONCAT'
		public Keyword getCONCATKeyword_0_0() { return cCONCATKeyword_0_0; }
		
		//(primaryStringPrimary=StringPrimary',' secondaryStringPrimary=StringPrimary)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//primaryStringPrimary=StringPrimary
		public Assignment getPrimaryStringPrimaryAssignment_0_1_0() { return cPrimaryStringPrimaryAssignment_0_1_0; }
		
		//StringPrimary
		public RuleCall getPrimaryStringPrimaryStringPrimaryParserRuleCall_0_1_0_0() { return cPrimaryStringPrimaryStringPrimaryParserRuleCall_0_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1_1() { return cCommaKeyword_0_1_1; }
		
		//secondaryStringPrimary=StringPrimary
		public Assignment getSecondaryStringPrimaryAssignment_0_1_2() { return cSecondaryStringPrimaryAssignment_0_1_2; }
		
		//StringPrimary
		public RuleCall getSecondaryStringPrimaryStringPrimaryParserRuleCall_0_1_2_0() { return cSecondaryStringPrimaryStringPrimaryParserRuleCall_0_1_2_0; }
		
		//'SUBSTRING'(stringPrimary=StringPrimary',' primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)
		public Group getGroup_1() { return cGroup_1; }
		
		//'SUBSTRING'
		public Keyword getSUBSTRINGKeyword_1_0() { return cSUBSTRINGKeyword_1_0; }
		
		//(stringPrimary=StringPrimary',' primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//stringPrimary=StringPrimary
		public Assignment getStringPrimaryAssignment_1_1_0() { return cStringPrimaryAssignment_1_1_0; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_1_1_0_0() { return cStringPrimaryStringPrimaryParserRuleCall_1_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }
		
		//primarySimpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getPrimarySimpleArithmeticExpressionAssignment_1_1_2() { return cPrimarySimpleArithmeticExpressionAssignment_1_1_2; }
		
		//SimpleArithmeticExpression
		public RuleCall getPrimarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_2_0() { return cPrimarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_3() { return cCommaKeyword_1_1_3; }
		
		//secondarySimpleArithmeticExpression=SimpleArithmeticExpression
		public Assignment getSecondarySimpleArithmeticExpressionAssignment_1_1_4() { return cSecondarySimpleArithmeticExpressionAssignment_1_1_4; }
		
		//SimpleArithmeticExpression
		public RuleCall getSecondarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_4_0() { return cSecondarySimpleArithmeticExpressionSimpleArithmeticExpressionParserRuleCall_1_1_4_0; }
		
		//'TRIM'(((trimSpecification=TrimSpecification)? (trimCharacter=TrimCharacter)? 'FROM')? stringPrimary=StringPrimary)
		public Group getGroup_2() { return cGroup_2; }
		
		//'TRIM'
		public Keyword getTRIMKeyword_2_0() { return cTRIMKeyword_2_0; }
		
		//(((trimSpecification=TrimSpecification)? (trimCharacter=TrimCharacter)? 'FROM')? stringPrimary=StringPrimary)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//((trimSpecification=TrimSpecification)? (trimCharacter=TrimCharacter)? 'FROM')?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//(trimSpecification=TrimSpecification)?
		public Assignment getTrimSpecificationAssignment_2_1_0_0() { return cTrimSpecificationAssignment_2_1_0_0; }
		
		//TrimSpecification
		public RuleCall getTrimSpecificationTrimSpecificationParserRuleCall_2_1_0_0_0() { return cTrimSpecificationTrimSpecificationParserRuleCall_2_1_0_0_0; }
		
		//(trimCharacter=TrimCharacter)?
		public Assignment getTrimCharacterAssignment_2_1_0_1() { return cTrimCharacterAssignment_2_1_0_1; }
		
		//TrimCharacter
		public RuleCall getTrimCharacterTrimCharacterParserRuleCall_2_1_0_1_0() { return cTrimCharacterTrimCharacterParserRuleCall_2_1_0_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_2_1_0_2() { return cFROMKeyword_2_1_0_2; }
		
		//stringPrimary=StringPrimary
		public Assignment getStringPrimaryAssignment_2_1_1() { return cStringPrimaryAssignment_2_1_1; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_2_1_1_0() { return cStringPrimaryStringPrimaryParserRuleCall_2_1_1_0; }
		
		//'LOWER'(stringPrimary=StringPrimary)
		public Group getGroup_3() { return cGroup_3; }
		
		//'LOWER'
		public Keyword getLOWERKeyword_3_0() { return cLOWERKeyword_3_0; }
		
		//(stringPrimary=StringPrimary)
		public Assignment getStringPrimaryAssignment_3_1() { return cStringPrimaryAssignment_3_1; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_3_1_0() { return cStringPrimaryStringPrimaryParserRuleCall_3_1_0; }
		
		//'UPPER'(stringPrimary=StringPrimary)
		public Group getGroup_4() { return cGroup_4; }
		
		//'UPPER'
		public Keyword getUPPERKeyword_4_0() { return cUPPERKeyword_4_0; }
		
		//(stringPrimary=StringPrimary)
		public Assignment getStringPrimaryAssignment_4_1() { return cStringPrimaryAssignment_4_1; }
		
		//StringPrimary
		public RuleCall getStringPrimaryStringPrimaryParserRuleCall_4_1_0() { return cStringPrimaryStringPrimaryParserRuleCall_4_1_0; }
	}
	public class TrimSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.TrimSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLEADINGKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cTRAILINGKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBOTHKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TrimSpecification:
		//    'LEADING' | 'TRAILING' | 'BOTH'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'LEADING' | 'TRAILING' | 'BOTH'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'LEADING'
		public Keyword getLEADINGKeyword_0() { return cLEADINGKeyword_0; }
		
		//'TRAILING'
		public Keyword getTRAILINGKeyword_1() { return cTRAILINGKeyword_1; }
		
		//'BOTH'
		public Keyword getBOTHKeyword_2() { return cBOTHKeyword_2; }
	}
	public class SubQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SubQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSimpleSelectClauseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSimpleSelectClauseSimpleSelectClauseParserRuleCall_0_0 = (RuleCall)cSimpleSelectClauseAssignment_0.eContents().get(0);
		private final Assignment cSubqueryFromClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubqueryFromClauseSubqueryFromClauseParserRuleCall_1_0 = (RuleCall)cSubqueryFromClauseAssignment_1.eContents().get(0);
		private final Assignment cWhereClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_2_0 = (RuleCall)cWhereClauseAssignment_2.eContents().get(0);
		
		//SubQuery:
		//    simpleSelectClause=SimpleSelectClause subqueryFromClause=SubqueryFromClause (whereClause=WhereClause)? //(groupByClause=GroupByClause)? (havingClause=HavingClause)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//simpleSelectClause=SimpleSelectClause subqueryFromClause=SubqueryFromClause (whereClause=WhereClause)?
		public Group getGroup() { return cGroup; }
		
		//simpleSelectClause=SimpleSelectClause
		public Assignment getSimpleSelectClauseAssignment_0() { return cSimpleSelectClauseAssignment_0; }
		
		//SimpleSelectClause
		public RuleCall getSimpleSelectClauseSimpleSelectClauseParserRuleCall_0_0() { return cSimpleSelectClauseSimpleSelectClauseParserRuleCall_0_0; }
		
		//subqueryFromClause=SubqueryFromClause
		public Assignment getSubqueryFromClauseAssignment_1() { return cSubqueryFromClauseAssignment_1; }
		
		//SubqueryFromClause
		public RuleCall getSubqueryFromClauseSubqueryFromClauseParserRuleCall_1_0() { return cSubqueryFromClauseSubqueryFromClauseParserRuleCall_1_0; }
		
		//(whereClause=WhereClause)?
		public Assignment getWhereClauseAssignment_2() { return cWhereClauseAssignment_2; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_2_0() { return cWhereClauseWhereClauseParserRuleCall_2_0; }
	}
	public class SubqueryFromClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SubqueryFromClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubselectIdentificationVariableDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubselectIdentificationVariableDeclarationSubselectIdentificationVariableDeclarationParserRuleCall_1_0 = (RuleCall)cSubselectIdentificationVariableDeclarationAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubselectIdentificationVariableDeclarationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubselectIdentificationVariableDeclarationSubselectIdentificationVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cSubselectIdentificationVariableDeclarationAssignment_2_1.eContents().get(0);
		
		//SubqueryFromClause:
		//    'FROM' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration (',' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FROM' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration (',' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//'FROM'
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration
		public Assignment getSubselectIdentificationVariableDeclarationAssignment_1() { return cSubselectIdentificationVariableDeclarationAssignment_1; }
		
		//SubselectIdentificationVariableDeclaration
		public RuleCall getSubselectIdentificationVariableDeclarationSubselectIdentificationVariableDeclarationParserRuleCall_1_0() { return cSubselectIdentificationVariableDeclarationSubselectIdentificationVariableDeclarationParserRuleCall_1_0; }
		
		//(',' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration
		public Assignment getSubselectIdentificationVariableDeclarationAssignment_2_1() { return cSubselectIdentificationVariableDeclarationAssignment_2_1; }
		
		//SubselectIdentificationVariableDeclaration
		public RuleCall getSubselectIdentificationVariableDeclarationSubselectIdentificationVariableDeclarationParserRuleCall_2_1_0() { return cSubselectIdentificationVariableDeclarationSubselectIdentificationVariableDeclarationParserRuleCall_2_1_0; }
	}
	public class SubselectIdentificationVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SubselectIdentificationVariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentificationVariableDecalarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentificationVariableDecalarationIdentificationVariableDeclarationParserRuleCall_0_0 = (RuleCall)cIdentificationVariableDecalarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAssociationPathExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAssociationPathExpressionJPAPathExpressionParserRuleCall_1_0_0 = (RuleCall)cAssociationPathExpressionAssignment_1_0.eContents().get(0);
		private final Keyword cASKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdentificationVariableAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_1_2_0 = (RuleCall)cIdentificationVariableAssignment_1_2.eContents().get(0);
		private final Assignment cCollectionMemberDeclarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCollectionMemberDeclarationCollectionMemberDeclarationParserRuleCall_2_0 = (RuleCall)cCollectionMemberDeclarationAssignment_2.eContents().get(0);
		
		//SubselectIdentificationVariableDeclaration:
		//    identificationVariableDecalaration=IdentificationVariableDeclaration | associationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable | collectionMemberDeclaration=CollectionMemberDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//identificationVariableDecalaration=IdentificationVariableDeclaration | associationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable | collectionMemberDeclaration=CollectionMemberDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identificationVariableDecalaration=IdentificationVariableDeclaration
		public Assignment getIdentificationVariableDecalarationAssignment_0() { return cIdentificationVariableDecalarationAssignment_0; }
		
		//IdentificationVariableDeclaration
		public RuleCall getIdentificationVariableDecalarationIdentificationVariableDeclarationParserRuleCall_0_0() { return cIdentificationVariableDecalarationIdentificationVariableDeclarationParserRuleCall_0_0; }
		
		//associationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
		public Group getGroup_1() { return cGroup_1; }
		
		//associationPathExpression=JPAPathExpression
		public Assignment getAssociationPathExpressionAssignment_1_0() { return cAssociationPathExpressionAssignment_1_0; }
		
		//JPAPathExpression
		public RuleCall getAssociationPathExpressionJPAPathExpressionParserRuleCall_1_0_0() { return cAssociationPathExpressionJPAPathExpressionParserRuleCall_1_0_0; }
		
		//('AS')?
		public Keyword getASKeyword_1_1() { return cASKeyword_1_1; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_1_2() { return cIdentificationVariableAssignment_1_2; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_1_2_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_1_2_0; }
		
		//collectionMemberDeclaration=CollectionMemberDeclaration
		public Assignment getCollectionMemberDeclarationAssignment_2() { return cCollectionMemberDeclarationAssignment_2; }
		
		//CollectionMemberDeclaration
		public RuleCall getCollectionMemberDeclarationCollectionMemberDeclarationParserRuleCall_2_0() { return cCollectionMemberDeclarationCollectionMemberDeclarationParserRuleCall_2_0; }
	}
	public class SimpleSelectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SimpleSelectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDISTINCTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSimpleSelectExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSimpleSelectExpressionSimpleSelectExpressionParserRuleCall_2_0 = (RuleCall)cSimpleSelectExpressionAssignment_2.eContents().get(0);
		
		//SimpleSelectClause:
		//    'SELECT' ('DISTINCT')? simpleSelectExpression=SimpleSelectExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' ('DISTINCT')? simpleSelectExpression=SimpleSelectExpression
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//('DISTINCT')?
		public Keyword getDISTINCTKeyword_1() { return cDISTINCTKeyword_1; }
		
		//simpleSelectExpression=SimpleSelectExpression
		public Assignment getSimpleSelectExpressionAssignment_2() { return cSimpleSelectExpressionAssignment_2; }
		
		//SimpleSelectExpression
		public RuleCall getSimpleSelectExpressionSimpleSelectExpressionParserRuleCall_2_0() { return cSimpleSelectExpressionSimpleSelectExpressionParserRuleCall_2_0; }
	}
	public class SimpleSelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.SimpleSelectExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathExpressionJPAPathExpressionParserRuleCall_0_0 = (RuleCall)cPathExpressionAssignment_0.eContents().get(0);
		private final Assignment cAggregateExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAggregateExpressionAggregateExpressionParserRuleCall_1_0 = (RuleCall)cAggregateExpressionAssignment_1.eContents().get(0);
		private final Assignment cIdentificationVariableAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdentificationVariableIdentificationVariableParserRuleCall_2_0 = (RuleCall)cIdentificationVariableAssignment_2.eContents().get(0);
		
		//SimpleSelectExpression:
		//    pathExpression=JPAPathExpression | aggregateExpression=AggregateExpression | identificationVariable=IdentificationVariable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pathExpression=JPAPathExpression | aggregateExpression=AggregateExpression | identificationVariable=IdentificationVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pathExpression=JPAPathExpression
		public Assignment getPathExpressionAssignment_0() { return cPathExpressionAssignment_0; }
		
		//JPAPathExpression
		public RuleCall getPathExpressionJPAPathExpressionParserRuleCall_0_0() { return cPathExpressionJPAPathExpressionParserRuleCall_0_0; }
		
		//aggregateExpression=AggregateExpression
		public Assignment getAggregateExpressionAssignment_1() { return cAggregateExpressionAssignment_1; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionAggregateExpressionParserRuleCall_1_0() { return cAggregateExpressionAggregateExpressionParserRuleCall_1_0; }
		
		//identificationVariable=IdentificationVariable
		public Assignment getIdentificationVariableAssignment_2() { return cIdentificationVariableAssignment_2; }
		
		//IdentificationVariable
		public RuleCall getIdentificationVariableIdentificationVariableParserRuleCall_2_0() { return cIdentificationVariableIdentificationVariableParserRuleCall_2_0; }
	}
	public class InputParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.InputParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//InputParameter:
		//    ':'name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//':'name=ID
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EscapeCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.EscapeCharacter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EscapeCharacter:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.Literal");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Literal:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PatternValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.PatternValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PatternValue:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralIDTerminalRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StringLiteral:
		//    '\''literal=ID'\''
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'\''literal=ID'\''
		public Group getGroup() { return cGroup; }
		
		//'\''
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//literal=ID
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }
		
		//ID
		public RuleCall getLiteralIDTerminalRuleCall_1_0() { return cLiteralIDTerminalRuleCall_1_0; }
		
		//'\''
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.NumericLiteral");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralINTTerminalRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//NumericLiteral:
		//    literal=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//literal=INT
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }
		
		//INT
		public RuleCall getLiteralINTTerminalRuleCall_0() { return cLiteralINTTerminalRuleCall_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//    'true' | 'false'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.EnumLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumLiteral:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class TrimCharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.TrimCharacter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TrimCharacter:
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportNameSpaceParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//    'import' importedNamespace=ImportNameSpace
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=ImportNameSpace
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=ImportNameSpace
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//ImportNameSpace
		public RuleCall getImportedNamespaceImportNameSpaceParserRuleCall_1_0() { return cImportedNamespaceImportNameSpaceParserRuleCall_1_0; }
	}
	public class ImportNameSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ImportNameSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ImportNameSpace :
		//    QualifiedName  ('.' '*')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName  ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final NamedQueryElements pNamedQuery;
	private final XMLDescriptorElements pXMLDescriptor;
	private final QLStatementElements pQLStatement;
	private final SelectStatementElements pSelectStatement;
	private final FromClauseElements pFromClause;
	private final IdentificationVariableDeclarationElements pIdentificationVariableDeclaration;
	private final RangeVariableDeclarationElements pRangeVariableDeclaration;
	private final JoinElements pJoin;
	private final FetchJoinElements pFetchJoin;
	private final JoinSpecElements pJoinSpec;
	private final JPAPathExpressionElements pJPAPathExpression;
	private final JpaAttributeElements pJpaAttribute;
	private final CollectionMemberDeclarationElements pCollectionMemberDeclaration;
	private final SelectClauseElements pSelectClause;
	private final SelectExpressionElements pSelectExpression;
	private final ConstructorExpressionElements pConstructorExpression;
	private final ConstructorItemElements pConstructorItem;
	private final AggregateExpressionElements pAggregateExpression;
	private final IdentificationVariableElements pIdentificationVariable;
	private final ConstructorNameElements pConstructorName;
	private final WhereClauseElements pWhereClause;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalTermElements pConditionalTerm;
	private final ConditionalFactorElements pConditionalFactor;
	private final SimpleConditionalExpressionElements pSimpleConditionalExpression;
	private final BetweenExpressionElements pBetweenExpression;
	private final InExpressionElements pInExpression;
	private final InItemElements pInItem;
	private final LikeExpressionElements pLikeExpression;
	private final NullComparisonExpressionElements pNullComparisonExpression;
	private final EmptyCollectionComparisonExpressionElements pEmptyCollectionComparisonExpression;
	private final CollectionMemberExpressionElements pCollectionMemberExpression;
	private final ExistsExpressionElements pExistsExpression;
	private final AllOrAnyExpressionElements pAllOrAnyExpression;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ComparisonOperatorElements pComparisonOperator;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final SimpleArithmeticExpressionElements pSimpleArithmeticExpression;
	private final ArithmeticTermElements pArithmeticTerm;
	private final ArithmeticFactorElements pArithmeticFactor;
	private final ArithmeticPrimaryElements pArithmeticPrimary;
	private final StringExpressionElements pStringExpression;
	private final StringPrimaryElements pStringPrimary;
	private final DateTimeExpressionElements pDateTimeExpression;
	private final DateTimePrimaryElements pDateTimePrimary;
	private final BooleanExpressionElements pBooleanExpression;
	private final BooleanPrimaryElements pBooleanPrimary;
	private final EnumExpressionElements pEnumExpression;
	private final EnumPrimaryElements pEnumPrimary;
	private final EntityExpressionElements pEntityExpression;
	private final SimpleEntityExpressionElements pSimpleEntityExpression;
	private final FunctionsReturningNumericsElements pFunctionsReturningNumerics;
	private final FunctionsReturningDateTimeElements pFunctionsReturningDateTime;
	private final FunctionsReturningStringsElements pFunctionsReturningStrings;
	private final TrimSpecificationElements pTrimSpecification;
	private final SubQueryElements pSubQuery;
	private final SubqueryFromClauseElements pSubqueryFromClause;
	private final SubselectIdentificationVariableDeclarationElements pSubselectIdentificationVariableDeclaration;
	private final SimpleSelectClauseElements pSimpleSelectClause;
	private final SimpleSelectExpressionElements pSimpleSelectExpression;
	private final InputParameterElements pInputParameter;
	private final EscapeCharacterElements pEscapeCharacter;
	private final LiteralElements pLiteral;
	private final PatternValueElements pPatternValue;
	private final TerminalRule tSTRING;
	private final StringLiteralElements pStringLiteral;
	private final NumericLiteralElements pNumericLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final EnumLiteralElements pEnumLiteral;
	private final TrimCharacterElements pTrimCharacter;
	private final ImportElements pImport;
	private final ImportNameSpaceElements pImportNameSpace;
	private final TerminalRule tORM_UNMANAGED_CONTENT;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public JPAQLDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pNamedQuery = new NamedQueryElements();
		this.pXMLDescriptor = new XMLDescriptorElements();
		this.pQLStatement = new QLStatementElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pFromClause = new FromClauseElements();
		this.pIdentificationVariableDeclaration = new IdentificationVariableDeclarationElements();
		this.pRangeVariableDeclaration = new RangeVariableDeclarationElements();
		this.pJoin = new JoinElements();
		this.pFetchJoin = new FetchJoinElements();
		this.pJoinSpec = new JoinSpecElements();
		this.pJPAPathExpression = new JPAPathExpressionElements();
		this.pJpaAttribute = new JpaAttributeElements();
		this.pCollectionMemberDeclaration = new CollectionMemberDeclarationElements();
		this.pSelectClause = new SelectClauseElements();
		this.pSelectExpression = new SelectExpressionElements();
		this.pConstructorExpression = new ConstructorExpressionElements();
		this.pConstructorItem = new ConstructorItemElements();
		this.pAggregateExpression = new AggregateExpressionElements();
		this.pIdentificationVariable = new IdentificationVariableElements();
		this.pConstructorName = new ConstructorNameElements();
		this.pWhereClause = new WhereClauseElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalTerm = new ConditionalTermElements();
		this.pConditionalFactor = new ConditionalFactorElements();
		this.pSimpleConditionalExpression = new SimpleConditionalExpressionElements();
		this.pBetweenExpression = new BetweenExpressionElements();
		this.pInExpression = new InExpressionElements();
		this.pInItem = new InItemElements();
		this.pLikeExpression = new LikeExpressionElements();
		this.pNullComparisonExpression = new NullComparisonExpressionElements();
		this.pEmptyCollectionComparisonExpression = new EmptyCollectionComparisonExpressionElements();
		this.pCollectionMemberExpression = new CollectionMemberExpressionElements();
		this.pExistsExpression = new ExistsExpressionElements();
		this.pAllOrAnyExpression = new AllOrAnyExpressionElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pSimpleArithmeticExpression = new SimpleArithmeticExpressionElements();
		this.pArithmeticTerm = new ArithmeticTermElements();
		this.pArithmeticFactor = new ArithmeticFactorElements();
		this.pArithmeticPrimary = new ArithmeticPrimaryElements();
		this.pStringExpression = new StringExpressionElements();
		this.pStringPrimary = new StringPrimaryElements();
		this.pDateTimeExpression = new DateTimeExpressionElements();
		this.pDateTimePrimary = new DateTimePrimaryElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pBooleanPrimary = new BooleanPrimaryElements();
		this.pEnumExpression = new EnumExpressionElements();
		this.pEnumPrimary = new EnumPrimaryElements();
		this.pEntityExpression = new EntityExpressionElements();
		this.pSimpleEntityExpression = new SimpleEntityExpressionElements();
		this.pFunctionsReturningNumerics = new FunctionsReturningNumericsElements();
		this.pFunctionsReturningDateTime = new FunctionsReturningDateTimeElements();
		this.pFunctionsReturningStrings = new FunctionsReturningStringsElements();
		this.pTrimSpecification = new TrimSpecificationElements();
		this.pSubQuery = new SubQueryElements();
		this.pSubqueryFromClause = new SubqueryFromClauseElements();
		this.pSubselectIdentificationVariableDeclaration = new SubselectIdentificationVariableDeclarationElements();
		this.pSimpleSelectClause = new SimpleSelectClauseElements();
		this.pSimpleSelectExpression = new SimpleSelectExpressionElements();
		this.pInputParameter = new InputParameterElements();
		this.pEscapeCharacter = new EscapeCharacterElements();
		this.pLiteral = new LiteralElements();
		this.pPatternValue = new PatternValueElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.STRING");
		this.pStringLiteral = new StringLiteralElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pEnumLiteral = new EnumLiteralElements();
		this.pTrimCharacter = new TrimCharacterElements();
		this.pImport = new ImportElements();
		this.pImportNameSpace = new ImportNameSpaceElements();
		this.tORM_UNMANAGED_CONTENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "jpaqldsl.JPAQLDsl.ORM_UNMANAGED_CONTENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("jpaqldsl.JPAQLDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//xmlDescriptor=XMLDescriptor
	//(ORM_UNMANAGED_CONTENT)?
	//'<!-- Imports and Package Declaration Here.'
	//imports+=Import*
	//'package' name=QualifiedName
	//'-->'
	//    (ORM_UNMANAGED_CONTENT)?
	//    namedQueries+=NamedQuery*
	//    (ORM_UNMANAGED_CONTENT)?
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//NamedQuery:
	//    '<named-query name="'name=ID'">'
	//        '<query>'
	//            qlStatement=QLStatement
	//        '</query>'
	//    '</named-query>'
	//;
	public NamedQueryElements getNamedQueryAccess() {
		return pNamedQuery;
	}
	
	public ParserRule getNamedQueryRule() {
		return getNamedQueryAccess().getRule();
	}
	
	//XMLDescriptor:
	//'<?xml version="1.0" encoding="UTF-8" ?>'
	//;
	public XMLDescriptorElements getXMLDescriptorAccess() {
		return pXMLDescriptor;
	}
	
	public ParserRule getXMLDescriptorRule() {
		return getXMLDescriptorAccess().getRule();
	}
	
	//QLStatement:
	//    selectStatements+=SelectStatement*
	//;
	public QLStatementElements getQLStatementAccess() {
		return pQLStatement;
	}
	
	public ParserRule getQLStatementRule() {
		return getQLStatementAccess().getRule();
	}
	
	// //| UpdateStatement | DeleteStatement;
	//SelectStatement:
	//    selectClause=SelectClause fromClause=FromClause (whereClause=WhereClause)? //(groupByClause=GroupByClause) (havingClause=HavingClause) (orderByClause=OrderByClause)
	//;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//FromClause:
	//    'FROM' identificationVariableDeclarations+=IdentificationVariableDeclaration (',' identificationVariableDeclarations+=(IdentificationVariableDeclaration | CollectionMemberDeclaration))*
	//;
	public FromClauseElements getFromClauseAccess() {
		return pFromClause;
	}
	
	public ParserRule getFromClauseRule() {
		return getFromClauseAccess().getRule();
	}
	
	//IdentificationVariableDeclaration:
	//    rangeVariableDeclaration=RangeVariableDeclaration joins+= ( Join | FetchJoin )*
	//;
	public IdentificationVariableDeclarationElements getIdentificationVariableDeclarationAccess() {
		return pIdentificationVariableDeclaration;
	}
	
	public ParserRule getIdentificationVariableDeclarationRule() {
		return getIdentificationVariableDeclarationAccess().getRule();
	}
	
	//RangeVariableDeclaration:
	//    abstractSchemaName=[jpadsl::Entity] ('AS')? identificationVariable=IdentificationVariable
	//;
	public RangeVariableDeclarationElements getRangeVariableDeclarationAccess() {
		return pRangeVariableDeclaration;
	}
	
	public ParserRule getRangeVariableDeclarationRule() {
		return getRangeVariableDeclarationAccess().getRule();
	}
	
	//Join:
	//    joinSpec=JoinSpec joinAssociationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
	//;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//FetchJoin:
	//    joinSpec=JoinSpec 'FETCH' joinAssociationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
	//;
	public FetchJoinElements getFetchJoinAccess() {
		return pFetchJoin;
	}
	
	public ParserRule getFetchJoinRule() {
		return getFetchJoinAccess().getRule();
	}
	
	//JoinSpec:
	//    ('LEFT'|'OUTER'|'INNER')? 'JOIN'
	//;
	public JoinSpecElements getJoinSpecAccess() {
		return pJoinSpec;
	}
	
	public ParserRule getJoinSpecRule() {
		return getJoinSpecAccess().getRule();
	}
	
	//JPAPathExpression:
	//    root=[IdentificationVariable]('.'jpaAttributes+=JpaAttribute)*
	//;
	public JPAPathExpressionElements getJPAPathExpressionAccess() {
		return pJPAPathExpression;
	}
	
	public ParserRule getJPAPathExpressionRule() {
		return getJPAPathExpressionAccess().getRule();
	}
	
	//JpaAttribute:
	//    attribute=[jpadsl::Attribute]
	//;
	public JpaAttributeElements getJpaAttributeAccess() {
		return pJpaAttribute;
	}
	
	public ParserRule getJpaAttributeRule() {
		return getJpaAttributeAccess().getRule();
	}
	
	//CollectionMemberDeclaration:
	//    'IN' collectionValuedPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable
	//;
	public CollectionMemberDeclarationElements getCollectionMemberDeclarationAccess() {
		return pCollectionMemberDeclaration;
	}
	
	public ParserRule getCollectionMemberDeclarationRule() {
		return getCollectionMemberDeclarationAccess().getRule();
	}
	
	//SelectClause:
	//    'SELECT' ('DISTINCT')? selectExpressions+=SelectExpression (',' selectExpressions+=SelectExpression)*
	//;
	public SelectClauseElements getSelectClauseAccess() {
		return pSelectClause;
	}
	
	public ParserRule getSelectClauseRule() {
		return getSelectClauseAccess().getRule();
	}
	
	//SelectExpression:
	//    jpaPathExpression=JPAPathExpression | aggregateExpression=AggregateExpression | constructorExpression=ConstructorExpression
	//;
	public SelectExpressionElements getSelectExpressionAccess() {
		return pSelectExpression;
	}
	
	public ParserRule getSelectExpressionRule() {
		return getSelectExpressionAccess().getRule();
	}
	
	//ConstructorExpression:
	//    'NEW' constructorName=ConstructorName '(' constructorItems+=ConstructorItem (',' constructorItems+=ConstructorItem)* ')'
	//;
	public ConstructorExpressionElements getConstructorExpressionAccess() {
		return pConstructorExpression;
	}
	
	public ParserRule getConstructorExpressionRule() {
		return getConstructorExpressionAccess().getRule();
	}
	
	//ConstructorItem:
	//    JPAPathExpression | AggregateExpression
	//;
	public ConstructorItemElements getConstructorItemAccess() {
		return pConstructorItem;
	}
	
	public ParserRule getConstructorItemRule() {
		return getConstructorItemAccess().getRule();
	}
	
	//AggregateExpression:
	//    ( 'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT' ) ('DISTINCT')? stateFieldPathExpression=JPAPathExpression
	//;
	public AggregateExpressionElements getAggregateExpressionAccess() {
		return pAggregateExpression;
	}
	
	public ParserRule getAggregateExpressionRule() {
		return getAggregateExpressionAccess().getRule();
	}
	
	//IdentificationVariable: name=ID;
	public IdentificationVariableElements getIdentificationVariableAccess() {
		return pIdentificationVariable;
	}
	
	public ParserRule getIdentificationVariableRule() {
		return getIdentificationVariableAccess().getRule();
	}
	
	//ConstructorName:
	//    name=ID
	//;
	public ConstructorNameElements getConstructorNameAccess() {
		return pConstructorName;
	}
	
	public ParserRule getConstructorNameRule() {
		return getConstructorNameAccess().getRule();
	}
	
	////Where
	//WhereClause:
	//    'WHERE' conditionalExpression=ConditionalExpression
	//;
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//ConditionalExpression returns Expression:
	//    ConditionalTerm ({ConditionalExpression.left=current} 'AND' right=ConditionalTerm)*
	//;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalTerm returns Expression:
	//    ConditionalFactor ({ConditionalTerm.left=current} 'OR' right=ConditionalFactor)*
	//;
	public ConditionalTermElements getConditionalTermAccess() {
		return pConditionalTerm;
	}
	
	public ParserRule getConditionalTermRule() {
		return getConditionalTermAccess().getRule();
	}
	
	//ConditionalFactor returns Expression:
	//     ('NOT')? conditionalPrimary=SimpleConditionalExpression | '(' conditionalExpression=ConditionalExpression ')'
	//;
	public ConditionalFactorElements getConditionalFactorAccess() {
		return pConditionalFactor;
	}
	
	public ParserRule getConditionalFactorRule() {
		return getConditionalFactorAccess().getRule();
	}
	
	//SimpleConditionalExpression :
	//    comparisionExpression=ComparisonExpression | betweenExpression=BetweenExpression | likeExpression=LikeExpression | inExpression=InExpression | nullComparisionExpression=NullComparisonExpression | emptyCollectionComparisonExpression=EmptyCollectionComparisonExpression | collectionMemberExpression=CollectionMemberExpression | existsExpression=ExistsExpression
	//;
	public SimpleConditionalExpressionElements getSimpleConditionalExpressionAccess() {
		return pSimpleConditionalExpression;
	}
	
	public ParserRule getSimpleConditionalExpressionRule() {
		return getSimpleConditionalExpressionAccess().getRule();
	}
	
	//BetweenExpression:
	//    primaryArithmeticExpression=ArithmeticExpression ('NOT')? 'BETWEEN' lowerArithmeticExpression=ArithmeticExpression 'AND' upperArithmeticExpression=ArithmeticExpression |
	//    primaryStringExpression=StringExpression ('NOT')? 'BETWEEN' lowerStringExpression=StringExpression 'AND' upperStringExpression=StringExpression |
	//    primaryDateTimeExpression=DateTimeExpression ('NOT')? 'BETWEEN' lowerDateTimeExpression=DateTimeExpression 'AND' upperDateTimeExpression=DateTimeExpression
	//;
	public BetweenExpressionElements getBetweenExpressionAccess() {
		return pBetweenExpression;
	}
	
	public ParserRule getBetweenExpressionRule() {
		return getBetweenExpressionAccess().getRule();
	}
	
	//InExpression:
	//    pathExpression=JPAPathExpression ('NOT')? 'IN' '(' inItems+=InItem (',' inItems+=InItem)*  | subQuery=SubQuery ')'
	//;
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}
	
	//InItem:
	//    literal=Literal | inputParameter=InputParameter
	//;
	public InItemElements getInItemAccess() {
		return pInItem;
	}
	
	public ParserRule getInItemRule() {
		return getInItemAccess().getRule();
	}
	
	//LikeExpression:
	//     stringExpression=StringExpression ('NOT')? 'LIKE' patternValue=PatternValue ('ESCAPE' escapeCharacter=EscapeCharacter)?
	//;
	public LikeExpressionElements getLikeExpressionAccess() {
		return pLikeExpression;
	}
	
	public ParserRule getLikeExpressionRule() {
		return getLikeExpressionAccess().getRule();
	}
	
	//NullComparisonExpression:
	//    pathExpression=JPAPathExpression | inputParameter=InputParameter 'IS' ('NOT')? 'NULL'
	//;
	public NullComparisonExpressionElements getNullComparisonExpressionAccess() {
		return pNullComparisonExpression;
	}
	
	public ParserRule getNullComparisonExpressionRule() {
		return getNullComparisonExpressionAccess().getRule();
	}
	
	//EmptyCollectionComparisonExpression:
	//    pathExpression=JPAPathExpression 'IS' ('NOT')? 'EMPTY'
	//;
	public EmptyCollectionComparisonExpressionElements getEmptyCollectionComparisonExpressionAccess() {
		return pEmptyCollectionComparisonExpression;
	}
	
	public ParserRule getEmptyCollectionComparisonExpressionRule() {
		return getEmptyCollectionComparisonExpressionAccess().getRule();
	}
	
	//CollectionMemberExpression:
	//    entityExpression=EntityExpression ('NOT')? 'MEMBER' ('OF')? pathExpression=JPAPathExpression
	//;
	public CollectionMemberExpressionElements getCollectionMemberExpressionAccess() {
		return pCollectionMemberExpression;
	}
	
	public ParserRule getCollectionMemberExpressionRule() {
		return getCollectionMemberExpressionAccess().getRule();
	}
	
	//ExistsExpression:
	//    ('NOT')? 'EXISTS' '(' subQuery=SubQuery ')'
	//;
	public ExistsExpressionElements getExistsExpressionAccess() {
		return pExistsExpression;
	}
	
	public ParserRule getExistsExpressionRule() {
		return getExistsExpressionAccess().getRule();
	}
	
	//AllOrAnyExpression:
	//    ('ALL' | 'ANY' | 'SOME') '(' subQuery=SubQuery ')'
	//;
	public AllOrAnyExpressionElements getAllOrAnyExpressionAccess() {
		return pAllOrAnyExpression;
	}
	
	public ParserRule getAllOrAnyExpressionRule() {
		return getAllOrAnyExpressionAccess().getRule();
	}
	
	//ComparisonExpression:
	//    primaryStringExpression=StringExpression comparisonOperator=ComparisonOperator (secondaryStringExpression=StringExpression | allOrAnyExpression=AllOrAnyExpression) | primaryBooleanExpression=BooleanExpression ('='|'<>') (secondaryBooleanExpression=BooleanExpression | allOrAnyExpression=AllOrAnyExpression) | primaryEnumExpression=EnumExpression ('='|'<>') (secondaryEnumExpression=EnumExpression | allOrAnyExpression=AllOrAnyExpression) | primaryDatetimeExpression=DateTimeExpression comparisonOperator=ComparisonOperator (secondaryDatetimeExpression=DateTimeExpression | allOrAnyExpression=AllOrAnyExpression) | primaryEntityExpression=EntityExpression ('='|'<>') (secondaryEntityExpression=EntityExpression | allOrAnyExpression=AllOrAnyExpression) | primaryArithmeticExpression=ArithmeticExpression comparisonOperator=ComparisonOperator (secondaryArithmeticExpression=ArithmeticExpression | allOrAnyExpression=AllOrAnyExpression)
	//;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//ComparisonOperator:
	//     '=' | '>' | '>=' | '<' | '<=' | '<>'
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//ArithmeticExpression:
	//    simpleArithmeticExpression=SimpleArithmeticExpression | '('subQuery=SubQuery')'
	//;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//SimpleArithmeticExpression returns Expression:
	//    arithmeticTerm=ArithmeticTerm | ArithmeticTerm ({SimpleArithmeticExpression.left=current} ('+'|'-') right=ArithmeticTerm)*
	//;
	public SimpleArithmeticExpressionElements getSimpleArithmeticExpressionAccess() {
		return pSimpleArithmeticExpression;
	}
	
	public ParserRule getSimpleArithmeticExpressionRule() {
		return getSimpleArithmeticExpressionAccess().getRule();
	}
	
	//ArithmeticTerm returns Expression:
	//    arithmeticFactor=ArithmeticFactor | ArithmeticFactor ({ArithmeticTerm.left=current} ('*'|'/') right=ArithmeticFactor)*
	//;
	public ArithmeticTermElements getArithmeticTermAccess() {
		return pArithmeticTerm;
	}
	
	public ParserRule getArithmeticTermRule() {
		return getArithmeticTermAccess().getRule();
	}
	
	//ArithmeticFactor returns Expression:
	//    ('+'|'-')? arithmeticPrimary=ArithmeticPrimary
	//;
	public ArithmeticFactorElements getArithmeticFactorAccess() {
		return pArithmeticFactor;
	}
	
	public ParserRule getArithmeticFactorRule() {
		return getArithmeticFactorAccess().getRule();
	}
	
	//ArithmeticPrimary :
	//    pathExpression=JPAPathExpression | numericLiteral=NumericLiteral | '('simpleArithmeticExpression=SimpleArithmeticExpression')' | inputParameter=InputParameter | functionsReturningNumerics=FunctionsReturningNumerics | aggregateExpression=AggregateExpression
	//;
	public ArithmeticPrimaryElements getArithmeticPrimaryAccess() {
		return pArithmeticPrimary;
	}
	
	public ParserRule getArithmeticPrimaryRule() {
		return getArithmeticPrimaryAccess().getRule();
	}
	
	//StringExpression:
	//    stringPrimary=StringPrimary | '(' subQuery=SubQuery ')'
	//;
	public StringExpressionElements getStringExpressionAccess() {
		return pStringExpression;
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}
	
	//StringPrimary:
	//    pathExpression=JPAPathExpression | stringLiteral=StringLiteral | inputParamater=InputParameter | functionsReturningStrings=FunctionsReturningStrings | aggregateExpression=AggregateExpression
	//;
	public StringPrimaryElements getStringPrimaryAccess() {
		return pStringPrimary;
	}
	
	public ParserRule getStringPrimaryRule() {
		return getStringPrimaryAccess().getRule();
	}
	
	//DateTimeExpression:
	//     dateTimePrimary=DateTimePrimary | '(' subQuery=SubQuery ')'
	//;
	public DateTimeExpressionElements getDateTimeExpressionAccess() {
		return pDateTimeExpression;
	}
	
	public ParserRule getDateTimeExpressionRule() {
		return getDateTimeExpressionAccess().getRule();
	}
	
	//DateTimePrimary:
	//    pathExpression=JPAPathExpression | inputParameter=InputParameter | functionsReturningDateTime=FunctionsReturningDateTime | aggregateExpression=AggregateExpression
	//;
	public DateTimePrimaryElements getDateTimePrimaryAccess() {
		return pDateTimePrimary;
	}
	
	public ParserRule getDateTimePrimaryRule() {
		return getDateTimePrimaryAccess().getRule();
	}
	
	//BooleanExpression:
	//    booleanPrimary=BooleanPrimary | '(' subQuery=SubQuery ')'
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//BooleanPrimary:
	//    pathExpression=JPAPathExpression | booleanLiteral=BooleanLiteral | inputParameter=InputParameter
	//;
	public BooleanPrimaryElements getBooleanPrimaryAccess() {
		return pBooleanPrimary;
	}
	
	public ParserRule getBooleanPrimaryRule() {
		return getBooleanPrimaryAccess().getRule();
	}
	
	//EnumExpression:
	//    enumPrimary=EnumPrimary | '(' subQuery=SubQuery ')'
	//;
	public EnumExpressionElements getEnumExpressionAccess() {
		return pEnumExpression;
	}
	
	public ParserRule getEnumExpressionRule() {
		return getEnumExpressionAccess().getRule();
	}
	
	//EnumPrimary:
	//    pathExpression=JPAPathExpression | enumLiteral=EnumLiteral | inputParameter=InputParameter
	//;
	public EnumPrimaryElements getEnumPrimaryAccess() {
		return pEnumPrimary;
	}
	
	public ParserRule getEnumPrimaryRule() {
		return getEnumPrimaryAccess().getRule();
	}
	
	//EntityExpression:
	//    pathExpression=JPAPathExpression | simpleEntityExpression=SimpleEntityExpression
	//;
	public EntityExpressionElements getEntityExpressionAccess() {
		return pEntityExpression;
	}
	
	public ParserRule getEntityExpressionRule() {
		return getEntityExpressionAccess().getRule();
	}
	
	//SimpleEntityExpression:
	//    identificationVariable=IdentificationVariable | inputParameter=InputParameter
	//;
	public SimpleEntityExpressionElements getSimpleEntityExpressionAccess() {
		return pSimpleEntityExpression;
	}
	
	public ParserRule getSimpleEntityExpressionRule() {
		return getSimpleEntityExpressionAccess().getRule();
	}
	
	//FunctionsReturningNumerics:
	//    'LENGTH'(stringPrimary=StringPrimary) | 'LOCATE'(stringPrimary=StringPrimary',' stringSecondary=StringPrimary(',' simpleArithmeticExpression=SimpleArithmeticExpression)?) | 'ABS'(simpleArithmeticExpression=SimpleArithmeticExpression) | 'SQRT'(simpleArithmeticExpression=SimpleArithmeticExpression) | 'MOD'(primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression) | 'SIZE'(pathExpression=JPAPathExpression)
	//;
	public FunctionsReturningNumericsElements getFunctionsReturningNumericsAccess() {
		return pFunctionsReturningNumerics;
	}
	
	public ParserRule getFunctionsReturningNumericsRule() {
		return getFunctionsReturningNumericsAccess().getRule();
	}
	
	//FunctionsReturningDateTime:
	//    'CURRENT_DATE'| 'CURRENT_TIME' | 'CURRENT_TIMESTAMP'
	//;
	public FunctionsReturningDateTimeElements getFunctionsReturningDateTimeAccess() {
		return pFunctionsReturningDateTime;
	}
	
	public ParserRule getFunctionsReturningDateTimeRule() {
		return getFunctionsReturningDateTimeAccess().getRule();
	}
	
	//FunctionsReturningStrings:
	//    'CONCAT'(primaryStringPrimary=StringPrimary',' secondaryStringPrimary=StringPrimary) | 'SUBSTRING'(stringPrimary=StringPrimary',' primarySimpleArithmeticExpression=SimpleArithmeticExpression',' secondarySimpleArithmeticExpression=SimpleArithmeticExpression)| 'TRIM'(((trimSpecification=TrimSpecification)? (trimCharacter=TrimCharacter)? 'FROM')? stringPrimary=StringPrimary) | 'LOWER'(stringPrimary=StringPrimary) | 'UPPER'(stringPrimary=StringPrimary)
	//;
	public FunctionsReturningStringsElements getFunctionsReturningStringsAccess() {
		return pFunctionsReturningStrings;
	}
	
	public ParserRule getFunctionsReturningStringsRule() {
		return getFunctionsReturningStringsAccess().getRule();
	}
	
	//TrimSpecification:
	//    'LEADING' | 'TRAILING' | 'BOTH'
	//;
	public TrimSpecificationElements getTrimSpecificationAccess() {
		return pTrimSpecification;
	}
	
	public ParserRule getTrimSpecificationRule() {
		return getTrimSpecificationAccess().getRule();
	}
	
	//SubQuery:
	//    simpleSelectClause=SimpleSelectClause subqueryFromClause=SubqueryFromClause (whereClause=WhereClause)? //(groupByClause=GroupByClause)? (havingClause=HavingClause)?
	//;
	public SubQueryElements getSubQueryAccess() {
		return pSubQuery;
	}
	
	public ParserRule getSubQueryRule() {
		return getSubQueryAccess().getRule();
	}
	
	//SubqueryFromClause:
	//    'FROM' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration (',' subselectIdentificationVariableDeclaration+=SubselectIdentificationVariableDeclaration)*
	//;
	public SubqueryFromClauseElements getSubqueryFromClauseAccess() {
		return pSubqueryFromClause;
	}
	
	public ParserRule getSubqueryFromClauseRule() {
		return getSubqueryFromClauseAccess().getRule();
	}
	
	//SubselectIdentificationVariableDeclaration:
	//    identificationVariableDecalaration=IdentificationVariableDeclaration | associationPathExpression=JPAPathExpression ('AS')? identificationVariable=IdentificationVariable | collectionMemberDeclaration=CollectionMemberDeclaration
	//;
	public SubselectIdentificationVariableDeclarationElements getSubselectIdentificationVariableDeclarationAccess() {
		return pSubselectIdentificationVariableDeclaration;
	}
	
	public ParserRule getSubselectIdentificationVariableDeclarationRule() {
		return getSubselectIdentificationVariableDeclarationAccess().getRule();
	}
	
	//SimpleSelectClause:
	//    'SELECT' ('DISTINCT')? simpleSelectExpression=SimpleSelectExpression
	//;
	public SimpleSelectClauseElements getSimpleSelectClauseAccess() {
		return pSimpleSelectClause;
	}
	
	public ParserRule getSimpleSelectClauseRule() {
		return getSimpleSelectClauseAccess().getRule();
	}
	
	//SimpleSelectExpression:
	//    pathExpression=JPAPathExpression | aggregateExpression=AggregateExpression | identificationVariable=IdentificationVariable
	//;
	public SimpleSelectExpressionElements getSimpleSelectExpressionAccess() {
		return pSimpleSelectExpression;
	}
	
	public ParserRule getSimpleSelectExpressionRule() {
		return getSimpleSelectExpressionAccess().getRule();
	}
	
	//InputParameter:
	//    ':'name=ID
	//;
	public InputParameterElements getInputParameterAccess() {
		return pInputParameter;
	}
	
	public ParserRule getInputParameterRule() {
		return getInputParameterAccess().getRule();
	}
	
	//EscapeCharacter:
	//    name=ID
	//;
	public EscapeCharacterElements getEscapeCharacterAccess() {
		return pEscapeCharacter;
	}
	
	public ParserRule getEscapeCharacterRule() {
		return getEscapeCharacterAccess().getRule();
	}
	
	//Literal:
	//    name=ID
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//PatternValue:
	//    name=ID
	//;
	public PatternValueElements getPatternValueAccess() {
		return pPatternValue;
	}
	
	public ParserRule getPatternValueRule() {
		return getPatternValueAccess().getRule();
	}
	
	//terminal STRING:
	//            '`?' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '`?'
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//StringLiteral:
	//    '\''literal=ID'\''
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//NumericLiteral:
	//    literal=INT
	//;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    'true' | 'false'
	//;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//EnumLiteral:
	//    name=ID
	//;
	public EnumLiteralElements getEnumLiteralAccess() {
		return pEnumLiteral;
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}
	
	//TrimCharacter:
	//    name=ID
	//;
	public TrimCharacterElements getTrimCharacterAccess() {
		return pTrimCharacter;
	}
	
	public ParserRule getTrimCharacterRule() {
		return getTrimCharacterAccess().getRule();
	}
	
	//Import:
	//    'import' importedNamespace=ImportNameSpace
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportNameSpace :
	//    QualifiedName  ('.' '*')?
	//;
	public ImportNameSpaceElements getImportNameSpaceAccess() {
		return pImportNameSpace;
	}
	
	public ParserRule getImportNameSpaceRule() {
		return getImportNameSpaceAccess().getRule();
	}
	
	//terminal ORM_UNMANAGED_CONTENT: '<!-- ORM-UNMANAGED-CONTENT -->' -> '<!-- /ORM-UNMANAGED-CONTENT -->';
	public TerminalRule getORM_UNMANAGED_CONTENTRule() {
		return tORM_UNMANAGED_CONTENT;
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
