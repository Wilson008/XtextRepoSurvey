/*
 * generated by Xtext 2.35.0
 */
package jpaqldsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import jpaqldsl.services.JPAQLDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class JPAQLDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected JPAQLDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AggregateExpression_AVGKeyword_0_0_or_COUNTKeyword_0_4_or_MAXKeyword_0_1_or_MINKeyword_0_2_or_SUMKeyword_0_3;
	protected AbstractElementAlias match_AggregateExpression_DISTINCTKeyword_1_q;
	protected AbstractElementAlias match_AllOrAnyExpression_ALLKeyword_0_0_or_ANYKeyword_0_1_or_SOMEKeyword_0_2;
	protected AbstractElementAlias match_ArithmeticFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q;
	protected AbstractElementAlias match_ArithmeticTerm_AsteriskKeyword_1_1_1_0_or_SolidusKeyword_1_1_1_1;
	protected AbstractElementAlias match_BetweenExpression_NOTKeyword_0_1_q;
	protected AbstractElementAlias match_BetweenExpression_NOTKeyword_1_1_q;
	protected AbstractElementAlias match_BetweenExpression_NOTKeyword_2_1_q;
	protected AbstractElementAlias match_CollectionMemberDeclaration_ASKeyword_2_q;
	protected AbstractElementAlias match_CollectionMemberExpression_NOTKeyword_1_q;
	protected AbstractElementAlias match_CollectionMemberExpression_OFKeyword_3_q;
	protected AbstractElementAlias match_ComparisonExpression_EqualsSignKeyword_1_1_0_or_LessThanSignGreaterThanSignKeyword_1_1_1;
	protected AbstractElementAlias match_ComparisonExpression_EqualsSignKeyword_2_1_0_or_LessThanSignGreaterThanSignKeyword_2_1_1;
	protected AbstractElementAlias match_ComparisonExpression_EqualsSignKeyword_4_1_0_or_LessThanSignGreaterThanSignKeyword_4_1_1;
	protected AbstractElementAlias match_ConditionalFactor_NOTKeyword_0_0_q;
	protected AbstractElementAlias match_EmptyCollectionComparisonExpression_NOTKeyword_2_q;
	protected AbstractElementAlias match_ExistsExpression_NOTKeyword_0_q;
	protected AbstractElementAlias match_FetchJoin_ASKeyword_3_q;
	protected AbstractElementAlias match_FunctionsReturningStrings_FROMKeyword_2_1_0_2_q;
	protected AbstractElementAlias match_InExpression_NOTKeyword_0_1_q;
	protected AbstractElementAlias match_Join_ASKeyword_2_q;
	protected AbstractElementAlias match_LikeExpression_NOTKeyword_1_q;
	protected AbstractElementAlias match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_1_q;
	protected AbstractElementAlias match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_7_q;
	protected AbstractElementAlias match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_9_q;
	protected AbstractElementAlias match_NullComparisonExpression_NOTKeyword_1_2_q;
	protected AbstractElementAlias match_RangeVariableDeclaration_ASKeyword_1_q;
	protected AbstractElementAlias match_SelectClause_DISTINCTKeyword_1_q;
	protected AbstractElementAlias match_SimpleArithmeticExpression_HyphenMinusKeyword_1_1_1_1_or_PlusSignKeyword_1_1_1_0;
	protected AbstractElementAlias match_SimpleSelectClause_DISTINCTKeyword_1_q;
	protected AbstractElementAlias match_SubselectIdentificationVariableDeclaration_ASKeyword_1_1_q;
	protected AbstractElementAlias match_XBlockExpression_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (JPAQLDslGrammarAccess) access;
		match_AggregateExpression_AVGKeyword_0_0_or_COUNTKeyword_0_4_or_MAXKeyword_0_1_or_MINKeyword_0_2_or_SUMKeyword_0_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAggregateExpressionAccess().getAVGKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAggregateExpressionAccess().getCOUNTKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getAggregateExpressionAccess().getMAXKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getAggregateExpressionAccess().getMINKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getAggregateExpressionAccess().getSUMKeyword_0_3()));
		match_AggregateExpression_DISTINCTKeyword_1_q = new TokenAlias(false, true, grammarAccess.getAggregateExpressionAccess().getDISTINCTKeyword_1());
		match_AllOrAnyExpression_ALLKeyword_0_0_or_ANYKeyword_0_1_or_SOMEKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAllOrAnyExpressionAccess().getALLKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getAllOrAnyExpressionAccess().getANYKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getAllOrAnyExpressionAccess().getSOMEKeyword_0_2()));
		match_ArithmeticFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getArithmeticFactorAccess().getHyphenMinusKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getArithmeticFactorAccess().getPlusSignKeyword_0_0()));
		match_ArithmeticTerm_AsteriskKeyword_1_1_1_0_or_SolidusKeyword_1_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getArithmeticTermAccess().getAsteriskKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getArithmeticTermAccess().getSolidusKeyword_1_1_1_1()));
		match_BetweenExpression_NOTKeyword_0_1_q = new TokenAlias(false, true, grammarAccess.getBetweenExpressionAccess().getNOTKeyword_0_1());
		match_BetweenExpression_NOTKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getBetweenExpressionAccess().getNOTKeyword_1_1());
		match_BetweenExpression_NOTKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getBetweenExpressionAccess().getNOTKeyword_2_1());
		match_CollectionMemberDeclaration_ASKeyword_2_q = new TokenAlias(false, true, grammarAccess.getCollectionMemberDeclarationAccess().getASKeyword_2());
		match_CollectionMemberExpression_NOTKeyword_1_q = new TokenAlias(false, true, grammarAccess.getCollectionMemberExpressionAccess().getNOTKeyword_1());
		match_CollectionMemberExpression_OFKeyword_3_q = new TokenAlias(false, true, grammarAccess.getCollectionMemberExpressionAccess().getOFKeyword_3());
		match_ComparisonExpression_EqualsSignKeyword_1_1_0_or_LessThanSignGreaterThanSignKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getComparisonExpressionAccess().getEqualsSignKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getComparisonExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_1_1()));
		match_ComparisonExpression_EqualsSignKeyword_2_1_0_or_LessThanSignGreaterThanSignKeyword_2_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getComparisonExpressionAccess().getEqualsSignKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getComparisonExpressionAccess().getLessThanSignGreaterThanSignKeyword_2_1_1()));
		match_ComparisonExpression_EqualsSignKeyword_4_1_0_or_LessThanSignGreaterThanSignKeyword_4_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getComparisonExpressionAccess().getEqualsSignKeyword_4_1_0()), new TokenAlias(false, false, grammarAccess.getComparisonExpressionAccess().getLessThanSignGreaterThanSignKeyword_4_1_1()));
		match_ConditionalFactor_NOTKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getConditionalFactorAccess().getNOTKeyword_0_0());
		match_EmptyCollectionComparisonExpression_NOTKeyword_2_q = new TokenAlias(false, true, grammarAccess.getEmptyCollectionComparisonExpressionAccess().getNOTKeyword_2());
		match_ExistsExpression_NOTKeyword_0_q = new TokenAlias(false, true, grammarAccess.getExistsExpressionAccess().getNOTKeyword_0());
		match_FetchJoin_ASKeyword_3_q = new TokenAlias(false, true, grammarAccess.getFetchJoinAccess().getASKeyword_3());
		match_FunctionsReturningStrings_FROMKeyword_2_1_0_2_q = new TokenAlias(false, true, grammarAccess.getFunctionsReturningStringsAccess().getFROMKeyword_2_1_0_2());
		match_InExpression_NOTKeyword_0_1_q = new TokenAlias(false, true, grammarAccess.getInExpressionAccess().getNOTKeyword_0_1());
		match_Join_ASKeyword_2_q = new TokenAlias(false, true, grammarAccess.getJoinAccess().getASKeyword_2());
		match_LikeExpression_NOTKeyword_1_q = new TokenAlias(false, true, grammarAccess.getLikeExpressionAccess().getNOTKeyword_1());
		match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getORM_UNMANAGED_CONTENTTerminalRuleCall_1());
		match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_7_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getORM_UNMANAGED_CONTENTTerminalRuleCall_7());
		match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_9_q = new TokenAlias(false, true, grammarAccess.getModelAccess().getORM_UNMANAGED_CONTENTTerminalRuleCall_9());
		match_NullComparisonExpression_NOTKeyword_1_2_q = new TokenAlias(false, true, grammarAccess.getNullComparisonExpressionAccess().getNOTKeyword_1_2());
		match_RangeVariableDeclaration_ASKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRangeVariableDeclarationAccess().getASKeyword_1());
		match_SelectClause_DISTINCTKeyword_1_q = new TokenAlias(false, true, grammarAccess.getSelectClauseAccess().getDISTINCTKeyword_1());
		match_SimpleArithmeticExpression_HyphenMinusKeyword_1_1_1_1_or_PlusSignKeyword_1_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSimpleArithmeticExpressionAccess().getHyphenMinusKeyword_1_1_1_1()), new TokenAlias(false, false, grammarAccess.getSimpleArithmeticExpressionAccess().getPlusSignKeyword_1_1_1_0()));
		match_SimpleSelectClause_DISTINCTKeyword_1_q = new TokenAlias(false, true, grammarAccess.getSimpleSelectClauseAccess().getDISTINCTKeyword_1());
		match_SubselectIdentificationVariableDeclaration_ASKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getSubselectIdentificationVariableDeclarationAccess().getASKeyword_1_1());
		match_XBlockExpression_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArrayBracketsRule())
			return getArrayBracketsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getORM_UNMANAGED_CONTENTRule())
			return getORM_UNMANAGED_CONTENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArrayBrackets :
	 * 	'[' ']'
	 * ;
	 */
	protected String getArrayBracketsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[ ]";
	}
	
	/**
	 * terminal ORM_UNMANAGED_CONTENT: '<!-- ORM-UNMANAGED-CONTENT -->' -> '<!-- /ORM-UNMANAGED-CONTENT -->';
	 */
	protected String getORM_UNMANAGED_CONTENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<!-- ORM-UNMANAGED-CONTENT -->";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AggregateExpression_AVGKeyword_0_0_or_COUNTKeyword_0_4_or_MAXKeyword_0_1_or_MINKeyword_0_2_or_SUMKeyword_0_3.equals(syntax))
				emit_AggregateExpression_AVGKeyword_0_0_or_COUNTKeyword_0_4_or_MAXKeyword_0_1_or_MINKeyword_0_2_or_SUMKeyword_0_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AggregateExpression_DISTINCTKeyword_1_q.equals(syntax))
				emit_AggregateExpression_DISTINCTKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AllOrAnyExpression_ALLKeyword_0_0_or_ANYKeyword_0_1_or_SOMEKeyword_0_2.equals(syntax))
				emit_AllOrAnyExpression_ALLKeyword_0_0_or_ANYKeyword_0_1_or_SOMEKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q.equals(syntax))
				emit_ArithmeticFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticTerm_AsteriskKeyword_1_1_1_0_or_SolidusKeyword_1_1_1_1.equals(syntax))
				emit_ArithmeticTerm_AsteriskKeyword_1_1_1_0_or_SolidusKeyword_1_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BetweenExpression_NOTKeyword_0_1_q.equals(syntax))
				emit_BetweenExpression_NOTKeyword_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BetweenExpression_NOTKeyword_1_1_q.equals(syntax))
				emit_BetweenExpression_NOTKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BetweenExpression_NOTKeyword_2_1_q.equals(syntax))
				emit_BetweenExpression_NOTKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CollectionMemberDeclaration_ASKeyword_2_q.equals(syntax))
				emit_CollectionMemberDeclaration_ASKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CollectionMemberExpression_NOTKeyword_1_q.equals(syntax))
				emit_CollectionMemberExpression_NOTKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CollectionMemberExpression_OFKeyword_3_q.equals(syntax))
				emit_CollectionMemberExpression_OFKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ComparisonExpression_EqualsSignKeyword_1_1_0_or_LessThanSignGreaterThanSignKeyword_1_1_1.equals(syntax))
				emit_ComparisonExpression_EqualsSignKeyword_1_1_0_or_LessThanSignGreaterThanSignKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ComparisonExpression_EqualsSignKeyword_2_1_0_or_LessThanSignGreaterThanSignKeyword_2_1_1.equals(syntax))
				emit_ComparisonExpression_EqualsSignKeyword_2_1_0_or_LessThanSignGreaterThanSignKeyword_2_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ComparisonExpression_EqualsSignKeyword_4_1_0_or_LessThanSignGreaterThanSignKeyword_4_1_1.equals(syntax))
				emit_ComparisonExpression_EqualsSignKeyword_4_1_0_or_LessThanSignGreaterThanSignKeyword_4_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConditionalFactor_NOTKeyword_0_0_q.equals(syntax))
				emit_ConditionalFactor_NOTKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EmptyCollectionComparisonExpression_NOTKeyword_2_q.equals(syntax))
				emit_EmptyCollectionComparisonExpression_NOTKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ExistsExpression_NOTKeyword_0_q.equals(syntax))
				emit_ExistsExpression_NOTKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FetchJoin_ASKeyword_3_q.equals(syntax))
				emit_FetchJoin_ASKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionsReturningStrings_FROMKeyword_2_1_0_2_q.equals(syntax))
				emit_FunctionsReturningStrings_FROMKeyword_2_1_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InExpression_NOTKeyword_0_1_q.equals(syntax))
				emit_InExpression_NOTKeyword_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Join_ASKeyword_2_q.equals(syntax))
				emit_Join_ASKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LikeExpression_NOTKeyword_1_q.equals(syntax))
				emit_LikeExpression_NOTKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_1_q.equals(syntax))
				emit_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_7_q.equals(syntax))
				emit_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_9_q.equals(syntax))
				emit_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NullComparisonExpression_NOTKeyword_1_2_q.equals(syntax))
				emit_NullComparisonExpression_NOTKeyword_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RangeVariableDeclaration_ASKeyword_1_q.equals(syntax))
				emit_RangeVariableDeclaration_ASKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SelectClause_DISTINCTKeyword_1_q.equals(syntax))
				emit_SelectClause_DISTINCTKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleArithmeticExpression_HyphenMinusKeyword_1_1_1_1_or_PlusSignKeyword_1_1_1_0.equals(syntax))
				emit_SimpleArithmeticExpression_HyphenMinusKeyword_1_1_1_1_or_PlusSignKeyword_1_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleSelectClause_DISTINCTKeyword_1_q.equals(syntax))
				emit_SimpleSelectClause_DISTINCTKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SubselectIdentificationVariableDeclaration_ASKeyword_1_1_q.equals(syntax))
				emit_SubselectIdentificationVariableDeclaration_ASKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XBlockExpression_SemicolonKeyword_2_1_q.equals(syntax))
				emit_XBlockExpression_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImportDeclaration_SemicolonKeyword_2_q.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'DISTINCT'? stateFieldPathExpression=JPAPathExpression
	 
	 * </pre>
	 */
	protected void emit_AggregateExpression_AVGKeyword_0_0_or_COUNTKeyword_0_4_or_MAXKeyword_0_1_or_MINKeyword_0_2_or_SUMKeyword_0_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'DISTINCT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('AVG' | 'MAX' | 'MIN' | 'SUM' | 'COUNT') (ambiguity) stateFieldPathExpression=JPAPathExpression
	 
	 * </pre>
	 */
	protected void emit_AggregateExpression_DISTINCTKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'ALL' | 'ANY' | 'SOME'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' subQuery=SubQuery
	 
	 * </pre>
	 */
	protected void emit_AllOrAnyExpression_ALLKeyword_0_0_or_ANYKeyword_0_1_or_SOMEKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('+' | '-')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) arithmeticPrimary=ArithmeticPrimary
	 
	 * </pre>
	 */
	protected void emit_ArithmeticFactor___HyphenMinusKeyword_0_1_or_PlusSignKeyword_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '*' | '/'
	 *
	 * This ambiguous syntax occurs at:
	 *     {ArithmeticTerm.left=} (ambiguity) right=ArithmeticFactor
	 
	 * </pre>
	 */
	protected void emit_ArithmeticTerm_AsteriskKeyword_1_1_1_0_or_SolidusKeyword_1_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryArithmeticExpression=ArithmeticExpression (ambiguity) 'BETWEEN' lowerArithmeticExpression=ArithmeticExpression
	 
	 * </pre>
	 */
	protected void emit_BetweenExpression_NOTKeyword_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryStringExpression=StringExpression (ambiguity) 'BETWEEN' lowerStringExpression=StringExpression
	 
	 * </pre>
	 */
	protected void emit_BetweenExpression_NOTKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryDateTimeExpression=DateTimeExpression (ambiguity) 'BETWEEN' lowerDateTimeExpression=DateTimeExpression
	 
	 * </pre>
	 */
	protected void emit_BetweenExpression_NOTKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     collectionValuedPathExpression=JPAPathExpression (ambiguity) identificationVariable=IdentificationVariable
	 
	 * </pre>
	 */
	protected void emit_CollectionMemberDeclaration_ASKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     entityExpression=EntityExpression (ambiguity) 'MEMBER' 'OF'? pathExpression=JPAPathExpression
	 
	 * </pre>
	 */
	protected void emit_CollectionMemberExpression_NOTKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'OF'?
	 *
	 * This ambiguous syntax occurs at:
	 *     entityExpression=EntityExpression 'NOT'? 'MEMBER' (ambiguity) pathExpression=JPAPathExpression
	 
	 * </pre>
	 */
	protected void emit_CollectionMemberExpression_OFKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '=' | '&lt;&gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryBooleanExpression=BooleanExpression (ambiguity) allOrAnyExpression=AllOrAnyExpression
	 *     primaryBooleanExpression=BooleanExpression (ambiguity) secondaryBooleanExpression=BooleanExpression
	 
	 * </pre>
	 */
	protected void emit_ComparisonExpression_EqualsSignKeyword_1_1_0_or_LessThanSignGreaterThanSignKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '=' | '&lt;&gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryEnumExpression=EnumExpression (ambiguity) allOrAnyExpression=AllOrAnyExpression
	 *     primaryEnumExpression=EnumExpression (ambiguity) secondaryEnumExpression=EnumExpression
	 
	 * </pre>
	 */
	protected void emit_ComparisonExpression_EqualsSignKeyword_2_1_0_or_LessThanSignGreaterThanSignKeyword_2_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '=' | '&lt;&gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     primaryEntityExpression=EntityExpression (ambiguity) allOrAnyExpression=AllOrAnyExpression
	 *     primaryEntityExpression=EntityExpression (ambiguity) secondaryEntityExpression=EntityExpression
	 
	 * </pre>
	 */
	protected void emit_ComparisonExpression_EqualsSignKeyword_4_1_0_or_LessThanSignGreaterThanSignKeyword_4_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) conditionalPrimary=SimpleConditionalExpression
	 
	 * </pre>
	 */
	protected void emit_ConditionalFactor_NOTKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     pathExpression=JPAPathExpression 'IS' (ambiguity) 'EMPTY' (rule end)
	 
	 * </pre>
	 */
	protected void emit_EmptyCollectionComparisonExpression_NOTKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'EXISTS' '(' subQuery=SubQuery
	 
	 * </pre>
	 */
	protected void emit_ExistsExpression_NOTKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     joinAssociationPathExpression=JPAPathExpression (ambiguity) identificationVariable=IdentificationVariable
	 
	 * </pre>
	 */
	protected void emit_FetchJoin_ASKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'FROM'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'TRIM' (ambiguity) stringPrimary=StringPrimary
	 
	 * </pre>
	 */
	protected void emit_FunctionsReturningStrings_FROMKeyword_2_1_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     pathExpression=JPAPathExpression (ambiguity) 'IN' '(' inItems+=InItem
	 
	 * </pre>
	 */
	protected void emit_InExpression_NOTKeyword_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     joinAssociationPathExpression=JPAPathExpression (ambiguity) identificationVariable=IdentificationVariable
	 
	 * </pre>
	 */
	protected void emit_Join_ASKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     stringExpression=StringExpression (ambiguity) 'LIKE' patternValue=PatternValue
	 
	 * </pre>
	 */
	protected void emit_LikeExpression_NOTKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ORM_UNMANAGED_CONTENT?
	 *
	 * This ambiguous syntax occurs at:
	 *     xmlDescriptor=XMLDescriptor (ambiguity) '&lt;!-- Imports and Package Declaration Here.' 'package' name=QualifiedName
	 *     xmlDescriptor=XMLDescriptor (ambiguity) '&lt;!-- Imports and Package Declaration Here.' imports+=Import
	 
	 * </pre>
	 */
	protected void emit_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ORM_UNMANAGED_CONTENT?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=QualifiedName '--&gt;' (ambiguity) ORM_UNMANAGED_CONTENT? (rule end)
	 *     name=QualifiedName '--&gt;' (ambiguity) namedQueries+=NamedQuery
	 
	 * </pre>
	 */
	protected void emit_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ORM_UNMANAGED_CONTENT?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=QualifiedName '--&gt;' ORM_UNMANAGED_CONTENT? (ambiguity) (rule end)
	 *     namedQueries+=NamedQuery (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Model_ORM_UNMANAGED_CONTENTTerminalRuleCall_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'NOT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputParameter=InputParameter 'IS' (ambiguity) 'NULL' (rule end)
	 
	 * </pre>
	 */
	protected void emit_NullComparisonExpression_NOTKeyword_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     abstractSchemaName=[Entity|ID] (ambiguity) identificationVariable=IdentificationVariable
	 
	 * </pre>
	 */
	protected void emit_RangeVariableDeclaration_ASKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'DISTINCT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'SELECT' (ambiguity) selectExpressions+=SelectExpression
	 
	 * </pre>
	 */
	protected void emit_SelectClause_DISTINCTKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '+' | '-'
	 *
	 * This ambiguous syntax occurs at:
	 *     {SimpleArithmeticExpression.left=} (ambiguity) right=ArithmeticTerm
	 
	 * </pre>
	 */
	protected void emit_SimpleArithmeticExpression_HyphenMinusKeyword_1_1_1_1_or_PlusSignKeyword_1_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'DISTINCT'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'SELECT' (ambiguity) simpleSelectExpression=SimpleSelectExpression
	 
	 * </pre>
	 */
	protected void emit_SimpleSelectClause_DISTINCTKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'AS'?
	 *
	 * This ambiguous syntax occurs at:
	 *     associationPathExpression=JPAPathExpression (ambiguity) identificationVariable=IdentificationVariable
	 
	 * </pre>
	 */
	protected void emit_SubselectIdentificationVariableDeclaration_ASKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' ')' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 
	 * </pre>
	 */
	protected void emit_XBlockExpression_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 
	 * </pre>
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=&gt;' returnType=JvmTypeReference
	 
	 * </pre>
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '&lt;' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'return' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 
	 * </pre>
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '&lt;' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 
	 * </pre>
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
