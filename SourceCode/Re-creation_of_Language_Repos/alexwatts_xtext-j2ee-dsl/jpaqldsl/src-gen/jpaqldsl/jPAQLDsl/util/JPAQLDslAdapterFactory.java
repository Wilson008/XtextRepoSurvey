/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.util;

import jpaqldsl.jPAQLDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see jpaqldsl.jPAQLDsl.JPAQLDslPackage
 * @generated
 */
public class JPAQLDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static JPAQLDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JPAQLDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = JPAQLDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JPAQLDslSwitch<Adapter> modelSwitch =
    new JPAQLDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseNamedQuery(NamedQuery object)
      {
        return createNamedQueryAdapter();
      }
      @Override
      public Adapter caseQLStatement(QLStatement object)
      {
        return createQLStatementAdapter();
      }
      @Override
      public Adapter caseSelectStatement(SelectStatement object)
      {
        return createSelectStatementAdapter();
      }
      @Override
      public Adapter caseFromClause(FromClause object)
      {
        return createFromClauseAdapter();
      }
      @Override
      public Adapter caseIdentificationVariableDeclaration(IdentificationVariableDeclaration object)
      {
        return createIdentificationVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseRangeVariableDeclaration(RangeVariableDeclaration object)
      {
        return createRangeVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseJoin(Join object)
      {
        return createJoinAdapter();
      }
      @Override
      public Adapter caseFetchJoin(FetchJoin object)
      {
        return createFetchJoinAdapter();
      }
      @Override
      public Adapter caseJPAPathExpression(JPAPathExpression object)
      {
        return createJPAPathExpressionAdapter();
      }
      @Override
      public Adapter caseJpaAttribute(JpaAttribute object)
      {
        return createJpaAttributeAdapter();
      }
      @Override
      public Adapter caseCollectionMemberDeclaration(CollectionMemberDeclaration object)
      {
        return createCollectionMemberDeclarationAdapter();
      }
      @Override
      public Adapter caseSelectClause(SelectClause object)
      {
        return createSelectClauseAdapter();
      }
      @Override
      public Adapter caseSelectExpression(SelectExpression object)
      {
        return createSelectExpressionAdapter();
      }
      @Override
      public Adapter caseConstructorExpression(ConstructorExpression object)
      {
        return createConstructorExpressionAdapter();
      }
      @Override
      public Adapter caseConstructorItem(ConstructorItem object)
      {
        return createConstructorItemAdapter();
      }
      @Override
      public Adapter caseAggregateExpression(AggregateExpression object)
      {
        return createAggregateExpressionAdapter();
      }
      @Override
      public Adapter caseIdentificationVariable(IdentificationVariable object)
      {
        return createIdentificationVariableAdapter();
      }
      @Override
      public Adapter caseConstructorName(ConstructorName object)
      {
        return createConstructorNameAdapter();
      }
      @Override
      public Adapter caseWhereClause(WhereClause object)
      {
        return createWhereClauseAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseSimpleConditionalExpression(SimpleConditionalExpression object)
      {
        return createSimpleConditionalExpressionAdapter();
      }
      @Override
      public Adapter caseBetweenExpression(BetweenExpression object)
      {
        return createBetweenExpressionAdapter();
      }
      @Override
      public Adapter caseInExpression(InExpression object)
      {
        return createInExpressionAdapter();
      }
      @Override
      public Adapter caseInItem(InItem object)
      {
        return createInItemAdapter();
      }
      @Override
      public Adapter caseLikeExpression(LikeExpression object)
      {
        return createLikeExpressionAdapter();
      }
      @Override
      public Adapter caseNullComparisonExpression(NullComparisonExpression object)
      {
        return createNullComparisonExpressionAdapter();
      }
      @Override
      public Adapter caseEmptyCollectionComparisonExpression(EmptyCollectionComparisonExpression object)
      {
        return createEmptyCollectionComparisonExpressionAdapter();
      }
      @Override
      public Adapter caseCollectionMemberExpression(CollectionMemberExpression object)
      {
        return createCollectionMemberExpressionAdapter();
      }
      @Override
      public Adapter caseExistsExpression(ExistsExpression object)
      {
        return createExistsExpressionAdapter();
      }
      @Override
      public Adapter caseAllOrAnyExpression(AllOrAnyExpression object)
      {
        return createAllOrAnyExpressionAdapter();
      }
      @Override
      public Adapter caseComparisonExpression(ComparisonExpression object)
      {
        return createComparisonExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticExpression(ArithmeticExpression object)
      {
        return createArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticPrimary(ArithmeticPrimary object)
      {
        return createArithmeticPrimaryAdapter();
      }
      @Override
      public Adapter caseStringExpression(StringExpression object)
      {
        return createStringExpressionAdapter();
      }
      @Override
      public Adapter caseStringPrimary(StringPrimary object)
      {
        return createStringPrimaryAdapter();
      }
      @Override
      public Adapter caseDateTimeExpression(DateTimeExpression object)
      {
        return createDateTimeExpressionAdapter();
      }
      @Override
      public Adapter caseDateTimePrimary(DateTimePrimary object)
      {
        return createDateTimePrimaryAdapter();
      }
      @Override
      public Adapter caseBooleanExpression(BooleanExpression object)
      {
        return createBooleanExpressionAdapter();
      }
      @Override
      public Adapter caseBooleanPrimary(BooleanPrimary object)
      {
        return createBooleanPrimaryAdapter();
      }
      @Override
      public Adapter caseEnumExpression(EnumExpression object)
      {
        return createEnumExpressionAdapter();
      }
      @Override
      public Adapter caseEnumPrimary(EnumPrimary object)
      {
        return createEnumPrimaryAdapter();
      }
      @Override
      public Adapter caseEntityExpression(EntityExpression object)
      {
        return createEntityExpressionAdapter();
      }
      @Override
      public Adapter caseSimpleEntityExpression(SimpleEntityExpression object)
      {
        return createSimpleEntityExpressionAdapter();
      }
      @Override
      public Adapter caseFunctionsReturningNumerics(FunctionsReturningNumerics object)
      {
        return createFunctionsReturningNumericsAdapter();
      }
      @Override
      public Adapter caseFunctionsReturningStrings(FunctionsReturningStrings object)
      {
        return createFunctionsReturningStringsAdapter();
      }
      @Override
      public Adapter caseSubQuery(SubQuery object)
      {
        return createSubQueryAdapter();
      }
      @Override
      public Adapter caseSubqueryFromClause(SubqueryFromClause object)
      {
        return createSubqueryFromClauseAdapter();
      }
      @Override
      public Adapter caseSubselectIdentificationVariableDeclaration(SubselectIdentificationVariableDeclaration object)
      {
        return createSubselectIdentificationVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseSimpleSelectClause(SimpleSelectClause object)
      {
        return createSimpleSelectClauseAdapter();
      }
      @Override
      public Adapter caseSimpleSelectExpression(SimpleSelectExpression object)
      {
        return createSimpleSelectExpressionAdapter();
      }
      @Override
      public Adapter caseInputParameter(InputParameter object)
      {
        return createInputParameterAdapter();
      }
      @Override
      public Adapter caseEscapeCharacter(EscapeCharacter object)
      {
        return createEscapeCharacterAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter casePatternValue(PatternValue object)
      {
        return createPatternValueAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseNumericLiteral(NumericLiteral object)
      {
        return createNumericLiteralAdapter();
      }
      @Override
      public Adapter caseEnumLiteral(EnumLiteral object)
      {
        return createEnumLiteralAdapter();
      }
      @Override
      public Adapter caseTrimCharacter(TrimCharacter object)
      {
        return createTrimCharacterAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseConditionalExpression(ConditionalExpression object)
      {
        return createConditionalExpressionAdapter();
      }
      @Override
      public Adapter caseConditionalTerm(ConditionalTerm object)
      {
        return createConditionalTermAdapter();
      }
      @Override
      public Adapter caseSimpleArithmeticExpression(SimpleArithmeticExpression object)
      {
        return createSimpleArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticTerm(ArithmeticTerm object)
      {
        return createArithmeticTermAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.NamedQuery <em>Named Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.NamedQuery
   * @generated
   */
  public Adapter createNamedQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.QLStatement <em>QL Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.QLStatement
   * @generated
   */
  public Adapter createQLStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SelectStatement <em>Select Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SelectStatement
   * @generated
   */
  public Adapter createSelectStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.FromClause <em>From Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.FromClause
   * @generated
   */
  public Adapter createFromClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.IdentificationVariableDeclaration <em>Identification Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.IdentificationVariableDeclaration
   * @generated
   */
  public Adapter createIdentificationVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.RangeVariableDeclaration <em>Range Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.RangeVariableDeclaration
   * @generated
   */
  public Adapter createRangeVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.Join <em>Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.Join
   * @generated
   */
  public Adapter createJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.FetchJoin <em>Fetch Join</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.FetchJoin
   * @generated
   */
  public Adapter createFetchJoinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.JPAPathExpression <em>JPA Path Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.JPAPathExpression
   * @generated
   */
  public Adapter createJPAPathExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.JpaAttribute <em>Jpa Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.JpaAttribute
   * @generated
   */
  public Adapter createJpaAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.CollectionMemberDeclaration <em>Collection Member Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.CollectionMemberDeclaration
   * @generated
   */
  public Adapter createCollectionMemberDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SelectClause <em>Select Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SelectClause
   * @generated
   */
  public Adapter createSelectClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SelectExpression <em>Select Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SelectExpression
   * @generated
   */
  public Adapter createSelectExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ConstructorExpression <em>Constructor Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ConstructorExpression
   * @generated
   */
  public Adapter createConstructorExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ConstructorItem <em>Constructor Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ConstructorItem
   * @generated
   */
  public Adapter createConstructorItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.AggregateExpression <em>Aggregate Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.AggregateExpression
   * @generated
   */
  public Adapter createAggregateExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.IdentificationVariable <em>Identification Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.IdentificationVariable
   * @generated
   */
  public Adapter createIdentificationVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ConstructorName <em>Constructor Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ConstructorName
   * @generated
   */
  public Adapter createConstructorNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.WhereClause <em>Where Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.WhereClause
   * @generated
   */
  public Adapter createWhereClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SimpleConditionalExpression <em>Simple Conditional Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SimpleConditionalExpression
   * @generated
   */
  public Adapter createSimpleConditionalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.BetweenExpression <em>Between Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.BetweenExpression
   * @generated
   */
  public Adapter createBetweenExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.InExpression <em>In Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.InExpression
   * @generated
   */
  public Adapter createInExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.InItem <em>In Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.InItem
   * @generated
   */
  public Adapter createInItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.LikeExpression <em>Like Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.LikeExpression
   * @generated
   */
  public Adapter createLikeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.NullComparisonExpression <em>Null Comparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.NullComparisonExpression
   * @generated
   */
  public Adapter createNullComparisonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.EmptyCollectionComparisonExpression <em>Empty Collection Comparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.EmptyCollectionComparisonExpression
   * @generated
   */
  public Adapter createEmptyCollectionComparisonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.CollectionMemberExpression <em>Collection Member Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.CollectionMemberExpression
   * @generated
   */
  public Adapter createCollectionMemberExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ExistsExpression <em>Exists Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ExistsExpression
   * @generated
   */
  public Adapter createExistsExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.AllOrAnyExpression <em>All Or Any Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.AllOrAnyExpression
   * @generated
   */
  public Adapter createAllOrAnyExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ComparisonExpression <em>Comparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ComparisonExpression
   * @generated
   */
  public Adapter createComparisonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ArithmeticExpression <em>Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ArithmeticExpression
   * @generated
   */
  public Adapter createArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ArithmeticPrimary <em>Arithmetic Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ArithmeticPrimary
   * @generated
   */
  public Adapter createArithmeticPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.StringExpression <em>String Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.StringExpression
   * @generated
   */
  public Adapter createStringExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.StringPrimary <em>String Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.StringPrimary
   * @generated
   */
  public Adapter createStringPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.DateTimeExpression <em>Date Time Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.DateTimeExpression
   * @generated
   */
  public Adapter createDateTimeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.DateTimePrimary <em>Date Time Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.DateTimePrimary
   * @generated
   */
  public Adapter createDateTimePrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.BooleanExpression <em>Boolean Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.BooleanExpression
   * @generated
   */
  public Adapter createBooleanExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.BooleanPrimary <em>Boolean Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.BooleanPrimary
   * @generated
   */
  public Adapter createBooleanPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.EnumExpression <em>Enum Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.EnumExpression
   * @generated
   */
  public Adapter createEnumExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.EnumPrimary <em>Enum Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.EnumPrimary
   * @generated
   */
  public Adapter createEnumPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.EntityExpression <em>Entity Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.EntityExpression
   * @generated
   */
  public Adapter createEntityExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SimpleEntityExpression <em>Simple Entity Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SimpleEntityExpression
   * @generated
   */
  public Adapter createSimpleEntityExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.FunctionsReturningNumerics <em>Functions Returning Numerics</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.FunctionsReturningNumerics
   * @generated
   */
  public Adapter createFunctionsReturningNumericsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.FunctionsReturningStrings <em>Functions Returning Strings</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.FunctionsReturningStrings
   * @generated
   */
  public Adapter createFunctionsReturningStringsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SubQuery <em>Sub Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SubQuery
   * @generated
   */
  public Adapter createSubQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SubqueryFromClause <em>Subquery From Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SubqueryFromClause
   * @generated
   */
  public Adapter createSubqueryFromClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SubselectIdentificationVariableDeclaration <em>Subselect Identification Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SubselectIdentificationVariableDeclaration
   * @generated
   */
  public Adapter createSubselectIdentificationVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SimpleSelectClause <em>Simple Select Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SimpleSelectClause
   * @generated
   */
  public Adapter createSimpleSelectClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SimpleSelectExpression <em>Simple Select Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SimpleSelectExpression
   * @generated
   */
  public Adapter createSimpleSelectExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.InputParameter <em>Input Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.InputParameter
   * @generated
   */
  public Adapter createInputParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.EscapeCharacter <em>Escape Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.EscapeCharacter
   * @generated
   */
  public Adapter createEscapeCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.PatternValue <em>Pattern Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.PatternValue
   * @generated
   */
  public Adapter createPatternValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.NumericLiteral <em>Numeric Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.NumericLiteral
   * @generated
   */
  public Adapter createNumericLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.EnumLiteral <em>Enum Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.EnumLiteral
   * @generated
   */
  public Adapter createEnumLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.TrimCharacter <em>Trim Character</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.TrimCharacter
   * @generated
   */
  public Adapter createTrimCharacterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ConditionalExpression <em>Conditional Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ConditionalExpression
   * @generated
   */
  public Adapter createConditionalExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ConditionalTerm <em>Conditional Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ConditionalTerm
   * @generated
   */
  public Adapter createConditionalTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.SimpleArithmeticExpression <em>Simple Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.SimpleArithmeticExpression
   * @generated
   */
  public Adapter createSimpleArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link jpaqldsl.jPAQLDsl.ArithmeticTerm <em>Arithmetic Term</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see jpaqldsl.jPAQLDsl.ArithmeticTerm
   * @generated
   */
  public Adapter createArithmeticTermAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //JPAQLDslAdapterFactory
