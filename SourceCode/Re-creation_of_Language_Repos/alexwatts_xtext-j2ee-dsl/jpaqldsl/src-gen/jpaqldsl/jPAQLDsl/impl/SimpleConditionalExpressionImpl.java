/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import jpaqldsl.jPAQLDsl.BetweenExpression;
import jpaqldsl.jPAQLDsl.CollectionMemberExpression;
import jpaqldsl.jPAQLDsl.ComparisonExpression;
import jpaqldsl.jPAQLDsl.EmptyCollectionComparisonExpression;
import jpaqldsl.jPAQLDsl.ExistsExpression;
import jpaqldsl.jPAQLDsl.InExpression;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.LikeExpression;
import jpaqldsl.jPAQLDsl.NullComparisonExpression;
import jpaqldsl.jPAQLDsl.SimpleConditionalExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Conditional Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getComparisionExpression <em>Comparision Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getBetweenExpression <em>Between Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getLikeExpression <em>Like Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getInExpression <em>In Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getNullComparisionExpression <em>Null Comparision Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getEmptyCollectionComparisonExpression <em>Empty Collection Comparison Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getCollectionMemberExpression <em>Collection Member Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SimpleConditionalExpressionImpl#getExistsExpression <em>Exists Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleConditionalExpressionImpl extends MinimalEObjectImpl.Container implements SimpleConditionalExpression
{
  /**
   * The cached value of the '{@link #getComparisionExpression() <em>Comparision Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparisionExpression()
   * @generated
   * @ordered
   */
  protected ComparisonExpression comparisionExpression;

  /**
   * The cached value of the '{@link #getBetweenExpression() <em>Between Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetweenExpression()
   * @generated
   * @ordered
   */
  protected BetweenExpression betweenExpression;

  /**
   * The cached value of the '{@link #getLikeExpression() <em>Like Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLikeExpression()
   * @generated
   * @ordered
   */
  protected LikeExpression likeExpression;

  /**
   * The cached value of the '{@link #getInExpression() <em>In Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInExpression()
   * @generated
   * @ordered
   */
  protected InExpression inExpression;

  /**
   * The cached value of the '{@link #getNullComparisionExpression() <em>Null Comparision Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNullComparisionExpression()
   * @generated
   * @ordered
   */
  protected NullComparisonExpression nullComparisionExpression;

  /**
   * The cached value of the '{@link #getEmptyCollectionComparisonExpression() <em>Empty Collection Comparison Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmptyCollectionComparisonExpression()
   * @generated
   * @ordered
   */
  protected EmptyCollectionComparisonExpression emptyCollectionComparisonExpression;

  /**
   * The cached value of the '{@link #getCollectionMemberExpression() <em>Collection Member Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollectionMemberExpression()
   * @generated
   * @ordered
   */
  protected CollectionMemberExpression collectionMemberExpression;

  /**
   * The cached value of the '{@link #getExistsExpression() <em>Exists Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExistsExpression()
   * @generated
   * @ordered
   */
  protected ExistsExpression existsExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleConditionalExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.SIMPLE_CONDITIONAL_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonExpression getComparisionExpression()
  {
    return comparisionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetComparisionExpression(ComparisonExpression newComparisionExpression, NotificationChain msgs)
  {
    ComparisonExpression oldComparisionExpression = comparisionExpression;
    comparisionExpression = newComparisionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION, oldComparisionExpression, newComparisionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparisionExpression(ComparisonExpression newComparisionExpression)
  {
    if (newComparisionExpression != comparisionExpression)
    {
      NotificationChain msgs = null;
      if (comparisionExpression != null)
        msgs = ((InternalEObject)comparisionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION, null, msgs);
      if (newComparisionExpression != null)
        msgs = ((InternalEObject)newComparisionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION, null, msgs);
      msgs = basicSetComparisionExpression(newComparisionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION, newComparisionExpression, newComparisionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BetweenExpression getBetweenExpression()
  {
    return betweenExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBetweenExpression(BetweenExpression newBetweenExpression, NotificationChain msgs)
  {
    BetweenExpression oldBetweenExpression = betweenExpression;
    betweenExpression = newBetweenExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION, oldBetweenExpression, newBetweenExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBetweenExpression(BetweenExpression newBetweenExpression)
  {
    if (newBetweenExpression != betweenExpression)
    {
      NotificationChain msgs = null;
      if (betweenExpression != null)
        msgs = ((InternalEObject)betweenExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION, null, msgs);
      if (newBetweenExpression != null)
        msgs = ((InternalEObject)newBetweenExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION, null, msgs);
      msgs = basicSetBetweenExpression(newBetweenExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION, newBetweenExpression, newBetweenExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LikeExpression getLikeExpression()
  {
    return likeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLikeExpression(LikeExpression newLikeExpression, NotificationChain msgs)
  {
    LikeExpression oldLikeExpression = likeExpression;
    likeExpression = newLikeExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION, oldLikeExpression, newLikeExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLikeExpression(LikeExpression newLikeExpression)
  {
    if (newLikeExpression != likeExpression)
    {
      NotificationChain msgs = null;
      if (likeExpression != null)
        msgs = ((InternalEObject)likeExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION, null, msgs);
      if (newLikeExpression != null)
        msgs = ((InternalEObject)newLikeExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION, null, msgs);
      msgs = basicSetLikeExpression(newLikeExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION, newLikeExpression, newLikeExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InExpression getInExpression()
  {
    return inExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInExpression(InExpression newInExpression, NotificationChain msgs)
  {
    InExpression oldInExpression = inExpression;
    inExpression = newInExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION, oldInExpression, newInExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInExpression(InExpression newInExpression)
  {
    if (newInExpression != inExpression)
    {
      NotificationChain msgs = null;
      if (inExpression != null)
        msgs = ((InternalEObject)inExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION, null, msgs);
      if (newInExpression != null)
        msgs = ((InternalEObject)newInExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION, null, msgs);
      msgs = basicSetInExpression(newInExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION, newInExpression, newInExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullComparisonExpression getNullComparisionExpression()
  {
    return nullComparisionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNullComparisionExpression(NullComparisonExpression newNullComparisionExpression, NotificationChain msgs)
  {
    NullComparisonExpression oldNullComparisionExpression = nullComparisionExpression;
    nullComparisionExpression = newNullComparisionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION, oldNullComparisionExpression, newNullComparisionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNullComparisionExpression(NullComparisonExpression newNullComparisionExpression)
  {
    if (newNullComparisionExpression != nullComparisionExpression)
    {
      NotificationChain msgs = null;
      if (nullComparisionExpression != null)
        msgs = ((InternalEObject)nullComparisionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION, null, msgs);
      if (newNullComparisionExpression != null)
        msgs = ((InternalEObject)newNullComparisionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION, null, msgs);
      msgs = basicSetNullComparisionExpression(newNullComparisionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION, newNullComparisionExpression, newNullComparisionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmptyCollectionComparisonExpression getEmptyCollectionComparisonExpression()
  {
    return emptyCollectionComparisonExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEmptyCollectionComparisonExpression(EmptyCollectionComparisonExpression newEmptyCollectionComparisonExpression, NotificationChain msgs)
  {
    EmptyCollectionComparisonExpression oldEmptyCollectionComparisonExpression = emptyCollectionComparisonExpression;
    emptyCollectionComparisonExpression = newEmptyCollectionComparisonExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION, oldEmptyCollectionComparisonExpression, newEmptyCollectionComparisonExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmptyCollectionComparisonExpression(EmptyCollectionComparisonExpression newEmptyCollectionComparisonExpression)
  {
    if (newEmptyCollectionComparisonExpression != emptyCollectionComparisonExpression)
    {
      NotificationChain msgs = null;
      if (emptyCollectionComparisonExpression != null)
        msgs = ((InternalEObject)emptyCollectionComparisonExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION, null, msgs);
      if (newEmptyCollectionComparisonExpression != null)
        msgs = ((InternalEObject)newEmptyCollectionComparisonExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION, null, msgs);
      msgs = basicSetEmptyCollectionComparisonExpression(newEmptyCollectionComparisonExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION, newEmptyCollectionComparisonExpression, newEmptyCollectionComparisonExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionMemberExpression getCollectionMemberExpression()
  {
    return collectionMemberExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCollectionMemberExpression(CollectionMemberExpression newCollectionMemberExpression, NotificationChain msgs)
  {
    CollectionMemberExpression oldCollectionMemberExpression = collectionMemberExpression;
    collectionMemberExpression = newCollectionMemberExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION, oldCollectionMemberExpression, newCollectionMemberExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCollectionMemberExpression(CollectionMemberExpression newCollectionMemberExpression)
  {
    if (newCollectionMemberExpression != collectionMemberExpression)
    {
      NotificationChain msgs = null;
      if (collectionMemberExpression != null)
        msgs = ((InternalEObject)collectionMemberExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION, null, msgs);
      if (newCollectionMemberExpression != null)
        msgs = ((InternalEObject)newCollectionMemberExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION, null, msgs);
      msgs = basicSetCollectionMemberExpression(newCollectionMemberExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION, newCollectionMemberExpression, newCollectionMemberExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistsExpression getExistsExpression()
  {
    return existsExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExistsExpression(ExistsExpression newExistsExpression, NotificationChain msgs)
  {
    ExistsExpression oldExistsExpression = existsExpression;
    existsExpression = newExistsExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION, oldExistsExpression, newExistsExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExistsExpression(ExistsExpression newExistsExpression)
  {
    if (newExistsExpression != existsExpression)
    {
      NotificationChain msgs = null;
      if (existsExpression != null)
        msgs = ((InternalEObject)existsExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION, null, msgs);
      if (newExistsExpression != null)
        msgs = ((InternalEObject)newExistsExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION, null, msgs);
      msgs = basicSetExistsExpression(newExistsExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION, newExistsExpression, newExistsExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION:
        return basicSetComparisionExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION:
        return basicSetBetweenExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION:
        return basicSetLikeExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION:
        return basicSetInExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION:
        return basicSetNullComparisionExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION:
        return basicSetEmptyCollectionComparisonExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION:
        return basicSetCollectionMemberExpression(null, msgs);
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION:
        return basicSetExistsExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION:
        return getComparisionExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION:
        return getBetweenExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION:
        return getLikeExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION:
        return getInExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION:
        return getNullComparisionExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION:
        return getEmptyCollectionComparisonExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION:
        return getCollectionMemberExpression();
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION:
        return getExistsExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION:
        setComparisionExpression((ComparisonExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION:
        setBetweenExpression((BetweenExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION:
        setLikeExpression((LikeExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION:
        setInExpression((InExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION:
        setNullComparisionExpression((NullComparisonExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION:
        setEmptyCollectionComparisonExpression((EmptyCollectionComparisonExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION:
        setCollectionMemberExpression((CollectionMemberExpression)newValue);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION:
        setExistsExpression((ExistsExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION:
        setComparisionExpression((ComparisonExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION:
        setBetweenExpression((BetweenExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION:
        setLikeExpression((LikeExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION:
        setInExpression((InExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION:
        setNullComparisionExpression((NullComparisonExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION:
        setEmptyCollectionComparisonExpression((EmptyCollectionComparisonExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION:
        setCollectionMemberExpression((CollectionMemberExpression)null);
        return;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION:
        setExistsExpression((ExistsExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COMPARISION_EXPRESSION:
        return comparisionExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__BETWEEN_EXPRESSION:
        return betweenExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__LIKE_EXPRESSION:
        return likeExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__IN_EXPRESSION:
        return inExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__NULL_COMPARISION_EXPRESSION:
        return nullComparisionExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EMPTY_COLLECTION_COMPARISON_EXPRESSION:
        return emptyCollectionComparisonExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__COLLECTION_MEMBER_EXPRESSION:
        return collectionMemberExpression != null;
      case JPAQLDslPackage.SIMPLE_CONDITIONAL_EXPRESSION__EXISTS_EXPRESSION:
        return existsExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //SimpleConditionalExpressionImpl
