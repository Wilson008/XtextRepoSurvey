/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import jpaqldsl.jPAQLDsl.ArithmeticExpression;
import jpaqldsl.jPAQLDsl.BetweenExpression;
import jpaqldsl.jPAQLDsl.DateTimeExpression;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.StringExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Between Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getPrimaryArithmeticExpression <em>Primary Arithmetic Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getLowerArithmeticExpression <em>Lower Arithmetic Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getUpperArithmeticExpression <em>Upper Arithmetic Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getPrimaryStringExpression <em>Primary String Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getLowerStringExpression <em>Lower String Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getUpperStringExpression <em>Upper String Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getPrimaryDateTimeExpression <em>Primary Date Time Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getLowerDateTimeExpression <em>Lower Date Time Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.BetweenExpressionImpl#getUpperDateTimeExpression <em>Upper Date Time Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BetweenExpressionImpl extends MinimalEObjectImpl.Container implements BetweenExpression
{
  /**
   * The cached value of the '{@link #getPrimaryArithmeticExpression() <em>Primary Arithmetic Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryArithmeticExpression()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression primaryArithmeticExpression;

  /**
   * The cached value of the '{@link #getLowerArithmeticExpression() <em>Lower Arithmetic Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerArithmeticExpression()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression lowerArithmeticExpression;

  /**
   * The cached value of the '{@link #getUpperArithmeticExpression() <em>Upper Arithmetic Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperArithmeticExpression()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression upperArithmeticExpression;

  /**
   * The cached value of the '{@link #getPrimaryStringExpression() <em>Primary String Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryStringExpression()
   * @generated
   * @ordered
   */
  protected StringExpression primaryStringExpression;

  /**
   * The cached value of the '{@link #getLowerStringExpression() <em>Lower String Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerStringExpression()
   * @generated
   * @ordered
   */
  protected StringExpression lowerStringExpression;

  /**
   * The cached value of the '{@link #getUpperStringExpression() <em>Upper String Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperStringExpression()
   * @generated
   * @ordered
   */
  protected StringExpression upperStringExpression;

  /**
   * The cached value of the '{@link #getPrimaryDateTimeExpression() <em>Primary Date Time Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimaryDateTimeExpression()
   * @generated
   * @ordered
   */
  protected DateTimeExpression primaryDateTimeExpression;

  /**
   * The cached value of the '{@link #getLowerDateTimeExpression() <em>Lower Date Time Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLowerDateTimeExpression()
   * @generated
   * @ordered
   */
  protected DateTimeExpression lowerDateTimeExpression;

  /**
   * The cached value of the '{@link #getUpperDateTimeExpression() <em>Upper Date Time Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUpperDateTimeExpression()
   * @generated
   * @ordered
   */
  protected DateTimeExpression upperDateTimeExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BetweenExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.BETWEEN_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getPrimaryArithmeticExpression()
  {
    return primaryArithmeticExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrimaryArithmeticExpression(ArithmeticExpression newPrimaryArithmeticExpression, NotificationChain msgs)
  {
    ArithmeticExpression oldPrimaryArithmeticExpression = primaryArithmeticExpression;
    primaryArithmeticExpression = newPrimaryArithmeticExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION, oldPrimaryArithmeticExpression, newPrimaryArithmeticExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrimaryArithmeticExpression(ArithmeticExpression newPrimaryArithmeticExpression)
  {
    if (newPrimaryArithmeticExpression != primaryArithmeticExpression)
    {
      NotificationChain msgs = null;
      if (primaryArithmeticExpression != null)
        msgs = ((InternalEObject)primaryArithmeticExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION, null, msgs);
      if (newPrimaryArithmeticExpression != null)
        msgs = ((InternalEObject)newPrimaryArithmeticExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION, null, msgs);
      msgs = basicSetPrimaryArithmeticExpression(newPrimaryArithmeticExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION, newPrimaryArithmeticExpression, newPrimaryArithmeticExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getLowerArithmeticExpression()
  {
    return lowerArithmeticExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLowerArithmeticExpression(ArithmeticExpression newLowerArithmeticExpression, NotificationChain msgs)
  {
    ArithmeticExpression oldLowerArithmeticExpression = lowerArithmeticExpression;
    lowerArithmeticExpression = newLowerArithmeticExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION, oldLowerArithmeticExpression, newLowerArithmeticExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLowerArithmeticExpression(ArithmeticExpression newLowerArithmeticExpression)
  {
    if (newLowerArithmeticExpression != lowerArithmeticExpression)
    {
      NotificationChain msgs = null;
      if (lowerArithmeticExpression != null)
        msgs = ((InternalEObject)lowerArithmeticExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION, null, msgs);
      if (newLowerArithmeticExpression != null)
        msgs = ((InternalEObject)newLowerArithmeticExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION, null, msgs);
      msgs = basicSetLowerArithmeticExpression(newLowerArithmeticExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION, newLowerArithmeticExpression, newLowerArithmeticExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getUpperArithmeticExpression()
  {
    return upperArithmeticExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpperArithmeticExpression(ArithmeticExpression newUpperArithmeticExpression, NotificationChain msgs)
  {
    ArithmeticExpression oldUpperArithmeticExpression = upperArithmeticExpression;
    upperArithmeticExpression = newUpperArithmeticExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION, oldUpperArithmeticExpression, newUpperArithmeticExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpperArithmeticExpression(ArithmeticExpression newUpperArithmeticExpression)
  {
    if (newUpperArithmeticExpression != upperArithmeticExpression)
    {
      NotificationChain msgs = null;
      if (upperArithmeticExpression != null)
        msgs = ((InternalEObject)upperArithmeticExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION, null, msgs);
      if (newUpperArithmeticExpression != null)
        msgs = ((InternalEObject)newUpperArithmeticExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION, null, msgs);
      msgs = basicSetUpperArithmeticExpression(newUpperArithmeticExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION, newUpperArithmeticExpression, newUpperArithmeticExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression getPrimaryStringExpression()
  {
    return primaryStringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrimaryStringExpression(StringExpression newPrimaryStringExpression, NotificationChain msgs)
  {
    StringExpression oldPrimaryStringExpression = primaryStringExpression;
    primaryStringExpression = newPrimaryStringExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION, oldPrimaryStringExpression, newPrimaryStringExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrimaryStringExpression(StringExpression newPrimaryStringExpression)
  {
    if (newPrimaryStringExpression != primaryStringExpression)
    {
      NotificationChain msgs = null;
      if (primaryStringExpression != null)
        msgs = ((InternalEObject)primaryStringExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION, null, msgs);
      if (newPrimaryStringExpression != null)
        msgs = ((InternalEObject)newPrimaryStringExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION, null, msgs);
      msgs = basicSetPrimaryStringExpression(newPrimaryStringExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION, newPrimaryStringExpression, newPrimaryStringExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression getLowerStringExpression()
  {
    return lowerStringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLowerStringExpression(StringExpression newLowerStringExpression, NotificationChain msgs)
  {
    StringExpression oldLowerStringExpression = lowerStringExpression;
    lowerStringExpression = newLowerStringExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION, oldLowerStringExpression, newLowerStringExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLowerStringExpression(StringExpression newLowerStringExpression)
  {
    if (newLowerStringExpression != lowerStringExpression)
    {
      NotificationChain msgs = null;
      if (lowerStringExpression != null)
        msgs = ((InternalEObject)lowerStringExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION, null, msgs);
      if (newLowerStringExpression != null)
        msgs = ((InternalEObject)newLowerStringExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION, null, msgs);
      msgs = basicSetLowerStringExpression(newLowerStringExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION, newLowerStringExpression, newLowerStringExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression getUpperStringExpression()
  {
    return upperStringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpperStringExpression(StringExpression newUpperStringExpression, NotificationChain msgs)
  {
    StringExpression oldUpperStringExpression = upperStringExpression;
    upperStringExpression = newUpperStringExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION, oldUpperStringExpression, newUpperStringExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpperStringExpression(StringExpression newUpperStringExpression)
  {
    if (newUpperStringExpression != upperStringExpression)
    {
      NotificationChain msgs = null;
      if (upperStringExpression != null)
        msgs = ((InternalEObject)upperStringExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION, null, msgs);
      if (newUpperStringExpression != null)
        msgs = ((InternalEObject)newUpperStringExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION, null, msgs);
      msgs = basicSetUpperStringExpression(newUpperStringExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION, newUpperStringExpression, newUpperStringExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateTimeExpression getPrimaryDateTimeExpression()
  {
    return primaryDateTimeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrimaryDateTimeExpression(DateTimeExpression newPrimaryDateTimeExpression, NotificationChain msgs)
  {
    DateTimeExpression oldPrimaryDateTimeExpression = primaryDateTimeExpression;
    primaryDateTimeExpression = newPrimaryDateTimeExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION, oldPrimaryDateTimeExpression, newPrimaryDateTimeExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrimaryDateTimeExpression(DateTimeExpression newPrimaryDateTimeExpression)
  {
    if (newPrimaryDateTimeExpression != primaryDateTimeExpression)
    {
      NotificationChain msgs = null;
      if (primaryDateTimeExpression != null)
        msgs = ((InternalEObject)primaryDateTimeExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION, null, msgs);
      if (newPrimaryDateTimeExpression != null)
        msgs = ((InternalEObject)newPrimaryDateTimeExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION, null, msgs);
      msgs = basicSetPrimaryDateTimeExpression(newPrimaryDateTimeExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION, newPrimaryDateTimeExpression, newPrimaryDateTimeExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateTimeExpression getLowerDateTimeExpression()
  {
    return lowerDateTimeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLowerDateTimeExpression(DateTimeExpression newLowerDateTimeExpression, NotificationChain msgs)
  {
    DateTimeExpression oldLowerDateTimeExpression = lowerDateTimeExpression;
    lowerDateTimeExpression = newLowerDateTimeExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION, oldLowerDateTimeExpression, newLowerDateTimeExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLowerDateTimeExpression(DateTimeExpression newLowerDateTimeExpression)
  {
    if (newLowerDateTimeExpression != lowerDateTimeExpression)
    {
      NotificationChain msgs = null;
      if (lowerDateTimeExpression != null)
        msgs = ((InternalEObject)lowerDateTimeExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION, null, msgs);
      if (newLowerDateTimeExpression != null)
        msgs = ((InternalEObject)newLowerDateTimeExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION, null, msgs);
      msgs = basicSetLowerDateTimeExpression(newLowerDateTimeExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION, newLowerDateTimeExpression, newLowerDateTimeExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DateTimeExpression getUpperDateTimeExpression()
  {
    return upperDateTimeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUpperDateTimeExpression(DateTimeExpression newUpperDateTimeExpression, NotificationChain msgs)
  {
    DateTimeExpression oldUpperDateTimeExpression = upperDateTimeExpression;
    upperDateTimeExpression = newUpperDateTimeExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION, oldUpperDateTimeExpression, newUpperDateTimeExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUpperDateTimeExpression(DateTimeExpression newUpperDateTimeExpression)
  {
    if (newUpperDateTimeExpression != upperDateTimeExpression)
    {
      NotificationChain msgs = null;
      if (upperDateTimeExpression != null)
        msgs = ((InternalEObject)upperDateTimeExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION, null, msgs);
      if (newUpperDateTimeExpression != null)
        msgs = ((InternalEObject)newUpperDateTimeExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION, null, msgs);
      msgs = basicSetUpperDateTimeExpression(newUpperDateTimeExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION, newUpperDateTimeExpression, newUpperDateTimeExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION:
        return basicSetPrimaryArithmeticExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION:
        return basicSetLowerArithmeticExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION:
        return basicSetUpperArithmeticExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION:
        return basicSetPrimaryStringExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION:
        return basicSetLowerStringExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION:
        return basicSetUpperStringExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION:
        return basicSetPrimaryDateTimeExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION:
        return basicSetLowerDateTimeExpression(null, msgs);
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION:
        return basicSetUpperDateTimeExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION:
        return getPrimaryArithmeticExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION:
        return getLowerArithmeticExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION:
        return getUpperArithmeticExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION:
        return getPrimaryStringExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION:
        return getLowerStringExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION:
        return getUpperStringExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION:
        return getPrimaryDateTimeExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION:
        return getLowerDateTimeExpression();
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION:
        return getUpperDateTimeExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION:
        setPrimaryArithmeticExpression((ArithmeticExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION:
        setLowerArithmeticExpression((ArithmeticExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION:
        setUpperArithmeticExpression((ArithmeticExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION:
        setPrimaryStringExpression((StringExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION:
        setLowerStringExpression((StringExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION:
        setUpperStringExpression((StringExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION:
        setPrimaryDateTimeExpression((DateTimeExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION:
        setLowerDateTimeExpression((DateTimeExpression)newValue);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION:
        setUpperDateTimeExpression((DateTimeExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION:
        setPrimaryArithmeticExpression((ArithmeticExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION:
        setLowerArithmeticExpression((ArithmeticExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION:
        setUpperArithmeticExpression((ArithmeticExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION:
        setPrimaryStringExpression((StringExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION:
        setLowerStringExpression((StringExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION:
        setUpperStringExpression((StringExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION:
        setPrimaryDateTimeExpression((DateTimeExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION:
        setLowerDateTimeExpression((DateTimeExpression)null);
        return;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION:
        setUpperDateTimeExpression((DateTimeExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_ARITHMETIC_EXPRESSION:
        return primaryArithmeticExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_ARITHMETIC_EXPRESSION:
        return lowerArithmeticExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_ARITHMETIC_EXPRESSION:
        return upperArithmeticExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_STRING_EXPRESSION:
        return primaryStringExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_STRING_EXPRESSION:
        return lowerStringExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_STRING_EXPRESSION:
        return upperStringExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__PRIMARY_DATE_TIME_EXPRESSION:
        return primaryDateTimeExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__LOWER_DATE_TIME_EXPRESSION:
        return lowerDateTimeExpression != null;
      case JPAQLDslPackage.BETWEEN_EXPRESSION__UPPER_DATE_TIME_EXPRESSION:
        return upperDateTimeExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //BetweenExpressionImpl
