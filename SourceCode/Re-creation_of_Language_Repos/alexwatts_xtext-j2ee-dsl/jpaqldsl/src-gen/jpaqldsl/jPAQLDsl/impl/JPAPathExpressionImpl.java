/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import java.util.Collection;

import jpaqldsl.jPAQLDsl.IdentificationVariable;
import jpaqldsl.jPAQLDsl.JPAPathExpression;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.JpaAttribute;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>JPA Path Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.JPAPathExpressionImpl#getRoot <em>Root</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.JPAPathExpressionImpl#getJpaAttributes <em>Jpa Attributes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class JPAPathExpressionImpl extends ConstructorItemImpl implements JPAPathExpression
{
  /**
   * The cached value of the '{@link #getRoot() <em>Root</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoot()
   * @generated
   * @ordered
   */
  protected IdentificationVariable root;

  /**
   * The cached value of the '{@link #getJpaAttributes() <em>Jpa Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJpaAttributes()
   * @generated
   * @ordered
   */
  protected EList<JpaAttribute> jpaAttributes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JPAPathExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.JPA_PATH_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdentificationVariable getRoot()
  {
    if (root != null && root.eIsProxy())
    {
      InternalEObject oldRoot = (InternalEObject)root;
      root = (IdentificationVariable)eResolveProxy(oldRoot);
      if (root != oldRoot)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JPAQLDslPackage.JPA_PATH_EXPRESSION__ROOT, oldRoot, root));
      }
    }
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IdentificationVariable basicGetRoot()
  {
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoot(IdentificationVariable newRoot)
  {
    IdentificationVariable oldRoot = root;
    root = newRoot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.JPA_PATH_EXPRESSION__ROOT, oldRoot, root));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JpaAttribute> getJpaAttributes()
  {
    if (jpaAttributes == null)
    {
      jpaAttributes = new EObjectContainmentEList<JpaAttribute>(JpaAttribute.class, this, JPAQLDslPackage.JPA_PATH_EXPRESSION__JPA_ATTRIBUTES);
    }
    return jpaAttributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__JPA_ATTRIBUTES:
        return ((InternalEList<?>)getJpaAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__ROOT:
        if (resolve) return getRoot();
        return basicGetRoot();
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__JPA_ATTRIBUTES:
        return getJpaAttributes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__ROOT:
        setRoot((IdentificationVariable)newValue);
        return;
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__JPA_ATTRIBUTES:
        getJpaAttributes().clear();
        getJpaAttributes().addAll((Collection<? extends JpaAttribute>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__ROOT:
        setRoot((IdentificationVariable)null);
        return;
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__JPA_ATTRIBUTES:
        getJpaAttributes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__ROOT:
        return root != null;
      case JPAQLDslPackage.JPA_PATH_EXPRESSION__JPA_ATTRIBUTES:
        return jpaAttributes != null && !jpaAttributes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //JPAPathExpressionImpl
