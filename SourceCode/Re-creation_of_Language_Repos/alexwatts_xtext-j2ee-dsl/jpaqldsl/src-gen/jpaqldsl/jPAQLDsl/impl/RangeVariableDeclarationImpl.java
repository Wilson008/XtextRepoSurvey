/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import jpadsl.jPADsl.Entity;

import jpaqldsl.jPAQLDsl.IdentificationVariable;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.RangeVariableDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Range Variable Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.RangeVariableDeclarationImpl#getAbstractSchemaName <em>Abstract Schema Name</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.RangeVariableDeclarationImpl#getIdentificationVariable <em>Identification Variable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RangeVariableDeclarationImpl extends MinimalEObjectImpl.Container implements RangeVariableDeclaration
{
  /**
   * The cached value of the '{@link #getAbstractSchemaName() <em>Abstract Schema Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAbstractSchemaName()
   * @generated
   * @ordered
   */
  protected Entity abstractSchemaName;

  /**
   * The cached value of the '{@link #getIdentificationVariable() <em>Identification Variable</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentificationVariable()
   * @generated
   * @ordered
   */
  protected IdentificationVariable identificationVariable;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RangeVariableDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.RANGE_VARIABLE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getAbstractSchemaName()
  {
    if (abstractSchemaName != null && abstractSchemaName.eIsProxy())
    {
      InternalEObject oldAbstractSchemaName = (InternalEObject)abstractSchemaName;
      abstractSchemaName = (Entity)eResolveProxy(oldAbstractSchemaName);
      if (abstractSchemaName != oldAbstractSchemaName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__ABSTRACT_SCHEMA_NAME, oldAbstractSchemaName, abstractSchemaName));
      }
    }
    return abstractSchemaName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetAbstractSchemaName()
  {
    return abstractSchemaName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAbstractSchemaName(Entity newAbstractSchemaName)
  {
    Entity oldAbstractSchemaName = abstractSchemaName;
    abstractSchemaName = newAbstractSchemaName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__ABSTRACT_SCHEMA_NAME, oldAbstractSchemaName, abstractSchemaName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IdentificationVariable getIdentificationVariable()
  {
    return identificationVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdentificationVariable(IdentificationVariable newIdentificationVariable, NotificationChain msgs)
  {
    IdentificationVariable oldIdentificationVariable = identificationVariable;
    identificationVariable = newIdentificationVariable;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE, oldIdentificationVariable, newIdentificationVariable);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIdentificationVariable(IdentificationVariable newIdentificationVariable)
  {
    if (newIdentificationVariable != identificationVariable)
    {
      NotificationChain msgs = null;
      if (identificationVariable != null)
        msgs = ((InternalEObject)identificationVariable).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE, null, msgs);
      if (newIdentificationVariable != null)
        msgs = ((InternalEObject)newIdentificationVariable).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE, null, msgs);
      msgs = basicSetIdentificationVariable(newIdentificationVariable, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE, newIdentificationVariable, newIdentificationVariable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE:
        return basicSetIdentificationVariable(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__ABSTRACT_SCHEMA_NAME:
        if (resolve) return getAbstractSchemaName();
        return basicGetAbstractSchemaName();
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE:
        return getIdentificationVariable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__ABSTRACT_SCHEMA_NAME:
        setAbstractSchemaName((Entity)newValue);
        return;
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE:
        setIdentificationVariable((IdentificationVariable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__ABSTRACT_SCHEMA_NAME:
        setAbstractSchemaName((Entity)null);
        return;
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE:
        setIdentificationVariable((IdentificationVariable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__ABSTRACT_SCHEMA_NAME:
        return abstractSchemaName != null;
      case JPAQLDslPackage.RANGE_VARIABLE_DECLARATION__IDENTIFICATION_VARIABLE:
        return identificationVariable != null;
    }
    return super.eIsSet(featureID);
  }

} //RangeVariableDeclarationImpl
