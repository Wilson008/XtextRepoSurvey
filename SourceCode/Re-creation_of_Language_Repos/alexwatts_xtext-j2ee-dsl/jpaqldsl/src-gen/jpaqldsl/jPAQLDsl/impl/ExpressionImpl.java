/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import jpaqldsl.jPAQLDsl.ArithmeticPrimary;
import jpaqldsl.jPAQLDsl.Expression;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.SimpleConditionalExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getConditionalPrimary <em>Conditional Primary</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getConditionalExpression <em>Conditional Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getArithmeticTerm <em>Arithmetic Term</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getArithmeticFactor <em>Arithmetic Factor</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getArithmeticPrimary <em>Arithmetic Primary</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ExpressionImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getConditionalPrimary() <em>Conditional Primary</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionalPrimary()
   * @generated
   * @ordered
   */
  protected SimpleConditionalExpression conditionalPrimary;

  /**
   * The cached value of the '{@link #getConditionalExpression() <em>Conditional Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionalExpression()
   * @generated
   * @ordered
   */
  protected Expression conditionalExpression;

  /**
   * The cached value of the '{@link #getArithmeticTerm() <em>Arithmetic Term</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmeticTerm()
   * @generated
   * @ordered
   */
  protected Expression arithmeticTerm;

  /**
   * The cached value of the '{@link #getArithmeticFactor() <em>Arithmetic Factor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmeticFactor()
   * @generated
   * @ordered
   */
  protected Expression arithmeticFactor;

  /**
   * The cached value of the '{@link #getArithmeticPrimary() <em>Arithmetic Primary</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArithmeticPrimary()
   * @generated
   * @ordered
   */
  protected ArithmeticPrimary arithmeticPrimary;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Expression left;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Expression right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleConditionalExpression getConditionalPrimary()
  {
    return conditionalPrimary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionalPrimary(SimpleConditionalExpression newConditionalPrimary, NotificationChain msgs)
  {
    SimpleConditionalExpression oldConditionalPrimary = conditionalPrimary;
    conditionalPrimary = newConditionalPrimary;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY, oldConditionalPrimary, newConditionalPrimary);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionalPrimary(SimpleConditionalExpression newConditionalPrimary)
  {
    if (newConditionalPrimary != conditionalPrimary)
    {
      NotificationChain msgs = null;
      if (conditionalPrimary != null)
        msgs = ((InternalEObject)conditionalPrimary).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY, null, msgs);
      if (newConditionalPrimary != null)
        msgs = ((InternalEObject)newConditionalPrimary).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY, null, msgs);
      msgs = basicSetConditionalPrimary(newConditionalPrimary, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY, newConditionalPrimary, newConditionalPrimary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getConditionalExpression()
  {
    return conditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionalExpression(Expression newConditionalExpression, NotificationChain msgs)
  {
    Expression oldConditionalExpression = conditionalExpression;
    conditionalExpression = newConditionalExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION, oldConditionalExpression, newConditionalExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionalExpression(Expression newConditionalExpression)
  {
    if (newConditionalExpression != conditionalExpression)
    {
      NotificationChain msgs = null;
      if (conditionalExpression != null)
        msgs = ((InternalEObject)conditionalExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION, null, msgs);
      if (newConditionalExpression != null)
        msgs = ((InternalEObject)newConditionalExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION, null, msgs);
      msgs = basicSetConditionalExpression(newConditionalExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION, newConditionalExpression, newConditionalExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getArithmeticTerm()
  {
    return arithmeticTerm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithmeticTerm(Expression newArithmeticTerm, NotificationChain msgs)
  {
    Expression oldArithmeticTerm = arithmeticTerm;
    arithmeticTerm = newArithmeticTerm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM, oldArithmeticTerm, newArithmeticTerm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithmeticTerm(Expression newArithmeticTerm)
  {
    if (newArithmeticTerm != arithmeticTerm)
    {
      NotificationChain msgs = null;
      if (arithmeticTerm != null)
        msgs = ((InternalEObject)arithmeticTerm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM, null, msgs);
      if (newArithmeticTerm != null)
        msgs = ((InternalEObject)newArithmeticTerm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM, null, msgs);
      msgs = basicSetArithmeticTerm(newArithmeticTerm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM, newArithmeticTerm, newArithmeticTerm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getArithmeticFactor()
  {
    return arithmeticFactor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithmeticFactor(Expression newArithmeticFactor, NotificationChain msgs)
  {
    Expression oldArithmeticFactor = arithmeticFactor;
    arithmeticFactor = newArithmeticFactor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR, oldArithmeticFactor, newArithmeticFactor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithmeticFactor(Expression newArithmeticFactor)
  {
    if (newArithmeticFactor != arithmeticFactor)
    {
      NotificationChain msgs = null;
      if (arithmeticFactor != null)
        msgs = ((InternalEObject)arithmeticFactor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR, null, msgs);
      if (newArithmeticFactor != null)
        msgs = ((InternalEObject)newArithmeticFactor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR, null, msgs);
      msgs = basicSetArithmeticFactor(newArithmeticFactor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR, newArithmeticFactor, newArithmeticFactor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticPrimary getArithmeticPrimary()
  {
    return arithmeticPrimary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArithmeticPrimary(ArithmeticPrimary newArithmeticPrimary, NotificationChain msgs)
  {
    ArithmeticPrimary oldArithmeticPrimary = arithmeticPrimary;
    arithmeticPrimary = newArithmeticPrimary;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY, oldArithmeticPrimary, newArithmeticPrimary);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArithmeticPrimary(ArithmeticPrimary newArithmeticPrimary)
  {
    if (newArithmeticPrimary != arithmeticPrimary)
    {
      NotificationChain msgs = null;
      if (arithmeticPrimary != null)
        msgs = ((InternalEObject)arithmeticPrimary).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY, null, msgs);
      if (newArithmeticPrimary != null)
        msgs = ((InternalEObject)newArithmeticPrimary).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY, null, msgs);
      msgs = basicSetArithmeticPrimary(newArithmeticPrimary, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY, newArithmeticPrimary, newArithmeticPrimary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(Expression newLeft, NotificationChain msgs)
  {
    Expression oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(Expression newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(Expression newRight, NotificationChain msgs)
  {
    Expression oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight(Expression newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.EXPRESSION__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.EXPRESSION__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY:
        return basicSetConditionalPrimary(null, msgs);
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION:
        return basicSetConditionalExpression(null, msgs);
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM:
        return basicSetArithmeticTerm(null, msgs);
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR:
        return basicSetArithmeticFactor(null, msgs);
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY:
        return basicSetArithmeticPrimary(null, msgs);
      case JPAQLDslPackage.EXPRESSION__LEFT:
        return basicSetLeft(null, msgs);
      case JPAQLDslPackage.EXPRESSION__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY:
        return getConditionalPrimary();
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION:
        return getConditionalExpression();
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM:
        return getArithmeticTerm();
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR:
        return getArithmeticFactor();
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY:
        return getArithmeticPrimary();
      case JPAQLDslPackage.EXPRESSION__LEFT:
        return getLeft();
      case JPAQLDslPackage.EXPRESSION__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY:
        setConditionalPrimary((SimpleConditionalExpression)newValue);
        return;
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION:
        setConditionalExpression((Expression)newValue);
        return;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM:
        setArithmeticTerm((Expression)newValue);
        return;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR:
        setArithmeticFactor((Expression)newValue);
        return;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY:
        setArithmeticPrimary((ArithmeticPrimary)newValue);
        return;
      case JPAQLDslPackage.EXPRESSION__LEFT:
        setLeft((Expression)newValue);
        return;
      case JPAQLDslPackage.EXPRESSION__RIGHT:
        setRight((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY:
        setConditionalPrimary((SimpleConditionalExpression)null);
        return;
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION:
        setConditionalExpression((Expression)null);
        return;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM:
        setArithmeticTerm((Expression)null);
        return;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR:
        setArithmeticFactor((Expression)null);
        return;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY:
        setArithmeticPrimary((ArithmeticPrimary)null);
        return;
      case JPAQLDslPackage.EXPRESSION__LEFT:
        setLeft((Expression)null);
        return;
      case JPAQLDslPackage.EXPRESSION__RIGHT:
        setRight((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_PRIMARY:
        return conditionalPrimary != null;
      case JPAQLDslPackage.EXPRESSION__CONDITIONAL_EXPRESSION:
        return conditionalExpression != null;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_TERM:
        return arithmeticTerm != null;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_FACTOR:
        return arithmeticFactor != null;
      case JPAQLDslPackage.EXPRESSION__ARITHMETIC_PRIMARY:
        return arithmeticPrimary != null;
      case JPAQLDslPackage.EXPRESSION__LEFT:
        return left != null;
      case JPAQLDslPackage.EXPRESSION__RIGHT:
        return right != null;
    }
    return super.eIsSet(featureID);
  }

} //ExpressionImpl
