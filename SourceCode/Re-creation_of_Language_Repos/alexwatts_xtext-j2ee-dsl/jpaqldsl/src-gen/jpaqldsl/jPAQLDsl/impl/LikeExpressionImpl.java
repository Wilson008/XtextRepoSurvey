/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import jpaqldsl.jPAQLDsl.EscapeCharacter;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.LikeExpression;
import jpaqldsl.jPAQLDsl.PatternValue;
import jpaqldsl.jPAQLDsl.StringExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Like Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.LikeExpressionImpl#getStringExpression <em>String Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.LikeExpressionImpl#getPatternValue <em>Pattern Value</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.LikeExpressionImpl#getEscapeCharacter <em>Escape Character</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LikeExpressionImpl extends MinimalEObjectImpl.Container implements LikeExpression
{
  /**
   * The cached value of the '{@link #getStringExpression() <em>String Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringExpression()
   * @generated
   * @ordered
   */
  protected StringExpression stringExpression;

  /**
   * The cached value of the '{@link #getPatternValue() <em>Pattern Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPatternValue()
   * @generated
   * @ordered
   */
  protected PatternValue patternValue;

  /**
   * The cached value of the '{@link #getEscapeCharacter() <em>Escape Character</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEscapeCharacter()
   * @generated
   * @ordered
   */
  protected EscapeCharacter escapeCharacter;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LikeExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.LIKE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression getStringExpression()
  {
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStringExpression(StringExpression newStringExpression, NotificationChain msgs)
  {
    StringExpression oldStringExpression = stringExpression;
    stringExpression = newStringExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION, oldStringExpression, newStringExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStringExpression(StringExpression newStringExpression)
  {
    if (newStringExpression != stringExpression)
    {
      NotificationChain msgs = null;
      if (stringExpression != null)
        msgs = ((InternalEObject)stringExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION, null, msgs);
      if (newStringExpression != null)
        msgs = ((InternalEObject)newStringExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION, null, msgs);
      msgs = basicSetStringExpression(newStringExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION, newStringExpression, newStringExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternValue getPatternValue()
  {
    return patternValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPatternValue(PatternValue newPatternValue, NotificationChain msgs)
  {
    PatternValue oldPatternValue = patternValue;
    patternValue = newPatternValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE, oldPatternValue, newPatternValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPatternValue(PatternValue newPatternValue)
  {
    if (newPatternValue != patternValue)
    {
      NotificationChain msgs = null;
      if (patternValue != null)
        msgs = ((InternalEObject)patternValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE, null, msgs);
      if (newPatternValue != null)
        msgs = ((InternalEObject)newPatternValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE, null, msgs);
      msgs = basicSetPatternValue(newPatternValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE, newPatternValue, newPatternValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EscapeCharacter getEscapeCharacter()
  {
    return escapeCharacter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEscapeCharacter(EscapeCharacter newEscapeCharacter, NotificationChain msgs)
  {
    EscapeCharacter oldEscapeCharacter = escapeCharacter;
    escapeCharacter = newEscapeCharacter;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER, oldEscapeCharacter, newEscapeCharacter);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEscapeCharacter(EscapeCharacter newEscapeCharacter)
  {
    if (newEscapeCharacter != escapeCharacter)
    {
      NotificationChain msgs = null;
      if (escapeCharacter != null)
        msgs = ((InternalEObject)escapeCharacter).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER, null, msgs);
      if (newEscapeCharacter != null)
        msgs = ((InternalEObject)newEscapeCharacter).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER, null, msgs);
      msgs = basicSetEscapeCharacter(newEscapeCharacter, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER, newEscapeCharacter, newEscapeCharacter));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION:
        return basicSetStringExpression(null, msgs);
      case JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE:
        return basicSetPatternValue(null, msgs);
      case JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER:
        return basicSetEscapeCharacter(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION:
        return getStringExpression();
      case JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE:
        return getPatternValue();
      case JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER:
        return getEscapeCharacter();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION:
        setStringExpression((StringExpression)newValue);
        return;
      case JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE:
        setPatternValue((PatternValue)newValue);
        return;
      case JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER:
        setEscapeCharacter((EscapeCharacter)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION:
        setStringExpression((StringExpression)null);
        return;
      case JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE:
        setPatternValue((PatternValue)null);
        return;
      case JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER:
        setEscapeCharacter((EscapeCharacter)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.LIKE_EXPRESSION__STRING_EXPRESSION:
        return stringExpression != null;
      case JPAQLDslPackage.LIKE_EXPRESSION__PATTERN_VALUE:
        return patternValue != null;
      case JPAQLDslPackage.LIKE_EXPRESSION__ESCAPE_CHARACTER:
        return escapeCharacter != null;
    }
    return super.eIsSet(featureID);
  }

} //LikeExpressionImpl
