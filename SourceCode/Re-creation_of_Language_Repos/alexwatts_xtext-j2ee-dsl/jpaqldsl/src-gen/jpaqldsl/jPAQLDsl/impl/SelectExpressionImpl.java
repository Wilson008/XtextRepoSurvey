/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import jpaqldsl.jPAQLDsl.AggregateExpression;
import jpaqldsl.jPAQLDsl.ConstructorExpression;
import jpaqldsl.jPAQLDsl.JPAPathExpression;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.SelectExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SelectExpressionImpl#getJpaPathExpression <em>Jpa Path Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SelectExpressionImpl#getAggregateExpression <em>Aggregate Expression</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.SelectExpressionImpl#getConstructorExpression <em>Constructor Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectExpressionImpl extends MinimalEObjectImpl.Container implements SelectExpression
{
  /**
   * The cached value of the '{@link #getJpaPathExpression() <em>Jpa Path Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJpaPathExpression()
   * @generated
   * @ordered
   */
  protected JPAPathExpression jpaPathExpression;

  /**
   * The cached value of the '{@link #getAggregateExpression() <em>Aggregate Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAggregateExpression()
   * @generated
   * @ordered
   */
  protected AggregateExpression aggregateExpression;

  /**
   * The cached value of the '{@link #getConstructorExpression() <em>Constructor Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstructorExpression()
   * @generated
   * @ordered
   */
  protected ConstructorExpression constructorExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.SELECT_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JPAPathExpression getJpaPathExpression()
  {
    return jpaPathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetJpaPathExpression(JPAPathExpression newJpaPathExpression, NotificationChain msgs)
  {
    JPAPathExpression oldJpaPathExpression = jpaPathExpression;
    jpaPathExpression = newJpaPathExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION, oldJpaPathExpression, newJpaPathExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJpaPathExpression(JPAPathExpression newJpaPathExpression)
  {
    if (newJpaPathExpression != jpaPathExpression)
    {
      NotificationChain msgs = null;
      if (jpaPathExpression != null)
        msgs = ((InternalEObject)jpaPathExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION, null, msgs);
      if (newJpaPathExpression != null)
        msgs = ((InternalEObject)newJpaPathExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION, null, msgs);
      msgs = basicSetJpaPathExpression(newJpaPathExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION, newJpaPathExpression, newJpaPathExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AggregateExpression getAggregateExpression()
  {
    return aggregateExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAggregateExpression(AggregateExpression newAggregateExpression, NotificationChain msgs)
  {
    AggregateExpression oldAggregateExpression = aggregateExpression;
    aggregateExpression = newAggregateExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION, oldAggregateExpression, newAggregateExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAggregateExpression(AggregateExpression newAggregateExpression)
  {
    if (newAggregateExpression != aggregateExpression)
    {
      NotificationChain msgs = null;
      if (aggregateExpression != null)
        msgs = ((InternalEObject)aggregateExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION, null, msgs);
      if (newAggregateExpression != null)
        msgs = ((InternalEObject)newAggregateExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION, null, msgs);
      msgs = basicSetAggregateExpression(newAggregateExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION, newAggregateExpression, newAggregateExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstructorExpression getConstructorExpression()
  {
    return constructorExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstructorExpression(ConstructorExpression newConstructorExpression, NotificationChain msgs)
  {
    ConstructorExpression oldConstructorExpression = constructorExpression;
    constructorExpression = newConstructorExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION, oldConstructorExpression, newConstructorExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstructorExpression(ConstructorExpression newConstructorExpression)
  {
    if (newConstructorExpression != constructorExpression)
    {
      NotificationChain msgs = null;
      if (constructorExpression != null)
        msgs = ((InternalEObject)constructorExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION, null, msgs);
      if (newConstructorExpression != null)
        msgs = ((InternalEObject)newConstructorExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION, null, msgs);
      msgs = basicSetConstructorExpression(newConstructorExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION, newConstructorExpression, newConstructorExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION:
        return basicSetJpaPathExpression(null, msgs);
      case JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION:
        return basicSetAggregateExpression(null, msgs);
      case JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION:
        return basicSetConstructorExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION:
        return getJpaPathExpression();
      case JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION:
        return getAggregateExpression();
      case JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION:
        return getConstructorExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION:
        setJpaPathExpression((JPAPathExpression)newValue);
        return;
      case JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION:
        setAggregateExpression((AggregateExpression)newValue);
        return;
      case JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION:
        setConstructorExpression((ConstructorExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION:
        setJpaPathExpression((JPAPathExpression)null);
        return;
      case JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION:
        setAggregateExpression((AggregateExpression)null);
        return;
      case JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION:
        setConstructorExpression((ConstructorExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.SELECT_EXPRESSION__JPA_PATH_EXPRESSION:
        return jpaPathExpression != null;
      case JPAQLDslPackage.SELECT_EXPRESSION__AGGREGATE_EXPRESSION:
        return aggregateExpression != null;
      case JPAQLDslPackage.SELECT_EXPRESSION__CONSTRUCTOR_EXPRESSION:
        return constructorExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //SelectExpressionImpl
