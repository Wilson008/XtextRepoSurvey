/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import java.util.Collection;

import jpaqldsl.jPAQLDsl.Import;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.Model;
import jpaqldsl.jPAQLDsl.NamedQuery;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ModelImpl#getXmlDescriptor <em>Xml Descriptor</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ModelImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ModelImpl#getName <em>Name</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ModelImpl#getNamedQueries <em>Named Queries</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getXmlDescriptor() <em>Xml Descriptor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXmlDescriptor()
   * @generated
   * @ordered
   */
  protected static final String XML_DESCRIPTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getXmlDescriptor() <em>Xml Descriptor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXmlDescriptor()
   * @generated
   * @ordered
   */
  protected String xmlDescriptor = XML_DESCRIPTOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getNamedQueries() <em>Named Queries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamedQueries()
   * @generated
   * @ordered
   */
  protected EList<NamedQuery> namedQueries;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getXmlDescriptor()
  {
    return xmlDescriptor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXmlDescriptor(String newXmlDescriptor)
  {
    String oldXmlDescriptor = xmlDescriptor;
    xmlDescriptor = newXmlDescriptor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.MODEL__XML_DESCRIPTOR, oldXmlDescriptor, xmlDescriptor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, JPAQLDslPackage.MODEL__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.MODEL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NamedQuery> getNamedQueries()
  {
    if (namedQueries == null)
    {
      namedQueries = new EObjectContainmentEList<NamedQuery>(NamedQuery.class, this, JPAQLDslPackage.MODEL__NAMED_QUERIES);
    }
    return namedQueries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.MODEL__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case JPAQLDslPackage.MODEL__NAMED_QUERIES:
        return ((InternalEList<?>)getNamedQueries()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.MODEL__XML_DESCRIPTOR:
        return getXmlDescriptor();
      case JPAQLDslPackage.MODEL__IMPORTS:
        return getImports();
      case JPAQLDslPackage.MODEL__NAME:
        return getName();
      case JPAQLDslPackage.MODEL__NAMED_QUERIES:
        return getNamedQueries();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.MODEL__XML_DESCRIPTOR:
        setXmlDescriptor((String)newValue);
        return;
      case JPAQLDslPackage.MODEL__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case JPAQLDslPackage.MODEL__NAME:
        setName((String)newValue);
        return;
      case JPAQLDslPackage.MODEL__NAMED_QUERIES:
        getNamedQueries().clear();
        getNamedQueries().addAll((Collection<? extends NamedQuery>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.MODEL__XML_DESCRIPTOR:
        setXmlDescriptor(XML_DESCRIPTOR_EDEFAULT);
        return;
      case JPAQLDslPackage.MODEL__IMPORTS:
        getImports().clear();
        return;
      case JPAQLDslPackage.MODEL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case JPAQLDslPackage.MODEL__NAMED_QUERIES:
        getNamedQueries().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.MODEL__XML_DESCRIPTOR:
        return XML_DESCRIPTOR_EDEFAULT == null ? xmlDescriptor != null : !XML_DESCRIPTOR_EDEFAULT.equals(xmlDescriptor);
      case JPAQLDslPackage.MODEL__IMPORTS:
        return imports != null && !imports.isEmpty();
      case JPAQLDslPackage.MODEL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case JPAQLDslPackage.MODEL__NAMED_QUERIES:
        return namedQueries != null && !namedQueries.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (xmlDescriptor: ");
    result.append(xmlDescriptor);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
