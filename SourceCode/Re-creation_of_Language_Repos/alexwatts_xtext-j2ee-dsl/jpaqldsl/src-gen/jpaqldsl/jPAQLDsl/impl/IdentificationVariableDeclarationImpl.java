/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import java.util.Collection;

import jpaqldsl.jPAQLDsl.IdentificationVariableDeclaration;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;
import jpaqldsl.jPAQLDsl.RangeVariableDeclaration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Identification Variable Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.IdentificationVariableDeclarationImpl#getRangeVariableDeclaration <em>Range Variable Declaration</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.IdentificationVariableDeclarationImpl#getJoins <em>Joins</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IdentificationVariableDeclarationImpl extends MinimalEObjectImpl.Container implements IdentificationVariableDeclaration
{
  /**
   * The cached value of the '{@link #getRangeVariableDeclaration() <em>Range Variable Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRangeVariableDeclaration()
   * @generated
   * @ordered
   */
  protected RangeVariableDeclaration rangeVariableDeclaration;

  /**
   * The cached value of the '{@link #getJoins() <em>Joins</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJoins()
   * @generated
   * @ordered
   */
  protected EList<EObject> joins;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IdentificationVariableDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.IDENTIFICATION_VARIABLE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RangeVariableDeclaration getRangeVariableDeclaration()
  {
    return rangeVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRangeVariableDeclaration(RangeVariableDeclaration newRangeVariableDeclaration, NotificationChain msgs)
  {
    RangeVariableDeclaration oldRangeVariableDeclaration = rangeVariableDeclaration;
    rangeVariableDeclaration = newRangeVariableDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION, oldRangeVariableDeclaration, newRangeVariableDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRangeVariableDeclaration(RangeVariableDeclaration newRangeVariableDeclaration)
  {
    if (newRangeVariableDeclaration != rangeVariableDeclaration)
    {
      NotificationChain msgs = null;
      if (rangeVariableDeclaration != null)
        msgs = ((InternalEObject)rangeVariableDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION, null, msgs);
      if (newRangeVariableDeclaration != null)
        msgs = ((InternalEObject)newRangeVariableDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION, null, msgs);
      msgs = basicSetRangeVariableDeclaration(newRangeVariableDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION, newRangeVariableDeclaration, newRangeVariableDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getJoins()
  {
    if (joins == null)
    {
      joins = new EObjectContainmentEList<EObject>(EObject.class, this, JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__JOINS);
    }
    return joins;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION:
        return basicSetRangeVariableDeclaration(null, msgs);
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__JOINS:
        return ((InternalEList<?>)getJoins()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION:
        return getRangeVariableDeclaration();
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__JOINS:
        return getJoins();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION:
        setRangeVariableDeclaration((RangeVariableDeclaration)newValue);
        return;
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__JOINS:
        getJoins().clear();
        getJoins().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION:
        setRangeVariableDeclaration((RangeVariableDeclaration)null);
        return;
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__JOINS:
        getJoins().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__RANGE_VARIABLE_DECLARATION:
        return rangeVariableDeclaration != null;
      case JPAQLDslPackage.IDENTIFICATION_VARIABLE_DECLARATION__JOINS:
        return joins != null && !joins.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //IdentificationVariableDeclarationImpl
