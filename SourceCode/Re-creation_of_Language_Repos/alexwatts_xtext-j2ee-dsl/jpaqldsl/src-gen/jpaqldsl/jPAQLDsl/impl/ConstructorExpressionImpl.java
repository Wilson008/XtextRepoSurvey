/**
 * generated by Xtext 2.35.0
 */
package jpaqldsl.jPAQLDsl.impl;

import java.util.Collection;

import jpaqldsl.jPAQLDsl.ConstructorExpression;
import jpaqldsl.jPAQLDsl.ConstructorItem;
import jpaqldsl.jPAQLDsl.ConstructorName;
import jpaqldsl.jPAQLDsl.JPAQLDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constructor Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ConstructorExpressionImpl#getConstructorName <em>Constructor Name</em>}</li>
 *   <li>{@link jpaqldsl.jPAQLDsl.impl.ConstructorExpressionImpl#getConstructorItems <em>Constructor Items</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstructorExpressionImpl extends MinimalEObjectImpl.Container implements ConstructorExpression
{
  /**
   * The cached value of the '{@link #getConstructorName() <em>Constructor Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstructorName()
   * @generated
   * @ordered
   */
  protected ConstructorName constructorName;

  /**
   * The cached value of the '{@link #getConstructorItems() <em>Constructor Items</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstructorItems()
   * @generated
   * @ordered
   */
  protected EList<ConstructorItem> constructorItems;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstructorExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JPAQLDslPackage.Literals.CONSTRUCTOR_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstructorName getConstructorName()
  {
    return constructorName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstructorName(ConstructorName newConstructorName, NotificationChain msgs)
  {
    ConstructorName oldConstructorName = constructorName;
    constructorName = newConstructorName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME, oldConstructorName, newConstructorName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConstructorName(ConstructorName newConstructorName)
  {
    if (newConstructorName != constructorName)
    {
      NotificationChain msgs = null;
      if (constructorName != null)
        msgs = ((InternalEObject)constructorName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME, null, msgs);
      if (newConstructorName != null)
        msgs = ((InternalEObject)newConstructorName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME, null, msgs);
      msgs = basicSetConstructorName(newConstructorName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME, newConstructorName, newConstructorName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ConstructorItem> getConstructorItems()
  {
    if (constructorItems == null)
    {
      constructorItems = new EObjectContainmentEList<ConstructorItem>(ConstructorItem.class, this, JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_ITEMS);
    }
    return constructorItems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME:
        return basicSetConstructorName(null, msgs);
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_ITEMS:
        return ((InternalEList<?>)getConstructorItems()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME:
        return getConstructorName();
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_ITEMS:
        return getConstructorItems();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME:
        setConstructorName((ConstructorName)newValue);
        return;
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_ITEMS:
        getConstructorItems().clear();
        getConstructorItems().addAll((Collection<? extends ConstructorItem>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME:
        setConstructorName((ConstructorName)null);
        return;
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_ITEMS:
        getConstructorItems().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_NAME:
        return constructorName != null;
      case JPAQLDslPackage.CONSTRUCTOR_EXPRESSION__CONSTRUCTOR_ITEMS:
        return constructorItems != null && !constructorItems.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ConstructorExpressionImpl
