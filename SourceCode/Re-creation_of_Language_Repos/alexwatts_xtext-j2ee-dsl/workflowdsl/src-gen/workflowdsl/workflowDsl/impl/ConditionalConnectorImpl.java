/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import workflowdsl.workflowDsl.ConditionalConnector;
import workflowdsl.workflowDsl.Event;
import workflowdsl.workflowDsl.StringBasedConditionalVaraible;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Connector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link workflowdsl.workflowDsl.impl.ConditionalConnectorImpl#getName <em>Name</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.ConditionalConnectorImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.ConditionalConnectorImpl#getStringBasedConditionalExpression <em>String Based Conditional Expression</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.ConditionalConnectorImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalConnectorImpl extends ConnectorImpl implements ConditionalConnector
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected Event event;

  /**
   * The cached value of the '{@link #getStringBasedConditionalExpression() <em>String Based Conditional Expression</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStringBasedConditionalExpression()
   * @generated
   * @ordered
   */
  protected StringBasedConditionalVaraible stringBasedConditionalExpression;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final String VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected String value = VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalConnectorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDslPackage.Literals.CONDITIONAL_CONNECTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.CONDITIONAL_CONNECTOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event getEvent()
  {
    if (event != null && event.eIsProxy())
    {
      InternalEObject oldEvent = (InternalEObject)event;
      event = (Event)eResolveProxy(oldEvent);
      if (event != oldEvent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowDslPackage.CONDITIONAL_CONNECTOR__EVENT, oldEvent, event));
      }
    }
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event basicGetEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvent(Event newEvent)
  {
    Event oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.CONDITIONAL_CONNECTOR__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringBasedConditionalVaraible getStringBasedConditionalExpression()
  {
    if (stringBasedConditionalExpression != null && stringBasedConditionalExpression.eIsProxy())
    {
      InternalEObject oldStringBasedConditionalExpression = (InternalEObject)stringBasedConditionalExpression;
      stringBasedConditionalExpression = (StringBasedConditionalVaraible)eResolveProxy(oldStringBasedConditionalExpression);
      if (stringBasedConditionalExpression != oldStringBasedConditionalExpression)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowDslPackage.CONDITIONAL_CONNECTOR__STRING_BASED_CONDITIONAL_EXPRESSION, oldStringBasedConditionalExpression, stringBasedConditionalExpression));
      }
    }
    return stringBasedConditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringBasedConditionalVaraible basicGetStringBasedConditionalExpression()
  {
    return stringBasedConditionalExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStringBasedConditionalExpression(StringBasedConditionalVaraible newStringBasedConditionalExpression)
  {
    StringBasedConditionalVaraible oldStringBasedConditionalExpression = stringBasedConditionalExpression;
    stringBasedConditionalExpression = newStringBasedConditionalExpression;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.CONDITIONAL_CONNECTOR__STRING_BASED_CONDITIONAL_EXPRESSION, oldStringBasedConditionalExpression, stringBasedConditionalExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(String newValue)
  {
    String oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.CONDITIONAL_CONNECTOR__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__NAME:
        return getName();
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__EVENT:
        if (resolve) return getEvent();
        return basicGetEvent();
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__STRING_BASED_CONDITIONAL_EXPRESSION:
        if (resolve) return getStringBasedConditionalExpression();
        return basicGetStringBasedConditionalExpression();
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__NAME:
        setName((String)newValue);
        return;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__EVENT:
        setEvent((Event)newValue);
        return;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__STRING_BASED_CONDITIONAL_EXPRESSION:
        setStringBasedConditionalExpression((StringBasedConditionalVaraible)newValue);
        return;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__VALUE:
        setValue((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__EVENT:
        setEvent((Event)null);
        return;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__STRING_BASED_CONDITIONAL_EXPRESSION:
        setStringBasedConditionalExpression((StringBasedConditionalVaraible)null);
        return;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__EVENT:
        return event != null;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__STRING_BASED_CONDITIONAL_EXPRESSION:
        return stringBasedConditionalExpression != null;
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR__VALUE:
        return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //ConditionalConnectorImpl
