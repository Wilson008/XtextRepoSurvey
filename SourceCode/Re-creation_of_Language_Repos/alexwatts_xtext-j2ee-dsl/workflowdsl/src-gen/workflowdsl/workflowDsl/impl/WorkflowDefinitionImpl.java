/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import workflowdsl.workflowDsl.ClassName;
import workflowdsl.workflowDsl.Connector;
import workflowdsl.workflowDsl.Event;
import workflowdsl.workflowDsl.Node;
import workflowdsl.workflowDsl.Test;
import workflowdsl.workflowDsl.Variable;
import workflowdsl.workflowDsl.WorkflowDefinition;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Workflow Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getClassName <em>Class Name</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getPackages <em>Packages</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getEvents <em>Events</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getNodes <em>Nodes</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getConnectors <em>Connectors</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.WorkflowDefinitionImpl#getTests <em>Tests</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WorkflowDefinitionImpl extends MinimalEObjectImpl.Container implements WorkflowDefinition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getClassName() <em>Class Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClassName()
   * @generated
   * @ordered
   */
  protected ClassName className;

  /**
   * The cached value of the '{@link #getPackages() <em>Packages</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackages()
   * @generated
   * @ordered
   */
  protected workflowdsl.workflowDsl.Package packages;

  /**
   * The cached value of the '{@link #getEvents() <em>Events</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvents()
   * @generated
   * @ordered
   */
  protected EList<Event> events;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<Variable> variables;

  /**
   * The cached value of the '{@link #getNodes() <em>Nodes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodes()
   * @generated
   * @ordered
   */
  protected EList<Node> nodes;

  /**
   * The cached value of the '{@link #getConnectors() <em>Connectors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectors()
   * @generated
   * @ordered
   */
  protected EList<Connector> connectors;

  /**
   * The cached value of the '{@link #getTests() <em>Tests</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTests()
   * @generated
   * @ordered
   */
  protected EList<Test> tests;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDslPackage.Literals.WORKFLOW_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.WORKFLOW_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassName getClassName()
  {
    return className;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetClassName(ClassName newClassName, NotificationChain msgs)
  {
    ClassName oldClassName = className;
    className = newClassName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME, oldClassName, newClassName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setClassName(ClassName newClassName)
  {
    if (newClassName != className)
    {
      NotificationChain msgs = null;
      if (className != null)
        msgs = ((InternalEObject)className).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME, null, msgs);
      if (newClassName != null)
        msgs = ((InternalEObject)newClassName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME, null, msgs);
      msgs = basicSetClassName(newClassName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME, newClassName, newClassName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public workflowdsl.workflowDsl.Package getPackages()
  {
    return packages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPackages(workflowdsl.workflowDsl.Package newPackages, NotificationChain msgs)
  {
    workflowdsl.workflowDsl.Package oldPackages = packages;
    packages = newPackages;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES, oldPackages, newPackages);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPackages(workflowdsl.workflowDsl.Package newPackages)
  {
    if (newPackages != packages)
    {
      NotificationChain msgs = null;
      if (packages != null)
        msgs = ((InternalEObject)packages).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES, null, msgs);
      if (newPackages != null)
        msgs = ((InternalEObject)newPackages).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES, null, msgs);
      msgs = basicSetPackages(newPackages, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES, newPackages, newPackages));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getEvents()
  {
    if (events == null)
    {
      events = new EObjectContainmentEList<Event>(Event.class, this, WorkflowDslPackage.WORKFLOW_DEFINITION__EVENTS);
    }
    return events;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Variable> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<Variable>(Variable.class, this, WorkflowDslPackage.WORKFLOW_DEFINITION__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Node> getNodes()
  {
    if (nodes == null)
    {
      nodes = new EObjectContainmentEList<Node>(Node.class, this, WorkflowDslPackage.WORKFLOW_DEFINITION__NODES);
    }
    return nodes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Connector> getConnectors()
  {
    if (connectors == null)
    {
      connectors = new EObjectContainmentEList<Connector>(Connector.class, this, WorkflowDslPackage.WORKFLOW_DEFINITION__CONNECTORS);
    }
    return connectors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Test> getTests()
  {
    if (tests == null)
    {
      tests = new EObjectContainmentEList<Test>(Test.class, this, WorkflowDslPackage.WORKFLOW_DEFINITION__TESTS);
    }
    return tests;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME:
        return basicSetClassName(null, msgs);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES:
        return basicSetPackages(null, msgs);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__EVENTS:
        return ((InternalEList<?>)getEvents()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NODES:
        return ((InternalEList<?>)getNodes()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CONNECTORS:
        return ((InternalEList<?>)getConnectors()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__TESTS:
        return ((InternalEList<?>)getTests()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NAME:
        return getName();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME:
        return getClassName();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES:
        return getPackages();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__EVENTS:
        return getEvents();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__VARIABLES:
        return getVariables();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NODES:
        return getNodes();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CONNECTORS:
        return getConnectors();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__TESTS:
        return getTests();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME:
        setClassName((ClassName)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES:
        setPackages((workflowdsl.workflowDsl.Package)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__EVENTS:
        getEvents().clear();
        getEvents().addAll((Collection<? extends Event>)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends Variable>)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NODES:
        getNodes().clear();
        getNodes().addAll((Collection<? extends Node>)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CONNECTORS:
        getConnectors().clear();
        getConnectors().addAll((Collection<? extends Connector>)newValue);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__TESTS:
        getTests().clear();
        getTests().addAll((Collection<? extends Test>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME:
        setClassName((ClassName)null);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES:
        setPackages((workflowdsl.workflowDsl.Package)null);
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__EVENTS:
        getEvents().clear();
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__VARIABLES:
        getVariables().clear();
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NODES:
        getNodes().clear();
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CONNECTORS:
        getConnectors().clear();
        return;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__TESTS:
        getTests().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CLASS_NAME:
        return className != null;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__PACKAGES:
        return packages != null;
      case WorkflowDslPackage.WORKFLOW_DEFINITION__EVENTS:
        return events != null && !events.isEmpty();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__VARIABLES:
        return variables != null && !variables.isEmpty();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__NODES:
        return nodes != null && !nodes.isEmpty();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__CONNECTORS:
        return connectors != null && !connectors.isEmpty();
      case WorkflowDslPackage.WORKFLOW_DEFINITION__TESTS:
        return tests != null && !tests.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //WorkflowDefinitionImpl
