/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import workflowdsl.workflowDsl.AssertFlow;
import workflowdsl.workflowDsl.AssertWait;
import workflowdsl.workflowDsl.AsyncronousServiceTask;
import workflowdsl.workflowDsl.BasicConnector;
import workflowdsl.workflowDsl.ClassName;
import workflowdsl.workflowDsl.ConditionalConnector;
import workflowdsl.workflowDsl.Connector;
import workflowdsl.workflowDsl.ConvergingGateway;
import workflowdsl.workflowDsl.DivergingGateway;
import workflowdsl.workflowDsl.EndNode;
import workflowdsl.workflowDsl.Event;
import workflowdsl.workflowDsl.EventBasedInput;
import workflowdsl.workflowDsl.ExclusiveConverging;
import workflowdsl.workflowDsl.ExlcusiveDiverging;
import workflowdsl.workflowDsl.FireSignal;
import workflowdsl.workflowDsl.Gateway;
import workflowdsl.workflowDsl.Import;
import workflowdsl.workflowDsl.InputData;
import workflowdsl.workflowDsl.MarketName;
import workflowdsl.workflowDsl.Model;
import workflowdsl.workflowDsl.Node;
import workflowdsl.workflowDsl.OutputData;
import workflowdsl.workflowDsl.ParallelConverging;
import workflowdsl.workflowDsl.ParallelDiverging;
import workflowdsl.workflowDsl.ProcessVariable;
import workflowdsl.workflowDsl.ServiceTask;
import workflowdsl.workflowDsl.Signal;
import workflowdsl.workflowDsl.StartNode;
import workflowdsl.workflowDsl.StringBasedConditionalVaraible;
import workflowdsl.workflowDsl.SyncronousServiceTask;
import workflowdsl.workflowDsl.TaskNameInput;
import workflowdsl.workflowDsl.Test;
import workflowdsl.workflowDsl.Variable;
import workflowdsl.workflowDsl.VariableBasedInput;
import workflowdsl.workflowDsl.WorkflowDefinition;
import workflowdsl.workflowDsl.WorkflowDslFactory;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WorkflowDslFactoryImpl extends EFactoryImpl implements WorkflowDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WorkflowDslFactory init()
  {
    try
    {
      WorkflowDslFactory theWorkflowDslFactory = (WorkflowDslFactory)EPackage.Registry.INSTANCE.getEFactory(WorkflowDslPackage.eNS_URI);
      if (theWorkflowDslFactory != null)
      {
        return theWorkflowDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WorkflowDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WorkflowDslPackage.MODEL: return createModel();
      case WorkflowDslPackage.IMPORT: return createImport();
      case WorkflowDslPackage.WORKFLOW_DEFINITION: return createWorkflowDefinition();
      case WorkflowDslPackage.PACKAGE: return createPackage();
      case WorkflowDslPackage.MARKET_NAME: return createMarketName();
      case WorkflowDslPackage.CLASS_NAME: return createClassName();
      case WorkflowDslPackage.EVENT: return createEvent();
      case WorkflowDslPackage.VARIABLE: return createVariable();
      case WorkflowDslPackage.STRING_BASED_CONDITIONAL_VARAIBLE: return createStringBasedConditionalVaraible();
      case WorkflowDslPackage.NODE: return createNode();
      case WorkflowDslPackage.SERVICE_TASK: return createServiceTask();
      case WorkflowDslPackage.GATEWAY: return createGateway();
      case WorkflowDslPackage.DIVERGING_GATEWAY: return createDivergingGateway();
      case WorkflowDslPackage.CONVERGING_GATEWAY: return createConvergingGateway();
      case WorkflowDslPackage.START_NODE: return createStartNode();
      case WorkflowDslPackage.END_NODE: return createEndNode();
      case WorkflowDslPackage.SIGNAL: return createSignal();
      case WorkflowDslPackage.ASYNCRONOUS_SERVICE_TASK: return createAsyncronousServiceTask();
      case WorkflowDslPackage.SYNCRONOUS_SERVICE_TASK: return createSyncronousServiceTask();
      case WorkflowDslPackage.EXLCUSIVE_DIVERGING: return createExlcusiveDiverging();
      case WorkflowDslPackage.PARALLEL_DIVERGING: return createParallelDiverging();
      case WorkflowDslPackage.EXCLUSIVE_CONVERGING: return createExclusiveConverging();
      case WorkflowDslPackage.PARALLEL_CONVERGING: return createParallelConverging();
      case WorkflowDslPackage.CONNECTOR: return createConnector();
      case WorkflowDslPackage.BASIC_CONNECTOR: return createBasicConnector();
      case WorkflowDslPackage.INPUT_DATA: return createInputData();
      case WorkflowDslPackage.TASK_NAME_INPUT: return createTaskNameInput();
      case WorkflowDslPackage.VARIABLE_BASED_INPUT: return createVariableBasedInput();
      case WorkflowDslPackage.EVENT_BASED_INPUT: return createEventBasedInput();
      case WorkflowDslPackage.OUTPUT_DATA: return createOutputData();
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR: return createConditionalConnector();
      case WorkflowDslPackage.TEST: return createTest();
      case WorkflowDslPackage.PROCESS_VARIABLE: return createProcessVariable();
      case WorkflowDslPackage.FIRE_SIGNAL: return createFireSignal();
      case WorkflowDslPackage.ASSERT_FLOW: return createAssertFlow();
      case WorkflowDslPackage.ASSERT_WAIT: return createAssertWait();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowDefinition createWorkflowDefinition()
  {
    WorkflowDefinitionImpl workflowDefinition = new WorkflowDefinitionImpl();
    return workflowDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public workflowdsl.workflowDsl.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MarketName createMarketName()
  {
    MarketNameImpl marketName = new MarketNameImpl();
    return marketName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassName createClassName()
  {
    ClassNameImpl className = new ClassNameImpl();
    return className;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringBasedConditionalVaraible createStringBasedConditionalVaraible()
  {
    StringBasedConditionalVaraibleImpl stringBasedConditionalVaraible = new StringBasedConditionalVaraibleImpl();
    return stringBasedConditionalVaraible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceTask createServiceTask()
  {
    ServiceTaskImpl serviceTask = new ServiceTaskImpl();
    return serviceTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Gateway createGateway()
  {
    GatewayImpl gateway = new GatewayImpl();
    return gateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DivergingGateway createDivergingGateway()
  {
    DivergingGatewayImpl divergingGateway = new DivergingGatewayImpl();
    return divergingGateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConvergingGateway createConvergingGateway()
  {
    ConvergingGatewayImpl convergingGateway = new ConvergingGatewayImpl();
    return convergingGateway;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartNode createStartNode()
  {
    StartNodeImpl startNode = new StartNodeImpl();
    return startNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EndNode createEndNode()
  {
    EndNodeImpl endNode = new EndNodeImpl();
    return endNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsyncronousServiceTask createAsyncronousServiceTask()
  {
    AsyncronousServiceTaskImpl asyncronousServiceTask = new AsyncronousServiceTaskImpl();
    return asyncronousServiceTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SyncronousServiceTask createSyncronousServiceTask()
  {
    SyncronousServiceTaskImpl syncronousServiceTask = new SyncronousServiceTaskImpl();
    return syncronousServiceTask;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExlcusiveDiverging createExlcusiveDiverging()
  {
    ExlcusiveDivergingImpl exlcusiveDiverging = new ExlcusiveDivergingImpl();
    return exlcusiveDiverging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParallelDiverging createParallelDiverging()
  {
    ParallelDivergingImpl parallelDiverging = new ParallelDivergingImpl();
    return parallelDiverging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExclusiveConverging createExclusiveConverging()
  {
    ExclusiveConvergingImpl exclusiveConverging = new ExclusiveConvergingImpl();
    return exclusiveConverging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParallelConverging createParallelConverging()
  {
    ParallelConvergingImpl parallelConverging = new ParallelConvergingImpl();
    return parallelConverging;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connector createConnector()
  {
    ConnectorImpl connector = new ConnectorImpl();
    return connector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicConnector createBasicConnector()
  {
    BasicConnectorImpl basicConnector = new BasicConnectorImpl();
    return basicConnector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputData createInputData()
  {
    InputDataImpl inputData = new InputDataImpl();
    return inputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TaskNameInput createTaskNameInput()
  {
    TaskNameInputImpl taskNameInput = new TaskNameInputImpl();
    return taskNameInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableBasedInput createVariableBasedInput()
  {
    VariableBasedInputImpl variableBasedInput = new VariableBasedInputImpl();
    return variableBasedInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventBasedInput createEventBasedInput()
  {
    EventBasedInputImpl eventBasedInput = new EventBasedInputImpl();
    return eventBasedInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputData createOutputData()
  {
    OutputDataImpl outputData = new OutputDataImpl();
    return outputData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalConnector createConditionalConnector()
  {
    ConditionalConnectorImpl conditionalConnector = new ConditionalConnectorImpl();
    return conditionalConnector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Test createTest()
  {
    TestImpl test = new TestImpl();
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessVariable createProcessVariable()
  {
    ProcessVariableImpl processVariable = new ProcessVariableImpl();
    return processVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FireSignal createFireSignal()
  {
    FireSignalImpl fireSignal = new FireSignalImpl();
    return fireSignal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertFlow createAssertFlow()
  {
    AssertFlowImpl assertFlow = new AssertFlowImpl();
    return assertFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertWait createAssertWait()
  {
    AssertWaitImpl assertWait = new AssertWaitImpl();
    return assertWait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WorkflowDslPackage getWorkflowDslPackage()
  {
    return (WorkflowDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WorkflowDslPackage getPackage()
  {
    return WorkflowDslPackage.eINSTANCE;
  }

} //WorkflowDslFactoryImpl
