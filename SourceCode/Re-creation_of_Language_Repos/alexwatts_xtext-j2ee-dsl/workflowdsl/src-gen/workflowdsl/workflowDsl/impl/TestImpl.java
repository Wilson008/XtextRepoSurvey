/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import workflowdsl.workflowDsl.AssertFlow;
import workflowdsl.workflowDsl.AssertWait;
import workflowdsl.workflowDsl.FireSignal;
import workflowdsl.workflowDsl.ProcessVariable;
import workflowdsl.workflowDsl.Test;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link workflowdsl.workflowDsl.impl.TestImpl#getName <em>Name</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.TestImpl#getProcessVariables <em>Process Variables</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.TestImpl#getFireSignal <em>Fire Signal</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.TestImpl#getAssertFlow <em>Assert Flow</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.TestImpl#getAssertWait <em>Assert Wait</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestImpl extends MinimalEObjectImpl.Container implements Test
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getProcessVariables() <em>Process Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessVariables()
   * @generated
   * @ordered
   */
  protected EList<ProcessVariable> processVariables;

  /**
   * The cached value of the '{@link #getFireSignal() <em>Fire Signal</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFireSignal()
   * @generated
   * @ordered
   */
  protected EList<FireSignal> fireSignal;

  /**
   * The cached value of the '{@link #getAssertFlow() <em>Assert Flow</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertFlow()
   * @generated
   * @ordered
   */
  protected EList<AssertFlow> assertFlow;

  /**
   * The cached value of the '{@link #getAssertWait() <em>Assert Wait</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssertWait()
   * @generated
   * @ordered
   */
  protected EList<AssertWait> assertWait;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDslPackage.Literals.TEST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.TEST__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ProcessVariable> getProcessVariables()
  {
    if (processVariables == null)
    {
      processVariables = new EObjectContainmentEList<ProcessVariable>(ProcessVariable.class, this, WorkflowDslPackage.TEST__PROCESS_VARIABLES);
    }
    return processVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FireSignal> getFireSignal()
  {
    if (fireSignal == null)
    {
      fireSignal = new EObjectContainmentEList<FireSignal>(FireSignal.class, this, WorkflowDslPackage.TEST__FIRE_SIGNAL);
    }
    return fireSignal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssertFlow> getAssertFlow()
  {
    if (assertFlow == null)
    {
      assertFlow = new EObjectContainmentEList<AssertFlow>(AssertFlow.class, this, WorkflowDslPackage.TEST__ASSERT_FLOW);
    }
    return assertFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AssertWait> getAssertWait()
  {
    if (assertWait == null)
    {
      assertWait = new EObjectContainmentEList<AssertWait>(AssertWait.class, this, WorkflowDslPackage.TEST__ASSERT_WAIT);
    }
    return assertWait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.TEST__PROCESS_VARIABLES:
        return ((InternalEList<?>)getProcessVariables()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.TEST__FIRE_SIGNAL:
        return ((InternalEList<?>)getFireSignal()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.TEST__ASSERT_FLOW:
        return ((InternalEList<?>)getAssertFlow()).basicRemove(otherEnd, msgs);
      case WorkflowDslPackage.TEST__ASSERT_WAIT:
        return ((InternalEList<?>)getAssertWait()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.TEST__NAME:
        return getName();
      case WorkflowDslPackage.TEST__PROCESS_VARIABLES:
        return getProcessVariables();
      case WorkflowDslPackage.TEST__FIRE_SIGNAL:
        return getFireSignal();
      case WorkflowDslPackage.TEST__ASSERT_FLOW:
        return getAssertFlow();
      case WorkflowDslPackage.TEST__ASSERT_WAIT:
        return getAssertWait();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.TEST__NAME:
        setName((String)newValue);
        return;
      case WorkflowDslPackage.TEST__PROCESS_VARIABLES:
        getProcessVariables().clear();
        getProcessVariables().addAll((Collection<? extends ProcessVariable>)newValue);
        return;
      case WorkflowDslPackage.TEST__FIRE_SIGNAL:
        getFireSignal().clear();
        getFireSignal().addAll((Collection<? extends FireSignal>)newValue);
        return;
      case WorkflowDslPackage.TEST__ASSERT_FLOW:
        getAssertFlow().clear();
        getAssertFlow().addAll((Collection<? extends AssertFlow>)newValue);
        return;
      case WorkflowDslPackage.TEST__ASSERT_WAIT:
        getAssertWait().clear();
        getAssertWait().addAll((Collection<? extends AssertWait>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.TEST__NAME:
        setName(NAME_EDEFAULT);
        return;
      case WorkflowDslPackage.TEST__PROCESS_VARIABLES:
        getProcessVariables().clear();
        return;
      case WorkflowDslPackage.TEST__FIRE_SIGNAL:
        getFireSignal().clear();
        return;
      case WorkflowDslPackage.TEST__ASSERT_FLOW:
        getAssertFlow().clear();
        return;
      case WorkflowDslPackage.TEST__ASSERT_WAIT:
        getAssertWait().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.TEST__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case WorkflowDslPackage.TEST__PROCESS_VARIABLES:
        return processVariables != null && !processVariables.isEmpty();
      case WorkflowDslPackage.TEST__FIRE_SIGNAL:
        return fireSignal != null && !fireSignal.isEmpty();
      case WorkflowDslPackage.TEST__ASSERT_FLOW:
        return assertFlow != null && !assertFlow.isEmpty();
      case WorkflowDslPackage.TEST__ASSERT_WAIT:
        return assertWait != null && !assertWait.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TestImpl
