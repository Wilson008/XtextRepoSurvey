/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import workflowdsl.workflowDsl.Event;
import workflowdsl.workflowDsl.EventBasedInput;
import workflowdsl.workflowDsl.StringBasedConditionalVaraible;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Based Input</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link workflowdsl.workflowDsl.impl.EventBasedInputImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.EventBasedInputImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.EventBasedInputImpl#getEventParameterName <em>Event Parameter Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventBasedInputImpl extends InputDataImpl implements EventBasedInput
{
  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected Event event;

  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected StringBasedConditionalVaraible variable;

  /**
   * The default value of the '{@link #getEventParameterName() <em>Event Parameter Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventParameterName()
   * @generated
   * @ordered
   */
  protected static final String EVENT_PARAMETER_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEventParameterName() <em>Event Parameter Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventParameterName()
   * @generated
   * @ordered
   */
  protected String eventParameterName = EVENT_PARAMETER_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventBasedInputImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDslPackage.Literals.EVENT_BASED_INPUT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event getEvent()
  {
    if (event != null && event.eIsProxy())
    {
      InternalEObject oldEvent = (InternalEObject)event;
      event = (Event)eResolveProxy(oldEvent);
      if (event != oldEvent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowDslPackage.EVENT_BASED_INPUT__EVENT, oldEvent, event));
      }
    }
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event basicGetEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvent(Event newEvent)
  {
    Event oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.EVENT_BASED_INPUT__EVENT, oldEvent, event));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringBasedConditionalVaraible getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (StringBasedConditionalVaraible)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowDslPackage.EVENT_BASED_INPUT__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringBasedConditionalVaraible basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(StringBasedConditionalVaraible newVariable)
  {
    StringBasedConditionalVaraible oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.EVENT_BASED_INPUT__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEventParameterName()
  {
    return eventParameterName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventParameterName(String newEventParameterName)
  {
    String oldEventParameterName = eventParameterName;
    eventParameterName = newEventParameterName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.EVENT_BASED_INPUT__EVENT_PARAMETER_NAME, oldEventParameterName, eventParameterName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT:
        if (resolve) return getEvent();
        return basicGetEvent();
      case WorkflowDslPackage.EVENT_BASED_INPUT__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT_PARAMETER_NAME:
        return getEventParameterName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT:
        setEvent((Event)newValue);
        return;
      case WorkflowDslPackage.EVENT_BASED_INPUT__VARIABLE:
        setVariable((StringBasedConditionalVaraible)newValue);
        return;
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT_PARAMETER_NAME:
        setEventParameterName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT:
        setEvent((Event)null);
        return;
      case WorkflowDslPackage.EVENT_BASED_INPUT__VARIABLE:
        setVariable((StringBasedConditionalVaraible)null);
        return;
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT_PARAMETER_NAME:
        setEventParameterName(EVENT_PARAMETER_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT:
        return event != null;
      case WorkflowDslPackage.EVENT_BASED_INPUT__VARIABLE:
        return variable != null;
      case WorkflowDslPackage.EVENT_BASED_INPUT__EVENT_PARAMETER_NAME:
        return EVENT_PARAMETER_NAME_EDEFAULT == null ? eventParameterName != null : !EVENT_PARAMETER_NAME_EDEFAULT.equals(eventParameterName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eventParameterName: ");
    result.append(eventParameterName);
    result.append(')');
    return result.toString();
  }

} //EventBasedInputImpl
