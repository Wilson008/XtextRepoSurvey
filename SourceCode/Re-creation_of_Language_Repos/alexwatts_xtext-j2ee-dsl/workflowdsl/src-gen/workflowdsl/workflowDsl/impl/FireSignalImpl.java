/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import workflowdsl.workflowDsl.ConditionalConnector;
import workflowdsl.workflowDsl.FireSignal;
import workflowdsl.workflowDsl.Signal;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fire Signal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link workflowdsl.workflowDsl.impl.FireSignalImpl#getFireSignal <em>Fire Signal</em>}</li>
 *   <li>{@link workflowdsl.workflowDsl.impl.FireSignalImpl#getCase <em>Case</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FireSignalImpl extends MinimalEObjectImpl.Container implements FireSignal
{
  /**
   * The cached value of the '{@link #getFireSignal() <em>Fire Signal</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFireSignal()
   * @generated
   * @ordered
   */
  protected Signal fireSignal;

  /**
   * The cached value of the '{@link #getCase() <em>Case</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase()
   * @generated
   * @ordered
   */
  protected ConditionalConnector case_;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FireSignalImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WorkflowDslPackage.Literals.FIRE_SIGNAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal getFireSignal()
  {
    if (fireSignal != null && fireSignal.eIsProxy())
    {
      InternalEObject oldFireSignal = (InternalEObject)fireSignal;
      fireSignal = (Signal)eResolveProxy(oldFireSignal);
      if (fireSignal != oldFireSignal)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowDslPackage.FIRE_SIGNAL__FIRE_SIGNAL, oldFireSignal, fireSignal));
      }
    }
    return fireSignal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Signal basicGetFireSignal()
  {
    return fireSignal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFireSignal(Signal newFireSignal)
  {
    Signal oldFireSignal = fireSignal;
    fireSignal = newFireSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.FIRE_SIGNAL__FIRE_SIGNAL, oldFireSignal, fireSignal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalConnector getCase()
  {
    if (case_ != null && case_.eIsProxy())
    {
      InternalEObject oldCase = (InternalEObject)case_;
      case_ = (ConditionalConnector)eResolveProxy(oldCase);
      if (case_ != oldCase)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WorkflowDslPackage.FIRE_SIGNAL__CASE, oldCase, case_));
      }
    }
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionalConnector basicGetCase()
  {
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCase(ConditionalConnector newCase)
  {
    ConditionalConnector oldCase = case_;
    case_ = newCase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WorkflowDslPackage.FIRE_SIGNAL__CASE, oldCase, case_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.FIRE_SIGNAL__FIRE_SIGNAL:
        if (resolve) return getFireSignal();
        return basicGetFireSignal();
      case WorkflowDslPackage.FIRE_SIGNAL__CASE:
        if (resolve) return getCase();
        return basicGetCase();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.FIRE_SIGNAL__FIRE_SIGNAL:
        setFireSignal((Signal)newValue);
        return;
      case WorkflowDslPackage.FIRE_SIGNAL__CASE:
        setCase((ConditionalConnector)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.FIRE_SIGNAL__FIRE_SIGNAL:
        setFireSignal((Signal)null);
        return;
      case WorkflowDslPackage.FIRE_SIGNAL__CASE:
        setCase((ConditionalConnector)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WorkflowDslPackage.FIRE_SIGNAL__FIRE_SIGNAL:
        return fireSignal != null;
      case WorkflowDslPackage.FIRE_SIGNAL__CASE:
        return case_ != null;
    }
    return super.eIsSet(featureID);
  }

} //FireSignalImpl
