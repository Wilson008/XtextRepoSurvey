/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import workflowdsl.workflowDsl.AssertFlow;
import workflowdsl.workflowDsl.AssertWait;
import workflowdsl.workflowDsl.AsyncronousServiceTask;
import workflowdsl.workflowDsl.BasicConnector;
import workflowdsl.workflowDsl.ClassName;
import workflowdsl.workflowDsl.ConditionalConnector;
import workflowdsl.workflowDsl.Connector;
import workflowdsl.workflowDsl.ConvergingGateway;
import workflowdsl.workflowDsl.DivergingGateway;
import workflowdsl.workflowDsl.EndNode;
import workflowdsl.workflowDsl.Event;
import workflowdsl.workflowDsl.EventBasedInput;
import workflowdsl.workflowDsl.ExclusiveConverging;
import workflowdsl.workflowDsl.ExlcusiveDiverging;
import workflowdsl.workflowDsl.FireSignal;
import workflowdsl.workflowDsl.Gateway;
import workflowdsl.workflowDsl.Import;
import workflowdsl.workflowDsl.InputData;
import workflowdsl.workflowDsl.MarketName;
import workflowdsl.workflowDsl.Model;
import workflowdsl.workflowDsl.Node;
import workflowdsl.workflowDsl.OutputData;
import workflowdsl.workflowDsl.ParallelConverging;
import workflowdsl.workflowDsl.ParallelDiverging;
import workflowdsl.workflowDsl.ProcessVariable;
import workflowdsl.workflowDsl.ServiceTask;
import workflowdsl.workflowDsl.Signal;
import workflowdsl.workflowDsl.StartNode;
import workflowdsl.workflowDsl.StringBasedConditionalVaraible;
import workflowdsl.workflowDsl.SyncronousServiceTask;
import workflowdsl.workflowDsl.TaskNameInput;
import workflowdsl.workflowDsl.Test;
import workflowdsl.workflowDsl.Variable;
import workflowdsl.workflowDsl.VariableBasedInput;
import workflowdsl.workflowDsl.WorkflowDefinition;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see workflowdsl.workflowDsl.WorkflowDslPackage
 * @generated
 */
public class WorkflowDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WorkflowDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = WorkflowDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case WorkflowDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.WORKFLOW_DEFINITION:
      {
        WorkflowDefinition workflowDefinition = (WorkflowDefinition)theEObject;
        T result = caseWorkflowDefinition(workflowDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.PACKAGE:
      {
        workflowdsl.workflowDsl.Package package_ = (workflowdsl.workflowDsl.Package)theEObject;
        T result = casePackage(package_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.MARKET_NAME:
      {
        MarketName marketName = (MarketName)theEObject;
        T result = caseMarketName(marketName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.CLASS_NAME:
      {
        ClassName className = (ClassName)theEObject;
        T result = caseClassName(className);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.STRING_BASED_CONDITIONAL_VARAIBLE:
      {
        StringBasedConditionalVaraible stringBasedConditionalVaraible = (StringBasedConditionalVaraible)theEObject;
        T result = caseStringBasedConditionalVaraible(stringBasedConditionalVaraible);
        if (result == null) result = caseVariable(stringBasedConditionalVaraible);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.NODE:
      {
        Node node = (Node)theEObject;
        T result = caseNode(node);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.SERVICE_TASK:
      {
        ServiceTask serviceTask = (ServiceTask)theEObject;
        T result = caseServiceTask(serviceTask);
        if (result == null) result = caseNode(serviceTask);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.GATEWAY:
      {
        Gateway gateway = (Gateway)theEObject;
        T result = caseGateway(gateway);
        if (result == null) result = caseNode(gateway);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.DIVERGING_GATEWAY:
      {
        DivergingGateway divergingGateway = (DivergingGateway)theEObject;
        T result = caseDivergingGateway(divergingGateway);
        if (result == null) result = caseGateway(divergingGateway);
        if (result == null) result = caseNode(divergingGateway);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.CONVERGING_GATEWAY:
      {
        ConvergingGateway convergingGateway = (ConvergingGateway)theEObject;
        T result = caseConvergingGateway(convergingGateway);
        if (result == null) result = caseGateway(convergingGateway);
        if (result == null) result = caseNode(convergingGateway);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.START_NODE:
      {
        StartNode startNode = (StartNode)theEObject;
        T result = caseStartNode(startNode);
        if (result == null) result = caseNode(startNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.END_NODE:
      {
        EndNode endNode = (EndNode)theEObject;
        T result = caseEndNode(endNode);
        if (result == null) result = caseNode(endNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.SIGNAL:
      {
        Signal signal = (Signal)theEObject;
        T result = caseSignal(signal);
        if (result == null) result = caseNode(signal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.ASYNCRONOUS_SERVICE_TASK:
      {
        AsyncronousServiceTask asyncronousServiceTask = (AsyncronousServiceTask)theEObject;
        T result = caseAsyncronousServiceTask(asyncronousServiceTask);
        if (result == null) result = caseServiceTask(asyncronousServiceTask);
        if (result == null) result = caseNode(asyncronousServiceTask);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.SYNCRONOUS_SERVICE_TASK:
      {
        SyncronousServiceTask syncronousServiceTask = (SyncronousServiceTask)theEObject;
        T result = caseSyncronousServiceTask(syncronousServiceTask);
        if (result == null) result = caseServiceTask(syncronousServiceTask);
        if (result == null) result = caseNode(syncronousServiceTask);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.EXLCUSIVE_DIVERGING:
      {
        ExlcusiveDiverging exlcusiveDiverging = (ExlcusiveDiverging)theEObject;
        T result = caseExlcusiveDiverging(exlcusiveDiverging);
        if (result == null) result = caseDivergingGateway(exlcusiveDiverging);
        if (result == null) result = caseGateway(exlcusiveDiverging);
        if (result == null) result = caseNode(exlcusiveDiverging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.PARALLEL_DIVERGING:
      {
        ParallelDiverging parallelDiverging = (ParallelDiverging)theEObject;
        T result = caseParallelDiverging(parallelDiverging);
        if (result == null) result = caseDivergingGateway(parallelDiverging);
        if (result == null) result = caseGateway(parallelDiverging);
        if (result == null) result = caseNode(parallelDiverging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.EXCLUSIVE_CONVERGING:
      {
        ExclusiveConverging exclusiveConverging = (ExclusiveConverging)theEObject;
        T result = caseExclusiveConverging(exclusiveConverging);
        if (result == null) result = caseConvergingGateway(exclusiveConverging);
        if (result == null) result = caseGateway(exclusiveConverging);
        if (result == null) result = caseNode(exclusiveConverging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.PARALLEL_CONVERGING:
      {
        ParallelConverging parallelConverging = (ParallelConverging)theEObject;
        T result = caseParallelConverging(parallelConverging);
        if (result == null) result = caseConvergingGateway(parallelConverging);
        if (result == null) result = caseGateway(parallelConverging);
        if (result == null) result = caseNode(parallelConverging);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.CONNECTOR:
      {
        Connector connector = (Connector)theEObject;
        T result = caseConnector(connector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.BASIC_CONNECTOR:
      {
        BasicConnector basicConnector = (BasicConnector)theEObject;
        T result = caseBasicConnector(basicConnector);
        if (result == null) result = caseConnector(basicConnector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.INPUT_DATA:
      {
        InputData inputData = (InputData)theEObject;
        T result = caseInputData(inputData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.TASK_NAME_INPUT:
      {
        TaskNameInput taskNameInput = (TaskNameInput)theEObject;
        T result = caseTaskNameInput(taskNameInput);
        if (result == null) result = caseInputData(taskNameInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.VARIABLE_BASED_INPUT:
      {
        VariableBasedInput variableBasedInput = (VariableBasedInput)theEObject;
        T result = caseVariableBasedInput(variableBasedInput);
        if (result == null) result = caseInputData(variableBasedInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.EVENT_BASED_INPUT:
      {
        EventBasedInput eventBasedInput = (EventBasedInput)theEObject;
        T result = caseEventBasedInput(eventBasedInput);
        if (result == null) result = caseInputData(eventBasedInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.OUTPUT_DATA:
      {
        OutputData outputData = (OutputData)theEObject;
        T result = caseOutputData(outputData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.CONDITIONAL_CONNECTOR:
      {
        ConditionalConnector conditionalConnector = (ConditionalConnector)theEObject;
        T result = caseConditionalConnector(conditionalConnector);
        if (result == null) result = caseConnector(conditionalConnector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.TEST:
      {
        Test test = (Test)theEObject;
        T result = caseTest(test);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.PROCESS_VARIABLE:
      {
        ProcessVariable processVariable = (ProcessVariable)theEObject;
        T result = caseProcessVariable(processVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.FIRE_SIGNAL:
      {
        FireSignal fireSignal = (FireSignal)theEObject;
        T result = caseFireSignal(fireSignal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.ASSERT_FLOW:
      {
        AssertFlow assertFlow = (AssertFlow)theEObject;
        T result = caseAssertFlow(assertFlow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case WorkflowDslPackage.ASSERT_WAIT:
      {
        AssertWait assertWait = (AssertWait)theEObject;
        T result = caseAssertWait(assertWait);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Workflow Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Workflow Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWorkflowDefinition(WorkflowDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Package</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Package</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePackage(workflowdsl.workflowDsl.Package object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Market Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Market Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMarketName(MarketName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Class Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Class Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClassName(ClassName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Based Conditional Varaible</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Based Conditional Varaible</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringBasedConditionalVaraible(StringBasedConditionalVaraible object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNode(Node object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Service Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Service Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseServiceTask(ServiceTask object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gateway</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gateway</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGateway(Gateway object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Diverging Gateway</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Diverging Gateway</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivergingGateway(DivergingGateway object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Converging Gateway</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Converging Gateway</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConvergingGateway(ConvergingGateway object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Start Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Start Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStartNode(StartNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEndNode(EndNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignal(Signal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Asyncronous Service Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Asyncronous Service Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAsyncronousServiceTask(AsyncronousServiceTask object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Syncronous Service Task</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Syncronous Service Task</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSyncronousServiceTask(SyncronousServiceTask object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exlcusive Diverging</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exlcusive Diverging</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExlcusiveDiverging(ExlcusiveDiverging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parallel Diverging</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parallel Diverging</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParallelDiverging(ParallelDiverging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exclusive Converging</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exclusive Converging</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExclusiveConverging(ExclusiveConverging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parallel Converging</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parallel Converging</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParallelConverging(ParallelConverging object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnector(Connector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Connector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Connector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicConnector(BasicConnector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputData(InputData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Task Name Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Task Name Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTaskNameInput(TaskNameInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Based Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Based Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableBasedInput(VariableBasedInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Based Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Based Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventBasedInput(EventBasedInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputData(OutputData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Conditional Connector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Conditional Connector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionalConnector(ConditionalConnector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Test</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Test</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTest(Test object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessVariable(ProcessVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fire Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fire Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFireSignal(FireSignal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assert Flow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assert Flow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertFlow(AssertFlow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assert Wait</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assert Wait</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertWait(AssertWait object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //WorkflowDslSwitch
