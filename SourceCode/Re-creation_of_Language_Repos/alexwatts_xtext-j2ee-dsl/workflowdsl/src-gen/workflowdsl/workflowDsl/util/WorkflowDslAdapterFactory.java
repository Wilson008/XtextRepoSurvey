/**
 * generated by Xtext 2.35.0
 */
package workflowdsl.workflowDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import workflowdsl.workflowDsl.AssertFlow;
import workflowdsl.workflowDsl.AssertWait;
import workflowdsl.workflowDsl.AsyncronousServiceTask;
import workflowdsl.workflowDsl.BasicConnector;
import workflowdsl.workflowDsl.ClassName;
import workflowdsl.workflowDsl.ConditionalConnector;
import workflowdsl.workflowDsl.Connector;
import workflowdsl.workflowDsl.ConvergingGateway;
import workflowdsl.workflowDsl.DivergingGateway;
import workflowdsl.workflowDsl.EndNode;
import workflowdsl.workflowDsl.Event;
import workflowdsl.workflowDsl.EventBasedInput;
import workflowdsl.workflowDsl.ExclusiveConverging;
import workflowdsl.workflowDsl.ExlcusiveDiverging;
import workflowdsl.workflowDsl.FireSignal;
import workflowdsl.workflowDsl.Gateway;
import workflowdsl.workflowDsl.Import;
import workflowdsl.workflowDsl.InputData;
import workflowdsl.workflowDsl.MarketName;
import workflowdsl.workflowDsl.Model;
import workflowdsl.workflowDsl.Node;
import workflowdsl.workflowDsl.OutputData;
import workflowdsl.workflowDsl.ParallelConverging;
import workflowdsl.workflowDsl.ParallelDiverging;
import workflowdsl.workflowDsl.ProcessVariable;
import workflowdsl.workflowDsl.ServiceTask;
import workflowdsl.workflowDsl.Signal;
import workflowdsl.workflowDsl.StartNode;
import workflowdsl.workflowDsl.StringBasedConditionalVaraible;
import workflowdsl.workflowDsl.SyncronousServiceTask;
import workflowdsl.workflowDsl.TaskNameInput;
import workflowdsl.workflowDsl.Test;
import workflowdsl.workflowDsl.Variable;
import workflowdsl.workflowDsl.VariableBasedInput;
import workflowdsl.workflowDsl.WorkflowDefinition;
import workflowdsl.workflowDsl.WorkflowDslPackage;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see workflowdsl.workflowDsl.WorkflowDslPackage
 * @generated
 */
public class WorkflowDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static WorkflowDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WorkflowDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = WorkflowDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WorkflowDslSwitch<Adapter> modelSwitch =
    new WorkflowDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseWorkflowDefinition(WorkflowDefinition object)
      {
        return createWorkflowDefinitionAdapter();
      }
      @Override
      public Adapter casePackage(workflowdsl.workflowDsl.Package object)
      {
        return createPackageAdapter();
      }
      @Override
      public Adapter caseMarketName(MarketName object)
      {
        return createMarketNameAdapter();
      }
      @Override
      public Adapter caseClassName(ClassName object)
      {
        return createClassNameAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseStringBasedConditionalVaraible(StringBasedConditionalVaraible object)
      {
        return createStringBasedConditionalVaraibleAdapter();
      }
      @Override
      public Adapter caseNode(Node object)
      {
        return createNodeAdapter();
      }
      @Override
      public Adapter caseServiceTask(ServiceTask object)
      {
        return createServiceTaskAdapter();
      }
      @Override
      public Adapter caseGateway(Gateway object)
      {
        return createGatewayAdapter();
      }
      @Override
      public Adapter caseDivergingGateway(DivergingGateway object)
      {
        return createDivergingGatewayAdapter();
      }
      @Override
      public Adapter caseConvergingGateway(ConvergingGateway object)
      {
        return createConvergingGatewayAdapter();
      }
      @Override
      public Adapter caseStartNode(StartNode object)
      {
        return createStartNodeAdapter();
      }
      @Override
      public Adapter caseEndNode(EndNode object)
      {
        return createEndNodeAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseAsyncronousServiceTask(AsyncronousServiceTask object)
      {
        return createAsyncronousServiceTaskAdapter();
      }
      @Override
      public Adapter caseSyncronousServiceTask(SyncronousServiceTask object)
      {
        return createSyncronousServiceTaskAdapter();
      }
      @Override
      public Adapter caseExlcusiveDiverging(ExlcusiveDiverging object)
      {
        return createExlcusiveDivergingAdapter();
      }
      @Override
      public Adapter caseParallelDiverging(ParallelDiverging object)
      {
        return createParallelDivergingAdapter();
      }
      @Override
      public Adapter caseExclusiveConverging(ExclusiveConverging object)
      {
        return createExclusiveConvergingAdapter();
      }
      @Override
      public Adapter caseParallelConverging(ParallelConverging object)
      {
        return createParallelConvergingAdapter();
      }
      @Override
      public Adapter caseConnector(Connector object)
      {
        return createConnectorAdapter();
      }
      @Override
      public Adapter caseBasicConnector(BasicConnector object)
      {
        return createBasicConnectorAdapter();
      }
      @Override
      public Adapter caseInputData(InputData object)
      {
        return createInputDataAdapter();
      }
      @Override
      public Adapter caseTaskNameInput(TaskNameInput object)
      {
        return createTaskNameInputAdapter();
      }
      @Override
      public Adapter caseVariableBasedInput(VariableBasedInput object)
      {
        return createVariableBasedInputAdapter();
      }
      @Override
      public Adapter caseEventBasedInput(EventBasedInput object)
      {
        return createEventBasedInputAdapter();
      }
      @Override
      public Adapter caseOutputData(OutputData object)
      {
        return createOutputDataAdapter();
      }
      @Override
      public Adapter caseConditionalConnector(ConditionalConnector object)
      {
        return createConditionalConnectorAdapter();
      }
      @Override
      public Adapter caseTest(Test object)
      {
        return createTestAdapter();
      }
      @Override
      public Adapter caseProcessVariable(ProcessVariable object)
      {
        return createProcessVariableAdapter();
      }
      @Override
      public Adapter caseFireSignal(FireSignal object)
      {
        return createFireSignalAdapter();
      }
      @Override
      public Adapter caseAssertFlow(AssertFlow object)
      {
        return createAssertFlowAdapter();
      }
      @Override
      public Adapter caseAssertWait(AssertWait object)
      {
        return createAssertWaitAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.WorkflowDefinition <em>Workflow Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.WorkflowDefinition
   * @generated
   */
  public Adapter createWorkflowDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Package <em>Package</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Package
   * @generated
   */
  public Adapter createPackageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.MarketName <em>Market Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.MarketName
   * @generated
   */
  public Adapter createMarketNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ClassName <em>Class Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ClassName
   * @generated
   */
  public Adapter createClassNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.StringBasedConditionalVaraible <em>String Based Conditional Varaible</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.StringBasedConditionalVaraible
   * @generated
   */
  public Adapter createStringBasedConditionalVaraibleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Node <em>Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Node
   * @generated
   */
  public Adapter createNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ServiceTask <em>Service Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ServiceTask
   * @generated
   */
  public Adapter createServiceTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Gateway <em>Gateway</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Gateway
   * @generated
   */
  public Adapter createGatewayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.DivergingGateway <em>Diverging Gateway</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.DivergingGateway
   * @generated
   */
  public Adapter createDivergingGatewayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ConvergingGateway <em>Converging Gateway</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ConvergingGateway
   * @generated
   */
  public Adapter createConvergingGatewayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.StartNode <em>Start Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.StartNode
   * @generated
   */
  public Adapter createStartNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.EndNode <em>End Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.EndNode
   * @generated
   */
  public Adapter createEndNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.AsyncronousServiceTask <em>Asyncronous Service Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.AsyncronousServiceTask
   * @generated
   */
  public Adapter createAsyncronousServiceTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.SyncronousServiceTask <em>Syncronous Service Task</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.SyncronousServiceTask
   * @generated
   */
  public Adapter createSyncronousServiceTaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ExlcusiveDiverging <em>Exlcusive Diverging</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ExlcusiveDiverging
   * @generated
   */
  public Adapter createExlcusiveDivergingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ParallelDiverging <em>Parallel Diverging</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ParallelDiverging
   * @generated
   */
  public Adapter createParallelDivergingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ExclusiveConverging <em>Exclusive Converging</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ExclusiveConverging
   * @generated
   */
  public Adapter createExclusiveConvergingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ParallelConverging <em>Parallel Converging</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ParallelConverging
   * @generated
   */
  public Adapter createParallelConvergingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Connector <em>Connector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Connector
   * @generated
   */
  public Adapter createConnectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.BasicConnector <em>Basic Connector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.BasicConnector
   * @generated
   */
  public Adapter createBasicConnectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.InputData <em>Input Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.InputData
   * @generated
   */
  public Adapter createInputDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.TaskNameInput <em>Task Name Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.TaskNameInput
   * @generated
   */
  public Adapter createTaskNameInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.VariableBasedInput <em>Variable Based Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.VariableBasedInput
   * @generated
   */
  public Adapter createVariableBasedInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.EventBasedInput <em>Event Based Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.EventBasedInput
   * @generated
   */
  public Adapter createEventBasedInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.OutputData <em>Output Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.OutputData
   * @generated
   */
  public Adapter createOutputDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ConditionalConnector <em>Conditional Connector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ConditionalConnector
   * @generated
   */
  public Adapter createConditionalConnectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.Test <em>Test</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.Test
   * @generated
   */
  public Adapter createTestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.ProcessVariable <em>Process Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.ProcessVariable
   * @generated
   */
  public Adapter createProcessVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.FireSignal <em>Fire Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.FireSignal
   * @generated
   */
  public Adapter createFireSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.AssertFlow <em>Assert Flow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.AssertFlow
   * @generated
   */
  public Adapter createAssertFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link workflowdsl.workflowDsl.AssertWait <em>Assert Wait</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see workflowdsl.workflowDsl.AssertWait
   * @generated
   */
  public Adapter createAssertWaitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //WorkflowDslAdapterFactory
