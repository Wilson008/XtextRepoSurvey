/*
 * generated by Xtext 2.35.0
 */
grammar InternalWorkflowDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package workflowdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package workflowdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import workflowdsl.services.WorkflowDslGrammarAccess;

}

@parser::members {

 	private WorkflowDslGrammarAccess grammarAccess;

    public InternalWorkflowDslParser(TokenStream input, WorkflowDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected WorkflowDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"workflowdsl.WorkflowDsl.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getWorkflowDefinitionsWorkflowDefinitionParserRuleCall_1_0());
				}
				lv_workflowDefinitions_1_0=ruleWorkflowDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"workflowDefinitions",
						lv_workflowDefinitions_1_0,
						"workflowdsl.WorkflowDsl.WorkflowDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildCard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"workflowdsl.WorkflowDsl.QualifiedNameWithWildCard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWorkflowDefinition
entryRuleWorkflowDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWorkflowDefinitionRule()); }
	iv_ruleWorkflowDefinition=ruleWorkflowDefinition
	{ $current=$iv_ruleWorkflowDefinition.current; }
	EOF;

// Rule WorkflowDefinition
ruleWorkflowDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='workflow definition'
		{
			newLeafNode(otherlv_0, grammarAccess.getWorkflowDefinitionAccess().getWorkflowDefinitionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getWorkflowDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWorkflowDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWorkflowDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getClassNameClassNameParserRuleCall_3_0());
				}
				lv_className_3_0=ruleClassName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					set(
						$current,
						"className",
						lv_className_3_0,
						"workflowdsl.WorkflowDsl.ClassName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getPackagesPackageParserRuleCall_4_0());
				}
				lv_packages_4_0=rulePackage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					set(
						$current,
						"packages",
						lv_packages_4_0,
						"workflowdsl.WorkflowDsl.Package");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getEventsEventParserRuleCall_5_0());
				}
				lv_events_5_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					add(
						$current,
						"events",
						lv_events_5_0,
						"workflowdsl.WorkflowDsl.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getVariablesVariableParserRuleCall_6_0());
				}
				lv_variables_6_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					add(
						$current,
						"variables",
						lv_variables_6_0,
						"workflowdsl.WorkflowDsl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getNodesNodeParserRuleCall_7_0());
				}
				lv_nodes_7_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_7_0,
						"workflowdsl.WorkflowDsl.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getConnectorsConnectorParserRuleCall_8_0());
				}
				lv_connectors_8_0=ruleConnector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					add(
						$current,
						"connectors",
						lv_connectors_8_0,
						"workflowdsl.WorkflowDsl.Connector");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getWorkflowDefinitionAccess().getTestsTestParserRuleCall_9_0());
				}
				lv_tests_9_0=ruleTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWorkflowDefinitionRule());
					}
					add(
						$current,
						"tests",
						lv_tests_9_0,
						"workflowdsl.WorkflowDsl.Test");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getWorkflowDefinitionAccess().getRightCurlyBracketKeyword_10());
		}
	)
;

// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current; }
	EOF;

// Rule Package
rulePackage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleClassName
entryRuleClassName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassNameRule()); }
	iv_ruleClassName=ruleClassName
	{ $current=$iv_ruleClassName.current; }
	EOF;

// Rule ClassName
ruleClassName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='class name'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassNameAccess().getClassNameKeyword_0());
		}
		(
			(
				lv_className_1_0=RULE_STRING
				{
					newLeafNode(lv_className_1_0, grammarAccess.getClassNameAccess().getClassNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassNameRule());
					}
					setWithLastConsumed(
						$current,
						"className",
						lv_className_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='event'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getVariableAccess().getStringBasedConditionalVaraibleParserRuleCall());
	}
	this_StringBasedConditionalVaraible_0=ruleStringBasedConditionalVaraible
	{
		$current = $this_StringBasedConditionalVaraible_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleStringBasedConditionalVaraible
entryRuleStringBasedConditionalVaraible returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringBasedConditionalVaraibleRule()); }
	iv_ruleStringBasedConditionalVaraible=ruleStringBasedConditionalVaraible
	{ $current=$iv_ruleStringBasedConditionalVaraible.current; }
	EOF;

// Rule StringBasedConditionalVaraible
ruleStringBasedConditionalVaraible returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='string based conditional variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getStringBasedConditionalVaraibleAccess().getStringBasedConditionalVariableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStringBasedConditionalVaraibleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringBasedConditionalVaraibleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeAccess().getStartNodeParserRuleCall_0());
		}
		this_StartNode_0=ruleStartNode
		{
			$current = $this_StartNode_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getEndNodeParserRuleCall_1());
		}
		this_EndNode_1=ruleEndNode
		{
			$current = $this_EndNode_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getServiceTaskParserRuleCall_2());
		}
		this_ServiceTask_2=ruleServiceTask
		{
			$current = $this_ServiceTask_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getGatewayParserRuleCall_3());
		}
		this_Gateway_3=ruleGateway
		{
			$current = $this_Gateway_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeAccess().getSignalParserRuleCall_4());
		}
		this_Signal_4=ruleSignal
		{
			$current = $this_Signal_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleServiceTask
entryRuleServiceTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceTaskRule()); }
	iv_ruleServiceTask=ruleServiceTask
	{ $current=$iv_ruleServiceTask.current; }
	EOF;

// Rule ServiceTask
ruleServiceTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getServiceTaskAccess().getAsyncronousServiceTaskParserRuleCall_0());
		}
		this_AsyncronousServiceTask_0=ruleAsyncronousServiceTask
		{
			$current = $this_AsyncronousServiceTask_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getServiceTaskAccess().getSyncronousServiceTaskParserRuleCall_1());
		}
		this_SyncronousServiceTask_1=ruleSyncronousServiceTask
		{
			$current = $this_SyncronousServiceTask_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGateway
entryRuleGateway returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGatewayRule()); }
	iv_ruleGateway=ruleGateway
	{ $current=$iv_ruleGateway.current; }
	EOF;

// Rule Gateway
ruleGateway returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGatewayAccess().getDivergingGatewayParserRuleCall_0());
		}
		this_DivergingGateway_0=ruleDivergingGateway
		{
			$current = $this_DivergingGateway_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGatewayAccess().getConvergingGatewayParserRuleCall_1());
		}
		this_ConvergingGateway_1=ruleConvergingGateway
		{
			$current = $this_ConvergingGateway_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDivergingGateway
entryRuleDivergingGateway returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivergingGatewayRule()); }
	iv_ruleDivergingGateway=ruleDivergingGateway
	{ $current=$iv_ruleDivergingGateway.current; }
	EOF;

// Rule DivergingGateway
ruleDivergingGateway returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDivergingGatewayAccess().getExlcusiveDivergingParserRuleCall_0());
		}
		this_ExlcusiveDiverging_0=ruleExlcusiveDiverging
		{
			$current = $this_ExlcusiveDiverging_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDivergingGatewayAccess().getParallelDivergingParserRuleCall_1());
		}
		this_ParallelDiverging_1=ruleParallelDiverging
		{
			$current = $this_ParallelDiverging_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConvergingGateway
entryRuleConvergingGateway returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConvergingGatewayRule()); }
	iv_ruleConvergingGateway=ruleConvergingGateway
	{ $current=$iv_ruleConvergingGateway.current; }
	EOF;

// Rule ConvergingGateway
ruleConvergingGateway returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConvergingGatewayAccess().getExclusiveConvergingParserRuleCall_0());
		}
		this_ExclusiveConverging_0=ruleExclusiveConverging
		{
			$current = $this_ExclusiveConverging_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConvergingGatewayAccess().getParallelConvergingParserRuleCall_1());
		}
		this_ParallelConverging_1=ruleParallelConverging
		{
			$current = $this_ParallelConverging_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStartNode
entryRuleStartNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartNodeRule()); }
	iv_ruleStartNode=ruleStartNode
	{ $current=$iv_ruleStartNode.current; }
	EOF;

// Rule StartNode
ruleStartNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='start node'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartNodeAccess().getStartNodeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStartNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEndNode
entryRuleEndNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndNodeRule()); }
	iv_ruleEndNode=ruleEndNode
	{ $current=$iv_ruleEndNode.current; }
	EOF;

// Rule EndNode
ruleEndNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='end node'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndNodeAccess().getEndNodeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEndNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='signal'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getSignalKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSignalAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSignalAccess().getEventEventCrossReference_3_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalAccess().getOutputOutputDataParserRuleCall_4_0());
				}
				lv_output_4_0=ruleOutputData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalRule());
					}
					set(
						$current,
						"output",
						lv_output_4_0,
						"workflowdsl.WorkflowDsl.OutputData");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSignalAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleAsyncronousServiceTask
entryRuleAsyncronousServiceTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsyncronousServiceTaskRule()); }
	iv_ruleAsyncronousServiceTask=ruleAsyncronousServiceTask
	{ $current=$iv_ruleAsyncronousServiceTask.current; }
	EOF;

// Rule AsyncronousServiceTask
ruleAsyncronousServiceTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='asyncronous task'
		{
			newLeafNode(otherlv_0, grammarAccess.getAsyncronousServiceTaskAccess().getAsyncronousTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAsyncronousServiceTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAsyncronousServiceTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAsyncronousServiceTaskAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAsyncronousServiceTaskAccess().getInputsInputDataParserRuleCall_3_0());
				}
				lv_inputs_3_0=ruleInputData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAsyncronousServiceTaskRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_3_0,
						"workflowdsl.WorkflowDsl.InputData");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAsyncronousServiceTaskAccess().getOutputOutputDataParserRuleCall_4_0());
				}
				lv_output_4_0=ruleOutputData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAsyncronousServiceTaskRule());
					}
					set(
						$current,
						"output",
						lv_output_4_0,
						"workflowdsl.WorkflowDsl.OutputData");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getAsyncronousServiceTaskAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSyncronousServiceTask
entryRuleSyncronousServiceTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSyncronousServiceTaskRule()); }
	iv_ruleSyncronousServiceTask=ruleSyncronousServiceTask
	{ $current=$iv_ruleSyncronousServiceTask.current; }
	EOF;

// Rule SyncronousServiceTask
ruleSyncronousServiceTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='syncronous task'
		{
			newLeafNode(otherlv_0, grammarAccess.getSyncronousServiceTaskAccess().getSyncronousTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSyncronousServiceTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSyncronousServiceTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSyncronousServiceTaskAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSyncronousServiceTaskAccess().getInputsInputDataParserRuleCall_3_0());
				}
				lv_inputs_3_0=ruleInputData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSyncronousServiceTaskRule());
					}
					add(
						$current,
						"inputs",
						lv_inputs_3_0,
						"workflowdsl.WorkflowDsl.InputData");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSyncronousServiceTaskAccess().getOutputOutputDataParserRuleCall_4_0());
				}
				lv_output_4_0=ruleOutputData
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSyncronousServiceTaskRule());
					}
					set(
						$current,
						"output",
						lv_output_4_0,
						"workflowdsl.WorkflowDsl.OutputData");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSyncronousServiceTaskAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleExlcusiveDiverging
entryRuleExlcusiveDiverging returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExlcusiveDivergingRule()); }
	iv_ruleExlcusiveDiverging=ruleExlcusiveDiverging
	{ $current=$iv_ruleExlcusiveDiverging.current; }
	EOF;

// Rule ExlcusiveDiverging
ruleExlcusiveDiverging returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exclusive diverging'
		{
			newLeafNode(otherlv_0, grammarAccess.getExlcusiveDivergingAccess().getExclusiveDivergingKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExlcusiveDivergingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExlcusiveDivergingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleParallelDiverging
entryRuleParallelDiverging returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParallelDivergingRule()); }
	iv_ruleParallelDiverging=ruleParallelDiverging
	{ $current=$iv_ruleParallelDiverging.current; }
	EOF;

// Rule ParallelDiverging
ruleParallelDiverging returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parallel diverging'
		{
			newLeafNode(otherlv_0, grammarAccess.getParallelDivergingAccess().getParallelDivergingKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParallelDivergingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParallelDivergingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleExclusiveConverging
entryRuleExclusiveConverging returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExclusiveConvergingRule()); }
	iv_ruleExclusiveConverging=ruleExclusiveConverging
	{ $current=$iv_ruleExclusiveConverging.current; }
	EOF;

// Rule ExclusiveConverging
ruleExclusiveConverging returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='exclusive converging'
		{
			newLeafNode(otherlv_0, grammarAccess.getExclusiveConvergingAccess().getExclusiveConvergingKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExclusiveConvergingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExclusiveConvergingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleParallelConverging
entryRuleParallelConverging returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParallelConvergingRule()); }
	iv_ruleParallelConverging=ruleParallelConverging
	{ $current=$iv_ruleParallelConverging.current; }
	EOF;

// Rule ParallelConverging
ruleParallelConverging returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parallel converging'
		{
			newLeafNode(otherlv_0, grammarAccess.getParallelConvergingAccess().getParallelConvergingKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParallelConvergingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParallelConvergingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleConnector
entryRuleConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConnectorRule()); }
	iv_ruleConnector=ruleConnector
	{ $current=$iv_ruleConnector.current; }
	EOF;

// Rule Connector
ruleConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConnectorAccess().getBasicConnectorParserRuleCall_0());
		}
		this_BasicConnector_0=ruleBasicConnector
		{
			$current = $this_BasicConnector_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConnectorAccess().getConditionalConnectorParserRuleCall_1());
		}
		this_ConditionalConnector_1=ruleConditionalConnector
		{
			$current = $this_ConditionalConnector_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBasicConnector
entryRuleBasicConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicConnectorRule()); }
	iv_ruleBasicConnector=ruleBasicConnector
	{ $current=$iv_ruleBasicConnector.current; }
	EOF;

// Rule BasicConnector
ruleBasicConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='connect'
		{
			newLeafNode(otherlv_0, grammarAccess.getBasicConnectorAccess().getConnectKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicConnectorRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getBasicConnectorAccess().getFromNodeCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBasicConnectorRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getBasicConnectorAccess().getToNodeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleInputData
entryRuleInputData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputDataRule()); }
	iv_ruleInputData=ruleInputData
	{ $current=$iv_ruleInputData.current; }
	EOF;

// Rule InputData
ruleInputData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInputDataAccess().getTaskNameInputParserRuleCall_0());
		}
		this_TaskNameInput_0=ruleTaskNameInput
		{
			$current = $this_TaskNameInput_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputDataAccess().getVariableBasedInputParserRuleCall_1());
		}
		this_VariableBasedInput_1=ruleVariableBasedInput
		{
			$current = $this_VariableBasedInput_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInputDataAccess().getEventBasedInputParserRuleCall_2());
		}
		this_EventBasedInput_2=ruleEventBasedInput
		{
			$current = $this_EventBasedInput_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTaskNameInput
entryRuleTaskNameInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskNameInputRule()); }
	iv_ruleTaskNameInput=ruleTaskNameInput
	{ $current=$iv_ruleTaskNameInput.current; }
	EOF;

// Rule TaskNameInput
ruleTaskNameInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='task name input'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskNameInputAccess().getTaskNameInputKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTaskNameInputAccess().getTaskNameInputAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleVariableBasedInput
entryRuleVariableBasedInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableBasedInputRule()); }
	iv_ruleVariableBasedInput=ruleVariableBasedInput
	{ $current=$iv_ruleVariableBasedInput.current; }
	EOF;

// Rule VariableBasedInput
ruleVariableBasedInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='variable based input'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableBasedInputAccess().getVariableBasedInputKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableBasedInputRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableBasedInputAccess().getVariableStringBasedConditionalVaraibleCrossReference_1_0());
				}
			)
		)
		(
			(
				lv_eventParameterName_2_0=RULE_STRING
				{
					newLeafNode(lv_eventParameterName_2_0, grammarAccess.getVariableBasedInputAccess().getEventParameterNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableBasedInputRule());
					}
					setWithLastConsumed(
						$current,
						"eventParameterName",
						lv_eventParameterName_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEventBasedInput
entryRuleEventBasedInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventBasedInputRule()); }
	iv_ruleEventBasedInput=ruleEventBasedInput
	{ $current=$iv_ruleEventBasedInput.current; }
	EOF;

// Rule EventBasedInput
ruleEventBasedInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='map based input'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventBasedInputAccess().getMapBasedInputKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventBasedInputRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEventBasedInputAccess().getEventEventCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventBasedInputRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getEventBasedInputAccess().getVariableStringBasedConditionalVaraibleCrossReference_2_0());
				}
			)
		)
		(
			(
				lv_eventParameterName_3_0=RULE_STRING
				{
					newLeafNode(lv_eventParameterName_3_0, grammarAccess.getEventBasedInputAccess().getEventParameterNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventBasedInputRule());
					}
					setWithLastConsumed(
						$current,
						"eventParameterName",
						lv_eventParameterName_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleOutputData
entryRuleOutputData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputDataRule()); }
	iv_ruleOutputData=ruleOutputData
	{ $current=$iv_ruleOutputData.current; }
	EOF;

// Rule OutputData
ruleOutputData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputDataAccess().getOutputKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputDataRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getOutputDataAccess().getValueStringBasedConditionalVaraibleCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConditionalConnector
entryRuleConditionalConnector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalConnectorRule()); }
	iv_ruleConditionalConnector=ruleConditionalConnector
	{ $current=$iv_ruleConditionalConnector.current; }
	EOF;

// Rule ConditionalConnector
ruleConditionalConnector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='conditional connector'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionalConnectorAccess().getConditionalConnectorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConditionalConnectorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalConnectorRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getConditionalConnectorAccess().getFromNodeCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalConnectorRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getConditionalConnectorAccess().getToNodeCrossReference_3_0());
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalConnectorAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalConnectorRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getConditionalConnectorAccess().getEventEventCrossReference_5_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalConnectorRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getConditionalConnectorAccess().getStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0());
				}
			)
		)
		(
			(
				lv_value_7_0=RULE_STRING
				{
					newLeafNode(lv_value_7_0, grammarAccess.getConditionalConnectorAccess().getValueSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalConnectorRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getConditionalConnectorAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	iv_ruleTest=ruleTest
	{ $current=$iv_ruleTest.current; }
	EOF;

// Rule Test
ruleTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='test'
		{
			newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTestKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTestAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTestRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAccess().getProcessVariablesProcessVariableParserRuleCall_3_0());
				}
				lv_processVariables_3_0=ruleProcessVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRule());
					}
					add(
						$current,
						"processVariables",
						lv_processVariables_3_0,
						"workflowdsl.WorkflowDsl.ProcessVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAccess().getFireSignalFireSignalParserRuleCall_4_0());
				}
				lv_fireSignal_4_0=ruleFireSignal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRule());
					}
					add(
						$current,
						"fireSignal",
						lv_fireSignal_4_0,
						"workflowdsl.WorkflowDsl.FireSignal");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAccess().getAssertFlowAssertFlowParserRuleCall_5_0());
				}
				lv_assertFlow_5_0=ruleAssertFlow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRule());
					}
					add(
						$current,
						"assertFlow",
						lv_assertFlow_5_0,
						"workflowdsl.WorkflowDsl.AssertFlow");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAccess().getAssertWaitAssertWaitParserRuleCall_6_0());
				}
				lv_assertWait_6_0=ruleAssertWait
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRule());
					}
					add(
						$current,
						"assertWait",
						lv_assertWait_6_0,
						"workflowdsl.WorkflowDsl.AssertWait");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getTestAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleProcessVariable
entryRuleProcessVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessVariableRule()); }
	iv_ruleProcessVariable=ruleProcessVariable
	{ $current=$iv_ruleProcessVariable.current; }
	EOF;

// Rule ProcessVariable
ruleProcessVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='process variable'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessVariableAccess().getProcessVariableKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessVariableRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getProcessVariableAccess().getVariableStringBasedConditionalVaraibleCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessVariableRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getProcessVariableAccess().getValueConditionalConnectorCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleFireSignal
entryRuleFireSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFireSignalRule()); }
	iv_ruleFireSignal=ruleFireSignal
	{ $current=$iv_ruleFireSignal.current; }
	EOF;

// Rule FireSignal
ruleFireSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fire signal'
		{
			newLeafNode(otherlv_0, grammarAccess.getFireSignalAccess().getFireSignalKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFireSignalRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFireSignalAccess().getFireSignalSignalCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFireSignalAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFireSignalRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getFireSignalAccess().getCaseConditionalConnectorCrossReference_3_0());
				}
			)
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getFireSignalAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAssertFlow
entryRuleAssertFlow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertFlowRule()); }
	iv_ruleAssertFlow=ruleAssertFlow
	{ $current=$iv_ruleAssertFlow.current; }
	EOF;

// Rule AssertFlow
ruleAssertFlow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assertflow'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertFlowAccess().getAssertflowKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssertFlowAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssertFlowRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAssertFlowAccess().getNodesNodeCrossReference_2_0());
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssertFlowAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAssertWait
entryRuleAssertWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertWaitRule()); }
	iv_ruleAssertWait=ruleAssertWait
	{ $current=$iv_ruleAssertWait.current; }
	EOF;

// Rule AssertWait
ruleAssertWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assertWait'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertWaitAccess().getAssertWaitKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssertWaitAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssertWaitRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getAssertWaitAccess().getNodesNodeCrossReference_2_0());
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssertWaitAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleQualifiedNameWithWildCard
entryRuleQualifiedNameWithWildCard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildCardRule()); }
	iv_ruleQualifiedNameWithWildCard=ruleQualifiedNameWithWildCard
	{ $current=$iv_ruleQualifiedNameWithWildCard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildCard
ruleQualifiedNameWithWildCard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildCardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildCardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
