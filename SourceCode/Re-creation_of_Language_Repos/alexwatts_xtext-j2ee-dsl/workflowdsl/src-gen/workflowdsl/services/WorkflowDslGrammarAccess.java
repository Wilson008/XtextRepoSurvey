/*
 * generated by Xtext 2.35.0
 */
package workflowdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WorkflowDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cWorkflowDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWorkflowDefinitionsWorkflowDefinitionParserRuleCall_1_0 = (RuleCall)cWorkflowDefinitionsAssignment_1.eContents().get(0);
		
		//Model:
		//    imports+=Import+
		//    workflowDefinitions+=WorkflowDefinition+;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import+
		//workflowDefinitions+=WorkflowDefinition+
		public Group getGroup() { return cGroup; }
		
		//imports+=Import+
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//workflowDefinitions+=WorkflowDefinition+
		public Assignment getWorkflowDefinitionsAssignment_1() { return cWorkflowDefinitionsAssignment_1; }
		
		//WorkflowDefinition
		public RuleCall getWorkflowDefinitionsWorkflowDefinitionParserRuleCall_1_0() { return cWorkflowDefinitionsWorkflowDefinitionParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//    'import' importedNamespace=QualifiedNameWithWildCard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}
	public class WorkflowDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.WorkflowDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowDefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameClassNameParserRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		private final Assignment cPackagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPackagesPackageParserRuleCall_4_0 = (RuleCall)cPackagesAssignment_4.eContents().get(0);
		private final Assignment cEventsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventsEventParserRuleCall_5_0 = (RuleCall)cEventsAssignment_5.eContents().get(0);
		private final Assignment cVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVariablesVariableParserRuleCall_6_0 = (RuleCall)cVariablesAssignment_6.eContents().get(0);
		private final Assignment cNodesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNodesNodeParserRuleCall_7_0 = (RuleCall)cNodesAssignment_7.eContents().get(0);
		private final Assignment cConnectorsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConnectorsConnectorParserRuleCall_8_0 = (RuleCall)cConnectorsAssignment_8.eContents().get(0);
		private final Assignment cTestsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTestsTestParserRuleCall_9_0 = (RuleCall)cTestsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//WorkflowDefinition:
		//    'workflow definition' name=ID '{'
		//        className=ClassName
		//        packages=Package
		//        events+=Event*
		//        variables+=Variable*
		//        nodes+=Node+
		//        connectors+=Connector+
		//        tests+=Test+
		//     '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'workflow definition' name=ID '{'
		//    className=ClassName
		//    packages=Package
		//    events+=Event*
		//    variables+=Variable*
		//    nodes+=Node+
		//    connectors+=Connector+
		//    tests+=Test+
		// '}'
		public Group getGroup() { return cGroup; }
		
		//'workflow definition'
		public Keyword getWorkflowDefinitionKeyword_0() { return cWorkflowDefinitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//className=ClassName
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }
		
		//ClassName
		public RuleCall getClassNameClassNameParserRuleCall_3_0() { return cClassNameClassNameParserRuleCall_3_0; }
		
		//packages=Package
		public Assignment getPackagesAssignment_4() { return cPackagesAssignment_4; }
		
		//Package
		public RuleCall getPackagesPackageParserRuleCall_4_0() { return cPackagesPackageParserRuleCall_4_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_5() { return cEventsAssignment_5; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_5_0() { return cEventsEventParserRuleCall_5_0; }
		
		//variables+=Variable*
		public Assignment getVariablesAssignment_6() { return cVariablesAssignment_6; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_0() { return cVariablesVariableParserRuleCall_6_0; }
		
		//nodes+=Node+
		public Assignment getNodesAssignment_7() { return cNodesAssignment_7; }
		
		//Node
		public RuleCall getNodesNodeParserRuleCall_7_0() { return cNodesNodeParserRuleCall_7_0; }
		
		//connectors+=Connector+
		public Assignment getConnectorsAssignment_8() { return cConnectorsAssignment_8; }
		
		//Connector
		public RuleCall getConnectorsConnectorParserRuleCall_8_0() { return cConnectorsConnectorParserRuleCall_8_0; }
		
		//tests+=Test+
		public Assignment getTestsAssignment_9() { return cTestsAssignment_9; }
		
		//Test
		public RuleCall getTestsTestParserRuleCall_9_0() { return cTestsTestParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Package:
		//    'package' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=ID
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class MarketNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.MarketName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMarketNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMarketNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMarketNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cMarketNameAssignment_1.eContents().get(0);
		
		//MarketName:
		//    'market name' marketName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'market name' marketName=STRING
		public Group getGroup() { return cGroup; }
		
		//'market name'
		public Keyword getMarketNameKeyword_0() { return cMarketNameKeyword_0; }
		
		//marketName=STRING
		public Assignment getMarketNameAssignment_1() { return cMarketNameAssignment_1; }
		
		//STRING
		public RuleCall getMarketNameSTRINGTerminalRuleCall_1_0() { return cMarketNameSTRINGTerminalRuleCall_1_0; }
	}
	public class ClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ClassName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cClassNameAssignment_1.eContents().get(0);
		
		//ClassName:
		//    'class name' className=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'class name' className=STRING
		public Group getGroup() { return cGroup; }
		
		//'class name'
		public Keyword getClassNameKeyword_0() { return cClassNameKeyword_0; }
		
		//className=STRING
		public Assignment getClassNameAssignment_1() { return cClassNameAssignment_1; }
		
		//STRING
		public RuleCall getClassNameSTRINGTerminalRuleCall_1_0() { return cClassNameSTRINGTerminalRuleCall_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//    'event' name=ID ;
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Variable");
		private final RuleCall cStringBasedConditionalVaraibleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Variable:
		//    StringBasedConditionalVaraible;
		@Override public ParserRule getRule() { return rule; }
		
		//StringBasedConditionalVaraible
		public RuleCall getStringBasedConditionalVaraibleParserRuleCall() { return cStringBasedConditionalVaraibleParserRuleCall; }
	}
	public class StringBasedConditionalVaraibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.StringBasedConditionalVaraible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringBasedConditionalVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StringBasedConditionalVaraible:
		//    'string based conditional variable' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'string based conditional variable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'string based conditional variable'
		public Keyword getStringBasedConditionalVariableKeyword_0() { return cStringBasedConditionalVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cServiceTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGatewayParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSignalParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Node:
		//    StartNode | EndNode | ServiceTask | Gateway | Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//StartNode | EndNode | ServiceTask | Gateway | Signal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartNode
		public RuleCall getStartNodeParserRuleCall_0() { return cStartNodeParserRuleCall_0; }
		
		//EndNode
		public RuleCall getEndNodeParserRuleCall_1() { return cEndNodeParserRuleCall_1; }
		
		//ServiceTask
		public RuleCall getServiceTaskParserRuleCall_2() { return cServiceTaskParserRuleCall_2; }
		
		//Gateway
		public RuleCall getGatewayParserRuleCall_3() { return cGatewayParserRuleCall_3; }
		
		//Signal
		public RuleCall getSignalParserRuleCall_4() { return cSignalParserRuleCall_4; }
	}
	public class ServiceTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ServiceTask");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAsyncronousServiceTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSyncronousServiceTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ServiceTask:
		//    AsyncronousServiceTask | SyncronousServiceTask;
		@Override public ParserRule getRule() { return rule; }
		
		//AsyncronousServiceTask | SyncronousServiceTask
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AsyncronousServiceTask
		public RuleCall getAsyncronousServiceTaskParserRuleCall_0() { return cAsyncronousServiceTaskParserRuleCall_0; }
		
		//SyncronousServiceTask
		public RuleCall getSyncronousServiceTaskParserRuleCall_1() { return cSyncronousServiceTaskParserRuleCall_1; }
	}
	public class GatewayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Gateway");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDivergingGatewayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConvergingGatewayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Gateway:
		//        DivergingGateway | ConvergingGateway;
		@Override public ParserRule getRule() { return rule; }
		
		//DivergingGateway | ConvergingGateway
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DivergingGateway
		public RuleCall getDivergingGatewayParserRuleCall_0() { return cDivergingGatewayParserRuleCall_0; }
		
		//ConvergingGateway
		public RuleCall getConvergingGatewayParserRuleCall_1() { return cConvergingGatewayParserRuleCall_1; }
	}
	public class DivergingGatewayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.DivergingGateway");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExlcusiveDivergingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelDivergingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DivergingGateway:
		//    ExlcusiveDiverging | ParallelDiverging;
		@Override public ParserRule getRule() { return rule; }
		
		//ExlcusiveDiverging | ParallelDiverging
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExlcusiveDiverging
		public RuleCall getExlcusiveDivergingParserRuleCall_0() { return cExlcusiveDivergingParserRuleCall_0; }
		
		//ParallelDiverging
		public RuleCall getParallelDivergingParserRuleCall_1() { return cParallelDivergingParserRuleCall_1; }
	}
	public class ConvergingGatewayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ConvergingGateway");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExclusiveConvergingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParallelConvergingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConvergingGateway:
		//    ExclusiveConverging | ParallelConverging;
		@Override public ParserRule getRule() { return rule; }
		
		//ExclusiveConverging | ParallelConverging
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExclusiveConverging
		public RuleCall getExclusiveConvergingParserRuleCall_0() { return cExclusiveConvergingParserRuleCall_0; }
		
		//ParallelConverging
		public RuleCall getParallelConvergingParserRuleCall_1() { return cParallelConvergingParserRuleCall_1; }
	}
	public class StartNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.StartNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StartNode:
		//    'start node' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'start node' name=ID
		public Group getGroup() { return cGroup; }
		
		//'start node'
		public Keyword getStartNodeKeyword_0() { return cStartNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EndNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.EndNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EndNode:
		//    'end node' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'end node' name=ID
		public Group getGroup() { return cGroup; }
		
		//'end node'
		public Keyword getEndNodeKeyword_0() { return cEndNodeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEventEventCrossReference_3_0 = (CrossReference)cEventAssignment_3.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_3_0_1 = (RuleCall)cEventEventCrossReference_3_0.eContents().get(1);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputOutputDataParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Signal:
		//    'signal' name=ID '{'
		//        event=[Event]
		//        output=OutputData?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'signal' name=ID '{'
		//    event=[Event]
		//    output=OutputData?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'signal'
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//event=[Event]
		public Assignment getEventAssignment_3() { return cEventAssignment_3; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_3_0() { return cEventEventCrossReference_3_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_3_0_1() { return cEventEventIDTerminalRuleCall_3_0_1; }
		
		//output=OutputData?
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//OutputData
		public RuleCall getOutputOutputDataParserRuleCall_4_0() { return cOutputOutputDataParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AsyncronousServiceTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.AsyncronousServiceTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsyncronousTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputDataParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputOutputDataParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AsyncronousServiceTask:
		//    'asyncronous task' name=ID '{'
		//         inputs+=InputData*
		//         output=OutputData?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'asyncronous task' name=ID '{'
		//     inputs+=InputData*
		//     output=OutputData?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'asyncronous task'
		public Keyword getAsyncronousTaskKeyword_0() { return cAsyncronousTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//inputs+=InputData*
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_3_0() { return cInputsInputDataParserRuleCall_3_0; }
		
		//output=OutputData?
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//OutputData
		public RuleCall getOutputOutputDataParserRuleCall_4_0() { return cOutputOutputDataParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SyncronousServiceTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.SyncronousServiceTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyncronousTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsInputDataParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputOutputDataParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SyncronousServiceTask:
		//    'syncronous task' name=ID '{'
		//         inputs+=InputData*
		//         output=OutputData?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'syncronous task' name=ID '{'
		//     inputs+=InputData*
		//     output=OutputData?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'syncronous task'
		public Keyword getSyncronousTaskKeyword_0() { return cSyncronousTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//inputs+=InputData*
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }
		
		//InputData
		public RuleCall getInputsInputDataParserRuleCall_3_0() { return cInputsInputDataParserRuleCall_3_0; }
		
		//output=OutputData?
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }
		
		//OutputData
		public RuleCall getOutputOutputDataParserRuleCall_4_0() { return cOutputOutputDataParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ExlcusiveDivergingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ExlcusiveDiverging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveDivergingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ExlcusiveDiverging:
		//    'exclusive diverging' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'exclusive diverging' name=ID
		public Group getGroup() { return cGroup; }
		
		//'exclusive diverging'
		public Keyword getExclusiveDivergingKeyword_0() { return cExclusiveDivergingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParallelDivergingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ParallelDiverging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelDivergingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParallelDiverging:
		//    'parallel diverging' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallel diverging' name=ID
		public Group getGroup() { return cGroup; }
		
		//'parallel diverging'
		public Keyword getParallelDivergingKeyword_0() { return cParallelDivergingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ExclusiveConvergingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ExclusiveConverging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclusiveConvergingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ExclusiveConverging:
		//    'exclusive converging' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'exclusive converging' name=ID
		public Group getGroup() { return cGroup; }
		
		//'exclusive converging'
		public Keyword getExclusiveConvergingKeyword_0() { return cExclusiveConvergingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParallelConvergingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ParallelConverging");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelConvergingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParallelConverging:
		//    'parallel converging' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'parallel converging' name=ID
		public Group getGroup() { return cGroup; }
		
		//'parallel converging'
		public Keyword getParallelConvergingKeyword_0() { return cParallelConvergingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Connector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicConnectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalConnectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Connector:
		//    BasicConnector | ConditionalConnector;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicConnector | ConditionalConnector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicConnector
		public RuleCall getBasicConnectorParserRuleCall_0() { return cBasicConnectorParserRuleCall_0; }
		
		//ConditionalConnector
		public RuleCall getConditionalConnectorParserRuleCall_1() { return cConditionalConnectorParserRuleCall_1; }
	}
	public class BasicConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.BasicConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFromNodeCrossReference_1_0 = (CrossReference)cFromAssignment_1.eContents().get(0);
		private final RuleCall cFromNodeIDTerminalRuleCall_1_0_1 = (RuleCall)cFromNodeCrossReference_1_0.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToNodeCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cToNodeCrossReference_2_0.eContents().get(1);
		
		//BasicConnector:
		//    'connect' from=[Node] to=[Node];
		@Override public ParserRule getRule() { return rule; }
		
		//'connect' from=[Node] to=[Node]
		public Group getGroup() { return cGroup; }
		
		//'connect'
		public Keyword getConnectKeyword_0() { return cConnectKeyword_0; }
		
		//from=[Node]
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//[Node]
		public CrossReference getFromNodeCrossReference_1_0() { return cFromNodeCrossReference_1_0; }
		
		//ID
		public RuleCall getFromNodeIDTerminalRuleCall_1_0_1() { return cFromNodeIDTerminalRuleCall_1_0_1; }
		
		//to=[Node]
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//[Node]
		public CrossReference getToNodeCrossReference_2_0() { return cToNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getToNodeIDTerminalRuleCall_2_0_1() { return cToNodeIDTerminalRuleCall_2_0_1; }
	}
	public class InputDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.InputData");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskNameInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableBasedInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventBasedInputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InputData:
		//    TaskNameInput | VariableBasedInput | EventBasedInput;
		@Override public ParserRule getRule() { return rule; }
		
		//TaskNameInput | VariableBasedInput | EventBasedInput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TaskNameInput
		public RuleCall getTaskNameInputParserRuleCall_0() { return cTaskNameInputParserRuleCall_0; }
		
		//VariableBasedInput
		public RuleCall getVariableBasedInputParserRuleCall_1() { return cVariableBasedInputParserRuleCall_1; }
		
		//EventBasedInput
		public RuleCall getEventBasedInputParserRuleCall_2() { return cEventBasedInputParserRuleCall_2; }
	}
	public class TaskNameInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.TaskNameInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskNameInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTaskNameInputAction_1 = (Action)cGroup.eContents().get(1);
		
		//TaskNameInput:
		//    'task name input' {TaskNameInput};
		@Override public ParserRule getRule() { return rule; }
		
		//'task name input' {TaskNameInput}
		public Group getGroup() { return cGroup; }
		
		//'task name input'
		public Keyword getTaskNameInputKeyword_0() { return cTaskNameInputKeyword_0; }
		
		//{TaskNameInput}
		public Action getTaskNameInputAction_1() { return cTaskNameInputAction_1; }
	}
	public class VariableBasedInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.VariableBasedInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableBasedInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableStringBasedConditionalVaraibleCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableStringBasedConditionalVaraibleCrossReference_1_0.eContents().get(1);
		private final Assignment cEventParameterNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventParameterNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cEventParameterNameAssignment_2.eContents().get(0);
		
		//VariableBasedInput:
		//    'variable based input' variable=[StringBasedConditionalVaraible] eventParameterName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'variable based input' variable=[StringBasedConditionalVaraible] eventParameterName=STRING
		public Group getGroup() { return cGroup; }
		
		//'variable based input'
		public Keyword getVariableBasedInputKeyword_0() { return cVariableBasedInputKeyword_0; }
		
		//variable=[StringBasedConditionalVaraible]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[StringBasedConditionalVaraible]
		public CrossReference getVariableStringBasedConditionalVaraibleCrossReference_1_0() { return cVariableStringBasedConditionalVaraibleCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1() { return cVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1; }
		
		//eventParameterName=STRING
		public Assignment getEventParameterNameAssignment_2() { return cEventParameterNameAssignment_2; }
		
		//STRING
		public RuleCall getEventParameterNameSTRINGTerminalRuleCall_2_0() { return cEventParameterNameSTRINGTerminalRuleCall_2_0; }
	}
	public class EventBasedInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.EventBasedInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapBasedInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventCrossReference_1_0.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableStringBasedConditionalVaraibleCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableStringBasedConditionalVaraibleIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableStringBasedConditionalVaraibleCrossReference_2_0.eContents().get(1);
		private final Assignment cEventParameterNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventParameterNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cEventParameterNameAssignment_3.eContents().get(0);
		
		//EventBasedInput:
		//    'map based input' event=[Event] variable=[StringBasedConditionalVaraible] eventParameterName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'map based input' event=[Event] variable=[StringBasedConditionalVaraible] eventParameterName=STRING
		public Group getGroup() { return cGroup; }
		
		//'map based input'
		public Keyword getMapBasedInputKeyword_0() { return cMapBasedInputKeyword_0; }
		
		//event=[Event]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_1_0() { return cEventEventCrossReference_1_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_1() { return cEventEventIDTerminalRuleCall_1_0_1; }
		
		//variable=[StringBasedConditionalVaraible]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[StringBasedConditionalVaraible]
		public CrossReference getVariableStringBasedConditionalVaraibleCrossReference_2_0() { return cVariableStringBasedConditionalVaraibleCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_2_0_1() { return cVariableStringBasedConditionalVaraibleIDTerminalRuleCall_2_0_1; }
		
		//eventParameterName=STRING
		public Assignment getEventParameterNameAssignment_3() { return cEventParameterNameAssignment_3; }
		
		//STRING
		public RuleCall getEventParameterNameSTRINGTerminalRuleCall_3_0() { return cEventParameterNameSTRINGTerminalRuleCall_3_0; }
	}
	public class OutputDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.OutputData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueStringBasedConditionalVaraibleCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1 = (RuleCall)cValueStringBasedConditionalVaraibleCrossReference_1_0.eContents().get(1);
		
		//OutputData:
		//    'output' value=[StringBasedConditionalVaraible];
		@Override public ParserRule getRule() { return rule; }
		
		//'output' value=[StringBasedConditionalVaraible]
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//value=[StringBasedConditionalVaraible]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[StringBasedConditionalVaraible]
		public CrossReference getValueStringBasedConditionalVaraibleCrossReference_1_0() { return cValueStringBasedConditionalVaraibleCrossReference_1_0; }
		
		//ID
		public RuleCall getValueStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1() { return cValueStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1; }
	}
	public class ConditionalConnectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ConditionalConnector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionalConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFromNodeCrossReference_2_0 = (CrossReference)cFromAssignment_2.eContents().get(0);
		private final RuleCall cFromNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cFromNodeCrossReference_2_0.eContents().get(1);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToNodeCrossReference_3_0 = (CrossReference)cToAssignment_3.eContents().get(0);
		private final RuleCall cToNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cToNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEventEventCrossReference_5_0 = (CrossReference)cEventAssignment_5.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_5_0_1 = (RuleCall)cEventEventCrossReference_5_0.eContents().get(1);
		private final Assignment cStringBasedConditionalExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0 = (CrossReference)cStringBasedConditionalExpressionAssignment_6.eContents().get(0);
		private final RuleCall cStringBasedConditionalExpressionStringBasedConditionalVaraibleIDTerminalRuleCall_6_0_1 = (RuleCall)cStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0.eContents().get(1);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueSTRINGTerminalRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ConditionalConnector:
		//    'conditional connector' name=ID from=[Node] to=[Node] '{'
		//        event=[Event] stringBasedConditionalExpression=[StringBasedConditionalVaraible] value=STRING
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'conditional connector' name=ID from=[Node] to=[Node] '{'
		//    event=[Event] stringBasedConditionalExpression=[StringBasedConditionalVaraible] value=STRING
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'conditional connector'
		public Keyword getConditionalConnectorKeyword_0() { return cConditionalConnectorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//from=[Node]
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }
		
		//[Node]
		public CrossReference getFromNodeCrossReference_2_0() { return cFromNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getFromNodeIDTerminalRuleCall_2_0_1() { return cFromNodeIDTerminalRuleCall_2_0_1; }
		
		//to=[Node]
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//[Node]
		public CrossReference getToNodeCrossReference_3_0() { return cToNodeCrossReference_3_0; }
		
		//ID
		public RuleCall getToNodeIDTerminalRuleCall_3_0_1() { return cToNodeIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//event=[Event]
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_5_0() { return cEventEventCrossReference_5_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_5_0_1() { return cEventEventIDTerminalRuleCall_5_0_1; }
		
		//stringBasedConditionalExpression=[StringBasedConditionalVaraible]
		public Assignment getStringBasedConditionalExpressionAssignment_6() { return cStringBasedConditionalExpressionAssignment_6; }
		
		//[StringBasedConditionalVaraible]
		public CrossReference getStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0() { return cStringBasedConditionalExpressionStringBasedConditionalVaraibleCrossReference_6_0; }
		
		//ID
		public RuleCall getStringBasedConditionalExpressionStringBasedConditionalVaraibleIDTerminalRuleCall_6_0_1() { return cStringBasedConditionalExpressionStringBasedConditionalVaraibleIDTerminalRuleCall_6_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_7_0() { return cValueSTRINGTerminalRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessVariablesProcessVariableParserRuleCall_3_0 = (RuleCall)cProcessVariablesAssignment_3.eContents().get(0);
		private final Assignment cFireSignalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFireSignalFireSignalParserRuleCall_4_0 = (RuleCall)cFireSignalAssignment_4.eContents().get(0);
		private final Assignment cAssertFlowAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssertFlowAssertFlowParserRuleCall_5_0 = (RuleCall)cAssertFlowAssignment_5.eContents().get(0);
		private final Assignment cAssertWaitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssertWaitAssertWaitParserRuleCall_6_0 = (RuleCall)cAssertWaitAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Test:
		//    'test' name=ID '{'
		//        processVariables+=ProcessVariable*
		//        fireSignal+=FireSignal*
		//        assertFlow+=AssertFlow*
		//        assertWait+=AssertWait*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=ID '{'
		//    processVariables+=ProcessVariable*
		//    fireSignal+=FireSignal*
		//    assertFlow+=AssertFlow*
		//    assertWait+=AssertWait*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//processVariables+=ProcessVariable*
		public Assignment getProcessVariablesAssignment_3() { return cProcessVariablesAssignment_3; }
		
		//ProcessVariable
		public RuleCall getProcessVariablesProcessVariableParserRuleCall_3_0() { return cProcessVariablesProcessVariableParserRuleCall_3_0; }
		
		//fireSignal+=FireSignal*
		public Assignment getFireSignalAssignment_4() { return cFireSignalAssignment_4; }
		
		//FireSignal
		public RuleCall getFireSignalFireSignalParserRuleCall_4_0() { return cFireSignalFireSignalParserRuleCall_4_0; }
		
		//assertFlow+=AssertFlow*
		public Assignment getAssertFlowAssignment_5() { return cAssertFlowAssignment_5; }
		
		//AssertFlow
		public RuleCall getAssertFlowAssertFlowParserRuleCall_5_0() { return cAssertFlowAssertFlowParserRuleCall_5_0; }
		
		//assertWait+=AssertWait*
		public Assignment getAssertWaitAssignment_6() { return cAssertWaitAssignment_6; }
		
		//AssertWait
		public RuleCall getAssertWaitAssertWaitParserRuleCall_6_0() { return cAssertWaitAssertWaitParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ProcessVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.ProcessVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableStringBasedConditionalVaraibleCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableStringBasedConditionalVaraibleCrossReference_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueConditionalConnectorCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueConditionalConnectorIDTerminalRuleCall_2_0_1 = (RuleCall)cValueConditionalConnectorCrossReference_2_0.eContents().get(1);
		
		//ProcessVariable:
		//    'process variable' variable=[StringBasedConditionalVaraible] value=[ConditionalConnector];
		@Override public ParserRule getRule() { return rule; }
		
		//'process variable' variable=[StringBasedConditionalVaraible] value=[ConditionalConnector]
		public Group getGroup() { return cGroup; }
		
		//'process variable'
		public Keyword getProcessVariableKeyword_0() { return cProcessVariableKeyword_0; }
		
		//variable=[StringBasedConditionalVaraible]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[StringBasedConditionalVaraible]
		public CrossReference getVariableStringBasedConditionalVaraibleCrossReference_1_0() { return cVariableStringBasedConditionalVaraibleCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1() { return cVariableStringBasedConditionalVaraibleIDTerminalRuleCall_1_0_1; }
		
		//value=[ConditionalConnector]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[ConditionalConnector]
		public CrossReference getValueConditionalConnectorCrossReference_2_0() { return cValueConditionalConnectorCrossReference_2_0; }
		
		//ID
		public RuleCall getValueConditionalConnectorIDTerminalRuleCall_2_0_1() { return cValueConditionalConnectorIDTerminalRuleCall_2_0_1; }
	}
	public class FireSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.FireSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFireSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFireSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFireSignalSignalCrossReference_1_0 = (CrossReference)cFireSignalAssignment_1.eContents().get(0);
		private final RuleCall cFireSignalSignalIDTerminalRuleCall_1_0_1 = (RuleCall)cFireSignalSignalCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCaseConditionalConnectorCrossReference_3_0 = (CrossReference)cCaseAssignment_3.eContents().get(0);
		private final RuleCall cCaseConditionalConnectorIDTerminalRuleCall_3_0_1 = (RuleCall)cCaseConditionalConnectorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FireSignal:
		//    'fire signal' fireSignal=[Signal] '{'
		//        case=[ConditionalConnector]?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'fire signal' fireSignal=[Signal] '{'
		//    case=[ConditionalConnector]?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'fire signal'
		public Keyword getFireSignalKeyword_0() { return cFireSignalKeyword_0; }
		
		//fireSignal=[Signal]
		public Assignment getFireSignalAssignment_1() { return cFireSignalAssignment_1; }
		
		//[Signal]
		public CrossReference getFireSignalSignalCrossReference_1_0() { return cFireSignalSignalCrossReference_1_0; }
		
		//ID
		public RuleCall getFireSignalSignalIDTerminalRuleCall_1_0_1() { return cFireSignalSignalIDTerminalRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//case=[ConditionalConnector]?
		public Assignment getCaseAssignment_3() { return cCaseAssignment_3; }
		
		//[ConditionalConnector]
		public CrossReference getCaseConditionalConnectorCrossReference_3_0() { return cCaseConditionalConnectorCrossReference_3_0; }
		
		//ID
		public RuleCall getCaseConditionalConnectorIDTerminalRuleCall_3_0_1() { return cCaseConditionalConnectorIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AssertFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.AssertFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodesNodeCrossReference_2_0 = (CrossReference)cNodesAssignment_2.eContents().get(0);
		private final RuleCall cNodesNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cNodesNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssertFlow:
		//    'assertflow' '{'
		//        nodes+=[Node]+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'assertflow' '{'
		//    nodes+=[Node]+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'assertflow'
		public Keyword getAssertflowKeyword_0() { return cAssertflowKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//nodes+=[Node]+
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }
		
		//[Node]
		public CrossReference getNodesNodeCrossReference_2_0() { return cNodesNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getNodesNodeIDTerminalRuleCall_2_0_1() { return cNodesNodeIDTerminalRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AssertWaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.AssertWait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertWaitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNodesNodeCrossReference_2_0 = (CrossReference)cNodesAssignment_2.eContents().get(0);
		private final RuleCall cNodesNodeIDTerminalRuleCall_2_0_1 = (RuleCall)cNodesNodeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AssertWait:
		//    'assertWait' '{'
		//        nodes+=[Node]+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'assertWait' '{'
		//    nodes+=[Node]+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'assertWait'
		public Keyword getAssertWaitKeyword_0() { return cAssertWaitKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//nodes+=[Node]+
		public Assignment getNodesAssignment_2() { return cNodesAssignment_2; }
		
		//[Node]
		public CrossReference getNodesNodeCrossReference_2_0() { return cNodesNodeCrossReference_2_0; }
		
		//ID
		public RuleCall getNodesNodeIDTerminalRuleCall_2_0_1() { return cNodesNodeIDTerminalRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//    QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workflowdsl.WorkflowDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final WorkflowDefinitionElements pWorkflowDefinition;
	private final PackageElements pPackage;
	private final MarketNameElements pMarketName;
	private final ClassNameElements pClassName;
	private final EventElements pEvent;
	private final VariableElements pVariable;
	private final StringBasedConditionalVaraibleElements pStringBasedConditionalVaraible;
	private final NodeElements pNode;
	private final ServiceTaskElements pServiceTask;
	private final GatewayElements pGateway;
	private final DivergingGatewayElements pDivergingGateway;
	private final ConvergingGatewayElements pConvergingGateway;
	private final StartNodeElements pStartNode;
	private final EndNodeElements pEndNode;
	private final SignalElements pSignal;
	private final AsyncronousServiceTaskElements pAsyncronousServiceTask;
	private final SyncronousServiceTaskElements pSyncronousServiceTask;
	private final ExlcusiveDivergingElements pExlcusiveDiverging;
	private final ParallelDivergingElements pParallelDiverging;
	private final ExclusiveConvergingElements pExclusiveConverging;
	private final ParallelConvergingElements pParallelConverging;
	private final ConnectorElements pConnector;
	private final BasicConnectorElements pBasicConnector;
	private final InputDataElements pInputData;
	private final TaskNameInputElements pTaskNameInput;
	private final VariableBasedInputElements pVariableBasedInput;
	private final EventBasedInputElements pEventBasedInput;
	private final OutputDataElements pOutputData;
	private final ConditionalConnectorElements pConditionalConnector;
	private final TestElements pTest;
	private final ProcessVariableElements pProcessVariable;
	private final FireSignalElements pFireSignal;
	private final AssertFlowElements pAssertFlow;
	private final AssertWaitElements pAssertWait;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WorkflowDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pWorkflowDefinition = new WorkflowDefinitionElements();
		this.pPackage = new PackageElements();
		this.pMarketName = new MarketNameElements();
		this.pClassName = new ClassNameElements();
		this.pEvent = new EventElements();
		this.pVariable = new VariableElements();
		this.pStringBasedConditionalVaraible = new StringBasedConditionalVaraibleElements();
		this.pNode = new NodeElements();
		this.pServiceTask = new ServiceTaskElements();
		this.pGateway = new GatewayElements();
		this.pDivergingGateway = new DivergingGatewayElements();
		this.pConvergingGateway = new ConvergingGatewayElements();
		this.pStartNode = new StartNodeElements();
		this.pEndNode = new EndNodeElements();
		this.pSignal = new SignalElements();
		this.pAsyncronousServiceTask = new AsyncronousServiceTaskElements();
		this.pSyncronousServiceTask = new SyncronousServiceTaskElements();
		this.pExlcusiveDiverging = new ExlcusiveDivergingElements();
		this.pParallelDiverging = new ParallelDivergingElements();
		this.pExclusiveConverging = new ExclusiveConvergingElements();
		this.pParallelConverging = new ParallelConvergingElements();
		this.pConnector = new ConnectorElements();
		this.pBasicConnector = new BasicConnectorElements();
		this.pInputData = new InputDataElements();
		this.pTaskNameInput = new TaskNameInputElements();
		this.pVariableBasedInput = new VariableBasedInputElements();
		this.pEventBasedInput = new EventBasedInputElements();
		this.pOutputData = new OutputDataElements();
		this.pConditionalConnector = new ConditionalConnectorElements();
		this.pTest = new TestElements();
		this.pProcessVariable = new ProcessVariableElements();
		this.pFireSignal = new FireSignalElements();
		this.pAssertFlow = new AssertFlowElements();
		this.pAssertWait = new AssertWaitElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("workflowdsl.WorkflowDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    imports+=Import+
	//    workflowDefinitions+=WorkflowDefinition+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//    'import' importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//WorkflowDefinition:
	//    'workflow definition' name=ID '{'
	//        className=ClassName
	//        packages=Package
	//        events+=Event*
	//        variables+=Variable*
	//        nodes+=Node+
	//        connectors+=Connector+
	//        tests+=Test+
	//     '}';
	public WorkflowDefinitionElements getWorkflowDefinitionAccess() {
		return pWorkflowDefinition;
	}
	
	public ParserRule getWorkflowDefinitionRule() {
		return getWorkflowDefinitionAccess().getRule();
	}
	
	//Package:
	//    'package' name=ID;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//MarketName:
	//    'market name' marketName=STRING;
	public MarketNameElements getMarketNameAccess() {
		return pMarketName;
	}
	
	public ParserRule getMarketNameRule() {
		return getMarketNameAccess().getRule();
	}
	
	//ClassName:
	//    'class name' className=STRING;
	public ClassNameElements getClassNameAccess() {
		return pClassName;
	}
	
	public ParserRule getClassNameRule() {
		return getClassNameAccess().getRule();
	}
	
	//Event:
	//    'event' name=ID ;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Variable:
	//    StringBasedConditionalVaraible;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//StringBasedConditionalVaraible:
	//    'string based conditional variable' name=ID;
	public StringBasedConditionalVaraibleElements getStringBasedConditionalVaraibleAccess() {
		return pStringBasedConditionalVaraible;
	}
	
	public ParserRule getStringBasedConditionalVaraibleRule() {
		return getStringBasedConditionalVaraibleAccess().getRule();
	}
	
	//Node:
	//    StartNode | EndNode | ServiceTask | Gateway | Signal;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//ServiceTask:
	//    AsyncronousServiceTask | SyncronousServiceTask;
	public ServiceTaskElements getServiceTaskAccess() {
		return pServiceTask;
	}
	
	public ParserRule getServiceTaskRule() {
		return getServiceTaskAccess().getRule();
	}
	
	//Gateway:
	//        DivergingGateway | ConvergingGateway;
	public GatewayElements getGatewayAccess() {
		return pGateway;
	}
	
	public ParserRule getGatewayRule() {
		return getGatewayAccess().getRule();
	}
	
	//DivergingGateway:
	//    ExlcusiveDiverging | ParallelDiverging;
	public DivergingGatewayElements getDivergingGatewayAccess() {
		return pDivergingGateway;
	}
	
	public ParserRule getDivergingGatewayRule() {
		return getDivergingGatewayAccess().getRule();
	}
	
	//ConvergingGateway:
	//    ExclusiveConverging | ParallelConverging;
	public ConvergingGatewayElements getConvergingGatewayAccess() {
		return pConvergingGateway;
	}
	
	public ParserRule getConvergingGatewayRule() {
		return getConvergingGatewayAccess().getRule();
	}
	
	//StartNode:
	//    'start node' name=ID;
	public StartNodeElements getStartNodeAccess() {
		return pStartNode;
	}
	
	public ParserRule getStartNodeRule() {
		return getStartNodeAccess().getRule();
	}
	
	//EndNode:
	//    'end node' name=ID;
	public EndNodeElements getEndNodeAccess() {
		return pEndNode;
	}
	
	public ParserRule getEndNodeRule() {
		return getEndNodeAccess().getRule();
	}
	
	//Signal:
	//    'signal' name=ID '{'
	//        event=[Event]
	//        output=OutputData?
	//    '}';
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//AsyncronousServiceTask:
	//    'asyncronous task' name=ID '{'
	//         inputs+=InputData*
	//         output=OutputData?
	//    '}';
	public AsyncronousServiceTaskElements getAsyncronousServiceTaskAccess() {
		return pAsyncronousServiceTask;
	}
	
	public ParserRule getAsyncronousServiceTaskRule() {
		return getAsyncronousServiceTaskAccess().getRule();
	}
	
	//SyncronousServiceTask:
	//    'syncronous task' name=ID '{'
	//         inputs+=InputData*
	//         output=OutputData?
	//    '}';
	public SyncronousServiceTaskElements getSyncronousServiceTaskAccess() {
		return pSyncronousServiceTask;
	}
	
	public ParserRule getSyncronousServiceTaskRule() {
		return getSyncronousServiceTaskAccess().getRule();
	}
	
	//ExlcusiveDiverging:
	//    'exclusive diverging' name=ID;
	public ExlcusiveDivergingElements getExlcusiveDivergingAccess() {
		return pExlcusiveDiverging;
	}
	
	public ParserRule getExlcusiveDivergingRule() {
		return getExlcusiveDivergingAccess().getRule();
	}
	
	//ParallelDiverging:
	//    'parallel diverging' name=ID;
	public ParallelDivergingElements getParallelDivergingAccess() {
		return pParallelDiverging;
	}
	
	public ParserRule getParallelDivergingRule() {
		return getParallelDivergingAccess().getRule();
	}
	
	//ExclusiveConverging:
	//    'exclusive converging' name=ID;
	public ExclusiveConvergingElements getExclusiveConvergingAccess() {
		return pExclusiveConverging;
	}
	
	public ParserRule getExclusiveConvergingRule() {
		return getExclusiveConvergingAccess().getRule();
	}
	
	//ParallelConverging:
	//    'parallel converging' name=ID;
	public ParallelConvergingElements getParallelConvergingAccess() {
		return pParallelConverging;
	}
	
	public ParserRule getParallelConvergingRule() {
		return getParallelConvergingAccess().getRule();
	}
	
	//Connector:
	//    BasicConnector | ConditionalConnector;
	public ConnectorElements getConnectorAccess() {
		return pConnector;
	}
	
	public ParserRule getConnectorRule() {
		return getConnectorAccess().getRule();
	}
	
	//BasicConnector:
	//    'connect' from=[Node] to=[Node];
	public BasicConnectorElements getBasicConnectorAccess() {
		return pBasicConnector;
	}
	
	public ParserRule getBasicConnectorRule() {
		return getBasicConnectorAccess().getRule();
	}
	
	//InputData:
	//    TaskNameInput | VariableBasedInput | EventBasedInput;
	public InputDataElements getInputDataAccess() {
		return pInputData;
	}
	
	public ParserRule getInputDataRule() {
		return getInputDataAccess().getRule();
	}
	
	//TaskNameInput:
	//    'task name input' {TaskNameInput};
	public TaskNameInputElements getTaskNameInputAccess() {
		return pTaskNameInput;
	}
	
	public ParserRule getTaskNameInputRule() {
		return getTaskNameInputAccess().getRule();
	}
	
	//VariableBasedInput:
	//    'variable based input' variable=[StringBasedConditionalVaraible] eventParameterName=STRING;
	public VariableBasedInputElements getVariableBasedInputAccess() {
		return pVariableBasedInput;
	}
	
	public ParserRule getVariableBasedInputRule() {
		return getVariableBasedInputAccess().getRule();
	}
	
	//EventBasedInput:
	//    'map based input' event=[Event] variable=[StringBasedConditionalVaraible] eventParameterName=STRING;
	public EventBasedInputElements getEventBasedInputAccess() {
		return pEventBasedInput;
	}
	
	public ParserRule getEventBasedInputRule() {
		return getEventBasedInputAccess().getRule();
	}
	
	//OutputData:
	//    'output' value=[StringBasedConditionalVaraible];
	public OutputDataElements getOutputDataAccess() {
		return pOutputData;
	}
	
	public ParserRule getOutputDataRule() {
		return getOutputDataAccess().getRule();
	}
	
	//ConditionalConnector:
	//    'conditional connector' name=ID from=[Node] to=[Node] '{'
	//        event=[Event] stringBasedConditionalExpression=[StringBasedConditionalVaraible] value=STRING
	//    '}';
	public ConditionalConnectorElements getConditionalConnectorAccess() {
		return pConditionalConnector;
	}
	
	public ParserRule getConditionalConnectorRule() {
		return getConditionalConnectorAccess().getRule();
	}
	
	//Test:
	//    'test' name=ID '{'
	//        processVariables+=ProcessVariable*
	//        fireSignal+=FireSignal*
	//        assertFlow+=AssertFlow*
	//        assertWait+=AssertWait*
	//    '}';
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//ProcessVariable:
	//    'process variable' variable=[StringBasedConditionalVaraible] value=[ConditionalConnector];
	public ProcessVariableElements getProcessVariableAccess() {
		return pProcessVariable;
	}
	
	public ParserRule getProcessVariableRule() {
		return getProcessVariableAccess().getRule();
	}
	
	//FireSignal:
	//    'fire signal' fireSignal=[Signal] '{'
	//        case=[ConditionalConnector]?
	//    '}';
	public FireSignalElements getFireSignalAccess() {
		return pFireSignal;
	}
	
	public ParserRule getFireSignalRule() {
		return getFireSignalAccess().getRule();
	}
	
	//AssertFlow:
	//    'assertflow' '{'
	//        nodes+=[Node]+
	//    '}';
	public AssertFlowElements getAssertFlowAccess() {
		return pAssertFlow;
	}
	
	public ParserRule getAssertFlowRule() {
		return getAssertFlowAccess().getRule();
	}
	
	//AssertWait:
	//    'assertWait' '{'
	//        nodes+=[Node]+
	//    '}';
	public AssertWaitElements getAssertWaitAccess() {
		return pAssertWait;
	}
	
	public ParserRule getAssertWaitRule() {
		return getAssertWaitAccess().getRule();
	}
	
	//QualifiedNameWithWildCard:
	//    QualifiedName '.*'?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
