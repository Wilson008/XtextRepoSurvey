/*
 * generated by Xtext 2.35.0
 */
package accessdsl.serializer;

import accessdsl.accessDsl.AccessDslPackage;
import accessdsl.accessDsl.AssociateOperation;
import accessdsl.accessDsl.ContainedEntity;
import accessdsl.accessDsl.Container;
import accessdsl.accessDsl.ContainerElement;
import accessdsl.accessDsl.DeleteOperation;
import accessdsl.accessDsl.Import;
import accessdsl.accessDsl.Model;
import accessdsl.accessDsl.MultipleResultQueryMapping;
import accessdsl.accessDsl.PackageName;
import accessdsl.accessDsl.PersistAndAssociateOperation;
import accessdsl.accessDsl.PersistOperation;
import accessdsl.accessDsl.QueryAndTypeMapping;
import accessdsl.accessDsl.SingleResultQueryMapping;
import accessdsl.accessDsl.StateAdjustment;
import accessdsl.accessDsl.Unit;
import accessdsl.accessDsl.UpdateOperation;
import accessdsl.services.AccessDslGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class AccessDslSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private AccessDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AccessDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AccessDslPackage.ASSOCIATE_OPERATION:
				sequence_AssociateOperation(context, (AssociateOperation) semanticObject); 
				return; 
			case AccessDslPackage.CONTAINED_ENTITY:
				sequence_ContainedEntity(context, (ContainedEntity) semanticObject); 
				return; 
			case AccessDslPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case AccessDslPackage.CONTAINER_ELEMENT:
				sequence_ContainerElement(context, (ContainerElement) semanticObject); 
				return; 
			case AccessDslPackage.DELETE_OPERATION:
				sequence_DeleteOperation(context, (DeleteOperation) semanticObject); 
				return; 
			case AccessDslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case AccessDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AccessDslPackage.MULTIPLE_RESULT_QUERY_MAPPING:
				sequence_MultipleResultQueryMapping(context, (MultipleResultQueryMapping) semanticObject); 
				return; 
			case AccessDslPackage.PACKAGE_NAME:
				sequence_PackageName(context, (PackageName) semanticObject); 
				return; 
			case AccessDslPackage.PERSIST_AND_ASSOCIATE_OPERATION:
				sequence_PersistAndAssociateOperation(context, (PersistAndAssociateOperation) semanticObject); 
				return; 
			case AccessDslPackage.PERSIST_OPERATION:
				sequence_PersistOperation(context, (PersistOperation) semanticObject); 
				return; 
			case AccessDslPackage.QUERY_AND_TYPE_MAPPING:
				sequence_QueryAndTypeMapping(context, (QueryAndTypeMapping) semanticObject); 
				return; 
			case AccessDslPackage.SINGLE_RESULT_QUERY_MAPPING:
				sequence_SingleResultQueryMapping(context, (SingleResultQueryMapping) semanticObject); 
				return; 
			case AccessDslPackage.STATE_ADJUSTMENT:
				sequence_StateAdjustment(context, (StateAdjustment) semanticObject); 
				return; 
			case AccessDslPackage.UNIT:
				sequence_Unit(context, (Unit) semanticObject); 
				return; 
			case AccessDslPackage.UPDATE_OPERATION:
				sequence_UpdateOperation(context, (UpdateOperation) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateOperation returns AssociateOperation
	 *     AssociateOperation returns AssociateOperation
	 *
	 * Constraint:
	 *     (this=[Entity|ID] associaltion=[RelationshipAttribute|ID] that=[Entity|ID])
	 * </pre>
	 */
	protected void sequence_AssociateOperation(ISerializationContext context, AssociateOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.ASSOCIATE_OPERATION__THIS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.ASSOCIATE_OPERATION__THIS));
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.ASSOCIATE_OPERATION__ASSOCIALTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.ASSOCIATE_OPERATION__ASSOCIALTION));
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.ASSOCIATE_OPERATION__THAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.ASSOCIATE_OPERATION__THAT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssociateOperationAccess().getThisEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.ASSOCIATE_OPERATION__THIS, false));
		feeder.accept(grammarAccess.getAssociateOperationAccess().getAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(AccessDslPackage.Literals.ASSOCIATE_OPERATION__ASSOCIALTION, false));
		feeder.accept(grammarAccess.getAssociateOperationAccess().getThatEntityIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AccessDslPackage.Literals.ASSOCIATE_OPERATION__THAT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ContainedEntity returns ContainedEntity
	 *
	 * Constraint:
	 *     contained=[Entity|ID]
	 * </pre>
	 */
	protected void sequence_ContainedEntity(ISerializationContext context, ContainedEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.CONTAINED_ENTITY__CONTAINED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.CONTAINED_ENTITY__CONTAINED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainedEntityAccess().getContainedEntityIDTerminalRuleCall_0_1(), semanticObject.eGet(AccessDslPackage.Literals.CONTAINED_ENTITY__CONTAINED, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ContainerElement returns ContainerElement
	 *
	 * Constraint:
	 *     (entity=ContainedEntity alias=STRING)
	 * </pre>
	 */
	protected void sequence_ContainerElement(ISerializationContext context, ContainerElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.CONTAINER_ELEMENT__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.CONTAINER_ELEMENT__ENTITY));
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.CONTAINER_ELEMENT__ALIAS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.CONTAINER_ELEMENT__ALIAS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerElementAccess().getEntityContainedEntityParserRuleCall_1_0(), semanticObject.getEntity());
		feeder.accept(grammarAccess.getContainerElementAccess().getAliasSTRINGTerminalRuleCall_2_0(), semanticObject.getAlias());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=ID containerElements+=ContainerElement*)
	 * </pre>
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateOperation returns DeleteOperation
	 *     DeleteOperation returns DeleteOperation
	 *
	 * Constraint:
	 *     this=[Entity|ID]
	 * </pre>
	 */
	protected void sequence_DeleteOperation(ISerializationContext context, DeleteOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.DELETE_OPERATION__THIS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.DELETE_OPERATION__THIS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeleteOperationAccess().getThisEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.DELETE_OPERATION__THIS, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=importedNamespace
	 * </pre>
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceImportedNamespaceParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (imports+=Import* unit=Unit)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryMapping returns MultipleResultQueryMapping
	 *     MultipleResultQueryMapping returns MultipleResultQueryMapping
	 *
	 * Constraint:
	 *     namedQuery=[NamedQuery|ID]
	 * </pre>
	 */
	protected void sequence_MultipleResultQueryMapping(ISerializationContext context, MultipleResultQueryMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.QUERY_MAPPING__NAMED_QUERY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.QUERY_MAPPING__NAMED_QUERY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultipleResultQueryMappingAccess().getNamedQueryNamedQueryIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.QUERY_MAPPING__NAMED_QUERY, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PackageName returns PackageName
	 *
	 * Constraint:
	 *     name=QualifiedName
	 * </pre>
	 */
	protected void sequence_PackageName(ISerializationContext context, PackageName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.PACKAGE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.PACKAGE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageNameAccess().getNameQualifiedNameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateOperation returns PersistAndAssociateOperation
	 *     PersistAndAssociateOperation returns PersistAndAssociateOperation
	 *
	 * Constraint:
	 *     (newEntity=[Entity|ID] associaltion=[RelationshipAttribute|ID] existingEntity=[Entity|ID])
	 * </pre>
	 */
	protected void sequence_PersistAndAssociateOperation(ISerializationContext context, PersistAndAssociateOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__NEW_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__NEW_ENTITY));
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__ASSOCIALTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__ASSOCIALTION));
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__EXISTING_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__EXISTING_ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersistAndAssociateOperationAccess().getNewEntityEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__NEW_ENTITY, false));
		feeder.accept(grammarAccess.getPersistAndAssociateOperationAccess().getAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__ASSOCIALTION, false));
		feeder.accept(grammarAccess.getPersistAndAssociateOperationAccess().getExistingEntityEntityIDTerminalRuleCall_3_0_1(), semanticObject.eGet(AccessDslPackage.Literals.PERSIST_AND_ASSOCIATE_OPERATION__EXISTING_ENTITY, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateOperation returns PersistOperation
	 *     PersistOperation returns PersistOperation
	 *
	 * Constraint:
	 *     this=[Entity|ID]
	 * </pre>
	 */
	protected void sequence_PersistOperation(ISerializationContext context, PersistOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.PERSIST_OPERATION__THIS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.PERSIST_OPERATION__THIS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersistOperationAccess().getThisEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.PERSIST_OPERATION__THIS, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryAndTypeMapping returns QueryAndTypeMapping
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         imports+=Import* 
	 *         query=QueryMapping 
	 *         typeMapping=[Container|ID] 
	 *         (queryParameters+=JvmFormalParameter queryParameters+=JvmFormalParameter*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_QueryAndTypeMapping(ISerializationContext context, QueryAndTypeMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     QueryMapping returns SingleResultQueryMapping
	 *     SingleResultQueryMapping returns SingleResultQueryMapping
	 *
	 * Constraint:
	 *     namedQuery=[NamedQuery|ID]
	 * </pre>
	 */
	protected void sequence_SingleResultQueryMapping(ISerializationContext context, SingleResultQueryMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.QUERY_MAPPING__NAMED_QUERY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.QUERY_MAPPING__NAMED_QUERY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSingleResultQueryMappingAccess().getNamedQueryNamedQueryIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.QUERY_MAPPING__NAMED_QUERY, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateAdjustment returns StateAdjustment
	 *
	 * Constraint:
	 *     (name=ID imports+=Import* stateOperation=StateOperation)
	 * </pre>
	 */
	protected void sequence_StateAdjustment(ISerializationContext context, StateAdjustment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Unit returns Unit
	 *
	 * Constraint:
	 *     (name=QualifiedName package=PackageName containers+=Container* querymapping+=QueryAndTypeMapping* stateAdjustment+=StateAdjustment*)
	 * </pre>
	 */
	protected void sequence_Unit(ISerializationContext context, Unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StateOperation returns UpdateOperation
	 *     UpdateOperation returns UpdateOperation
	 *
	 * Constraint:
	 *     this=[Entity|ID]
	 * </pre>
	 */
	protected void sequence_UpdateOperation(ISerializationContext context, UpdateOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AccessDslPackage.Literals.UPDATE_OPERATION__THIS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AccessDslPackage.Literals.UPDATE_OPERATION__THIS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateOperationAccess().getThisEntityIDTerminalRuleCall_1_0_1(), semanticObject.eGet(AccessDslPackage.Literals.UPDATE_OPERATION__THIS, false));
		feeder.finish();
	}
	
	
}
