/**
 * generated by Xtext 2.35.0
 */
package accessdsl.accessDsl.util;

import accessdsl.accessDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see accessdsl.accessDsl.AccessDslPackage
 * @generated
 */
public class AccessDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AccessDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AccessDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AccessDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AccessDslSwitch<Adapter> modelSwitch =
    new AccessDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseUnit(Unit object)
      {
        return createUnitAdapter();
      }
      @Override
      public Adapter casePackageName(PackageName object)
      {
        return createPackageNameAdapter();
      }
      @Override
      public Adapter caseContainer(Container object)
      {
        return createContainerAdapter();
      }
      @Override
      public Adapter caseContainerElement(ContainerElement object)
      {
        return createContainerElementAdapter();
      }
      @Override
      public Adapter caseContainedEntity(ContainedEntity object)
      {
        return createContainedEntityAdapter();
      }
      @Override
      public Adapter caseQueryAndTypeMapping(QueryAndTypeMapping object)
      {
        return createQueryAndTypeMappingAdapter();
      }
      @Override
      public Adapter caseQueryMapping(QueryMapping object)
      {
        return createQueryMappingAdapter();
      }
      @Override
      public Adapter caseSingleResultQueryMapping(SingleResultQueryMapping object)
      {
        return createSingleResultQueryMappingAdapter();
      }
      @Override
      public Adapter caseMultipleResultQueryMapping(MultipleResultQueryMapping object)
      {
        return createMultipleResultQueryMappingAdapter();
      }
      @Override
      public Adapter caseStateAdjustment(StateAdjustment object)
      {
        return createStateAdjustmentAdapter();
      }
      @Override
      public Adapter caseStateOperation(StateOperation object)
      {
        return createStateOperationAdapter();
      }
      @Override
      public Adapter casePersistOperation(PersistOperation object)
      {
        return createPersistOperationAdapter();
      }
      @Override
      public Adapter casePersistAndAssociateOperation(PersistAndAssociateOperation object)
      {
        return createPersistAndAssociateOperationAdapter();
      }
      @Override
      public Adapter caseAssociateOperation(AssociateOperation object)
      {
        return createAssociateOperationAdapter();
      }
      @Override
      public Adapter caseUpdateOperation(UpdateOperation object)
      {
        return createUpdateOperationAdapter();
      }
      @Override
      public Adapter caseDeleteOperation(DeleteOperation object)
      {
        return createDeleteOperationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.Unit <em>Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.Unit
   * @generated
   */
  public Adapter createUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.PackageName <em>Package Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.PackageName
   * @generated
   */
  public Adapter createPackageNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.Container <em>Container</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.Container
   * @generated
   */
  public Adapter createContainerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.ContainerElement <em>Container Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.ContainerElement
   * @generated
   */
  public Adapter createContainerElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.ContainedEntity <em>Contained Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.ContainedEntity
   * @generated
   */
  public Adapter createContainedEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.QueryAndTypeMapping <em>Query And Type Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.QueryAndTypeMapping
   * @generated
   */
  public Adapter createQueryAndTypeMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.QueryMapping <em>Query Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.QueryMapping
   * @generated
   */
  public Adapter createQueryMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.SingleResultQueryMapping <em>Single Result Query Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.SingleResultQueryMapping
   * @generated
   */
  public Adapter createSingleResultQueryMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.MultipleResultQueryMapping <em>Multiple Result Query Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.MultipleResultQueryMapping
   * @generated
   */
  public Adapter createMultipleResultQueryMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.StateAdjustment <em>State Adjustment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.StateAdjustment
   * @generated
   */
  public Adapter createStateAdjustmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.StateOperation <em>State Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.StateOperation
   * @generated
   */
  public Adapter createStateOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.PersistOperation <em>Persist Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.PersistOperation
   * @generated
   */
  public Adapter createPersistOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.PersistAndAssociateOperation <em>Persist And Associate Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.PersistAndAssociateOperation
   * @generated
   */
  public Adapter createPersistAndAssociateOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.AssociateOperation <em>Associate Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.AssociateOperation
   * @generated
   */
  public Adapter createAssociateOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.UpdateOperation <em>Update Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.UpdateOperation
   * @generated
   */
  public Adapter createUpdateOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link accessdsl.accessDsl.DeleteOperation <em>Delete Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see accessdsl.accessDsl.DeleteOperation
   * @generated
   */
  public Adapter createDeleteOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AccessDslAdapterFactory
