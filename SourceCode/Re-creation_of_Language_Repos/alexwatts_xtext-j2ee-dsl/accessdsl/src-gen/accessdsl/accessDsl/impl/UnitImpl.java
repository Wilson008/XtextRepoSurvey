/**
 * generated by Xtext 2.35.0
 */
package accessdsl.accessDsl.impl;

import accessdsl.accessDsl.AccessDslPackage;
import accessdsl.accessDsl.PackageName;
import accessdsl.accessDsl.QueryAndTypeMapping;
import accessdsl.accessDsl.StateAdjustment;
import accessdsl.accessDsl.Unit;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Unit</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link accessdsl.accessDsl.impl.UnitImpl#getName <em>Name</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.UnitImpl#getPackage <em>Package</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.UnitImpl#getContainers <em>Containers</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.UnitImpl#getQuerymapping <em>Querymapping</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.UnitImpl#getStateAdjustment <em>State Adjustment</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UnitImpl extends MinimalEObjectImpl.Container implements Unit
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getPackage() <em>Package</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPackage()
   * @generated
   * @ordered
   */
  protected PackageName package_;

  /**
   * The cached value of the '{@link #getContainers() <em>Containers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContainers()
   * @generated
   * @ordered
   */
  protected EList<accessdsl.accessDsl.Container> containers;

  /**
   * The cached value of the '{@link #getQuerymapping() <em>Querymapping</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuerymapping()
   * @generated
   * @ordered
   */
  protected EList<QueryAndTypeMapping> querymapping;

  /**
   * The cached value of the '{@link #getStateAdjustment() <em>State Adjustment</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateAdjustment()
   * @generated
   * @ordered
   */
  protected EList<StateAdjustment> stateAdjustment;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnitImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AccessDslPackage.Literals.UNIT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AccessDslPackage.UNIT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageName getPackage()
  {
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPackage(PackageName newPackage, NotificationChain msgs)
  {
    PackageName oldPackage = package_;
    package_ = newPackage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AccessDslPackage.UNIT__PACKAGE, oldPackage, newPackage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPackage(PackageName newPackage)
  {
    if (newPackage != package_)
    {
      NotificationChain msgs = null;
      if (package_ != null)
        msgs = ((InternalEObject)package_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AccessDslPackage.UNIT__PACKAGE, null, msgs);
      if (newPackage != null)
        msgs = ((InternalEObject)newPackage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AccessDslPackage.UNIT__PACKAGE, null, msgs);
      msgs = basicSetPackage(newPackage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AccessDslPackage.UNIT__PACKAGE, newPackage, newPackage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<accessdsl.accessDsl.Container> getContainers()
  {
    if (containers == null)
    {
      containers = new EObjectContainmentEList<accessdsl.accessDsl.Container>(accessdsl.accessDsl.Container.class, this, AccessDslPackage.UNIT__CONTAINERS);
    }
    return containers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<QueryAndTypeMapping> getQuerymapping()
  {
    if (querymapping == null)
    {
      querymapping = new EObjectContainmentEList<QueryAndTypeMapping>(QueryAndTypeMapping.class, this, AccessDslPackage.UNIT__QUERYMAPPING);
    }
    return querymapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StateAdjustment> getStateAdjustment()
  {
    if (stateAdjustment == null)
    {
      stateAdjustment = new EObjectContainmentEList<StateAdjustment>(StateAdjustment.class, this, AccessDslPackage.UNIT__STATE_ADJUSTMENT);
    }
    return stateAdjustment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AccessDslPackage.UNIT__PACKAGE:
        return basicSetPackage(null, msgs);
      case AccessDslPackage.UNIT__CONTAINERS:
        return ((InternalEList<?>)getContainers()).basicRemove(otherEnd, msgs);
      case AccessDslPackage.UNIT__QUERYMAPPING:
        return ((InternalEList<?>)getQuerymapping()).basicRemove(otherEnd, msgs);
      case AccessDslPackage.UNIT__STATE_ADJUSTMENT:
        return ((InternalEList<?>)getStateAdjustment()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AccessDslPackage.UNIT__NAME:
        return getName();
      case AccessDslPackage.UNIT__PACKAGE:
        return getPackage();
      case AccessDslPackage.UNIT__CONTAINERS:
        return getContainers();
      case AccessDslPackage.UNIT__QUERYMAPPING:
        return getQuerymapping();
      case AccessDslPackage.UNIT__STATE_ADJUSTMENT:
        return getStateAdjustment();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AccessDslPackage.UNIT__NAME:
        setName((String)newValue);
        return;
      case AccessDslPackage.UNIT__PACKAGE:
        setPackage((PackageName)newValue);
        return;
      case AccessDslPackage.UNIT__CONTAINERS:
        getContainers().clear();
        getContainers().addAll((Collection<? extends accessdsl.accessDsl.Container>)newValue);
        return;
      case AccessDslPackage.UNIT__QUERYMAPPING:
        getQuerymapping().clear();
        getQuerymapping().addAll((Collection<? extends QueryAndTypeMapping>)newValue);
        return;
      case AccessDslPackage.UNIT__STATE_ADJUSTMENT:
        getStateAdjustment().clear();
        getStateAdjustment().addAll((Collection<? extends StateAdjustment>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AccessDslPackage.UNIT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AccessDslPackage.UNIT__PACKAGE:
        setPackage((PackageName)null);
        return;
      case AccessDslPackage.UNIT__CONTAINERS:
        getContainers().clear();
        return;
      case AccessDslPackage.UNIT__QUERYMAPPING:
        getQuerymapping().clear();
        return;
      case AccessDslPackage.UNIT__STATE_ADJUSTMENT:
        getStateAdjustment().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AccessDslPackage.UNIT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AccessDslPackage.UNIT__PACKAGE:
        return package_ != null;
      case AccessDslPackage.UNIT__CONTAINERS:
        return containers != null && !containers.isEmpty();
      case AccessDslPackage.UNIT__QUERYMAPPING:
        return querymapping != null && !querymapping.isEmpty();
      case AccessDslPackage.UNIT__STATE_ADJUSTMENT:
        return stateAdjustment != null && !stateAdjustment.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //UnitImpl
