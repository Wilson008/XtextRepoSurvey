/**
 * generated by Xtext 2.35.0
 */
package accessdsl.accessDsl.impl;

import accessdsl.accessDsl.AccessDslPackage;
import accessdsl.accessDsl.ContainedEntity;

import jpadsl.jPADsl.Entity;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Contained Entity</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link accessdsl.accessDsl.impl.ContainedEntityImpl#getContained <em>Contained</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ContainedEntityImpl extends MinimalEObjectImpl.Container implements ContainedEntity
{
  /**
   * The cached value of the '{@link #getContained() <em>Contained</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContained()
   * @generated
   * @ordered
   */
  protected Entity contained;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContainedEntityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AccessDslPackage.Literals.CONTAINED_ENTITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity getContained()
  {
    if (contained != null && contained.eIsProxy())
    {
      InternalEObject oldContained = (InternalEObject)contained;
      contained = (Entity)eResolveProxy(oldContained);
      if (contained != oldContained)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AccessDslPackage.CONTAINED_ENTITY__CONTAINED, oldContained, contained));
      }
    }
    return contained;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity basicGetContained()
  {
    return contained;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setContained(Entity newContained)
  {
    Entity oldContained = contained;
    contained = newContained;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AccessDslPackage.CONTAINED_ENTITY__CONTAINED, oldContained, contained));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AccessDslPackage.CONTAINED_ENTITY__CONTAINED:
        if (resolve) return getContained();
        return basicGetContained();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AccessDslPackage.CONTAINED_ENTITY__CONTAINED:
        setContained((Entity)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AccessDslPackage.CONTAINED_ENTITY__CONTAINED:
        setContained((Entity)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AccessDslPackage.CONTAINED_ENTITY__CONTAINED:
        return contained != null;
    }
    return super.eIsSet(featureID);
  }

} //ContainedEntityImpl
