/**
 * generated by Xtext 2.35.0
 */
package accessdsl.accessDsl.impl;

import accessdsl.accessDsl.AccessDslPackage;
import accessdsl.accessDsl.Import;
import accessdsl.accessDsl.QueryAndTypeMapping;
import accessdsl.accessDsl.QueryMapping;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmFormalParameter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Query And Type Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link accessdsl.accessDsl.impl.QueryAndTypeMappingImpl#getName <em>Name</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.QueryAndTypeMappingImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.QueryAndTypeMappingImpl#getQuery <em>Query</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.QueryAndTypeMappingImpl#getTypeMapping <em>Type Mapping</em>}</li>
 *   <li>{@link accessdsl.accessDsl.impl.QueryAndTypeMappingImpl#getQueryParameters <em>Query Parameters</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QueryAndTypeMappingImpl extends MinimalEObjectImpl.Container implements QueryAndTypeMapping
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getQuery() <em>Query</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuery()
   * @generated
   * @ordered
   */
  protected QueryMapping query;

  /**
   * The cached value of the '{@link #getTypeMapping() <em>Type Mapping</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeMapping()
   * @generated
   * @ordered
   */
  protected accessdsl.accessDsl.Container typeMapping;

  /**
   * The cached value of the '{@link #getQueryParameters() <em>Query Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQueryParameters()
   * @generated
   * @ordered
   */
  protected EList<JvmFormalParameter> queryParameters;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryAndTypeMappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AccessDslPackage.Literals.QUERY_AND_TYPE_MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AccessDslPackage.QUERY_AND_TYPE_MAPPING__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, AccessDslPackage.QUERY_AND_TYPE_MAPPING__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QueryMapping getQuery()
  {
    return query;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQuery(QueryMapping newQuery, NotificationChain msgs)
  {
    QueryMapping oldQuery = query;
    query = newQuery;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY, oldQuery, newQuery);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuery(QueryMapping newQuery)
  {
    if (newQuery != query)
    {
      NotificationChain msgs = null;
      if (query != null)
        msgs = ((InternalEObject)query).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY, null, msgs);
      if (newQuery != null)
        msgs = ((InternalEObject)newQuery).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY, null, msgs);
      msgs = basicSetQuery(newQuery, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY, newQuery, newQuery));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public accessdsl.accessDsl.Container getTypeMapping()
  {
    if (typeMapping != null && typeMapping.eIsProxy())
    {
      InternalEObject oldTypeMapping = (InternalEObject)typeMapping;
      typeMapping = (accessdsl.accessDsl.Container)eResolveProxy(oldTypeMapping);
      if (typeMapping != oldTypeMapping)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AccessDslPackage.QUERY_AND_TYPE_MAPPING__TYPE_MAPPING, oldTypeMapping, typeMapping));
      }
    }
    return typeMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public accessdsl.accessDsl.Container basicGetTypeMapping()
  {
    return typeMapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTypeMapping(accessdsl.accessDsl.Container newTypeMapping)
  {
    accessdsl.accessDsl.Container oldTypeMapping = typeMapping;
    typeMapping = newTypeMapping;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AccessDslPackage.QUERY_AND_TYPE_MAPPING__TYPE_MAPPING, oldTypeMapping, typeMapping));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<JvmFormalParameter> getQueryParameters()
  {
    if (queryParameters == null)
    {
      queryParameters = new EObjectContainmentEList<JvmFormalParameter>(JvmFormalParameter.class, this, AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY_PARAMETERS);
    }
    return queryParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY:
        return basicSetQuery(null, msgs);
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY_PARAMETERS:
        return ((InternalEList<?>)getQueryParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__NAME:
        return getName();
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__IMPORTS:
        return getImports();
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY:
        return getQuery();
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__TYPE_MAPPING:
        if (resolve) return getTypeMapping();
        return basicGetTypeMapping();
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY_PARAMETERS:
        return getQueryParameters();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__NAME:
        setName((String)newValue);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY:
        setQuery((QueryMapping)newValue);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__TYPE_MAPPING:
        setTypeMapping((accessdsl.accessDsl.Container)newValue);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY_PARAMETERS:
        getQueryParameters().clear();
        getQueryParameters().addAll((Collection<? extends JvmFormalParameter>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__IMPORTS:
        getImports().clear();
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY:
        setQuery((QueryMapping)null);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__TYPE_MAPPING:
        setTypeMapping((accessdsl.accessDsl.Container)null);
        return;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY_PARAMETERS:
        getQueryParameters().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__IMPORTS:
        return imports != null && !imports.isEmpty();
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY:
        return query != null;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__TYPE_MAPPING:
        return typeMapping != null;
      case AccessDslPackage.QUERY_AND_TYPE_MAPPING__QUERY_PARAMETERS:
        return queryParameters != null && !queryParameters.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //QueryAndTypeMappingImpl
