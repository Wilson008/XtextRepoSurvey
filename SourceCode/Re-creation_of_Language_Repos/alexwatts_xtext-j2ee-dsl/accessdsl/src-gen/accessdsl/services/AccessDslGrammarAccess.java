/*
 * generated by Xtext 2.35.0
 */
package accessdsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class AccessDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitUnitParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//Model:
		//    imports+=Import*
		//    unit=Unit;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import*
		//unit=Unit
		public Group getGroup() { return cGroup; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//unit=Unit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//Unit
		public RuleCall getUnitUnitParserRuleCall_1_0() { return cUnitUnitParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportedNamespaceParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//    'import' importedNamespace=importedNamespace;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=importedNamespace
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=importedNamespace
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//importedNamespace
		public RuleCall getImportedNamespaceImportedNamespaceParserRuleCall_1_0() { return cImportedNamespaceImportedNamespaceParserRuleCall_1_0; }
	}
	public class UnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.Unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccessUnitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPackagePackageNameParserRuleCall_3_0 = (RuleCall)cPackageAssignment_3.eContents().get(0);
		private final Assignment cContainersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContainersContainerParserRuleCall_4_0 = (RuleCall)cContainersAssignment_4.eContents().get(0);
		private final Assignment cQuerymappingAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQuerymappingQueryAndTypeMappingParserRuleCall_5_0 = (RuleCall)cQuerymappingAssignment_5.eContents().get(0);
		private final Assignment cStateAdjustmentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStateAdjustmentStateAdjustmentParserRuleCall_6_0 = (RuleCall)cStateAdjustmentAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Unit:
		//    'access unit' name=QualifiedName '{'
		//        package=PackageName
		//        containers+=Container*
		//        querymapping+=QueryAndTypeMapping*
		//        stateAdjustment+=StateAdjustment*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'access unit' name=QualifiedName '{'
		//    package=PackageName
		//    containers+=Container*
		//    querymapping+=QueryAndTypeMapping*
		//    stateAdjustment+=StateAdjustment*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'access unit'
		public Keyword getAccessUnitKeyword_0() { return cAccessUnitKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//package=PackageName
		public Assignment getPackageAssignment_3() { return cPackageAssignment_3; }
		
		//PackageName
		public RuleCall getPackagePackageNameParserRuleCall_3_0() { return cPackagePackageNameParserRuleCall_3_0; }
		
		//containers+=Container*
		public Assignment getContainersAssignment_4() { return cContainersAssignment_4; }
		
		//Container
		public RuleCall getContainersContainerParserRuleCall_4_0() { return cContainersContainerParserRuleCall_4_0; }
		
		//querymapping+=QueryAndTypeMapping*
		public Assignment getQuerymappingAssignment_5() { return cQuerymappingAssignment_5; }
		
		//QueryAndTypeMapping
		public RuleCall getQuerymappingQueryAndTypeMappingParserRuleCall_5_0() { return cQuerymappingQueryAndTypeMappingParserRuleCall_5_0; }
		
		//stateAdjustment+=StateAdjustment*
		public Assignment getStateAdjustmentAssignment_6() { return cStateAdjustmentAssignment_6; }
		
		//StateAdjustment
		public RuleCall getStateAdjustmentStateAdjustmentParserRuleCall_6_0() { return cStateAdjustmentStateAdjustmentParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.PackageName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PackageName:
		//    'package name' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'package name' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'package name'
		public Keyword getPackageNameKeyword_0() { return cPackageNameKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainerElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainerElementsContainerElementParserRuleCall_3_0 = (RuleCall)cContainerElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Container:
		//    'container' name=ID '{'
		//        containerElements+=ContainerElement*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'container' name=ID '{'
		//    containerElements+=ContainerElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//containerElements+=ContainerElement*
		public Assignment getContainerElementsAssignment_3() { return cContainerElementsAssignment_3; }
		
		//ContainerElement
		public RuleCall getContainerElementsContainerElementParserRuleCall_3_0() { return cContainerElementsContainerElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContainerElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.ContainerElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntityContainedEntityParserRuleCall_1_0 = (RuleCall)cEntityAssignment_1.eContents().get(0);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliasSTRINGTerminalRuleCall_2_0 = (RuleCall)cAliasAssignment_2.eContents().get(0);
		
		//ContainerElement:
		//    'element' entity=ContainedEntity alias=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'element' entity=ContainedEntity alias=STRING
		public Group getGroup() { return cGroup; }
		
		//'element'
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }
		
		//entity=ContainedEntity
		public Assignment getEntityAssignment_1() { return cEntityAssignment_1; }
		
		//ContainedEntity
		public RuleCall getEntityContainedEntityParserRuleCall_1_0() { return cEntityContainedEntityParserRuleCall_1_0; }
		
		//alias=STRING
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }
		
		//STRING
		public RuleCall getAliasSTRINGTerminalRuleCall_2_0() { return cAliasSTRINGTerminalRuleCall_2_0; }
	}
	public class ContainedEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.ContainedEntity");
		private final Assignment cContainedAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cContainedEntityCrossReference_0 = (CrossReference)cContainedAssignment.eContents().get(0);
		private final RuleCall cContainedEntityIDTerminalRuleCall_0_1 = (RuleCall)cContainedEntityCrossReference_0.eContents().get(1);
		
		//ContainedEntity:
		//        contained=[jpadsl::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//contained=[jpadsl::Entity]
		public Assignment getContainedAssignment() { return cContainedAssignment; }
		
		//[jpadsl::Entity]
		public CrossReference getContainedEntityCrossReference_0() { return cContainedEntityCrossReference_0; }
		
		//ID
		public RuleCall getContainedEntityIDTerminalRuleCall_0_1() { return cContainedEntityIDTerminalRuleCall_0_1; }
	}
	public class QueryAndTypeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.QueryAndTypeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryAndTypeMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cQueryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQueryQueryMappingParserRuleCall_4_0 = (RuleCall)cQueryAssignment_4.eContents().get(0);
		private final Keyword cReturnKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeMappingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeMappingContainerCrossReference_6_0 = (CrossReference)cTypeMappingAssignment_6.eContents().get(0);
		private final RuleCall cTypeMappingContainerIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeMappingContainerCrossReference_6_0.eContents().get(1);
		private final Keyword cQueryParametersKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cQueryParametersAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cQueryParametersJvmFormalParameterParserRuleCall_9_0_0 = (RuleCall)cQueryParametersAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cQueryParametersAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cQueryParametersJvmFormalParameterParserRuleCall_9_1_1_0 = (RuleCall)cQueryParametersAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//QueryAndTypeMapping:
		//        'query and type mapping' name=ID '{'
		//                (imports+=Import)*
		//                query=QueryMapping
		//                'return -> ' typeMapping=[Container]
		//                'query parameters -> {'
		//                    '(' (queryParameters+=JvmFormalParameter (',' queryParameters+=JvmFormalParameter)*)? ')'
		//                '}'
		//        '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'query and type mapping' name=ID '{'
		//        (imports+=Import)*
		//        query=QueryMapping
		//        'return -> ' typeMapping=[Container]
		//        'query parameters -> {'
		//            '(' (queryParameters+=JvmFormalParameter (',' queryParameters+=JvmFormalParameter)*)? ')'
		//        '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'query and type mapping'
		public Keyword getQueryAndTypeMappingKeyword_0() { return cQueryAndTypeMappingKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(imports+=Import)*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//query=QueryMapping
		public Assignment getQueryAssignment_4() { return cQueryAssignment_4; }
		
		//QueryMapping
		public RuleCall getQueryQueryMappingParserRuleCall_4_0() { return cQueryQueryMappingParserRuleCall_4_0; }
		
		//'return -> '
		public Keyword getReturnKeyword_5() { return cReturnKeyword_5; }
		
		//typeMapping=[Container]
		public Assignment getTypeMappingAssignment_6() { return cTypeMappingAssignment_6; }
		
		//[Container]
		public CrossReference getTypeMappingContainerCrossReference_6_0() { return cTypeMappingContainerCrossReference_6_0; }
		
		//ID
		public RuleCall getTypeMappingContainerIDTerminalRuleCall_6_0_1() { return cTypeMappingContainerIDTerminalRuleCall_6_0_1; }
		
		//'query parameters -> {'
		public Keyword getQueryParametersKeyword_7() { return cQueryParametersKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//(queryParameters+=JvmFormalParameter (',' queryParameters+=JvmFormalParameter)*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//queryParameters+=JvmFormalParameter
		public Assignment getQueryParametersAssignment_9_0() { return cQueryParametersAssignment_9_0; }
		
		//JvmFormalParameter
		public RuleCall getQueryParametersJvmFormalParameterParserRuleCall_9_0_0() { return cQueryParametersJvmFormalParameterParserRuleCall_9_0_0; }
		
		//(',' queryParameters+=JvmFormalParameter)*
		public Group getGroup_9_1() { return cGroup_9_1; }
		
		//','
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }
		
		//queryParameters+=JvmFormalParameter
		public Assignment getQueryParametersAssignment_9_1_1() { return cQueryParametersAssignment_9_1_1; }
		
		//JvmFormalParameter
		public RuleCall getQueryParametersJvmFormalParameterParserRuleCall_9_1_1_0() { return cQueryParametersJvmFormalParameterParserRuleCall_9_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class QueryMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.QueryMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleResultQueryMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultipleResultQueryMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QueryMapping:
		//    SingleResultQueryMapping | MultipleResultQueryMapping;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleResultQueryMapping | MultipleResultQueryMapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleResultQueryMapping
		public RuleCall getSingleResultQueryMappingParserRuleCall_0() { return cSingleResultQueryMappingParserRuleCall_0; }
		
		//MultipleResultQueryMapping
		public RuleCall getMultipleResultQueryMappingParserRuleCall_1() { return cMultipleResultQueryMappingParserRuleCall_1; }
	}
	public class SingleResultQueryMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.SingleResultQueryMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleResultMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamedQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamedQueryNamedQueryCrossReference_1_0 = (CrossReference)cNamedQueryAssignment_1.eContents().get(0);
		private final RuleCall cNamedQueryNamedQueryIDTerminalRuleCall_1_0_1 = (RuleCall)cNamedQueryNamedQueryCrossReference_1_0.eContents().get(1);
		
		//SingleResultQueryMapping:
		//    'single result mapping' namedQuery=[jpaqldsl::NamedQuery];
		@Override public ParserRule getRule() { return rule; }
		
		//'single result mapping' namedQuery=[jpaqldsl::NamedQuery]
		public Group getGroup() { return cGroup; }
		
		//'single result mapping'
		public Keyword getSingleResultMappingKeyword_0() { return cSingleResultMappingKeyword_0; }
		
		//namedQuery=[jpaqldsl::NamedQuery]
		public Assignment getNamedQueryAssignment_1() { return cNamedQueryAssignment_1; }
		
		//[jpaqldsl::NamedQuery]
		public CrossReference getNamedQueryNamedQueryCrossReference_1_0() { return cNamedQueryNamedQueryCrossReference_1_0; }
		
		//ID
		public RuleCall getNamedQueryNamedQueryIDTerminalRuleCall_1_0_1() { return cNamedQueryNamedQueryIDTerminalRuleCall_1_0_1; }
	}
	public class MultipleResultQueryMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.MultipleResultQueryMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultipleResultMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamedQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamedQueryNamedQueryCrossReference_1_0 = (CrossReference)cNamedQueryAssignment_1.eContents().get(0);
		private final RuleCall cNamedQueryNamedQueryIDTerminalRuleCall_1_0_1 = (RuleCall)cNamedQueryNamedQueryCrossReference_1_0.eContents().get(1);
		
		//MultipleResultQueryMapping:
		//    'multiple result mapping' namedQuery=[jpaqldsl::NamedQuery];
		@Override public ParserRule getRule() { return rule; }
		
		//'multiple result mapping' namedQuery=[jpaqldsl::NamedQuery]
		public Group getGroup() { return cGroup; }
		
		//'multiple result mapping'
		public Keyword getMultipleResultMappingKeyword_0() { return cMultipleResultMappingKeyword_0; }
		
		//namedQuery=[jpaqldsl::NamedQuery]
		public Assignment getNamedQueryAssignment_1() { return cNamedQueryAssignment_1; }
		
		//[jpaqldsl::NamedQuery]
		public CrossReference getNamedQueryNamedQueryCrossReference_1_0() { return cNamedQueryNamedQueryCrossReference_1_0; }
		
		//ID
		public RuleCall getNamedQueryNamedQueryIDTerminalRuleCall_1_0_1() { return cNamedQueryNamedQueryIDTerminalRuleCall_1_0_1; }
	}
	public class StateAdjustmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.StateAdjustment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateAdjustmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cStateOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateOperationStateOperationParserRuleCall_4_0 = (RuleCall)cStateOperationAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StateAdjustment:
		//    'state adjustment' '{'
		//        name=ID
		//        (imports+=Import)*
		//        stateOperation=StateOperation
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'state adjustment' '{'
		//    name=ID
		//    (imports+=Import)*
		//    stateOperation=StateOperation
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'state adjustment'
		public Keyword getStateAdjustmentKeyword_0() { return cStateAdjustmentKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(imports+=Import)*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//stateOperation=StateOperation
		public Assignment getStateOperationAssignment_4() { return cStateOperationAssignment_4; }
		
		//StateOperation
		public RuleCall getStateOperationStateOperationParserRuleCall_4_0() { return cStateOperationStateOperationParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.StateOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPersistOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPersistAndAssociateOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssociateOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUpdateOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDeleteOperationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//StateOperation:
		//    PersistOperation |
		//    PersistAndAssociateOperation |
		//    AssociateOperation |
		//    UpdateOperation |
		//    DeleteOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//PersistOperation |
		//PersistAndAssociateOperation |
		//AssociateOperation |
		//UpdateOperation |
		//DeleteOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PersistOperation
		public RuleCall getPersistOperationParserRuleCall_0() { return cPersistOperationParserRuleCall_0; }
		
		//PersistAndAssociateOperation
		public RuleCall getPersistAndAssociateOperationParserRuleCall_1() { return cPersistAndAssociateOperationParserRuleCall_1; }
		
		//AssociateOperation
		public RuleCall getAssociateOperationParserRuleCall_2() { return cAssociateOperationParserRuleCall_2; }
		
		//UpdateOperation
		public RuleCall getUpdateOperationParserRuleCall_3() { return cUpdateOperationParserRuleCall_3; }
		
		//DeleteOperation
		public RuleCall getDeleteOperationParserRuleCall_4() { return cDeleteOperationParserRuleCall_4; }
	}
	public class PersistOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.PersistOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersistKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cThisEntityCrossReference_1_0 = (CrossReference)cThisAssignment_1.eContents().get(0);
		private final RuleCall cThisEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cThisEntityCrossReference_1_0.eContents().get(1);
		
		//PersistOperation:
		//    'persist ' this=[jpadsl::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'persist ' this=[jpadsl::Entity]
		public Group getGroup() { return cGroup; }
		
		//'persist '
		public Keyword getPersistKeyword_0() { return cPersistKeyword_0; }
		
		//this=[jpadsl::Entity]
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }
		
		//[jpadsl::Entity]
		public CrossReference getThisEntityCrossReference_1_0() { return cThisEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getThisEntityIDTerminalRuleCall_1_0_1() { return cThisEntityIDTerminalRuleCall_1_0_1; }
	}
	public class PersistAndAssociateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.PersistAndAssociateOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersistAndAssociateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNewEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNewEntityEntityCrossReference_1_0 = (CrossReference)cNewEntityAssignment_1.eContents().get(0);
		private final RuleCall cNewEntityEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cNewEntityEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cAssocialtionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAssocialtionRelationshipAttributeCrossReference_2_0 = (CrossReference)cAssocialtionAssignment_2.eContents().get(0);
		private final RuleCall cAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAssocialtionRelationshipAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cExistingEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExistingEntityEntityCrossReference_3_0 = (CrossReference)cExistingEntityAssignment_3.eContents().get(0);
		private final RuleCall cExistingEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cExistingEntityEntityCrossReference_3_0.eContents().get(1);
		
		//PersistAndAssociateOperation:
		//    'persist and associate ' newEntity=[jpadsl::Entity] associaltion=[jpadsl::RelationshipAttribute] existingEntity=[jpadsl::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'persist and associate ' newEntity=[jpadsl::Entity] associaltion=[jpadsl::RelationshipAttribute] existingEntity=[jpadsl::Entity]
		public Group getGroup() { return cGroup; }
		
		//'persist and associate '
		public Keyword getPersistAndAssociateKeyword_0() { return cPersistAndAssociateKeyword_0; }
		
		//newEntity=[jpadsl::Entity]
		public Assignment getNewEntityAssignment_1() { return cNewEntityAssignment_1; }
		
		//[jpadsl::Entity]
		public CrossReference getNewEntityEntityCrossReference_1_0() { return cNewEntityEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getNewEntityEntityIDTerminalRuleCall_1_0_1() { return cNewEntityEntityIDTerminalRuleCall_1_0_1; }
		
		//associaltion=[jpadsl::RelationshipAttribute]
		public Assignment getAssocialtionAssignment_2() { return cAssocialtionAssignment_2; }
		
		//[jpadsl::RelationshipAttribute]
		public CrossReference getAssocialtionRelationshipAttributeCrossReference_2_0() { return cAssocialtionRelationshipAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1() { return cAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1; }
		
		//existingEntity=[jpadsl::Entity]
		public Assignment getExistingEntityAssignment_3() { return cExistingEntityAssignment_3; }
		
		//[jpadsl::Entity]
		public CrossReference getExistingEntityEntityCrossReference_3_0() { return cExistingEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getExistingEntityEntityIDTerminalRuleCall_3_0_1() { return cExistingEntityEntityIDTerminalRuleCall_3_0_1; }
	}
	public class AssociateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.AssociateOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cThisEntityCrossReference_1_0 = (CrossReference)cThisAssignment_1.eContents().get(0);
		private final RuleCall cThisEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cThisEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cAssocialtionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAssocialtionRelationshipAttributeCrossReference_2_0 = (CrossReference)cAssocialtionAssignment_2.eContents().get(0);
		private final RuleCall cAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAssocialtionRelationshipAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cThatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cThatEntityCrossReference_3_0 = (CrossReference)cThatAssignment_3.eContents().get(0);
		private final RuleCall cThatEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cThatEntityCrossReference_3_0.eContents().get(1);
		
		//AssociateOperation:
		//    'associate ' this=[jpadsl::Entity] associaltion=[jpadsl::RelationshipAttribute] that=[jpadsl::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'associate ' this=[jpadsl::Entity] associaltion=[jpadsl::RelationshipAttribute] that=[jpadsl::Entity]
		public Group getGroup() { return cGroup; }
		
		//'associate '
		public Keyword getAssociateKeyword_0() { return cAssociateKeyword_0; }
		
		//this=[jpadsl::Entity]
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }
		
		//[jpadsl::Entity]
		public CrossReference getThisEntityCrossReference_1_0() { return cThisEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getThisEntityIDTerminalRuleCall_1_0_1() { return cThisEntityIDTerminalRuleCall_1_0_1; }
		
		//associaltion=[jpadsl::RelationshipAttribute]
		public Assignment getAssocialtionAssignment_2() { return cAssocialtionAssignment_2; }
		
		//[jpadsl::RelationshipAttribute]
		public CrossReference getAssocialtionRelationshipAttributeCrossReference_2_0() { return cAssocialtionRelationshipAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1() { return cAssocialtionRelationshipAttributeIDTerminalRuleCall_2_0_1; }
		
		//that=[jpadsl::Entity]
		public Assignment getThatAssignment_3() { return cThatAssignment_3; }
		
		//[jpadsl::Entity]
		public CrossReference getThatEntityCrossReference_3_0() { return cThatEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getThatEntityIDTerminalRuleCall_3_0_1() { return cThatEntityIDTerminalRuleCall_3_0_1; }
	}
	public class UpdateOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.UpdateOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cThisEntityCrossReference_1_0 = (CrossReference)cThisAssignment_1.eContents().get(0);
		private final RuleCall cThisEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cThisEntityCrossReference_1_0.eContents().get(1);
		
		//UpdateOperation:
		//    'update ' this=[jpadsl::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'update ' this=[jpadsl::Entity]
		public Group getGroup() { return cGroup; }
		
		//'update '
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }
		
		//this=[jpadsl::Entity]
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }
		
		//[jpadsl::Entity]
		public CrossReference getThisEntityCrossReference_1_0() { return cThisEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getThisEntityIDTerminalRuleCall_1_0_1() { return cThisEntityIDTerminalRuleCall_1_0_1; }
	}
	public class DeleteOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.DeleteOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThisAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cThisEntityCrossReference_1_0 = (CrossReference)cThisAssignment_1.eContents().get(0);
		private final RuleCall cThisEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cThisEntityCrossReference_1_0.eContents().get(1);
		
		//DeleteOperation:
		//    'delete ' this=[jpadsl::Entity];
		@Override public ParserRule getRule() { return rule; }
		
		//'delete ' this=[jpadsl::Entity]
		public Group getGroup() { return cGroup; }
		
		//'delete '
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//this=[jpadsl::Entity]
		public Assignment getThisAssignment_1() { return cThisAssignment_1; }
		
		//[jpadsl::Entity]
		public CrossReference getThisEntityCrossReference_1_0() { return cThisEntityCrossReference_1_0; }
		
		//ID
		public RuleCall getThisEntityIDTerminalRuleCall_1_0_1() { return cThisEntityIDTerminalRuleCall_1_0_1; }
	}
	public class ImportedNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "accessdsl.AccessDsl.importedNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//importedNamespace :
		//    QualifiedName  ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName  ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final UnitElements pUnit;
	private final PackageNameElements pPackageName;
	private final ContainerElements pContainer;
	private final ContainerElementElements pContainerElement;
	private final ContainedEntityElements pContainedEntity;
	private final QueryAndTypeMappingElements pQueryAndTypeMapping;
	private final QueryMappingElements pQueryMapping;
	private final SingleResultQueryMappingElements pSingleResultQueryMapping;
	private final MultipleResultQueryMappingElements pMultipleResultQueryMapping;
	private final StateAdjustmentElements pStateAdjustment;
	private final StateOperationElements pStateOperation;
	private final PersistOperationElements pPersistOperation;
	private final PersistAndAssociateOperationElements pPersistAndAssociateOperation;
	private final AssociateOperationElements pAssociateOperation;
	private final UpdateOperationElements pUpdateOperation;
	private final DeleteOperationElements pDeleteOperation;
	private final ImportedNamespaceElements pImportedNamespace;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public AccessDslGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pUnit = new UnitElements();
		this.pPackageName = new PackageNameElements();
		this.pContainer = new ContainerElements();
		this.pContainerElement = new ContainerElementElements();
		this.pContainedEntity = new ContainedEntityElements();
		this.pQueryAndTypeMapping = new QueryAndTypeMappingElements();
		this.pQueryMapping = new QueryMappingElements();
		this.pSingleResultQueryMapping = new SingleResultQueryMappingElements();
		this.pMultipleResultQueryMapping = new MultipleResultQueryMappingElements();
		this.pStateAdjustment = new StateAdjustmentElements();
		this.pStateOperation = new StateOperationElements();
		this.pPersistOperation = new PersistOperationElements();
		this.pPersistAndAssociateOperation = new PersistAndAssociateOperationElements();
		this.pAssociateOperation = new AssociateOperationElements();
		this.pUpdateOperation = new UpdateOperationElements();
		this.pDeleteOperation = new DeleteOperationElements();
		this.pImportedNamespace = new ImportedNamespaceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("accessdsl.AccessDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//    imports+=Import*
	//    unit=Unit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import:
	//    'import' importedNamespace=importedNamespace;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Unit:
	//    'access unit' name=QualifiedName '{'
	//        package=PackageName
	//        containers+=Container*
	//        querymapping+=QueryAndTypeMapping*
	//        stateAdjustment+=StateAdjustment*
	//    '}';
	public UnitElements getUnitAccess() {
		return pUnit;
	}
	
	public ParserRule getUnitRule() {
		return getUnitAccess().getRule();
	}
	
	//PackageName:
	//    'package name' name=QualifiedName;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//Container:
	//    'container' name=ID '{'
	//        containerElements+=ContainerElement*
	//    '}';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//ContainerElement:
	//    'element' entity=ContainedEntity alias=STRING;
	public ContainerElementElements getContainerElementAccess() {
		return pContainerElement;
	}
	
	public ParserRule getContainerElementRule() {
		return getContainerElementAccess().getRule();
	}
	
	//ContainedEntity:
	//        contained=[jpadsl::Entity];
	public ContainedEntityElements getContainedEntityAccess() {
		return pContainedEntity;
	}
	
	public ParserRule getContainedEntityRule() {
		return getContainedEntityAccess().getRule();
	}
	
	//QueryAndTypeMapping:
	//        'query and type mapping' name=ID '{'
	//                (imports+=Import)*
	//                query=QueryMapping
	//                'return -> ' typeMapping=[Container]
	//                'query parameters -> {'
	//                    '(' (queryParameters+=JvmFormalParameter (',' queryParameters+=JvmFormalParameter)*)? ')'
	//                '}'
	//        '}';
	public QueryAndTypeMappingElements getQueryAndTypeMappingAccess() {
		return pQueryAndTypeMapping;
	}
	
	public ParserRule getQueryAndTypeMappingRule() {
		return getQueryAndTypeMappingAccess().getRule();
	}
	
	//QueryMapping:
	//    SingleResultQueryMapping | MultipleResultQueryMapping;
	public QueryMappingElements getQueryMappingAccess() {
		return pQueryMapping;
	}
	
	public ParserRule getQueryMappingRule() {
		return getQueryMappingAccess().getRule();
	}
	
	//SingleResultQueryMapping:
	//    'single result mapping' namedQuery=[jpaqldsl::NamedQuery];
	public SingleResultQueryMappingElements getSingleResultQueryMappingAccess() {
		return pSingleResultQueryMapping;
	}
	
	public ParserRule getSingleResultQueryMappingRule() {
		return getSingleResultQueryMappingAccess().getRule();
	}
	
	//MultipleResultQueryMapping:
	//    'multiple result mapping' namedQuery=[jpaqldsl::NamedQuery];
	public MultipleResultQueryMappingElements getMultipleResultQueryMappingAccess() {
		return pMultipleResultQueryMapping;
	}
	
	public ParserRule getMultipleResultQueryMappingRule() {
		return getMultipleResultQueryMappingAccess().getRule();
	}
	
	//StateAdjustment:
	//    'state adjustment' '{'
	//        name=ID
	//        (imports+=Import)*
	//        stateOperation=StateOperation
	//    '}';
	public StateAdjustmentElements getStateAdjustmentAccess() {
		return pStateAdjustment;
	}
	
	public ParserRule getStateAdjustmentRule() {
		return getStateAdjustmentAccess().getRule();
	}
	
	//StateOperation:
	//    PersistOperation |
	//    PersistAndAssociateOperation |
	//    AssociateOperation |
	//    UpdateOperation |
	//    DeleteOperation;
	public StateOperationElements getStateOperationAccess() {
		return pStateOperation;
	}
	
	public ParserRule getStateOperationRule() {
		return getStateOperationAccess().getRule();
	}
	
	//PersistOperation:
	//    'persist ' this=[jpadsl::Entity];
	public PersistOperationElements getPersistOperationAccess() {
		return pPersistOperation;
	}
	
	public ParserRule getPersistOperationRule() {
		return getPersistOperationAccess().getRule();
	}
	
	//PersistAndAssociateOperation:
	//    'persist and associate ' newEntity=[jpadsl::Entity] associaltion=[jpadsl::RelationshipAttribute] existingEntity=[jpadsl::Entity];
	public PersistAndAssociateOperationElements getPersistAndAssociateOperationAccess() {
		return pPersistAndAssociateOperation;
	}
	
	public ParserRule getPersistAndAssociateOperationRule() {
		return getPersistAndAssociateOperationAccess().getRule();
	}
	
	//AssociateOperation:
	//    'associate ' this=[jpadsl::Entity] associaltion=[jpadsl::RelationshipAttribute] that=[jpadsl::Entity];
	public AssociateOperationElements getAssociateOperationAccess() {
		return pAssociateOperation;
	}
	
	public ParserRule getAssociateOperationRule() {
		return getAssociateOperationAccess().getRule();
	}
	
	//UpdateOperation:
	//    'update ' this=[jpadsl::Entity];
	public UpdateOperationElements getUpdateOperationAccess() {
		return pUpdateOperation;
	}
	
	public ParserRule getUpdateOperationRule() {
		return getUpdateOperationAccess().getRule();
	}
	
	//DeleteOperation:
	//    'delete ' this=[jpadsl::Entity];
	public DeleteOperationElements getDeleteOperationAccess() {
		return pDeleteOperation;
	}
	
	public ParserRule getDeleteOperationRule() {
		return getDeleteOperationAccess().getRule();
	}
	
	//importedNamespace :
	//    QualifiedName  ('.' '*')?;
	public ImportedNamespaceElements getImportedNamespaceAccess() {
		return pImportedNamespace;
	}
	
	public ParserRule getImportedNamespaceRule() {
		return getImportedNamespaceAccess().getRule();
	}
	
	//XExpression returns XExpression :
	//    XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment returns XExpression :
	//    {XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |
	//    XOrExpression (
	//        =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	//    )?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//    '='
	//;
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//    '+=' | '-=' | '*=' | '/=' | '%=' |
	//    '<' '<' '=' |
	//    '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression returns XExpression:
	//    XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr]) rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//    '||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression returns XExpression:
	//    XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//    '&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression returns XExpression:
	//    XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//    rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//    '==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression returns XExpression:
	//    XOtherOperatorExpression
	//    (=>({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//     =>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<' '=' | '>' | '<' ;
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression returns XExpression:
	//    XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//    rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//      '->'
	//    | '..<'
	//    | '>' '..'
	//    | '..'
	//    | '=>'
	//    | '>' (=>('>' '>') | '>')
	//    | '<' (=>('<' '<') | '<' | '=>')
	//    | '<>'
	//    | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression returns XExpression:
	//    XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//    rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//    '+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression returns XExpression:
	//    XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti]) rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//    '*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation returns XExpression:
	//    {XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//    | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//    "!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression returns XExpression:
	//    XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	//;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation returns XExpression:
	//    XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	//;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//    "++" | "--"
	//;
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall returns XExpression:
	//    XPrimaryExpression
	//    (=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//    |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::"))
	//        ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//        feature=[types::JvmIdentifiableElement|IdOrSuper] (
	//            =>explicitOperationCall?='('
	//                (
	//                    memberCallArguments+=XShortClosure
	//                  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                )?
	//            ')')?
	//            memberCallArguments+=XClosure?
	//        )*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression returns XExpression:
	//    XConstructorCall |
	//    XBlockExpression |
	//    XSwitchExpression |
	//    XSynchronizedExpression |
	//    XFeatureCall |
	//    XLiteral |
	//    XIfExpression |
	//    XForLoopExpression |
	//    XBasicForLoopExpression |
	//    XWhileExpression |
	//    XDoWhileExpression |
	//    XThrowExpression |
	//    XReturnExpression |
	//    XTryCatchFinallyExpression |
	//    XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral returns XExpression:
	//    XCollectionLiteral |
	//    XClosure |
	//    XBooleanLiteral |
	//    XNumberLiteral |
	//    XNullLiteral |
	//    XStringLiteral |
	//    XTypeLiteral
	//;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//    XSetLiteral | XListLiteral
	//;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//    {XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
	//;
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//    {XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
	//;
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure returns XExpression:
	//    =>({XClosure}
	//    '[')
	//        =>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?
	//        expression=XExpressionInClosure
	//    ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure returns XExpression:
	//    {XBlockExpression}
	//    (expressions+=XExpressionOrVarDeclaration ';'?)*
	//;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure returns XExpression:
	//    =>({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression returns XExpression:
	//    '(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression returns XExpression:
	//    {XIfExpression}
	//    'if' '(' if=XExpression ')'
	//    then=XExpression
	//    (=>'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression returns XExpression:
	//    {XSwitchExpression}
	//    'switch' (=>('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//        | =>(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//    (cases+=XCasePart)*
	//    ('default' ':' default=XExpression )?
	//    '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//    {XCasePart}
	//    typeGuard=JvmTypeReference? ('case' case=XExpression)?
	//        (':' then=XExpression | fallThrough?=',') ;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression returns XExpression:
	//    =>({XForLoopExpression}
	//    'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression returns XExpression:
	//    {XBasicForLoopExpression}
	//    'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//        expression=XExpression? ';'
	//        (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//        eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression returns XExpression:
	//    {XWhileExpression}
	//    'while' '(' predicate=XExpression ')'
	//        body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression returns XExpression:
	//    {XDoWhileExpression}
	//    'do'
	//        body=XExpression
	//    'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression returns XExpression:
	//    {XBlockExpression}
	//    '{'
	//        (expressions+=XExpressionOrVarDeclaration ';'?)*
	//    '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration returns XExpression:
	//    XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration returns XExpression:
	//    {XVariableDeclaration}
	//    (writeable?='var'|'val') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter returns types::JvmFormalParameter:
	//    (parameterType=JvmTypeReference)? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//    parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall returns XExpression:
	//    {XFeatureCall}
	//    ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    feature=[types::JvmIdentifiableElement|IdOrSuper]
	//    (=>explicitOperationCall?='('
	//        (
	//            featureCallArguments+=XShortClosure
	//          | featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
	//        )?
	//    ')')?
	//    featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//    ValidID | 'extends' | 'static' | 'import' | 'extension'
	//;
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper :
	//    FeatureCallID | 'super'
	//;
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall returns XExpression:
	//    {XConstructorCall}
	//    'new' constructor=[types::JvmConstructor|QualifiedName]
	//    (=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//    (=>explicitConstructorCall?='('
	//        (
	//            arguments+=XShortClosure
	//          | arguments+=XExpression (',' arguments+=XExpression)*
	//        )?
	//    ')')?
	//    arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral returns XExpression :
	//    {XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral returns XExpression :
	//    {XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral returns XExpression :
	//    {XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral returns XExpression:
	//    {XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral returns XExpression :
	//    {XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] (arrayDimensions+=ArrayBrackets)* ')'
	//;
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression returns XExpression :
	//    {XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression returns XExpression :
	//    {XReturnExpression} 'return' (->expression=XExpression)?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression returns XExpression:
	//    {XTryCatchFinallyExpression}
	//    'try'
	//        expression=XExpression
	//    (
	//        catchClauses+=XCatchClause+
	//        (=>'finally' finallyExpression=XExpression)?
	//    |    'finally' finallyExpression=XExpression
	//    );
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression returns XExpression:
	//    =>({XSynchronizedExpression}
	//    'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause :
	//    =>'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//    ValidID (=>'.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//    HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//    (ValidID '::')+
	//;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//    ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+
	//    ('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//    '0'..'9' ('0'..'9'|'_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//    INT
	//    (('e'|'E') ('+'|'-')? INT)?
	//    (('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//    JvmParameterizedTypeReference =>({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//    | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets :
	//    '[' ']'
	//;
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//    ('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//    type=[JvmType|QualifiedName] (
	//        =>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>'
	//        (=>({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*
	//    )?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference returns JvmTypeReference:
	//    JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//    {JvmWildcardTypeReference} '?' (
	//      constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*
	//    | constraints+=JvmLowerBound (constraints+=JvmLowerBoundAnded)*
	//    )?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound :
	//    'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded returns JvmUpperBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound :
	//    'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded returns JvmLowerBound:
	//    '&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter :
	//    name=ValidID
	//    (constraints+=JvmUpperBound (constraints+=JvmUpperBoundAnded)*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard :
	//    QualifiedName  '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//    ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//    importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//    'import' (
	//        (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=ValidID))
	//        | importedType=[JvmDeclaredType|QualifiedName]
	//        | importedNamespace=QualifiedNameWithWildcard) ';'?
	//;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//    (ValidID '.')+
	//;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//    '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'? |
	//            "'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT: '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS: (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
