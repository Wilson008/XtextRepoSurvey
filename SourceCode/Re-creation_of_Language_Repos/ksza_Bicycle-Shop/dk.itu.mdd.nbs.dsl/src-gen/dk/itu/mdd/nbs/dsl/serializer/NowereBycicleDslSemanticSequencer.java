/*
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nbs.dsl.serializer;

import com.google.inject.Inject;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Bicycle;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.CustomerData;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Frame;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.HandBrakes;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.HandleBars;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.InnerGear;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.NowhereBycicleDslPackage;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.OuterGear;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Pedals;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Saddle;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Wheel;
import dk.itu.mdd.nbs.dsl.services.NowereBycicleDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class NowereBycicleDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NowereBycicleDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == NowhereBycicleDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case NowhereBycicleDslPackage.BICYCLE:
				sequence_Bicycle(context, (Bicycle) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.CUSTOMER_DATA:
				sequence_CustomerData(context, (CustomerData) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.FRAME:
				sequence_Frame(context, (Frame) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.HAND_BRAKES:
				sequence_HandBrakes(context, (HandBrakes) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.HANDLE_BARS:
				sequence_HandleBars(context, (HandleBars) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.INNER_GEAR:
				sequence_InnerGear(context, (InnerGear) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.OUTER_GEAR:
				sequence_OuterGear(context, (OuterGear) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.PARAMETER:
				sequence_Parameter(context, (dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Parameter) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.PEDALS:
				sequence_Pedals(context, (Pedals) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.SADDLE:
				sequence_Saddle(context, (Saddle) semanticObject); 
				return; 
			case NowhereBycicleDslPackage.WHEEL:
				sequence_Wheel(context, (Wheel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Bicycle returns Bicycle
	 *
	 * Constraint:
	 *     (deliveryDate=EString? parts+=Part+ customerData+=CustomerData? parameters+=Parameter*)
	 * </pre>
	 */
	protected void sequence_Bicycle(ISerializationContext context, Bicycle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CustomerData returns CustomerData
	 *
	 * Constraint:
	 *     (name=EString address=EString? parameters+=Parameter*)
	 * </pre>
	 */
	protected void sequence_CustomerData(ISerializationContext context, CustomerData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns Frame
	 *     Frame returns Frame
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers? frameType=FrameType? color=Color?)
	 * </pre>
	 */
	protected void sequence_Frame(ISerializationContext context, Frame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns HandBrakes
	 *     HandBrakes returns HandBrakes
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers?)
	 * </pre>
	 */
	protected void sequence_HandBrakes(ISerializationContext context, HandBrakes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns HandleBars
	 *     HandleBars returns HandleBars
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers?)
	 * </pre>
	 */
	protected void sequence_HandleBars(ISerializationContext context, HandleBars semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns InnerGear
	 *     InnerGear returns InnerGear
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers?)
	 * </pre>
	 */
	protected void sequence_InnerGear(ISerializationContext context, InnerGear semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns OuterGear
	 *     OuterGear returns OuterGear
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers?)
	 * </pre>
	 */
	protected void sequence_OuterGear(ISerializationContext context, OuterGear semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString value=EString?)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns Pedals
	 *     Pedals returns Pedals
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers? pedalType=PedalTypes?)
	 * </pre>
	 */
	protected void sequence_Pedals(ISerializationContext context, Pedals semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns Saddle
	 *     Saddle returns Saddle
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers? saddleType=SaddleType?)
	 * </pre>
	 */
	protected void sequence_Saddle(ISerializationContext context, Saddle semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Part returns Wheel
	 *     Wheel returns Wheel
	 *
	 * Constraint:
	 *     (name=EString price=EDouble? manufacturer=Manufacturers?)
	 * </pre>
	 */
	protected void sequence_Wheel(ISerializationContext context, Wheel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
