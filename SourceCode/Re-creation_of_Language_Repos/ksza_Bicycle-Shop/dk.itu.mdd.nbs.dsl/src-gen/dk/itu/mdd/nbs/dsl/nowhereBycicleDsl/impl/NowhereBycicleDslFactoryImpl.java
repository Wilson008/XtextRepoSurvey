/**
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.impl;

import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NowhereBycicleDslFactoryImpl extends EFactoryImpl implements NowhereBycicleDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NowhereBycicleDslFactory init()
  {
    try
    {
      NowhereBycicleDslFactory theNowhereBycicleDslFactory = (NowhereBycicleDslFactory)EPackage.Registry.INSTANCE.getEFactory(NowhereBycicleDslPackage.eNS_URI);
      if (theNowhereBycicleDslFactory != null)
      {
        return theNowhereBycicleDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NowhereBycicleDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NowhereBycicleDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NowhereBycicleDslPackage.BICYCLE: return createBicycle();
      case NowhereBycicleDslPackage.PART: return createPart();
      case NowhereBycicleDslPackage.CUSTOMER_DATA: return createCustomerData();
      case NowhereBycicleDslPackage.PARAMETER: return createParameter();
      case NowhereBycicleDslPackage.FRAME: return createFrame();
      case NowhereBycicleDslPackage.WHEEL: return createWheel();
      case NowhereBycicleDslPackage.INNER_GEAR: return createInnerGear();
      case NowhereBycicleDslPackage.OUTER_GEAR: return createOuterGear();
      case NowhereBycicleDslPackage.PEDALS: return createPedals();
      case NowhereBycicleDslPackage.SADDLE: return createSaddle();
      case NowhereBycicleDslPackage.HAND_BRAKES: return createHandBrakes();
      case NowhereBycicleDslPackage.HANDLE_BARS: return createHandleBars();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case NowhereBycicleDslPackage.MANUFACTURERS:
        return createManufacturersFromString(eDataType, initialValue);
      case NowhereBycicleDslPackage.FRAME_TYPE:
        return createFrameTypeFromString(eDataType, initialValue);
      case NowhereBycicleDslPackage.COLOR:
        return createColorFromString(eDataType, initialValue);
      case NowhereBycicleDslPackage.PEDAL_TYPES:
        return createPedalTypesFromString(eDataType, initialValue);
      case NowhereBycicleDslPackage.SADDLE_TYPE:
        return createSaddleTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case NowhereBycicleDslPackage.MANUFACTURERS:
        return convertManufacturersToString(eDataType, instanceValue);
      case NowhereBycicleDslPackage.FRAME_TYPE:
        return convertFrameTypeToString(eDataType, instanceValue);
      case NowhereBycicleDslPackage.COLOR:
        return convertColorToString(eDataType, instanceValue);
      case NowhereBycicleDslPackage.PEDAL_TYPES:
        return convertPedalTypesToString(eDataType, instanceValue);
      case NowhereBycicleDslPackage.SADDLE_TYPE:
        return convertSaddleTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bicycle createBicycle()
  {
    BicycleImpl bicycle = new BicycleImpl();
    return bicycle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Part createPart()
  {
    PartImpl part = new PartImpl();
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomerData createCustomerData()
  {
    CustomerDataImpl customerData = new CustomerDataImpl();
    return customerData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Frame createFrame()
  {
    FrameImpl frame = new FrameImpl();
    return frame;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Wheel createWheel()
  {
    WheelImpl wheel = new WheelImpl();
    return wheel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InnerGear createInnerGear()
  {
    InnerGearImpl innerGear = new InnerGearImpl();
    return innerGear;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OuterGear createOuterGear()
  {
    OuterGearImpl outerGear = new OuterGearImpl();
    return outerGear;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pedals createPedals()
  {
    PedalsImpl pedals = new PedalsImpl();
    return pedals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Saddle createSaddle()
  {
    SaddleImpl saddle = new SaddleImpl();
    return saddle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HandBrakes createHandBrakes()
  {
    HandBrakesImpl handBrakes = new HandBrakesImpl();
    return handBrakes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HandleBars createHandleBars()
  {
    HandleBarsImpl handleBars = new HandleBarsImpl();
    return handleBars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Manufacturers createManufacturersFromString(EDataType eDataType, String initialValue)
  {
    Manufacturers result = Manufacturers.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertManufacturersToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FrameType createFrameTypeFromString(EDataType eDataType, String initialValue)
  {
    FrameType result = FrameType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFrameTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColorFromString(EDataType eDataType, String initialValue)
  {
    Color result = Color.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertColorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PedalTypes createPedalTypesFromString(EDataType eDataType, String initialValue)
  {
    PedalTypes result = PedalTypes.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPedalTypesToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SaddleType createSaddleTypeFromString(EDataType eDataType, String initialValue)
  {
    SaddleType result = SaddleType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSaddleTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NowhereBycicleDslPackage getNowhereBycicleDslPackage()
  {
    return (NowhereBycicleDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NowhereBycicleDslPackage getPackage()
  {
    return NowhereBycicleDslPackage.eINSTANCE;
  }

} //NowhereBycicleDslFactoryImpl
