/**
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.impl;

import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.NowhereBycicleDslPackage;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Saddle;
import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.SaddleType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Saddle</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.impl.SaddleImpl#getSaddleType <em>Saddle Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SaddleImpl extends PartImpl implements Saddle
{
  /**
   * The default value of the '{@link #getSaddleType() <em>Saddle Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaddleType()
   * @generated
   * @ordered
   */
  protected static final SaddleType SADDLE_TYPE_EDEFAULT = SaddleType.RACING_SADDLE;

  /**
   * The cached value of the '{@link #getSaddleType() <em>Saddle Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSaddleType()
   * @generated
   * @ordered
   */
  protected SaddleType saddleType = SADDLE_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SaddleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NowhereBycicleDslPackage.Literals.SADDLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SaddleType getSaddleType()
  {
    return saddleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSaddleType(SaddleType newSaddleType)
  {
    SaddleType oldSaddleType = saddleType;
    saddleType = newSaddleType == null ? SADDLE_TYPE_EDEFAULT : newSaddleType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NowhereBycicleDslPackage.SADDLE__SADDLE_TYPE, oldSaddleType, saddleType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NowhereBycicleDslPackage.SADDLE__SADDLE_TYPE:
        return getSaddleType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NowhereBycicleDslPackage.SADDLE__SADDLE_TYPE:
        setSaddleType((SaddleType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NowhereBycicleDslPackage.SADDLE__SADDLE_TYPE:
        setSaddleType(SADDLE_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NowhereBycicleDslPackage.SADDLE__SADDLE_TYPE:
        return saddleType != SADDLE_TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (saddleType: ");
    result.append(saddleType);
    result.append(')');
    return result.toString();
  }

} //SaddleImpl
