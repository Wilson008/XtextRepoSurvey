/**
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.util;

import dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.NowhereBycicleDslPackage
 * @generated
 */
public class NowhereBycicleDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NowhereBycicleDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NowhereBycicleDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = NowhereBycicleDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NowhereBycicleDslSwitch<Adapter> modelSwitch =
    new NowhereBycicleDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseBicycle(Bicycle object)
      {
        return createBicycleAdapter();
      }
      @Override
      public Adapter casePart(Part object)
      {
        return createPartAdapter();
      }
      @Override
      public Adapter caseCustomerData(CustomerData object)
      {
        return createCustomerDataAdapter();
      }
      @Override
      public Adapter caseParameter(Parameter object)
      {
        return createParameterAdapter();
      }
      @Override
      public Adapter caseFrame(Frame object)
      {
        return createFrameAdapter();
      }
      @Override
      public Adapter caseWheel(Wheel object)
      {
        return createWheelAdapter();
      }
      @Override
      public Adapter caseInnerGear(InnerGear object)
      {
        return createInnerGearAdapter();
      }
      @Override
      public Adapter caseOuterGear(OuterGear object)
      {
        return createOuterGearAdapter();
      }
      @Override
      public Adapter casePedals(Pedals object)
      {
        return createPedalsAdapter();
      }
      @Override
      public Adapter caseSaddle(Saddle object)
      {
        return createSaddleAdapter();
      }
      @Override
      public Adapter caseHandBrakes(HandBrakes object)
      {
        return createHandBrakesAdapter();
      }
      @Override
      public Adapter caseHandleBars(HandleBars object)
      {
        return createHandleBarsAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Bicycle <em>Bicycle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Bicycle
   * @generated
   */
  public Adapter createBicycleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Part <em>Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Part
   * @generated
   */
  public Adapter createPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.CustomerData <em>Customer Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.CustomerData
   * @generated
   */
  public Adapter createCustomerDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Parameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Parameter
   * @generated
   */
  public Adapter createParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Frame <em>Frame</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Frame
   * @generated
   */
  public Adapter createFrameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Wheel <em>Wheel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Wheel
   * @generated
   */
  public Adapter createWheelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.InnerGear <em>Inner Gear</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.InnerGear
   * @generated
   */
  public Adapter createInnerGearAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.OuterGear <em>Outer Gear</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.OuterGear
   * @generated
   */
  public Adapter createOuterGearAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Pedals <em>Pedals</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Pedals
   * @generated
   */
  public Adapter createPedalsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Saddle <em>Saddle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.Saddle
   * @generated
   */
  public Adapter createSaddleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.HandBrakes <em>Hand Brakes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.HandBrakes
   * @generated
   */
  public Adapter createHandBrakesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.HandleBars <em>Handle Bars</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dk.itu.mdd.nbs.dsl.nowhereBycicleDsl.HandleBars
   * @generated
   */
  public Adapter createHandleBarsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //NowhereBycicleDslAdapterFactory
