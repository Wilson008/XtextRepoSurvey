/*
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nowheretravel.dsl.serializer;

import com.google.inject.Inject;
import dk.itu.mdd.nowheretravel.dsl.services.NowhereTravelDslGrammarAccess;
import java.util.Set;
import nowheretravel.CarRental;
import nowheretravel.Connection;
import nowheretravel.Data;
import nowheretravel.End;
import nowheretravel.Flight;
import nowheretravel.Hotel;
import nowheretravel.Insurance;
import nowheretravel.NowheretravelPackage;
import nowheretravel.ParachuteTour;
import nowheretravel.Start;
import nowheretravel.Travel;
import nowheretravel.TrekkingTour;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NowhereTravelDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NowhereTravelDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == NowheretravelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case NowheretravelPackage.CAR_RENTAL:
				sequence_CarRental(context, (CarRental) semanticObject); 
				return; 
			case NowheretravelPackage.CONNECTION:
				sequence_Connection(context, (Connection) semanticObject); 
				return; 
			case NowheretravelPackage.DATA:
				sequence_Data(context, (Data) semanticObject); 
				return; 
			case NowheretravelPackage.END:
				sequence_End(context, (End) semanticObject); 
				return; 
			case NowheretravelPackage.FLIGHT:
				sequence_Flight(context, (Flight) semanticObject); 
				return; 
			case NowheretravelPackage.HOTEL:
				sequence_Hotel(context, (Hotel) semanticObject); 
				return; 
			case NowheretravelPackage.INSURANCE:
				sequence_Insurance(context, (Insurance) semanticObject); 
				return; 
			case NowheretravelPackage.PARACHUTE_TOUR:
				sequence_ParachuteTour(context, (ParachuteTour) semanticObject); 
				return; 
			case NowheretravelPackage.PARAMETER:
				sequence_Parameter(context, (nowheretravel.Parameter) semanticObject); 
				return; 
			case NowheretravelPackage.START:
				sequence_Start(context, (Start) semanticObject); 
				return; 
			case NowheretravelPackage.TRAVEL:
				sequence_Travel(context, (Travel) semanticObject); 
				return; 
			case NowheretravelPackage.TREKKING_TOUR:
				sequence_TrekkingTour(context, (TrekkingTour) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Item returns CarRental
	 *     Node returns CarRental
	 *     CarRental returns CarRental
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_CarRental(ISerializationContext context, CarRental semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarRentalAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Connection returns Connection
	 *
	 * Constraint:
	 *     (name=EString sourceNode=[Node|EString] targetNode=[Node|EString])
	 * </pre>
	 */
	protected void sequence_Connection(ISerializationContext context, Connection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.CONNECTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.CONNECTION__NAME));
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.CONNECTION__SOURCE_NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.CONNECTION__SOURCE_NODE));
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.CONNECTION__TARGET_NODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.CONNECTION__TARGET_NODE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConnectionAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConnectionAccess().getSourceNodeNodeEStringParserRuleCall_2_0_1(), semanticObject.eGet(NowheretravelPackage.Literals.CONNECTION__SOURCE_NODE, false));
		feeder.accept(grammarAccess.getConnectionAccess().getTargetNodeNodeEStringParserRuleCall_3_0_1(), semanticObject.eGet(NowheretravelPackage.Literals.CONNECTION__TARGET_NODE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Data returns Data
	 *
	 * Constraint:
	 *     (name=EString parameters+=Parameter?)
	 * </pre>
	 */
	protected void sequence_Data(ISerializationContext context, Data semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Node returns End
	 *     End returns End
	 *
	 * Constraint:
	 *     {End}
	 * </pre>
	 */
	protected void sequence_End(ISerializationContext context, End semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Item returns Flight
	 *     Node returns Flight
	 *     Flight returns Flight
	 *
	 * Constraint:
	 *     (name=EString destinationTown=EString? destinationCountry=EString?)
	 * </pre>
	 */
	protected void sequence_Flight(ISerializationContext context, Flight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Item returns Hotel
	 *     Node returns Hotel
	 *     Hotel returns Hotel
	 *
	 * Constraint:
	 *     (name=EString hotelName=EString?)
	 * </pre>
	 */
	protected void sequence_Hotel(ISerializationContext context, Hotel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Item returns Insurance
	 *     Node returns Insurance
	 *     Insurance returns Insurance
	 *
	 * Constraint:
	 *     (name=EString type=InsuranceType?)
	 * </pre>
	 */
	protected void sequence_Insurance(ISerializationContext context, Insurance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Item returns ParachuteTour
	 *     Node returns ParachuteTour
	 *     ParachuteTour returns ParachuteTour
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_ParachuteTour(ISerializationContext context, ParachuteTour semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParachuteTourAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString value=EString)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, nowheretravel.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getValueEStringParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Node returns Start
	 *     Start returns Start
	 *
	 * Constraint:
	 *     {Start}
	 * </pre>
	 */
	protected void sequence_Start(ISerializationContext context, Start semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Travel returns Travel
	 *
	 * Constraint:
	 *     (start=Start items+=Item+ data+=Data connections+=Connection* end=End)
	 * </pre>
	 */
	protected void sequence_Travel(ISerializationContext context, Travel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Item returns TrekkingTour
	 *     Node returns TrekkingTour
	 *     TrekkingTour returns TrekkingTour
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_TrekkingTour(ISerializationContext context, TrekkingTour semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NowheretravelPackage.Literals.ITEM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NowheretravelPackage.Literals.ITEM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrekkingTourAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
