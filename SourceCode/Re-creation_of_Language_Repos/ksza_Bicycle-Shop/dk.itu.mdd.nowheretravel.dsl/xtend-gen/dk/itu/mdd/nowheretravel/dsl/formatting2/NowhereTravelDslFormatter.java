/**
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nowheretravel.dsl.formatting2;

import com.google.inject.Inject;
import dk.itu.mdd.nowheretravel.dsl.services.NowhereTravelDslGrammarAccess;
import java.util.Arrays;
import nowheretravel.Connection;
import nowheretravel.Data;
import nowheretravel.End;
import nowheretravel.Item;
import nowheretravel.Parameter;
import nowheretravel.Start;
import nowheretravel.Travel;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class NowhereTravelDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private NowhereTravelDslGrammarAccess _nowhereTravelDslGrammarAccess;

  protected void _format(final Travel travel, @Extension final IFormattableDocument document) {
    document.<Start>format(travel.getStart());
    EList<Item> _items = travel.getItems();
    for (final Item item : _items) {
      document.<Item>format(item);
    }
    EList<Data> _data = travel.getData();
    for (final Data data : _data) {
      document.<Data>format(data);
    }
    EList<Connection> _connections = travel.getConnections();
    for (final Connection connection : _connections) {
      document.<Connection>format(connection);
    }
    document.<End>format(travel.getEnd());
  }

  protected void _format(final Data data, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = data.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
  }

  public void format(final Object data, final IFormattableDocument document) {
    if (data instanceof XtextResource) {
      _format((XtextResource)data, document);
      return;
    } else if (data instanceof Data) {
      _format((Data)data, document);
      return;
    } else if (data instanceof Travel) {
      _format((Travel)data, document);
      return;
    } else if (data instanceof EObject) {
      _format((EObject)data, document);
      return;
    } else if (data == null) {
      _format((Void)null, document);
      return;
    } else if (data != null) {
      _format(data, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(data, document).toString());
    }
  }
}
