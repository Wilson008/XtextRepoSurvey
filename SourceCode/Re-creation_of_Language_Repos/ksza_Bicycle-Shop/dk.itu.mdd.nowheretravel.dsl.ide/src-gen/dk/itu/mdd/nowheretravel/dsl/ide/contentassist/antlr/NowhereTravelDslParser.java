/*
 * generated by Xtext 2.35.0
 */
package dk.itu.mdd.nowheretravel.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.itu.mdd.nowheretravel.dsl.ide.contentassist.antlr.internal.InternalNowhereTravelDslParser;
import dk.itu.mdd.nowheretravel.dsl.services.NowhereTravelDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class NowhereTravelDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NowhereTravelDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NowhereTravelDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getItemAccess().getAlternatives(), "rule__Item__Alternatives");
			builder.put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getInsuranceTypeAccess().getAlternatives(), "rule__InsuranceType__Alternatives");
			builder.put(grammarAccess.getTravelAccess().getGroup(), "rule__Travel__Group__0");
			builder.put(grammarAccess.getDataAccess().getGroup(), "rule__Data__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getFlightAccess().getGroup(), "rule__Flight__Group__0");
			builder.put(grammarAccess.getFlightAccess().getGroup_3(), "rule__Flight__Group_3__0");
			builder.put(grammarAccess.getFlightAccess().getGroup_4(), "rule__Flight__Group_4__0");
			builder.put(grammarAccess.getHotelAccess().getGroup(), "rule__Hotel__Group__0");
			builder.put(grammarAccess.getHotelAccess().getGroup_3(), "rule__Hotel__Group_3__0");
			builder.put(grammarAccess.getTrekkingTourAccess().getGroup(), "rule__TrekkingTour__Group__0");
			builder.put(grammarAccess.getParachuteTourAccess().getGroup(), "rule__ParachuteTour__Group__0");
			builder.put(grammarAccess.getCarRentalAccess().getGroup(), "rule__CarRental__Group__0");
			builder.put(grammarAccess.getInsuranceAccess().getGroup(), "rule__Insurance__Group__0");
			builder.put(grammarAccess.getInsuranceAccess().getGroup_3(), "rule__Insurance__Group_3__0");
			builder.put(grammarAccess.getTravelAccess().getStartAssignment_2(), "rule__Travel__StartAssignment_2");
			builder.put(grammarAccess.getTravelAccess().getItemsAssignment_3(), "rule__Travel__ItemsAssignment_3");
			builder.put(grammarAccess.getTravelAccess().getDataAssignment_4(), "rule__Travel__DataAssignment_4");
			builder.put(grammarAccess.getTravelAccess().getConnectionsAssignment_5(), "rule__Travel__ConnectionsAssignment_5");
			builder.put(grammarAccess.getTravelAccess().getEndAssignment_6(), "rule__Travel__EndAssignment_6");
			builder.put(grammarAccess.getDataAccess().getNameAssignment_1(), "rule__Data__NameAssignment_1");
			builder.put(grammarAccess.getDataAccess().getParametersAssignment_2(), "rule__Data__ParametersAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_2(), "rule__Parameter__ValueAssignment_2");
			builder.put(grammarAccess.getConnectionAccess().getNameAssignment_1(), "rule__Connection__NameAssignment_1");
			builder.put(grammarAccess.getConnectionAccess().getSourceNodeAssignment_2(), "rule__Connection__SourceNodeAssignment_2");
			builder.put(grammarAccess.getConnectionAccess().getTargetNodeAssignment_3(), "rule__Connection__TargetNodeAssignment_3");
			builder.put(grammarAccess.getFlightAccess().getNameAssignment_2(), "rule__Flight__NameAssignment_2");
			builder.put(grammarAccess.getFlightAccess().getDestinationTownAssignment_3_1(), "rule__Flight__DestinationTownAssignment_3_1");
			builder.put(grammarAccess.getFlightAccess().getDestinationCountryAssignment_4_1(), "rule__Flight__DestinationCountryAssignment_4_1");
			builder.put(grammarAccess.getHotelAccess().getNameAssignment_2(), "rule__Hotel__NameAssignment_2");
			builder.put(grammarAccess.getHotelAccess().getHotelNameAssignment_3_1(), "rule__Hotel__HotelNameAssignment_3_1");
			builder.put(grammarAccess.getTrekkingTourAccess().getNameAssignment_2(), "rule__TrekkingTour__NameAssignment_2");
			builder.put(grammarAccess.getParachuteTourAccess().getNameAssignment_2(), "rule__ParachuteTour__NameAssignment_2");
			builder.put(grammarAccess.getCarRentalAccess().getNameAssignment_2(), "rule__CarRental__NameAssignment_2");
			builder.put(grammarAccess.getInsuranceAccess().getNameAssignment_2(), "rule__Insurance__NameAssignment_2");
			builder.put(grammarAccess.getInsuranceAccess().getTypeAssignment_3_1(), "rule__Insurance__TypeAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NowhereTravelDslGrammarAccess grammarAccess;

	@Override
	protected InternalNowhereTravelDslParser createParser() {
		InternalNowhereTravelDslParser result = new InternalNowhereTravelDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public NowhereTravelDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NowhereTravelDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
