/*
 * generated by Xtext 2.35.0
 */
package de.sos.etj.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ETJGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProjectProjectParserRuleCall_0_0 = (RuleCall)cProjectAssignment_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_1_0 = (RuleCall)cPropertiesAssignment_1.eContents().get(0);
		
		////
		//// The pattern used here for specifying attributes
		//// XXXX:
		////  'xxxx' ..... ( '{' attributes+=XxxxAttribute* '}' )?;
		////
		//// XxxxAttribute:
		////    Yyyy | Zzzz | ....
		////
		//// See Account below for real life example.  This pattern is
		//// in use because TaskJuggler permits attributes in any
		//// order and permits repeats
		////
		//// TODO: Include
		//// project is optional so the same rules can be
		//// used for tji files.
		//Global: project=Project? properties+=Property*;
		@Override public ParserRule getRule() { return rule; }
		
		//project=Project? properties+=Property*
		public Group getGroup() { return cGroup; }
		
		//project=Project?
		public Assignment getProjectAssignment_0() { return cProjectAssignment_0; }
		
		//Project
		public RuleCall getProjectProjectParserRuleCall_0_0() { return cProjectProjectParserRuleCall_0_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_1() { return cPropertiesAssignment_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_1_0() { return cPropertiesPropertyParserRuleCall_1_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAccountReportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBalanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCopyrightParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCellColorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExportParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFlagsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIcalReportParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIncludePropertiesParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLimitsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMacroParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNavigatorParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cNikuReportParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cProjectIdsParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRateParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cResourceReportParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cTaskReportParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cTextReportParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cResourceParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cShiftParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cStatusSheetParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cStatusSheetReportParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cSupplementAccountParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSupplementReportParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cSupplementResourceParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cSupplementTaskParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cTagFileParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cTaskParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cTimesheetParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cTimesheetReportParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cToolTipParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cVacationParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cLeavesParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cAllocateParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		
		//Property:
		//    Account
		//    | AccountReport
		//    | Balance
		//    | Copyright
		//    | CellColor
		//    | Export
		//    | Flags
		//    | IcalReport
		//    | IncludeProperties
		//    | Limits
		//    | Macro
		//    | Navigator
		//    | NikuReport
		//    | ProjectIds
		//    | Rate
		//    | ResourceReport
		//    | TaskReport
		//    | TextReport
		//    | Resource
		//    | Shift
		//    | StatusSheet
		//    | StatusSheetReport
		//    | SupplementAccount
		//    | SupplementReport
		//    | SupplementResource
		//    | SupplementTask
		//    | TagFile
		//    | Task
		//    | Timesheet
		//    | TimesheetReport
		//    | ToolTip
		//    | Vacation
		//    | Leaves
		//    | Allocate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Account
		//| AccountReport
		//| Balance
		//| Copyright
		//| CellColor
		//| Export
		//| Flags
		//| IcalReport
		//| IncludeProperties
		//| Limits
		//| Macro
		//| Navigator
		//| NikuReport
		//| ProjectIds
		//| Rate
		//| ResourceReport
		//| TaskReport
		//| TextReport
		//| Resource
		//| Shift
		//| StatusSheet
		//| StatusSheetReport
		//| SupplementAccount
		//| SupplementReport
		//| SupplementResource
		//| SupplementTask
		//| TagFile
		//| Task
		//| Timesheet
		//| TimesheetReport
		//| ToolTip
		//| Vacation
		//| Leaves
		//| Allocate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Account
		public RuleCall getAccountParserRuleCall_0() { return cAccountParserRuleCall_0; }
		
		//AccountReport
		public RuleCall getAccountReportParserRuleCall_1() { return cAccountReportParserRuleCall_1; }
		
		//Balance
		public RuleCall getBalanceParserRuleCall_2() { return cBalanceParserRuleCall_2; }
		
		//Copyright
		public RuleCall getCopyrightParserRuleCall_3() { return cCopyrightParserRuleCall_3; }
		
		//CellColor
		public RuleCall getCellColorParserRuleCall_4() { return cCellColorParserRuleCall_4; }
		
		//Export
		public RuleCall getExportParserRuleCall_5() { return cExportParserRuleCall_5; }
		
		//Flags
		public RuleCall getFlagsParserRuleCall_6() { return cFlagsParserRuleCall_6; }
		
		//IcalReport
		public RuleCall getIcalReportParserRuleCall_7() { return cIcalReportParserRuleCall_7; }
		
		//IncludeProperties
		public RuleCall getIncludePropertiesParserRuleCall_8() { return cIncludePropertiesParserRuleCall_8; }
		
		//Limits
		public RuleCall getLimitsParserRuleCall_9() { return cLimitsParserRuleCall_9; }
		
		//Macro
		public RuleCall getMacroParserRuleCall_10() { return cMacroParserRuleCall_10; }
		
		//Navigator
		public RuleCall getNavigatorParserRuleCall_11() { return cNavigatorParserRuleCall_11; }
		
		//NikuReport
		public RuleCall getNikuReportParserRuleCall_12() { return cNikuReportParserRuleCall_12; }
		
		//ProjectIds
		public RuleCall getProjectIdsParserRuleCall_13() { return cProjectIdsParserRuleCall_13; }
		
		//Rate
		public RuleCall getRateParserRuleCall_14() { return cRateParserRuleCall_14; }
		
		//ResourceReport
		public RuleCall getResourceReportParserRuleCall_15() { return cResourceReportParserRuleCall_15; }
		
		//TaskReport
		public RuleCall getTaskReportParserRuleCall_16() { return cTaskReportParserRuleCall_16; }
		
		//TextReport
		public RuleCall getTextReportParserRuleCall_17() { return cTextReportParserRuleCall_17; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_18() { return cResourceParserRuleCall_18; }
		
		//Shift
		public RuleCall getShiftParserRuleCall_19() { return cShiftParserRuleCall_19; }
		
		//StatusSheet
		public RuleCall getStatusSheetParserRuleCall_20() { return cStatusSheetParserRuleCall_20; }
		
		//StatusSheetReport
		public RuleCall getStatusSheetReportParserRuleCall_21() { return cStatusSheetReportParserRuleCall_21; }
		
		//SupplementAccount
		public RuleCall getSupplementAccountParserRuleCall_22() { return cSupplementAccountParserRuleCall_22; }
		
		//SupplementReport
		public RuleCall getSupplementReportParserRuleCall_23() { return cSupplementReportParserRuleCall_23; }
		
		//SupplementResource
		public RuleCall getSupplementResourceParserRuleCall_24() { return cSupplementResourceParserRuleCall_24; }
		
		//SupplementTask
		public RuleCall getSupplementTaskParserRuleCall_25() { return cSupplementTaskParserRuleCall_25; }
		
		//TagFile
		public RuleCall getTagFileParserRuleCall_26() { return cTagFileParserRuleCall_26; }
		
		//Task
		public RuleCall getTaskParserRuleCall_27() { return cTaskParserRuleCall_27; }
		
		//Timesheet
		public RuleCall getTimesheetParserRuleCall_28() { return cTimesheetParserRuleCall_28; }
		
		//TimesheetReport
		public RuleCall getTimesheetReportParserRuleCall_29() { return cTimesheetReportParserRuleCall_29; }
		
		//ToolTip
		public RuleCall getToolTipParserRuleCall_30() { return cToolTipParserRuleCall_30; }
		
		//Vacation
		public RuleCall getVacationParserRuleCall_31() { return cVacationParserRuleCall_31; }
		
		//Leaves
		public RuleCall getLeavesParserRuleCall_32() { return cLeavesParserRuleCall_32; }
		
		//Allocate
		public RuleCall getAllocateParserRuleCall_33() { return cAllocateParserRuleCall_33; }
	}
	public class LeavesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Leaves");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeavesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDetailsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDetailsLeaveDetailsParserRuleCall_1_0 = (RuleCall)cDetailsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDetailsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDetailsLeaveDetailsParserRuleCall_2_1_0 = (RuleCall)cDetailsAssignment_2_1.eContents().get(0);
		
		////http://www.taskjuggler.org/tj3/manual/leaves.html
		//Leaves : 'leaves' details+=LeaveDetails (',' details+=LeaveDetails)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'leaves' details+=LeaveDetails (',' details+=LeaveDetails)*
		public Group getGroup() { return cGroup; }
		
		//'leaves'
		public Keyword getLeavesKeyword_0() { return cLeavesKeyword_0; }
		
		//details+=LeaveDetails
		public Assignment getDetailsAssignment_1() { return cDetailsAssignment_1; }
		
		//LeaveDetails
		public RuleCall getDetailsLeaveDetailsParserRuleCall_1_0() { return cDetailsLeaveDetailsParserRuleCall_1_0; }
		
		//(',' details+=LeaveDetails)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//details+=LeaveDetails
		public Assignment getDetailsAssignment_2_1() { return cDetailsAssignment_2_1; }
		
		//LeaveDetails
		public RuleCall getDetailsLeaveDetailsParserRuleCall_2_1_0() { return cDetailsLeaveDetailsParserRuleCall_2_1_0; }
	}
	public class LeaveDetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LeaveDetails");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeLeaveTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalInterval3ParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		
		//LeaveDetails: type = LeaveType (name = (ID|STRING))? interval = Interval3;
		@Override public ParserRule getRule() { return rule; }
		
		//type = LeaveType (name = (ID|STRING))? interval = Interval3
		public Group getGroup() { return cGroup; }
		
		//type = LeaveType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//LeaveType
		public RuleCall getTypeLeaveTypeEnumRuleCall_0_0() { return cTypeLeaveTypeEnumRuleCall_0_0; }
		
		//(name = (ID|STRING))?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID|STRING)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }
		
		//interval = Interval3
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//Interval3
		public RuleCall getIntervalInterval3ParserRuleCall_2_0() { return cIntervalInterval3ParserRuleCall_2_0; }
	}
	public class AbsoluteIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AbsoluteId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AbsoluteId: ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Account");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAccountAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/account.html
		//Account:
		//    'account' id=ID? name=STRING ('{' attributes+=AccountAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'account' id=ID? name=STRING ('{' attributes+=AccountAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'account'
		public Keyword getAccountKeyword_0() { return cAccountKeyword_0; }
		
		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//('{' attributes+=AccountAttribute* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=AccountAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//AccountAttribute
		public RuleCall getAttributesAccountAttributeParserRuleCall_3_1_0() { return cAttributesAccountAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class AccountAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AccountAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreditParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlagsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AccountAttribute:
		//    Account
		//    | Credit
		//    | Flags
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Account
		//| Credit
		//| Flags
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Account
		public RuleCall getAccountParserRuleCall_0() { return cAccountParserRuleCall_0; }
		
		//Credit
		public RuleCall getCreditParserRuleCall_1() { return cCreditParserRuleCall_1; }
		
		//Flags
		public RuleCall getFlagsParserRuleCall_2() { return cFlagsParserRuleCall_2; }
	}
	public class AccountPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AccountPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccountprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAccountAccountCrossReference_1_0 = (CrossReference)cAccountAssignment_1.eContents().get(0);
		private final RuleCall cAccountAccountIDTerminalRuleCall_1_0_1 = (RuleCall)cAccountAccountCrossReference_1_0.eContents().get(1);
		
		//AccountPrefix: 'accountprefix' account=[Account];
		@Override public ParserRule getRule() { return rule; }
		
		//'accountprefix' account=[Account]
		public Group getGroup() { return cGroup; }
		
		//'accountprefix'
		public Keyword getAccountprefixKeyword_0() { return cAccountprefixKeyword_0; }
		
		//account=[Account]
		public Assignment getAccountAssignment_1() { return cAccountAssignment_1; }
		
		//[Account]
		public CrossReference getAccountAccountCrossReference_1_0() { return cAccountAccountCrossReference_1_0; }
		
		//ID
		public RuleCall getAccountAccountIDTerminalRuleCall_1_0_1() { return cAccountAccountIDTerminalRuleCall_1_0_1; }
	}
	public class AccountReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AccountReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccountreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AccountReport: 'accountreport' Report;
		@Override public ParserRule getRule() { return rule; }
		
		//'accountreport' Report
		public Group getGroup() { return cGroup; }
		
		//'accountreport'
		public Keyword getAccountreportKeyword_0() { return cAccountreportKeyword_0; }
		
		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}
	public class AccountRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AccountRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccountrootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAccountAccountCrossReference_1_0 = (CrossReference)cAccountAssignment_1.eContents().get(0);
		private final RuleCall cAccountAccountIDTerminalRuleCall_1_0_1 = (RuleCall)cAccountAccountCrossReference_1_0.eContents().get(1);
		
		//AccountRoot: 'accountroot' account=[Account|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//'accountroot' account=[Account|ID]
		public Group getGroup() { return cGroup; }
		
		//'accountroot'
		public Keyword getAccountrootKeyword_0() { return cAccountrootKeyword_0; }
		
		//account=[Account|ID]
		public Assignment getAccountAssignment_1() { return cAccountAssignment_1; }
		
		//[Account|ID]
		public CrossReference getAccountAccountCrossReference_1_0() { return cAccountAccountCrossReference_1_0; }
		
		//ID
		public RuleCall getAccountAccountIDTerminalRuleCall_1_0_1() { return cAccountAccountIDTerminalRuleCall_1_0_1; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionSTRINGTerminalRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		private final Assignment cIntervalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIntervalInterval2ParserRuleCall_4_0 = (RuleCall)cIntervalAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesProjectAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/project.html
		//Project :
		//    'project' id=ID? name=STRING version=STRING? interval=Interval2 ('{' attributes+=ProjectAttribute* '}' )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' id=ID? name=STRING version=STRING? interval=Interval2 ('{' attributes+=ProjectAttribute* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//version=STRING?
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_3_0() { return cVersionSTRINGTerminalRuleCall_3_0; }
		
		//interval=Interval2
		public Assignment getIntervalAssignment_4() { return cIntervalAssignment_4; }
		
		//Interval2
		public RuleCall getIntervalInterval2ParserRuleCall_4_0() { return cIntervalInterval2ParserRuleCall_4_0; }
		
		//('{' attributes+=ProjectAttribute* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//attributes+=ProjectAttribute*
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//ProjectAttribute
		public RuleCall getAttributesProjectAttributeParserRuleCall_5_1_0() { return cAttributesProjectAttributeParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class ProjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ProjectAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCurrencyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCurrencyFormatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDailyWorkingHoursParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendTaskParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtendResourceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIncludeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJournalEntryParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNowParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cNumberFormatParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cScenarioParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cShortTimeFormatParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTimeFormatParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTimezoneParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cTimingResolutionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cTrackingScenarioParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cWeekStartsParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cWorkingHoursParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cYearlyWorkingDaysParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//ProjectAttribute:
		//    (
		//        Currency
		//        | CurrencyFormat
		//        | DailyWorkingHours
		//        | ExtendTask
		//        | ExtendResource
		//        | Include
		//        | JournalEntry
		//        | Now
		//        | NumberFormat
		//        | Scenario
		//        | ShortTimeFormat
		//        | TimeFormat
		//        | Timezone
		//        | TimingResolution
		//        | TrackingScenario
		//        | WeekStarts
		//        | WorkingHours
		//        | YearlyWorkingDays
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    Currency
		//    | CurrencyFormat
		//    | DailyWorkingHours
		//    | ExtendTask
		//    | ExtendResource
		//    | Include
		//    | JournalEntry
		//    | Now
		//    | NumberFormat
		//    | Scenario
		//    | ShortTimeFormat
		//    | TimeFormat
		//    | Timezone
		//    | TimingResolution
		//    | TrackingScenario
		//    | WeekStarts
		//    | WorkingHours
		//    | YearlyWorkingDays
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Currency
		public RuleCall getCurrencyParserRuleCall_0() { return cCurrencyParserRuleCall_0; }
		
		//CurrencyFormat
		public RuleCall getCurrencyFormatParserRuleCall_1() { return cCurrencyFormatParserRuleCall_1; }
		
		//DailyWorkingHours
		public RuleCall getDailyWorkingHoursParserRuleCall_2() { return cDailyWorkingHoursParserRuleCall_2; }
		
		//ExtendTask
		public RuleCall getExtendTaskParserRuleCall_3() { return cExtendTaskParserRuleCall_3; }
		
		//ExtendResource
		public RuleCall getExtendResourceParserRuleCall_4() { return cExtendResourceParserRuleCall_4; }
		
		//Include
		public RuleCall getIncludeParserRuleCall_5() { return cIncludeParserRuleCall_5; }
		
		//JournalEntry
		public RuleCall getJournalEntryParserRuleCall_6() { return cJournalEntryParserRuleCall_6; }
		
		//Now
		public RuleCall getNowParserRuleCall_7() { return cNowParserRuleCall_7; }
		
		//NumberFormat
		public RuleCall getNumberFormatParserRuleCall_8() { return cNumberFormatParserRuleCall_8; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_9() { return cScenarioParserRuleCall_9; }
		
		//ShortTimeFormat
		public RuleCall getShortTimeFormatParserRuleCall_10() { return cShortTimeFormatParserRuleCall_10; }
		
		//TimeFormat
		public RuleCall getTimeFormatParserRuleCall_11() { return cTimeFormatParserRuleCall_11; }
		
		//Timezone
		public RuleCall getTimezoneParserRuleCall_12() { return cTimezoneParserRuleCall_12; }
		
		//TimingResolution
		public RuleCall getTimingResolutionParserRuleCall_13() { return cTimingResolutionParserRuleCall_13; }
		
		//TrackingScenario
		public RuleCall getTrackingScenarioParserRuleCall_14() { return cTrackingScenarioParserRuleCall_14; }
		
		//WeekStarts
		public RuleCall getWeekStartsParserRuleCall_15() { return cWeekStartsParserRuleCall_15; }
		
		//WorkingHours
		public RuleCall getWorkingHoursParserRuleCall_16() { return cWorkingHoursParserRuleCall_16; }
		
		//YearlyWorkingDays
		public RuleCall getYearlyWorkingDaysParserRuleCall_17() { return cYearlyWorkingDaysParserRuleCall_17; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTaskAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/task.html
		//Task:
		//    'task' id=ID? name=STRING ( '{' attributes+=TaskAttribute*    '}'    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' id=ID? name=STRING ( '{' attributes+=TaskAttribute*	'}'	)?
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//( '{' attributes+=TaskAttribute*	'}'	)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=TaskAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//TaskAttribute
		public RuleCall getAttributesTaskAttributeParserRuleCall_3_1_0() { return cAttributesTaskAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class TaskAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cScenarioScenarioCrossReference_0_0_0 = (CrossReference)cScenarioAssignment_0_0.eContents().get(0);
		private final RuleCall cScenarioScenarioQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cScenarioScenarioCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAttrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAttrAlternatives_1_0 = (Alternatives)cAttrAssignment_1.eContents().get(0);
		private final RuleCall cAttrAllocateParserRuleCall_1_0_0 = (RuleCall)cAttrAlternatives_1_0.eContents().get(0);
		private final RuleCall cAttrBookingTaskParserRuleCall_1_0_1 = (RuleCall)cAttrAlternatives_1_0.eContents().get(1);
		private final RuleCall cAttrChargeParserRuleCall_1_0_2 = (RuleCall)cAttrAlternatives_1_0.eContents().get(2);
		private final RuleCall cAttrChargeSetParserRuleCall_1_0_3 = (RuleCall)cAttrAlternatives_1_0.eContents().get(3);
		private final RuleCall cAttrCompleteParserRuleCall_1_0_4 = (RuleCall)cAttrAlternatives_1_0.eContents().get(4);
		private final RuleCall cAttrDependsParserRuleCall_1_0_5 = (RuleCall)cAttrAlternatives_1_0.eContents().get(5);
		private final RuleCall cAttrDurationParserRuleCall_1_0_6 = (RuleCall)cAttrAlternatives_1_0.eContents().get(6);
		private final RuleCall cAttrEffortParserRuleCall_1_0_7 = (RuleCall)cAttrAlternatives_1_0.eContents().get(7);
		private final RuleCall cAttrEndParserRuleCall_1_0_8 = (RuleCall)cAttrAlternatives_1_0.eContents().get(8);
		private final RuleCall cAttrEndCreditParserRuleCall_1_0_9 = (RuleCall)cAttrAlternatives_1_0.eContents().get(9);
		private final RuleCall cAttrExtendedTaskAttributeParserRuleCall_1_0_10 = (RuleCall)cAttrAlternatives_1_0.eContents().get(10);
		private final RuleCall cAttrFailParserRuleCall_1_0_11 = (RuleCall)cAttrAlternatives_1_0.eContents().get(11);
		private final RuleCall cAttrFlagsParserRuleCall_1_0_12 = (RuleCall)cAttrAlternatives_1_0.eContents().get(12);
		private final RuleCall cAttrJournalEntryParserRuleCall_1_0_13 = (RuleCall)cAttrAlternatives_1_0.eContents().get(13);
		private final RuleCall cAttrLengthParserRuleCall_1_0_14 = (RuleCall)cAttrAlternatives_1_0.eContents().get(14);
		private final RuleCall cAttrLimitsParserRuleCall_1_0_15 = (RuleCall)cAttrAlternatives_1_0.eContents().get(15);
		private final RuleCall cAttrMaxEndParserRuleCall_1_0_16 = (RuleCall)cAttrAlternatives_1_0.eContents().get(16);
		private final RuleCall cAttrMaxStartParserRuleCall_1_0_17 = (RuleCall)cAttrAlternatives_1_0.eContents().get(17);
		private final RuleCall cAttrMilestoneParserRuleCall_1_0_18 = (RuleCall)cAttrAlternatives_1_0.eContents().get(18);
		private final RuleCall cAttrMinEndParserRuleCall_1_0_19 = (RuleCall)cAttrAlternatives_1_0.eContents().get(19);
		private final RuleCall cAttrMinStartParserRuleCall_1_0_20 = (RuleCall)cAttrAlternatives_1_0.eContents().get(20);
		private final RuleCall cAttrNoteParserRuleCall_1_0_21 = (RuleCall)cAttrAlternatives_1_0.eContents().get(21);
		private final RuleCall cAttrPeriodParserRuleCall_1_0_22 = (RuleCall)cAttrAlternatives_1_0.eContents().get(22);
		private final RuleCall cAttrPrecedesParserRuleCall_1_0_23 = (RuleCall)cAttrAlternatives_1_0.eContents().get(23);
		private final RuleCall cAttrPriorityParserRuleCall_1_0_24 = (RuleCall)cAttrAlternatives_1_0.eContents().get(24);
		private final RuleCall cAttrProjectIdParserRuleCall_1_0_25 = (RuleCall)cAttrAlternatives_1_0.eContents().get(25);
		private final RuleCall cAttrPurgeTaskParserRuleCall_1_0_26 = (RuleCall)cAttrAlternatives_1_0.eContents().get(26);
		private final RuleCall cAttrResponsibleParserRuleCall_1_0_27 = (RuleCall)cAttrAlternatives_1_0.eContents().get(27);
		private final RuleCall cAttrScheduledParserRuleCall_1_0_28 = (RuleCall)cAttrAlternatives_1_0.eContents().get(28);
		private final RuleCall cAttrSchedulingParserRuleCall_1_0_29 = (RuleCall)cAttrAlternatives_1_0.eContents().get(29);
		private final RuleCall cAttrShiftsTaskParserRuleCall_1_0_30 = (RuleCall)cAttrAlternatives_1_0.eContents().get(30);
		private final RuleCall cAttrStartParserRuleCall_1_0_31 = (RuleCall)cAttrAlternatives_1_0.eContents().get(31);
		private final RuleCall cAttrSupplementTaskParserRuleCall_1_0_32 = (RuleCall)cAttrAlternatives_1_0.eContents().get(32);
		private final RuleCall cAttrTaskParserRuleCall_1_0_33 = (RuleCall)cAttrAlternatives_1_0.eContents().get(33);
		private final RuleCall cAttrWarnParserRuleCall_1_0_34 = (RuleCall)cAttrAlternatives_1_0.eContents().get(34);
		private final RuleCall cAttrMacroCallParserRuleCall_1_0_35 = (RuleCall)cAttrAlternatives_1_0.eContents().get(35);
		
		//TaskAttribute:
		//    (scenario = [Scenario|QualifiedName] ':')?
		//    attr = (
		////        AccountTask -- deprecated
		////         AdoptTask -- experimental
		//         Allocate
		//        | BookingTask
		//        | Charge
		//        | ChargeSet
		//        | Complete
		//        | Depends
		//        | Duration
		//        | Effort
		//        | End
		//        | EndCredit
		//        | ExtendedTaskAttribute
		//        | Fail
		//        | Flags
		//        | JournalEntry
		//        | Length
		//        | Limits
		//        | MaxEnd
		//        | MaxStart
		//        | Milestone
		//        | MinEnd
		//        | MinStart
		//        | Note
		//        | Period
		//        | Precedes
		//        | Priority
		//        | ProjectId
		//        | PurgeTask
		//        | Responsible
		//        | Scheduled
		//        | Scheduling
		//        | ShiftsTask
		//        | Start
		////         | StartCredit -- deprecated
		//        | SupplementTask
		//        | Task
		//        | Warn
		//        | MacroCall
		//    )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    (scenario = [Scenario|QualifiedName] ':')?
		//    attr = (
		////        AccountTask -- deprecated
		////         AdoptTask -- experimental
		//         Allocate
		//        | BookingTask
		//        | Charge
		//        | ChargeSet
		//        | Complete
		//        | Depends
		//        | Duration
		//        | Effort
		//        | End
		//        | EndCredit
		//        | ExtendedTaskAttribute
		//        | Fail
		//        | Flags
		//        | JournalEntry
		//        | Length
		//        | Limits
		//        | MaxEnd
		//        | MaxStart
		//        | Milestone
		//        | MinEnd
		//        | MinStart
		//        | Note
		//        | Period
		//        | Precedes
		//        | Priority
		//        | ProjectId
		//        | PurgeTask
		//        | Responsible
		//        | Scheduled
		//        | Scheduling
		//        | ShiftsTask
		//        | Start
		////         | StartCredit -- deprecated
		//        | SupplementTask
		//        | Task
		//        | Warn
		//        | MacroCall
		//    )
		public Group getGroup() { return cGroup; }
		
		//(scenario = [Scenario|QualifiedName] ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//scenario = [Scenario|QualifiedName]
		public Assignment getScenarioAssignment_0_0() { return cScenarioAssignment_0_0; }
		
		//[Scenario|QualifiedName]
		public CrossReference getScenarioScenarioCrossReference_0_0_0() { return cScenarioScenarioCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getScenarioScenarioQualifiedNameParserRuleCall_0_0_0_1() { return cScenarioScenarioQualifiedNameParserRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//    attr = (
		////        AccountTask -- deprecated
		////         AdoptTask -- experimental
		//         Allocate
		//        | BookingTask
		//        | Charge
		//        | ChargeSet
		//        | Complete
		//        | Depends
		//        | Duration
		//        | Effort
		//        | End
		//        | EndCredit
		//        | ExtendedTaskAttribute
		//        | Fail
		//        | Flags
		//        | JournalEntry
		//        | Length
		//        | Limits
		//        | MaxEnd
		//        | MaxStart
		//        | Milestone
		//        | MinEnd
		//        | MinStart
		//        | Note
		//        | Period
		//        | Precedes
		//        | Priority
		//        | ProjectId
		//        | PurgeTask
		//        | Responsible
		//        | Scheduled
		//        | Scheduling
		//        | ShiftsTask
		//        | Start
		////         | StartCredit -- deprecated
		//        | SupplementTask
		//        | Task
		//        | Warn
		//        | MacroCall
		//    )
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }
		
		// (
		////        AccountTask -- deprecated
		////         AdoptTask -- experimental
		//         Allocate
		//        | BookingTask
		//        | Charge
		//        | ChargeSet
		//        | Complete
		//        | Depends
		//        | Duration
		//        | Effort
		//        | End
		//        | EndCredit
		//        | ExtendedTaskAttribute
		//        | Fail
		//        | Flags
		//        | JournalEntry
		//        | Length
		//        | Limits
		//        | MaxEnd
		//        | MaxStart
		//        | Milestone
		//        | MinEnd
		//        | MinStart
		//        | Note
		//        | Period
		//        | Precedes
		//        | Priority
		//        | ProjectId
		//        | PurgeTask
		//        | Responsible
		//        | Scheduled
		//        | Scheduling
		//        | ShiftsTask
		//        | Start
		////         | StartCredit -- deprecated
		//        | SupplementTask
		//        | Task
		//        | Warn
		//        | MacroCall
		//    )
		public Alternatives getAttrAlternatives_1_0() { return cAttrAlternatives_1_0; }
		
		////        AccountTask -- deprecated
		////         AdoptTask -- experimental
		//         Allocate
		public RuleCall getAttrAllocateParserRuleCall_1_0_0() { return cAttrAllocateParserRuleCall_1_0_0; }
		
		//BookingTask
		public RuleCall getAttrBookingTaskParserRuleCall_1_0_1() { return cAttrBookingTaskParserRuleCall_1_0_1; }
		
		//Charge
		public RuleCall getAttrChargeParserRuleCall_1_0_2() { return cAttrChargeParserRuleCall_1_0_2; }
		
		//ChargeSet
		public RuleCall getAttrChargeSetParserRuleCall_1_0_3() { return cAttrChargeSetParserRuleCall_1_0_3; }
		
		//Complete
		public RuleCall getAttrCompleteParserRuleCall_1_0_4() { return cAttrCompleteParserRuleCall_1_0_4; }
		
		//Depends
		public RuleCall getAttrDependsParserRuleCall_1_0_5() { return cAttrDependsParserRuleCall_1_0_5; }
		
		//Duration
		public RuleCall getAttrDurationParserRuleCall_1_0_6() { return cAttrDurationParserRuleCall_1_0_6; }
		
		//Effort
		public RuleCall getAttrEffortParserRuleCall_1_0_7() { return cAttrEffortParserRuleCall_1_0_7; }
		
		//End
		public RuleCall getAttrEndParserRuleCall_1_0_8() { return cAttrEndParserRuleCall_1_0_8; }
		
		//EndCredit
		public RuleCall getAttrEndCreditParserRuleCall_1_0_9() { return cAttrEndCreditParserRuleCall_1_0_9; }
		
		//ExtendedTaskAttribute
		public RuleCall getAttrExtendedTaskAttributeParserRuleCall_1_0_10() { return cAttrExtendedTaskAttributeParserRuleCall_1_0_10; }
		
		//Fail
		public RuleCall getAttrFailParserRuleCall_1_0_11() { return cAttrFailParserRuleCall_1_0_11; }
		
		//Flags
		public RuleCall getAttrFlagsParserRuleCall_1_0_12() { return cAttrFlagsParserRuleCall_1_0_12; }
		
		//JournalEntry
		public RuleCall getAttrJournalEntryParserRuleCall_1_0_13() { return cAttrJournalEntryParserRuleCall_1_0_13; }
		
		//Length
		public RuleCall getAttrLengthParserRuleCall_1_0_14() { return cAttrLengthParserRuleCall_1_0_14; }
		
		//Limits
		public RuleCall getAttrLimitsParserRuleCall_1_0_15() { return cAttrLimitsParserRuleCall_1_0_15; }
		
		//MaxEnd
		public RuleCall getAttrMaxEndParserRuleCall_1_0_16() { return cAttrMaxEndParserRuleCall_1_0_16; }
		
		//MaxStart
		public RuleCall getAttrMaxStartParserRuleCall_1_0_17() { return cAttrMaxStartParserRuleCall_1_0_17; }
		
		//Milestone
		public RuleCall getAttrMilestoneParserRuleCall_1_0_18() { return cAttrMilestoneParserRuleCall_1_0_18; }
		
		//MinEnd
		public RuleCall getAttrMinEndParserRuleCall_1_0_19() { return cAttrMinEndParserRuleCall_1_0_19; }
		
		//MinStart
		public RuleCall getAttrMinStartParserRuleCall_1_0_20() { return cAttrMinStartParserRuleCall_1_0_20; }
		
		//Note
		public RuleCall getAttrNoteParserRuleCall_1_0_21() { return cAttrNoteParserRuleCall_1_0_21; }
		
		//Period
		public RuleCall getAttrPeriodParserRuleCall_1_0_22() { return cAttrPeriodParserRuleCall_1_0_22; }
		
		//Precedes
		public RuleCall getAttrPrecedesParserRuleCall_1_0_23() { return cAttrPrecedesParserRuleCall_1_0_23; }
		
		//Priority
		public RuleCall getAttrPriorityParserRuleCall_1_0_24() { return cAttrPriorityParserRuleCall_1_0_24; }
		
		//ProjectId
		public RuleCall getAttrProjectIdParserRuleCall_1_0_25() { return cAttrProjectIdParserRuleCall_1_0_25; }
		
		//PurgeTask
		public RuleCall getAttrPurgeTaskParserRuleCall_1_0_26() { return cAttrPurgeTaskParserRuleCall_1_0_26; }
		
		//Responsible
		public RuleCall getAttrResponsibleParserRuleCall_1_0_27() { return cAttrResponsibleParserRuleCall_1_0_27; }
		
		//Scheduled
		public RuleCall getAttrScheduledParserRuleCall_1_0_28() { return cAttrScheduledParserRuleCall_1_0_28; }
		
		//Scheduling
		public RuleCall getAttrSchedulingParserRuleCall_1_0_29() { return cAttrSchedulingParserRuleCall_1_0_29; }
		
		//ShiftsTask
		public RuleCall getAttrShiftsTaskParserRuleCall_1_0_30() { return cAttrShiftsTaskParserRuleCall_1_0_30; }
		
		//Start
		public RuleCall getAttrStartParserRuleCall_1_0_31() { return cAttrStartParserRuleCall_1_0_31; }
		
		//SupplementTask
		public RuleCall getAttrSupplementTaskParserRuleCall_1_0_32() { return cAttrSupplementTaskParserRuleCall_1_0_32; }
		
		//Task
		public RuleCall getAttrTaskParserRuleCall_1_0_33() { return cAttrTaskParserRuleCall_1_0_33; }
		
		//Warn
		public RuleCall getAttrWarnParserRuleCall_1_0_34() { return cAttrWarnParserRuleCall_1_0_34; }
		
		//MacroCall
		public RuleCall getAttrMacroCallParserRuleCall_1_0_35() { return cAttrMacroCallParserRuleCall_1_0_35; }
	}
	public class MacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MacroCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cMacroAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cMacroMacroCrossReference_2_0_0 = (CrossReference)cMacroAssignment_2_0.eContents().get(0);
		private final RuleCall cMacroMacroQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cMacroMacroCrossReference_2_0_0.eContents().get(1);
		private final Assignment cBuildinAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBuildinBuildInMacroEnumRuleCall_2_1_0 = (RuleCall)cBuildinAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MacroCall : '$''{' (macro = [Macro|QualifiedName] | buildin = BuildInMacro ) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'$''{' (macro = [Macro|QualifiedName] | buildin = BuildInMacro ) '}'
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(macro = [Macro|QualifiedName] | buildin = BuildInMacro )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//macro = [Macro|QualifiedName]
		public Assignment getMacroAssignment_2_0() { return cMacroAssignment_2_0; }
		
		//[Macro|QualifiedName]
		public CrossReference getMacroMacroCrossReference_2_0_0() { return cMacroMacroCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getMacroMacroQualifiedNameParserRuleCall_2_0_0_1() { return cMacroMacroQualifiedNameParserRuleCall_2_0_0_1; }
		
		//buildin = BuildInMacro
		public Assignment getBuildinAssignment_2_1() { return cBuildinAssignment_2_1; }
		
		//BuildInMacro
		public RuleCall getBuildinBuildInMacroEnumRuleCall_2_1_0() { return cBuildinBuildInMacroEnumRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Report");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesReportAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/report.html
		//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
		//// http://www.taskjuggler.org/tj3/manual/taskreport.html
		//// http://www.taskjuggler.org/tj3/manual/textreport.html
		//Report: id=ID? name=STRING ('{' attributes+=ReportAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID? name=STRING ('{' attributes+=ReportAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//id=ID?
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//('{' attributes+=ReportAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes+=ReportAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//ReportAttribute
		public RuleCall getAttributesReportAttributeParserRuleCall_2_1_0() { return cAttributesReportAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class ReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccountRootParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBalanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCaptionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCenterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cColumnsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCurrencyFormatParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEndParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEpilogParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFlagsParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFooterParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFormatsParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cHeaderParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cHeadlineParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cHideAccountParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cHideJournalEntryParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cHideResourceParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cHideTaskParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cJournalAttributesParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cJournalModeParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cLeftParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cLoadUnitParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cNumberFormatParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cPeriodParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cPrologParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cAccountReportParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cResourceReportParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cTaskReportParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cTextReportParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cPurgeReportParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cResourceRootParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cRightParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cRollupAccountParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cRollupResourceParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cRollupTaskParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final RuleCall cScenariosParserRuleCall_34 = (RuleCall)cAlternatives.eContents().get(34);
		private final RuleCall cSelfContainedParserRuleCall_35 = (RuleCall)cAlternatives.eContents().get(35);
		private final RuleCall cSortAccountsParserRuleCall_36 = (RuleCall)cAlternatives.eContents().get(36);
		private final RuleCall cSortJournalEntriesParserRuleCall_37 = (RuleCall)cAlternatives.eContents().get(37);
		private final RuleCall cSortResourcesParserRuleCall_38 = (RuleCall)cAlternatives.eContents().get(38);
		private final RuleCall cSortTasksParserRuleCall_39 = (RuleCall)cAlternatives.eContents().get(39);
		private final RuleCall cStartParserRuleCall_40 = (RuleCall)cAlternatives.eContents().get(40);
		private final RuleCall cTaskRootParserRuleCall_41 = (RuleCall)cAlternatives.eContents().get(41);
		private final RuleCall cTimeFormatParserRuleCall_42 = (RuleCall)cAlternatives.eContents().get(42);
		private final RuleCall cTimezoneParserRuleCall_43 = (RuleCall)cAlternatives.eContents().get(43);
		private final RuleCall cTitleParserRuleCall_44 = (RuleCall)cAlternatives.eContents().get(44);
		
		//ReportAttribute:
		//    AccountRoot
		//    | Balance
		//    | Caption
		//    | Center
		//    | Columns
		//    | CurrencyFormat
		//    | End
		//    | Epilog
		//    | Flags
		//    | Footer
		//    | Formats
		//    | Header
		//    | Headline
		//    | HideAccount
		//    | HideJournalEntry
		//    | HideResource
		//    | HideTask
		//    | JournalAttributes
		//    | JournalMode
		//    | Left
		//    | LoadUnit
		//    | NumberFormat
		//    | Period
		//    | Prolog
		//    | AccountReport
		//    | ResourceReport
		//    | TaskReport
		//    | TextReport
		//    | PurgeReport
		//    | ResourceRoot
		//    | Right
		//    | RollupAccount
		//    | RollupResource
		//    | RollupTask
		//    | Scenarios
		//    | SelfContained
		//    | SortAccounts
		//    | SortJournalEntries
		//    | SortResources
		//    | SortTasks
		//    | Start
		//    | TaskRoot
		//    | TimeFormat
		//    | Timezone
		//    | Title
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AccountRoot
		//| Balance
		//| Caption
		//| Center
		//| Columns
		//| CurrencyFormat
		//| End
		//| Epilog
		//| Flags
		//| Footer
		//| Formats
		//| Header
		//| Headline
		//| HideAccount
		//| HideJournalEntry
		//| HideResource
		//| HideTask
		//| JournalAttributes
		//| JournalMode
		//| Left
		//| LoadUnit
		//| NumberFormat
		//| Period
		//| Prolog
		//| AccountReport
		//| ResourceReport
		//| TaskReport
		//| TextReport
		//| PurgeReport
		//| ResourceRoot
		//| Right
		//| RollupAccount
		//| RollupResource
		//| RollupTask
		//| Scenarios
		//| SelfContained
		//| SortAccounts
		//| SortJournalEntries
		//| SortResources
		//| SortTasks
		//| Start
		//| TaskRoot
		//| TimeFormat
		//| Timezone
		//| Title
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AccountRoot
		public RuleCall getAccountRootParserRuleCall_0() { return cAccountRootParserRuleCall_0; }
		
		//Balance
		public RuleCall getBalanceParserRuleCall_1() { return cBalanceParserRuleCall_1; }
		
		//Caption
		public RuleCall getCaptionParserRuleCall_2() { return cCaptionParserRuleCall_2; }
		
		//Center
		public RuleCall getCenterParserRuleCall_3() { return cCenterParserRuleCall_3; }
		
		//Columns
		public RuleCall getColumnsParserRuleCall_4() { return cColumnsParserRuleCall_4; }
		
		//CurrencyFormat
		public RuleCall getCurrencyFormatParserRuleCall_5() { return cCurrencyFormatParserRuleCall_5; }
		
		//End
		public RuleCall getEndParserRuleCall_6() { return cEndParserRuleCall_6; }
		
		//Epilog
		public RuleCall getEpilogParserRuleCall_7() { return cEpilogParserRuleCall_7; }
		
		//Flags
		public RuleCall getFlagsParserRuleCall_8() { return cFlagsParserRuleCall_8; }
		
		//Footer
		public RuleCall getFooterParserRuleCall_9() { return cFooterParserRuleCall_9; }
		
		//Formats
		public RuleCall getFormatsParserRuleCall_10() { return cFormatsParserRuleCall_10; }
		
		//Header
		public RuleCall getHeaderParserRuleCall_11() { return cHeaderParserRuleCall_11; }
		
		//Headline
		public RuleCall getHeadlineParserRuleCall_12() { return cHeadlineParserRuleCall_12; }
		
		//HideAccount
		public RuleCall getHideAccountParserRuleCall_13() { return cHideAccountParserRuleCall_13; }
		
		//HideJournalEntry
		public RuleCall getHideJournalEntryParserRuleCall_14() { return cHideJournalEntryParserRuleCall_14; }
		
		//HideResource
		public RuleCall getHideResourceParserRuleCall_15() { return cHideResourceParserRuleCall_15; }
		
		//HideTask
		public RuleCall getHideTaskParserRuleCall_16() { return cHideTaskParserRuleCall_16; }
		
		//JournalAttributes
		public RuleCall getJournalAttributesParserRuleCall_17() { return cJournalAttributesParserRuleCall_17; }
		
		//JournalMode
		public RuleCall getJournalModeParserRuleCall_18() { return cJournalModeParserRuleCall_18; }
		
		//Left
		public RuleCall getLeftParserRuleCall_19() { return cLeftParserRuleCall_19; }
		
		//LoadUnit
		public RuleCall getLoadUnitParserRuleCall_20() { return cLoadUnitParserRuleCall_20; }
		
		//NumberFormat
		public RuleCall getNumberFormatParserRuleCall_21() { return cNumberFormatParserRuleCall_21; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_22() { return cPeriodParserRuleCall_22; }
		
		//Prolog
		public RuleCall getPrologParserRuleCall_23() { return cPrologParserRuleCall_23; }
		
		//AccountReport
		public RuleCall getAccountReportParserRuleCall_24() { return cAccountReportParserRuleCall_24; }
		
		//ResourceReport
		public RuleCall getResourceReportParserRuleCall_25() { return cResourceReportParserRuleCall_25; }
		
		//TaskReport
		public RuleCall getTaskReportParserRuleCall_26() { return cTaskReportParserRuleCall_26; }
		
		//TextReport
		public RuleCall getTextReportParserRuleCall_27() { return cTextReportParserRuleCall_27; }
		
		//PurgeReport
		public RuleCall getPurgeReportParserRuleCall_28() { return cPurgeReportParserRuleCall_28; }
		
		//ResourceRoot
		public RuleCall getResourceRootParserRuleCall_29() { return cResourceRootParserRuleCall_29; }
		
		//Right
		public RuleCall getRightParserRuleCall_30() { return cRightParserRuleCall_30; }
		
		//RollupAccount
		public RuleCall getRollupAccountParserRuleCall_31() { return cRollupAccountParserRuleCall_31; }
		
		//RollupResource
		public RuleCall getRollupResourceParserRuleCall_32() { return cRollupResourceParserRuleCall_32; }
		
		//RollupTask
		public RuleCall getRollupTaskParserRuleCall_33() { return cRollupTaskParserRuleCall_33; }
		
		//Scenarios
		public RuleCall getScenariosParserRuleCall_34() { return cScenariosParserRuleCall_34; }
		
		//SelfContained
		public RuleCall getSelfContainedParserRuleCall_35() { return cSelfContainedParserRuleCall_35; }
		
		//SortAccounts
		public RuleCall getSortAccountsParserRuleCall_36() { return cSortAccountsParserRuleCall_36; }
		
		//SortJournalEntries
		public RuleCall getSortJournalEntriesParserRuleCall_37() { return cSortJournalEntriesParserRuleCall_37; }
		
		//SortResources
		public RuleCall getSortResourcesParserRuleCall_38() { return cSortResourcesParserRuleCall_38; }
		
		//SortTasks
		public RuleCall getSortTasksParserRuleCall_39() { return cSortTasksParserRuleCall_39; }
		
		//Start
		public RuleCall getStartParserRuleCall_40() { return cStartParserRuleCall_40; }
		
		//TaskRoot
		public RuleCall getTaskRootParserRuleCall_41() { return cTaskRootParserRuleCall_41; }
		
		//TimeFormat
		public RuleCall getTimeFormatParserRuleCall_42() { return cTimeFormatParserRuleCall_42; }
		
		//Timezone
		public RuleCall getTimezoneParserRuleCall_43() { return cTimezoneParserRuleCall_43; }
		
		//Title
		public RuleCall getTitleParserRuleCall_44() { return cTitleParserRuleCall_44; }
	}
	public class IcalReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.IcalReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIcalreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesIcalReportAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/icalreport.html
		//// TODO: ical report
		//IcalReport: 'icalreport' filename=STRING ('{' attributes+=IcalReportAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'icalreport' filename=STRING ('{' attributes+=IcalReportAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'icalreport'
		public Keyword getIcalreportKeyword_0() { return cIcalreportKeyword_0; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }
		
		//('{' attributes+=IcalReportAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes+=IcalReportAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//IcalReportAttribute
		public RuleCall getAttributesIcalReportAttributeParserRuleCall_2_1_0() { return cAttributesIcalReportAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class IcalReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.IcalReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHideJournalEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHideResourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHideTaskParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPeriodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRollupResourceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRollupTaskParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cScenarioIcalParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStartParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//IcalReportAttribute:
		//    End
		//    | HideJournalEntry
		//    | HideResource
		//    | HideTask
		//    | Period
		//    | RollupResource
		//    | RollupTask
		//    | ScenarioIcal
		//    | Start
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//End
		//| HideJournalEntry
		//| HideResource
		//| HideTask
		//| Period
		//| RollupResource
		//| RollupTask
		//| ScenarioIcal
		//| Start
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//HideJournalEntry
		public RuleCall getHideJournalEntryParserRuleCall_1() { return cHideJournalEntryParserRuleCall_1; }
		
		//HideResource
		public RuleCall getHideResourceParserRuleCall_2() { return cHideResourceParserRuleCall_2; }
		
		//HideTask
		public RuleCall getHideTaskParserRuleCall_3() { return cHideTaskParserRuleCall_3; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_4() { return cPeriodParserRuleCall_4; }
		
		//RollupResource
		public RuleCall getRollupResourceParserRuleCall_5() { return cRollupResourceParserRuleCall_5; }
		
		//RollupTask
		public RuleCall getRollupTaskParserRuleCall_6() { return cRollupTaskParserRuleCall_6; }
		
		//ScenarioIcal
		public RuleCall getScenarioIcalParserRuleCall_7() { return cScenarioIcalParserRuleCall_7; }
		
		//Start
		public RuleCall getStartParserRuleCall_8() { return cStartParserRuleCall_8; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesExportAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// TODO: export report
		//// http://www.taskjuggler.org/tj3/manual/export.html
		//Export: 'export' id=ID? filename=STRING ('{' attributes += ExportAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'export' id=ID? filename=STRING ('{' attributes += ExportAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }
		
		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }
		
		//('{' attributes += ExportAttribute* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes += ExportAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//ExportAttribute
		public RuleCall getAttributesExportAttributeParserRuleCall_3_1_0() { return cAttributesExportAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ExportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHideResourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHideTaskParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPeriodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cResourceAttributesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRollupResourceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRollupTaskParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cScenariosParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStartParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTaskAttributesParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTimezoneParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//ExportAttribute: (
		//    Definitions
		//    | End
		//    | HideResource
		//    | HideTask
		//    | Period
		//    | ResourceAttributes
		//    | RollupResource
		//    | RollupTask
		//    | Scenarios
		//    | Start
		//    | TaskAttributes
		//    | Timezone
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//   Definitions
		//   | End
		//   | HideResource
		//   | HideTask
		//   | Period
		//   | ResourceAttributes
		//   | RollupResource
		//   | RollupTask
		//   | Scenarios
		//   | Start
		//   | TaskAttributes
		//   | Timezone
		//   )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Definitions
		public RuleCall getDefinitionsParserRuleCall_0() { return cDefinitionsParserRuleCall_0; }
		
		//End
		public RuleCall getEndParserRuleCall_1() { return cEndParserRuleCall_1; }
		
		//HideResource
		public RuleCall getHideResourceParserRuleCall_2() { return cHideResourceParserRuleCall_2; }
		
		//HideTask
		public RuleCall getHideTaskParserRuleCall_3() { return cHideTaskParserRuleCall_3; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_4() { return cPeriodParserRuleCall_4; }
		
		//ResourceAttributes
		public RuleCall getResourceAttributesParserRuleCall_5() { return cResourceAttributesParserRuleCall_5; }
		
		//RollupResource
		public RuleCall getRollupResourceParserRuleCall_6() { return cRollupResourceParserRuleCall_6; }
		
		//RollupTask
		public RuleCall getRollupTaskParserRuleCall_7() { return cRollupTaskParserRuleCall_7; }
		
		//Scenarios
		public RuleCall getScenariosParserRuleCall_8() { return cScenariosParserRuleCall_8; }
		
		//Start
		public RuleCall getStartParserRuleCall_9() { return cStartParserRuleCall_9; }
		
		//TaskAttributes
		public RuleCall getTaskAttributesParserRuleCall_10() { return cTaskAttributesParserRuleCall_10; }
		
		//Timezone
		public RuleCall getTimezoneParserRuleCall_11() { return cTimezoneParserRuleCall_11; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesResourceAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/resource.html
		//Resource:
		//    'resource' id=ID? name=STRING ( '{' attributes+=ResourceAttribute*    '}'    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'resource' id=ID? name=STRING ( '{' attributes+=ResourceAttribute*	'}'	)?
		public Group getGroup() { return cGroup; }
		
		//'resource'
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }
		
		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//( '{' attributes+=ResourceAttribute*	'}'	)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=ResourceAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//ResourceAttribute
		public RuleCall getAttributesResourceAttributeParserRuleCall_3_1_0() { return cAttributesResourceAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ResourceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ResourceAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBookingResourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEfficiencyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEmailParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendedResourceAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFailParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFlagsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJournalEntryParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLimitsParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cManagersParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPurgeResourceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cRateParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cResourceParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cShiftsResourceParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSupplementResourceParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cVacationResourceParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cWarnParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cWorkingHoursParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cLeavesParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//ResourceAttribute:
		//    (
		//        BookingResource
		//        | Efficiency
		//        | Email
		//        | ExtendedResourceAttribute
		//        | Fail
		//        | Flags
		//        | JournalEntry
		//        | Limits
		//        | Managers
		//        | PurgeResource
		//        | Rate
		//        | Resource
		////         | Shift // deprecated
		//        | ShiftsResource
		//        | SupplementResource
		//         | VacationResource
		//         | Warn
		//         | WorkingHours
		//         | Leaves
		//    );
		@Override public ParserRule getRule() { return rule; }
		
		//    (
		//        BookingResource
		//        | Efficiency
		//        | Email
		//        | ExtendedResourceAttribute
		//        | Fail
		//        | Flags
		//        | JournalEntry
		//        | Limits
		//        | Managers
		//        | PurgeResource
		//        | Rate
		//        | Resource
		////         | Shift // deprecated
		//        | ShiftsResource
		//        | SupplementResource
		//         | VacationResource
		//         | Warn
		//         | WorkingHours
		//         | Leaves
		//    )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BookingResource
		public RuleCall getBookingResourceParserRuleCall_0() { return cBookingResourceParserRuleCall_0; }
		
		//Efficiency
		public RuleCall getEfficiencyParserRuleCall_1() { return cEfficiencyParserRuleCall_1; }
		
		//Email
		public RuleCall getEmailParserRuleCall_2() { return cEmailParserRuleCall_2; }
		
		//ExtendedResourceAttribute
		public RuleCall getExtendedResourceAttributeParserRuleCall_3() { return cExtendedResourceAttributeParserRuleCall_3; }
		
		//Fail
		public RuleCall getFailParserRuleCall_4() { return cFailParserRuleCall_4; }
		
		//Flags
		public RuleCall getFlagsParserRuleCall_5() { return cFlagsParserRuleCall_5; }
		
		//JournalEntry
		public RuleCall getJournalEntryParserRuleCall_6() { return cJournalEntryParserRuleCall_6; }
		
		//Limits
		public RuleCall getLimitsParserRuleCall_7() { return cLimitsParserRuleCall_7; }
		
		//Managers
		public RuleCall getManagersParserRuleCall_8() { return cManagersParserRuleCall_8; }
		
		//PurgeResource
		public RuleCall getPurgeResourceParserRuleCall_9() { return cPurgeResourceParserRuleCall_9; }
		
		//Rate
		public RuleCall getRateParserRuleCall_10() { return cRateParserRuleCall_10; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_11() { return cResourceParserRuleCall_11; }
		
		//ShiftsResource
		public RuleCall getShiftsResourceParserRuleCall_12() { return cShiftsResourceParserRuleCall_12; }
		
		//SupplementResource
		public RuleCall getSupplementResourceParserRuleCall_13() { return cSupplementResourceParserRuleCall_13; }
		
		//VacationResource
		public RuleCall getVacationResourceParserRuleCall_14() { return cVacationResourceParserRuleCall_14; }
		
		//Warn
		public RuleCall getWarnParserRuleCall_15() { return cWarnParserRuleCall_15; }
		
		//WorkingHours
		public RuleCall getWorkingHoursParserRuleCall_16() { return cWorkingHoursParserRuleCall_16; }
		
		//Leaves
		public RuleCall getLeavesParserRuleCall_17() { return cLeavesParserRuleCall_17; }
	}
	public class AllocateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Allocate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllocateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourcesAllocateResourceParserRuleCall_1_0 = (RuleCall)cResourcesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cResourcesAllocateResourceParserRuleCall_2_1_0 = (RuleCall)cResourcesAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/allocate.html
		//Allocate: 'allocate' resources+=AllocateResource (',' resources+=AllocateResource)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'allocate' resources+=AllocateResource (',' resources+=AllocateResource)*
		public Group getGroup() { return cGroup; }
		
		//'allocate'
		public Keyword getAllocateKeyword_0() { return cAllocateKeyword_0; }
		
		//resources+=AllocateResource
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }
		
		//AllocateResource
		public RuleCall getResourcesAllocateResourceParserRuleCall_1_0() { return cResourcesAllocateResourceParserRuleCall_1_0; }
		
		//(',' resources+=AllocateResource)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//resources+=AllocateResource
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }
		
		//AllocateResource
		public RuleCall getResourcesAllocateResourceParserRuleCall_2_1_0() { return cResourcesAllocateResourceParserRuleCall_2_1_0; }
	}
	public class AllocateResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AllocateResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourceResourceCrossReference_0_0 = (CrossReference)cResourceAssignment_0.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_0_0_1 = (RuleCall)cResourceResourceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAllocateResourceAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//AllocateResource: resource=[Resource] ('{' attributes += AllocateResourceAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//resource=[Resource] ('{' attributes += AllocateResourceAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_0() { return cResourceAssignment_0; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_0_0() { return cResourceResourceCrossReference_0_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_0_0_1() { return cResourceResourceIDTerminalRuleCall_0_0_1; }
		
		//('{' attributes += AllocateResourceAttribute* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//attributes += AllocateResourceAttribute*
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//AllocateResourceAttribute
		public RuleCall getAttributesAllocateResourceAttributeParserRuleCall_1_1_0() { return cAttributesAllocateResourceAttributeParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class AllocateResourceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AllocateResourceAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlternativeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMandatoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPersistentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelectParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cShiftsAllocateParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AllocateResourceAttribute:
		//    Alternative
		////    | Limits -- deprecated
		//    | Mandatory
		//    | Persistent
		//    | Select
		//    | ShiftsAllocate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    Alternative
		////    | Limits -- deprecated
		//    | Mandatory
		//    | Persistent
		//    | Select
		//    | ShiftsAllocate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Alternative
		public RuleCall getAlternativeParserRuleCall_0() { return cAlternativeParserRuleCall_0; }
		
		//Mandatory
		public RuleCall getMandatoryParserRuleCall_1() { return cMandatoryParserRuleCall_1; }
		
		//Persistent
		public RuleCall getPersistentParserRuleCall_2() { return cPersistentParserRuleCall_2; }
		
		//Select
		public RuleCall getSelectParserRuleCall_3() { return cSelectParserRuleCall_3; }
		
		//ShiftsAllocate
		public RuleCall getShiftsAllocateParserRuleCall_4() { return cShiftsAllocateParserRuleCall_4; }
	}
	public class NavigatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Navigator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesNavigatorAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/navigator.html
		//Navigator: 'navigator' id=ID ('{' attributes += NavigatorAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'navigator' id=ID ('{' attributes += NavigatorAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'navigator'
		public Keyword getNavigatorKeyword_0() { return cNavigatorKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//('{' attributes += NavigatorAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes += NavigatorAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//NavigatorAttribute
		public RuleCall getAttributesNavigatorAttributeParserRuleCall_2_1_0() { return cAttributesNavigatorAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class NavigatorAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.NavigatorAttribute");
		private final RuleCall cHideReportParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NavigatorAttribute:
		//    HideReport
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//HideReport
		public RuleCall getHideReportParserRuleCall() { return cHideReportParserRuleCall; }
	}
	public class NewTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.NewTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesNewTaskAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/newtask.html
		//NewTask: 'newtask' id=ID text=STRING ('{' attributes += NewTaskAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'newtask' id=ID text=STRING ('{' attributes += NewTaskAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'newtask'
		public Keyword getNewtaskKeyword_0() { return cNewtaskKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
		
		//('{' attributes += NewTaskAttribute* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes += NewTaskAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//NewTaskAttribute
		public RuleCall getAttributesNewTaskAttributeParserRuleCall_3_1_0() { return cAttributesNewTaskAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class NewTaskAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.NewTaskAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPriorityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemainingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWorkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NewTaskAttribute:
		//    End
		//    | Priority
		//    | Remaining
		////    | StatusTimesheet
		//    | Work
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    End
		//    | Priority
		//    | Remaining
		////    | StatusTimesheet
		//    | Work
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//Priority
		public RuleCall getPriorityParserRuleCall_1() { return cPriorityParserRuleCall_1; }
		
		//Remaining
		public RuleCall getRemainingParserRuleCall_2() { return cRemainingParserRuleCall_2; }
		
		//Work
		public RuleCall getWorkParserRuleCall_3() { return cWorkParserRuleCall_3; }
	}
	public class NikuReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.NikuReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNikureportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesNikuReportAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/nikureport.html
		//NikuReport: 'nikureport' filename = STRING ('{' attributes += NikuReportAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'nikureport' filename = STRING ('{' attributes += NikuReportAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'nikureport'
		public Keyword getNikureportKeyword_0() { return cNikureportKeyword_0; }
		
		//filename = STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }
		
		//('{' attributes += NikuReportAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes += NikuReportAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//NikuReportAttribute
		public RuleCall getAttributesNikuReportAttributeParserRuleCall_2_1_0() { return cAttributesNikuReportAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class NikuReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.NikuReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormatsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHeadlineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHideResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHideTaskParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNumberFormatParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPeriodParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStartParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTimeoffParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cTitleParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//NikuReportAttribute:
		//    End
		//    | Formats
		//    | Headline
		//    | HideResource
		//    | HideTask
		//    | NumberFormat
		//    | Period
		//    | Start
		//    | Timeoff
		//    | Title;
		@Override public ParserRule getRule() { return rule; }
		
		//End
		//| Formats
		//| Headline
		//| HideResource
		//| HideTask
		//| NumberFormat
		//| Period
		//| Start
		//| Timeoff
		//| Title
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//Formats
		public RuleCall getFormatsParserRuleCall_1() { return cFormatsParserRuleCall_1; }
		
		//Headline
		public RuleCall getHeadlineParserRuleCall_2() { return cHeadlineParserRuleCall_2; }
		
		//HideResource
		public RuleCall getHideResourceParserRuleCall_3() { return cHideResourceParserRuleCall_3; }
		
		//HideTask
		public RuleCall getHideTaskParserRuleCall_4() { return cHideTaskParserRuleCall_4; }
		
		//NumberFormat
		public RuleCall getNumberFormatParserRuleCall_5() { return cNumberFormatParserRuleCall_5; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_6() { return cPeriodParserRuleCall_6; }
		
		//Start
		public RuleCall getStartParserRuleCall_7() { return cStartParserRuleCall_7; }
		
		//Timeoff
		public RuleCall getTimeoffParserRuleCall_8() { return cTimeoffParserRuleCall_8; }
		
		//Title
		public RuleCall getTitleParserRuleCall_9() { return cTitleParserRuleCall_9; }
	}
	public class AlertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Alert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelAlertLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/alert.html
		//Alert: 'alert' level=AlertLevel;
		@Override public ParserRule getRule() { return rule; }
		
		//'alert' level=AlertLevel
		public Group getGroup() { return cGroup; }
		
		//'alert'
		public Keyword getAlertKeyword_0() { return cAlertKeyword_0; }
		
		//level=AlertLevel
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//AlertLevel
		public RuleCall getLevelAlertLevelEnumRuleCall_1_0() { return cLevelAlertLevelEnumRuleCall_1_0; }
	}
	public class AlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Alternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cResourcesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cResourcesResourceCrossReference_0_0 = (CrossReference)cResourcesAssignment_0.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_0_0_1 = (RuleCall)cResourcesResourceCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cResourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_1_1_0 = (CrossReference)cResourcesAssignment_1_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_1_1_0_1 = (RuleCall)cResourcesResourceCrossReference_1_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/alternative.html
		//Alternative: resources+=[Resource] (',' resources += [Resource])*;
		@Override public ParserRule getRule() { return rule; }
		
		//resources+=[Resource] (',' resources += [Resource])*
		public Group getGroup() { return cGroup; }
		
		//resources+=[Resource]
		public Assignment getResourcesAssignment_0() { return cResourcesAssignment_0; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_0_0() { return cResourcesResourceCrossReference_0_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_0_0_1() { return cResourcesResourceIDTerminalRuleCall_0_0_1; }
		
		//(',' resources += [Resource])*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//resources += [Resource]
		public Assignment getResourcesAssignment_1_1() { return cResourcesAssignment_1_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_1_1_0() { return cResourcesResourceCrossReference_1_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_1_1_0_1() { return cResourcesResourceIDTerminalRuleCall_1_1_0_1; }
	}
	public class AuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Author");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/author.html
		//Author: 'author' resource=[Resource];
		@Override public ParserRule getRule() { return rule; }
		
		//'author' resource=[Resource]
		public Group getGroup() { return cGroup; }
		
		//'author'
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
	}
	public class BalanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Balance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBalanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCostAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCostAccountCrossReference_1_0 = (CrossReference)cCostAssignment_1.eContents().get(0);
		private final RuleCall cCostAccountIDTerminalRuleCall_1_0_1 = (RuleCall)cCostAccountCrossReference_1_0.eContents().get(1);
		private final Assignment cRevenueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRevenueAccountCrossReference_2_0 = (CrossReference)cRevenueAssignment_2.eContents().get(0);
		private final RuleCall cRevenueAccountIDTerminalRuleCall_2_0_1 = (RuleCall)cRevenueAccountCrossReference_2_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/balance.html
		//Balance: 'balance' cost=[Account] revenue=[Account];
		@Override public ParserRule getRule() { return rule; }
		
		//'balance' cost=[Account] revenue=[Account]
		public Group getGroup() { return cGroup; }
		
		//'balance'
		public Keyword getBalanceKeyword_0() { return cBalanceKeyword_0; }
		
		//cost=[Account]
		public Assignment getCostAssignment_1() { return cCostAssignment_1; }
		
		//[Account]
		public CrossReference getCostAccountCrossReference_1_0() { return cCostAccountCrossReference_1_0; }
		
		//ID
		public RuleCall getCostAccountIDTerminalRuleCall_1_0_1() { return cCostAccountIDTerminalRuleCall_1_0_1; }
		
		//revenue=[Account]
		public Assignment getRevenueAssignment_2() { return cRevenueAssignment_2; }
		
		//[Account]
		public CrossReference getRevenueAccountCrossReference_2_0() { return cRevenueAccountCrossReference_2_0; }
		
		//ID
		public RuleCall getRevenueAccountIDTerminalRuleCall_2_0_1() { return cRevenueAccountIDTerminalRuleCall_2_0_1; }
	}
	public class BookingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Booking");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntervalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntervalInterval4ParserRuleCall_0_0 = (RuleCall)cIntervalAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cUnorderedGroup_1_1.eContents().get(0);
		private final Keyword cOvertimeKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cOvertimeAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cOvertimeINTTerminalRuleCall_1_1_0_1_0 = (RuleCall)cOvertimeAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cUnorderedGroup_1_1.eContents().get(1);
		private final Keyword cSloppyKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cSloppyAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cSloppyINTTerminalRuleCall_1_1_1_1_0 = (RuleCall)cSloppyAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/booking.task.html
		//// http://www.taskjuggler.org/tj3/manual/booking.resource.html
		//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
		//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
		//// TODO: Validate these values in sloppy and overtime
		////    WORKING_TIME_ONLY = '0' |
		////    PLUS_OFF_DUTY = '1' |
		////    PLUS_VACATION = '2'
		//Booking: interval=Interval4 ('{'
		//        (
		//            ('overtime' overtime=INT)? &
		//            ('sloppy' sloppy=INT)?
		//        )
		//'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		// interval=Interval4 ('{'
		//        (
		//            ('overtime' overtime=INT)? &
		//            ('sloppy' sloppy=INT)?
		//        )
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//interval=Interval4
		public Assignment getIntervalAssignment_0() { return cIntervalAssignment_0; }
		
		//Interval4
		public RuleCall getIntervalInterval4ParserRuleCall_0_0() { return cIntervalInterval4ParserRuleCall_0_0; }
		
		// ('{'
		//        (
		//            ('overtime' overtime=INT)? &
		//            ('sloppy' sloppy=INT)?
		//        )
		//'}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(
		//    ('overtime' overtime=INT)? &
		//    ('sloppy' sloppy=INT)?
		//)
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }
		
		//('overtime' overtime=INT)?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'overtime'
		public Keyword getOvertimeKeyword_1_1_0_0() { return cOvertimeKeyword_1_1_0_0; }
		
		//overtime=INT
		public Assignment getOvertimeAssignment_1_1_0_1() { return cOvertimeAssignment_1_1_0_1; }
		
		//INT
		public RuleCall getOvertimeINTTerminalRuleCall_1_1_0_1_0() { return cOvertimeINTTerminalRuleCall_1_1_0_1_0; }
		
		//('sloppy' sloppy=INT)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'sloppy'
		public Keyword getSloppyKeyword_1_1_1_0() { return cSloppyKeyword_1_1_1_0; }
		
		//sloppy=INT
		public Assignment getSloppyAssignment_1_1_1_1() { return cSloppyAssignment_1_1_1_1; }
		
		//INT
		public RuleCall getSloppyINTTerminalRuleCall_1_1_1_1_0() { return cSloppyINTTerminalRuleCall_1_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class BookingTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.BookingTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		private final Assignment cBookingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBookingBookingParserRuleCall_2_0 = (RuleCall)cBookingAssignment_2.eContents().get(0);
		
		//BookingTask: 'booking' resource=[Resource] booking=Booking ;
		@Override public ParserRule getRule() { return rule; }
		
		//'booking' resource=[Resource] booking=Booking
		public Group getGroup() { return cGroup; }
		
		//'booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
		
		//booking=Booking
		public Assignment getBookingAssignment_2() { return cBookingAssignment_2; }
		
		//Booking
		public RuleCall getBookingBookingParserRuleCall_2_0() { return cBookingBookingParserRuleCall_2_0; }
	}
	public class BookingResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.BookingResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Assignment cBookingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBookingBookingParserRuleCall_2_0 = (RuleCall)cBookingAssignment_2.eContents().get(0);
		
		//BookingResource:  'booking' task=[Task] booking=Booking;
		@Override public ParserRule getRule() { return rule; }
		
		//'booking' task=[Task] booking=Booking
		public Group getGroup() { return cGroup; }
		
		//'booking'
		public Keyword getBookingKeyword_0() { return cBookingKeyword_0; }
		
		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
		
		//booking=Booking
		public Assignment getBookingAssignment_2() { return cBookingAssignment_2; }
		
		//Booking
		public RuleCall getBookingBookingParserRuleCall_2_0() { return cBookingBookingParserRuleCall_2_0; }
	}
	public class CaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Caption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/caption.html
		//Caption: 'caption' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'caption' RichText
		public Group getGroup() { return cGroup; }
		
		//'caption'
		public Keyword getCaptionKeyword_0() { return cCaptionKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class CellColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.CellColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellcolorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorRGBParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/cellcolor.column.html
		//CellColor: 'cellcolor' expression=LogicalExpression color=RGB;
		@Override public ParserRule getRule() { return rule; }
		
		//'cellcolor' expression=LogicalExpression color=RGB
		public Group getGroup() { return cGroup; }
		
		//'cellcolor'
		public Keyword getCellcolorKeyword_0() { return cCellcolorKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
		
		//color=RGB
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }
		
		//RGB
		public RuleCall getColorRGBParserRuleCall_2_0() { return cColorRGBParserRuleCall_2_0; }
	}
	public class CellTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.CellText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCelltextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpresssionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpresssionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpresssionAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/celltext.column.html
		//CellText: 'celltext' expresssion=LogicalExpression text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'celltext' expresssion=LogicalExpression text=STRING
		public Group getGroup() { return cGroup; }
		
		//'celltext'
		public Keyword getCelltextKeyword_0() { return cCelltextKeyword_0; }
		
		//expresssion=LogicalExpression
		public Assignment getExpresssionAssignment_1() { return cExpresssionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpresssionLogicalExpressionParserRuleCall_1_0() { return cExpresssionLogicalExpressionParserRuleCall_1_0; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
	}
	public class CenterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Center");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCenterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/center.html
		//Center: 'center' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'center' RichText
		public Group getGroup() { return cGroup; }
		
		//'center'
		public Keyword getCenterKeyword_0() { return cCenterKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class ChargeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Charge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChargeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAmountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAmountXFloatParserRuleCall_1_0 = (RuleCall)cAmountAssignment_1.eContents().get(0);
		private final Assignment cAppliesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAppliesChargeAppliesEnumRuleCall_2_0 = (RuleCall)cAppliesAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/charge.html
		//Charge: 'charge' amount=XFloat applies=ChargeApplies;
		@Override public ParserRule getRule() { return rule; }
		
		//'charge' amount=XFloat applies=ChargeApplies
		public Group getGroup() { return cGroup; }
		
		//'charge'
		public Keyword getChargeKeyword_0() { return cChargeKeyword_0; }
		
		//amount=XFloat
		public Assignment getAmountAssignment_1() { return cAmountAssignment_1; }
		
		//XFloat
		public RuleCall getAmountXFloatParserRuleCall_1_0() { return cAmountXFloatParserRuleCall_1_0; }
		
		//applies=ChargeApplies
		public Assignment getAppliesAssignment_2() { return cAppliesAssignment_2; }
		
		//ChargeApplies
		public RuleCall getAppliesChargeAppliesEnumRuleCall_2_0() { return cAppliesChargeAppliesEnumRuleCall_2_0; }
	}
	public class ChargeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ChargeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChargesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAccountSharesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccountSharesAccountShareParserRuleCall_1_0 = (RuleCall)cAccountSharesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAccountSharesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAccountSharesAccountShareParserRuleCall_2_1_0 = (RuleCall)cAccountSharesAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/chargeset.html
		//ChargeSet: 'chargeset' accountShares+=AccountShare (',' accountShares+=AccountShare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'chargeset' accountShares+=AccountShare (',' accountShares+=AccountShare)*
		public Group getGroup() { return cGroup; }
		
		//'chargeset'
		public Keyword getChargesetKeyword_0() { return cChargesetKeyword_0; }
		
		//accountShares+=AccountShare
		public Assignment getAccountSharesAssignment_1() { return cAccountSharesAssignment_1; }
		
		//AccountShare
		public RuleCall getAccountSharesAccountShareParserRuleCall_1_0() { return cAccountSharesAccountShareParserRuleCall_1_0; }
		
		//(',' accountShares+=AccountShare)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//accountShares+=AccountShare
		public Assignment getAccountSharesAssignment_2_1() { return cAccountSharesAssignment_2_1; }
		
		//AccountShare
		public RuleCall getAccountSharesAccountShareParserRuleCall_2_1_0() { return cAccountSharesAccountShareParserRuleCall_2_1_0; }
	}
	public class ColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Columns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_1_0 = (RuleCall)cColumnsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cColumnsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_2_1_0 = (RuleCall)cColumnsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/columns.html
		//Columns: 'columns' columns+=Column (',' columns+=Column)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'columns' columns+=Column (',' columns+=Column)*
		public Group getGroup() { return cGroup; }
		
		//'columns'
		public Keyword getColumnsKeyword_0() { return cColumnsKeyword_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_1() { return cColumnsAssignment_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_1_0() { return cColumnsColumnParserRuleCall_1_0; }
		
		//(',' columns+=Column)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_2_1() { return cColumnsAssignment_2_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_2_1_0() { return cColumnsColumnParserRuleCall_2_1_0; }
	}
	public class CompleteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Complete");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCompleteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompleteXFloatParserRuleCall_1_0 = (RuleCall)cCompleteAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/complete.html
		//Complete: 'complete' complete=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'complete' complete=XFloat
		public Group getGroup() { return cGroup; }
		
		//'complete'
		public Keyword getCompleteKeyword_0() { return cCompleteKeyword_0; }
		
		//complete=XFloat
		public Assignment getCompleteAssignment_1() { return cCompleteAssignment_1; }
		
		//XFloat
		public RuleCall getCompleteXFloatParserRuleCall_1_0() { return cCompleteXFloatParserRuleCall_1_0; }
	}
	public class CopyrightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Copyright");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyrightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/copyright.html
		//Copyright: 'copyright' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'copyright' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'copyright'
		public Keyword getCopyrightKeyword_0() { return cCopyrightKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class CreditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Credit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreditKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateISODATEParserRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountXFloatParserRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/credit.html
		//Credit:    'credit' date=ISODATE description=STRING amount=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'credit' date=ISODATE description=STRING amount=XFloat
		public Group getGroup() { return cGroup; }
		
		//'credit'
		public Keyword getCreditKeyword_0() { return cCreditKeyword_0; }
		
		//date=ISODATE
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//ISODATE
		public RuleCall getDateISODATEParserRuleCall_1_0() { return cDateISODATEParserRuleCall_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//amount=XFloat
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }
		
		//XFloat
		public RuleCall getAmountXFloatParserRuleCall_3_0() { return cAmountXFloatParserRuleCall_3_0; }
	}
	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Currency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCurrencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCurrencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCurrencySTRINGTerminalRuleCall_1_0 = (RuleCall)cCurrencyAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/currency.html
		//Currency: 'currency' currency=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'currency' currency=STRING
		public Group getGroup() { return cGroup; }
		
		//'currency'
		public Keyword getCurrencyKeyword_0() { return cCurrencyKeyword_0; }
		
		//currency=STRING
		public Assignment getCurrencyAssignment_1() { return cCurrencyAssignment_1; }
		
		//STRING
		public RuleCall getCurrencySTRINGTerminalRuleCall_1_0() { return cCurrencySTRINGTerminalRuleCall_1_0; }
	}
	public class CurrencyFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.CurrencyFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCurrencyformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRealFormatParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
		//CurrencyFormat: 'currencyformat' RealFormat;
		@Override public ParserRule getRule() { return rule; }
		
		//'currencyformat' RealFormat
		public Group getGroup() { return cGroup; }
		
		//'currencyformat'
		public Keyword getCurrencyformatKeyword_0() { return cCurrencyformatKeyword_0; }
		
		//RealFormat
		public RuleCall getRealFormatParserRuleCall_1() { return cRealFormatParserRuleCall_1; }
	}
	public class DailyMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.DailyMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDailymaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/dailymax.html
		//DailyMax: 'dailymax' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'dailymax' Limit
		public Group getGroup() { return cGroup; }
		
		//'dailymax'
		public Keyword getDailymaxKeyword_0() { return cDailymaxKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class DailyMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.DailyMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDailyminKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/dailymin.html
		//DailyMin: 'dailymin' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'dailymin' Limit
		public Group getGroup() { return cGroup; }
		
		//'dailymin'
		public Keyword getDailyminKeyword_0() { return cDailyminKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class DailyWorkingHoursElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.DailyWorkingHours");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDailyworkinghoursKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDailyWorkingHoursAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDailyWorkingHoursXFloatParserRuleCall_1_0 = (RuleCall)cDailyWorkingHoursAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/dailyworkinghours.html
		//DailyWorkingHours: 'dailyworkinghours' dailyWorkingHours=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'dailyworkinghours' dailyWorkingHours=XFloat
		public Group getGroup() { return cGroup; }
		
		//'dailyworkinghours'
		public Keyword getDailyworkinghoursKeyword_0() { return cDailyworkinghoursKeyword_0; }
		
		//dailyWorkingHours=XFloat
		public Assignment getDailyWorkingHoursAssignment_1() { return cDailyWorkingHoursAssignment_1; }
		
		//XFloat
		public RuleCall getDailyWorkingHoursXFloatParserRuleCall_1_0() { return cDailyWorkingHoursXFloatParserRuleCall_1_0; }
	}
	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Definitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefinitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAllAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_1_0_0 = (Keyword)cAllAssignment_1_0.eContents().get(0);
		private final Assignment cNoneAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_1_0 = (Keyword)cNoneAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cDefintionsAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_2_1 = (UnorderedGroup)cGroup_1_2.eContents().get(1);
		private final Assignment cFlagsAssignment_1_2_1_0 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(0);
		private final Keyword cFlagsFlagsKeyword_1_2_1_0_0 = (Keyword)cFlagsAssignment_1_2_1_0.eContents().get(0);
		private final Assignment cResourcesAssignment_1_2_1_1 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(1);
		private final Keyword cResourcesResourcesKeyword_1_2_1_1_0 = (Keyword)cResourcesAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cTasksAssignment_1_2_1_2 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(2);
		private final Keyword cTasksTasksKeyword_1_2_1_2_0 = (Keyword)cTasksAssignment_1_2_1_2.eContents().get(0);
		private final Assignment cProjectAssignment_1_2_1_3 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(3);
		private final Keyword cProjectProjectKeyword_1_2_1_3_0 = (Keyword)cProjectAssignment_1_2_1_3.eContents().get(0);
		private final Assignment cProjectidsAssignment_1_2_1_4 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(4);
		private final Keyword cProjectidsProjectidsKeyword_1_2_1_4_0 = (Keyword)cProjectidsAssignment_1_2_1_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/date.html
		//// http://www.taskjuggler.org/tj3/manual/date.extend.html
		//// Date: see ISODATE below
		//// http://www.taskjuggler.org/tj3/manual/definitions.html
		//Definitions: 'definitions' (all ?= '*'  | none ?= '-'
		//     | {Defintions}
		//        (flags ?= 'flags'? &
		//             resources ?= 'resources'? &
		//             tasks ?= 'tasks'? &
		//             project ?= 'project'? &
		//             projectids ?= 'projectids'?)
		//)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		// 'definitions' (all ?= '*'  | none ?= '-'
		//     | {Defintions}
		//        (flags ?= 'flags'? &
		//             resources ?= 'resources'? &
		//             tasks ?= 'tasks'? &
		//             project ?= 'project'? &
		//             projectids ?= 'projectids'?)
		//)
		public Group getGroup() { return cGroup; }
		
		//'definitions'
		public Keyword getDefinitionsKeyword_0() { return cDefinitionsKeyword_0; }
		
		// (all ?= '*'  | none ?= '-'
		//     | {Defintions}
		//        (flags ?= 'flags'? &
		//             resources ?= 'resources'? &
		//             tasks ?= 'tasks'? &
		//             project ?= 'project'? &
		//             projectids ?= 'projectids'?)
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//all ?= '*'
		public Assignment getAllAssignment_1_0() { return cAllAssignment_1_0; }
		
		//'*'
		public Keyword getAllAsteriskKeyword_1_0_0() { return cAllAsteriskKeyword_1_0_0; }
		
		//none ?= '-'
		public Assignment getNoneAssignment_1_1() { return cNoneAssignment_1_1; }
		
		//'-'
		public Keyword getNoneHyphenMinusKeyword_1_1_0() { return cNoneHyphenMinusKeyword_1_1_0; }
		
		//{Defintions}
		//       (flags ?= 'flags'? &
		//            resources ?= 'resources'? &
		//            tasks ?= 'tasks'? &
		//            project ?= 'project'? &
		//            projectids ?= 'projectids'?)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{Defintions}
		public Action getDefintionsAction_1_2_0() { return cDefintionsAction_1_2_0; }
		
		//(flags ?= 'flags'? &
		//     resources ?= 'resources'? &
		//     tasks ?= 'tasks'? &
		//     project ?= 'project'? &
		//     projectids ?= 'projectids'?)
		public UnorderedGroup getUnorderedGroup_1_2_1() { return cUnorderedGroup_1_2_1; }
		
		//flags ?= 'flags'?
		public Assignment getFlagsAssignment_1_2_1_0() { return cFlagsAssignment_1_2_1_0; }
		
		//'flags'
		public Keyword getFlagsFlagsKeyword_1_2_1_0_0() { return cFlagsFlagsKeyword_1_2_1_0_0; }
		
		//resources ?= 'resources'?
		public Assignment getResourcesAssignment_1_2_1_1() { return cResourcesAssignment_1_2_1_1; }
		
		//'resources'
		public Keyword getResourcesResourcesKeyword_1_2_1_1_0() { return cResourcesResourcesKeyword_1_2_1_1_0; }
		
		//tasks ?= 'tasks'?
		public Assignment getTasksAssignment_1_2_1_2() { return cTasksAssignment_1_2_1_2; }
		
		//'tasks'
		public Keyword getTasksTasksKeyword_1_2_1_2_0() { return cTasksTasksKeyword_1_2_1_2_0; }
		
		//project ?= 'project'?
		public Assignment getProjectAssignment_1_2_1_3() { return cProjectAssignment_1_2_1_3; }
		
		//'project'
		public Keyword getProjectProjectKeyword_1_2_1_3_0() { return cProjectProjectKeyword_1_2_1_3_0; }
		
		//projectids ?= 'projectids'?
		public Assignment getProjectidsAssignment_1_2_1_4() { return cProjectidsAssignment_1_2_1_4; }
		
		//'projectids'
		public Keyword getProjectidsProjectidsKeyword_1_2_1_4_0() { return cProjectidsProjectidsKeyword_1_2_1_4_0; }
	}
	public class DependsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Depends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDependencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependencyTaskDependencyParserRuleCall_1_0 = (RuleCall)cDependencyAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDependencyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDependencyTaskDependencyParserRuleCall_2_1_0 = (RuleCall)cDependencyAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/depends.html
		//Depends: 'depends' dependency += TaskDependency (',' dependency += TaskDependency)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'depends' dependency += TaskDependency (',' dependency += TaskDependency)*
		public Group getGroup() { return cGroup; }
		
		//'depends'
		public Keyword getDependsKeyword_0() { return cDependsKeyword_0; }
		
		//dependency += TaskDependency
		public Assignment getDependencyAssignment_1() { return cDependencyAssignment_1; }
		
		//TaskDependency
		public RuleCall getDependencyTaskDependencyParserRuleCall_1_0() { return cDependencyTaskDependencyParserRuleCall_1_0; }
		
		//(',' dependency += TaskDependency)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//dependency += TaskDependency
		public Assignment getDependencyAssignment_2_1() { return cDependencyAssignment_2_1; }
		
		//TaskDependency
		public RuleCall getDependencyTaskDependencyParserRuleCall_2_1_0() { return cDependencyTaskDependencyParserRuleCall_2_1_0; }
	}
	public class DetailsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Details");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDetailsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/details.html
		//Details: 'details' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'details' RichText
		public Group getGroup() { return cGroup; }
		
		//'details'
		public Keyword getDetailsKeyword_0() { return cDetailsKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/duration.html
		//Duration: 'duration' duration=DurationQuantity;
		@Override public ParserRule getRule() { return rule; }
		
		//'duration' duration=DurationQuantity
		public Group getGroup() { return cGroup; }
		
		//'duration'
		public Keyword getDurationKeyword_0() { return cDurationKeyword_0; }
		
		//duration=DurationQuantity
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_0() { return cDurationDurationQuantityParserRuleCall_1_0; }
	}
	public class EfficiencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Efficiency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEfficiencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEfficiencyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEfficiencyXFloatParserRuleCall_1_0 = (RuleCall)cEfficiencyAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/efficiency.html
		//Efficiency: 'efficiency' efficiency=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'efficiency' efficiency=XFloat
		public Group getGroup() { return cGroup; }
		
		//'efficiency'
		public Keyword getEfficiencyKeyword_0() { return cEfficiencyKeyword_0; }
		
		//efficiency=XFloat
		public Assignment getEfficiencyAssignment_1() { return cEfficiencyAssignment_1; }
		
		//XFloat
		public RuleCall getEfficiencyXFloatParserRuleCall_1_0() { return cEfficiencyXFloatParserRuleCall_1_0; }
	}
	public class EffortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Effort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEffortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEffortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffortDurationQuantityParserRuleCall_1_0 = (RuleCall)cEffortAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/effort.html
		//Effort: 'effort' effort=DurationQuantity;
		@Override public ParserRule getRule() { return rule; }
		
		//'effort' effort=DurationQuantity
		public Group getGroup() { return cGroup; }
		
		//'effort'
		public Keyword getEffortKeyword_0() { return cEffortKeyword_0; }
		
		//effort=DurationQuantity
		public Assignment getEffortAssignment_1() { return cEffortAssignment_1; }
		
		//DurationQuantity
		public RuleCall getEffortDurationQuantityParserRuleCall_1_0() { return cEffortDurationQuantityParserRuleCall_1_0; }
	}
	public class EmailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Email");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAddressAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddressSTRINGTerminalRuleCall_1_0 = (RuleCall)cAddressAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/email.html
		//Email: 'email' address = STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'email' address = STRING
		public Group getGroup() { return cGroup; }
		
		//'email'
		public Keyword getEmailKeyword_0() { return cEmailKeyword_0; }
		
		//address = STRING
		public Assignment getAddressAssignment_1() { return cAddressAssignment_1; }
		
		//STRING
		public RuleCall getAddressSTRINGTerminalRuleCall_1_0() { return cAddressSTRINGTerminalRuleCall_1_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cEndISODATEParserRuleCall_1_0_0 = (RuleCall)cEndAssignment_1_0.eContents().get(0);
		private final RuleCall cMacroCallParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/end.html
		//End: 'end' (end=ISODATE | MacroCall);
		@Override public ParserRule getRule() { return rule; }
		
		//'end' (end=ISODATE | MacroCall)
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//(end=ISODATE | MacroCall)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//end=ISODATE
		public Assignment getEndAssignment_1_0() { return cEndAssignment_1_0; }
		
		//ISODATE
		public RuleCall getEndISODATEParserRuleCall_1_0_0() { return cEndISODATEParserRuleCall_1_0_0; }
		
		//MacroCall
		public RuleCall getMacroCallParserRuleCall_1_1() { return cMacroCallParserRuleCall_1_1; }
	}
	public class EndCreditElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.EndCredit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndcreditKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCreditAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCreditXFloatParserRuleCall_1_0 = (RuleCall)cCreditAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/endcredit.html
		//EndCredit: 'endcredit' credit=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'endcredit' credit=XFloat
		public Group getGroup() { return cGroup; }
		
		//'endcredit'
		public Keyword getEndcreditKeyword_0() { return cEndcreditKeyword_0; }
		
		//credit=XFloat
		public Assignment getCreditAssignment_1() { return cCreditAssignment_1; }
		
		//XFloat
		public RuleCall getCreditXFloatParserRuleCall_1_0() { return cCreditXFloatParserRuleCall_1_0; }
	}
	public class EpilogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Epilog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEpilogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/epilog.html
		//Epilog: 'epilog' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'epilog' RichText
		public Group getGroup() { return cGroup; }
		
		//'epilog'
		public Keyword getEpilogKeyword_0() { return cEpilogKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Extend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cReferenceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDateKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cRichtextKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cTextKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Assignment cInheritAssignment_3_1_0 = (Assignment)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cInheritInheritKeyword_3_1_0_0 = (Keyword)cInheritAssignment_3_1_0.eContents().get(0);
		private final Assignment cScenariospecificAssignment_3_1_1 = (Assignment)cUnorderedGroup_3_1.eContents().get(1);
		private final Keyword cScenariospecificScenariospecificKeyword_3_1_1_0 = (Keyword)cScenariospecificAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/extend.html
		//// http://www.taskjuggler.org/tj3/manual/date.extend.html
		//// http://www.taskjuggler.org/tj3/manual/reference.extend.html
		//// http://www.taskjuggler.org/tj3/manual/richtext.extend.html
		//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
		//// http://www.taskjuggler.org/tj3/manual/text.extend.html
		//Extend: ('reference' | 'date' | 'richtext' | 'text')
		//        name=ID description=STRING
		//         ('{' (inherit?='inherit'? & scenariospecific?='scenariospecific'?) '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('reference' | 'date' | 'richtext' | 'text')
		//       name=ID description=STRING
		//        ('{' (inherit?='inherit'? & scenariospecific?='scenariospecific'?) '}')?
		public Group getGroup() { return cGroup; }
		
		//('reference' | 'date' | 'richtext' | 'text')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'reference'
		public Keyword getReferenceKeyword_0_0() { return cReferenceKeyword_0_0; }
		
		//'date'
		public Keyword getDateKeyword_0_1() { return cDateKeyword_0_1; }
		
		//'richtext'
		public Keyword getRichtextKeyword_0_2() { return cRichtextKeyword_0_2; }
		
		//'text'
		public Keyword getTextKeyword_0_3() { return cTextKeyword_0_3; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
		
		//('{' (inherit?='inherit'? & scenariospecific?='scenariospecific'?) '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(inherit?='inherit'? & scenariospecific?='scenariospecific'?)
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }
		
		//inherit?='inherit'?
		public Assignment getInheritAssignment_3_1_0() { return cInheritAssignment_3_1_0; }
		
		//'inherit'
		public Keyword getInheritInheritKeyword_3_1_0_0() { return cInheritInheritKeyword_3_1_0_0; }
		
		//scenariospecific?='scenariospecific'?
		public Assignment getScenariospecificAssignment_3_1_1() { return cScenariospecificAssignment_3_1_1; }
		
		//'scenariospecific'
		public Keyword getScenariospecificScenariospecificKeyword_3_1_1_0() { return cScenariospecificScenariospecificKeyword_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ExtendResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExtendResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtendResourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtendKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cResourceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsExtendParserRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// TODO: handle date format with validator
		//// TODO: handle reference w/ label with validator?
		//ExtendResource: {ExtendResource} 'extend' 'resource' ('{' extends +=  Extend* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtendResource} 'extend' 'resource' ('{' extends +=  Extend* '}')?
		public Group getGroup() { return cGroup; }
		
		//{ExtendResource}
		public Action getExtendResourceAction_0() { return cExtendResourceAction_0; }
		
		//'extend'
		public Keyword getExtendKeyword_1() { return cExtendKeyword_1; }
		
		//'resource'
		public Keyword getResourceKeyword_2() { return cResourceKeyword_2; }
		
		//('{' extends +=  Extend* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//extends +=  Extend*
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//Extend
		public RuleCall getExtendsExtendParserRuleCall_3_1_0() { return cExtendsExtendParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ExtendedResourceAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExtendedResourceAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExtendAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExtendExtendCrossReference_0_0 = (CrossReference)cExtendAssignment_0.eContents().get(0);
		private final RuleCall cExtendExtendQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cExtendExtendCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ExtendedResourceAttribute: extend=[Extend|QualifiedName] value = STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//extend=[Extend|QualifiedName] value = STRING
		public Group getGroup() { return cGroup; }
		
		//extend=[Extend|QualifiedName]
		public Assignment getExtendAssignment_0() { return cExtendAssignment_0; }
		
		//[Extend|QualifiedName]
		public CrossReference getExtendExtendCrossReference_0_0() { return cExtendExtendCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getExtendExtendQualifiedNameParserRuleCall_0_0_1() { return cExtendExtendQualifiedNameParserRuleCall_0_0_1; }
		
		//value = STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class ExtendTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExtendTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExtendTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExtendKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTaskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsExtendParserRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ExtendTask: {ExtendTask} 'extend' 'task' ('{' extends +=  Extend* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExtendTask} 'extend' 'task' ('{' extends +=  Extend* '}')?
		public Group getGroup() { return cGroup; }
		
		//{ExtendTask}
		public Action getExtendTaskAction_0() { return cExtendTaskAction_0; }
		
		//'extend'
		public Keyword getExtendKeyword_1() { return cExtendKeyword_1; }
		
		//'task'
		public Keyword getTaskKeyword_2() { return cTaskKeyword_2; }
		
		//('{' extends +=  Extend* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//extends +=  Extend*
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//Extend
		public RuleCall getExtendsExtendParserRuleCall_3_1_0() { return cExtendsExtendParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ExtendedTaskAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExtendedTaskAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExtendAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cExtendExtendCrossReference_0_0 = (CrossReference)cExtendAssignment_0.eContents().get(0);
		private final RuleCall cExtendExtendIDTerminalRuleCall_0_0_1 = (RuleCall)cExtendExtendCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ExtendedTaskAttribute: extend=[Extend] value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//extend=[Extend] value=STRING
		public Group getGroup() { return cGroup; }
		
		//extend=[Extend]
		public Assignment getExtendAssignment_0() { return cExtendAssignment_0; }
		
		//[Extend]
		public CrossReference getExtendExtendCrossReference_0_0() { return cExtendExtendCrossReference_0_0; }
		
		//ID
		public RuleCall getExtendExtendIDTerminalRuleCall_0_0_1() { return cExtendExtendIDTerminalRuleCall_0_0_1; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class FailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Fail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/fail.html
		//Fail: 'fail' expression=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'fail' expression=LogicalExpression
		public Group getGroup() { return cGroup; }
		
		//'fail'
		public Keyword getFailKeyword_0() { return cFailKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}
	public class FlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Flags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFlagsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFlagsIDTerminalRuleCall_1_0 = (RuleCall)cFlagsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFlagsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFlagsIDTerminalRuleCall_2_1_0 = (RuleCall)cFlagsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/flags.html
		//Flags: 'flags' flags += ID (',' flags += ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'flags' flags += ID (',' flags += ID)*
		public Group getGroup() { return cGroup; }
		
		//'flags'
		public Keyword getFlagsKeyword_0() { return cFlagsKeyword_0; }
		
		//flags += ID
		public Assignment getFlagsAssignment_1() { return cFlagsAssignment_1; }
		
		//ID
		public RuleCall getFlagsIDTerminalRuleCall_1_0() { return cFlagsIDTerminalRuleCall_1_0; }
		
		//(',' flags += ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//flags += ID
		public Assignment getFlagsAssignment_2_1() { return cFlagsAssignment_2_1; }
		
		//ID
		public RuleCall getFlagsIDTerminalRuleCall_2_1_0() { return cFlagsIDTerminalRuleCall_2_1_0; }
	}
	public class FontColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.FontColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontcolorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColorSTRINGTerminalRuleCall_1_0 = (RuleCall)cColorAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/fontcolor.column.html
		//FontColor: 'fontcolor' color=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'fontcolor' color=STRING
		public Group getGroup() { return cGroup; }
		
		//'fontcolor'
		public Keyword getFontcolorKeyword_0() { return cFontcolorKeyword_0; }
		
		//color=STRING
		public Assignment getColorAssignment_1() { return cColorAssignment_1; }
		
		//STRING
		public RuleCall getColorSTRINGTerminalRuleCall_1_0() { return cColorSTRINGTerminalRuleCall_1_0; }
	}
	public class FooterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Footer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFooterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/footer.html
		//Footer: 'footer' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'footer' RichText
		public Group getGroup() { return cGroup; }
		
		//'footer'
		public Keyword getFooterKeyword_0() { return cFooterKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class FormatsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Formats");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormatsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormatsReportFormatEnumRuleCall_1_0 = (RuleCall)cFormatsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatsReportFormatEnumRuleCall_2_1_0 = (RuleCall)cFormatsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/formats.html
		//Formats: 'formats' formats+=ReportFormat (',' formats+=ReportFormat)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'formats' formats+=ReportFormat (',' formats+=ReportFormat)*
		public Group getGroup() { return cGroup; }
		
		//'formats'
		public Keyword getFormatsKeyword_0() { return cFormatsKeyword_0; }
		
		//formats+=ReportFormat
		public Assignment getFormatsAssignment_1() { return cFormatsAssignment_1; }
		
		//ReportFormat
		public RuleCall getFormatsReportFormatEnumRuleCall_1_0() { return cFormatsReportFormatEnumRuleCall_1_0; }
		
		//(',' formats+=ReportFormat)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//formats+=ReportFormat
		public Assignment getFormatsAssignment_2_1() { return cFormatsAssignment_2_1; }
		
		//ReportFormat
		public RuleCall getFormatsReportFormatEnumRuleCall_2_1_0() { return cFormatsReportFormatEnumRuleCall_2_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Keyword cHasalertKeyword_1_0_0_0 = (Keyword)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cHasalert_Keyword_1_0_0_1 = (Keyword)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cLevelAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cLevelINTTerminalRuleCall_1_0_2_0 = (RuleCall)cLevelAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cDateAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cDateISODATEParserRuleCall_1_0_3_1_0 = (RuleCall)cDateAssignment_1_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cIsactiveKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cIsactive_Keyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cScenarioAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cScenarioScenarioCrossReference_1_1_2_0 = (CrossReference)cScenarioAssignment_1_1_2.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_1_2_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cIschildofKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cIschildof_Keyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cParentIdAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cParentIdIDTerminalRuleCall_1_2_2_0 = (RuleCall)cParentIdAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Alternatives cAlternatives_1_3_0 = (Alternatives)cGroup_1_3.eContents().get(0);
		private final Keyword cIsdependencyofKeyword_1_3_0_0 = (Keyword)cAlternatives_1_3_0.eContents().get(0);
		private final Keyword cIsdependencyof_Keyword_1_3_0_1 = (Keyword)cAlternatives_1_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cTaskAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_1_3_2_0 = (CrossReference)cTaskAssignment_1_3_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_3_2_0_1 = (RuleCall)cTaskTaskCrossReference_1_3_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Assignment cScenarioAssignment_1_3_4 = (Assignment)cGroup_1_3.eContents().get(4);
		private final CrossReference cScenarioScenarioCrossReference_1_3_4_0 = (CrossReference)cScenarioAssignment_1_3_4.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_3_4_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_3_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_5 = (Keyword)cGroup_1_3.eContents().get(5);
		private final Assignment cDistanceAssignment_1_3_6 = (Assignment)cGroup_1_3.eContents().get(6);
		private final RuleCall cDistanceINTTerminalRuleCall_1_3_6_0 = (RuleCall)cDistanceAssignment_1_3_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_7 = (Keyword)cGroup_1_3.eContents().get(7);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Alternatives cAlternatives_1_4_0 = (Alternatives)cGroup_1_4.eContents().get(0);
		private final Keyword cIsdutyofKeyword_1_4_0_0 = (Keyword)cAlternatives_1_4_0.eContents().get(0);
		private final Keyword cIsdutyof_Keyword_1_4_0_1 = (Keyword)cAlternatives_1_4_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cResourceAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final CrossReference cResourceResourceCrossReference_1_4_2_0 = (CrossReference)cResourceAssignment_1_4_2.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_4_2_0_1 = (RuleCall)cResourceResourceCrossReference_1_4_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_3 = (Keyword)cGroup_1_4.eContents().get(3);
		private final Assignment cScenarioAssignment_1_4_4 = (Assignment)cGroup_1_4.eContents().get(4);
		private final CrossReference cScenarioScenarioCrossReference_1_4_4_0 = (CrossReference)cScenarioAssignment_1_4_4.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_4_4_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_4_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4_5 = (Keyword)cGroup_1_4.eContents().get(5);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Alternatives cAlternatives_1_5_0 = (Alternatives)cGroup_1_5.eContents().get(0);
		private final Keyword cIsfeatureofKeyword_1_5_0_0 = (Keyword)cAlternatives_1_5_0.eContents().get(0);
		private final Keyword cIsfeatureof_Keyword_1_5_0_1 = (Keyword)cAlternatives_1_5_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_5_1 = (Keyword)cGroup_1_5.eContents().get(1);
		private final Assignment cTaskAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_1_5_2_0 = (CrossReference)cTaskAssignment_1_5_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_5_2_0_1 = (RuleCall)cTaskTaskCrossReference_1_5_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_5_3 = (Keyword)cGroup_1_5.eContents().get(3);
		private final Assignment cScenarioAssignment_1_5_4 = (Assignment)cGroup_1_5.eContents().get(4);
		private final CrossReference cScenarioScenarioCrossReference_1_5_4_0 = (CrossReference)cScenarioAssignment_1_5_4.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_5_4_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_5_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_5_5 = (Keyword)cGroup_1_5.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Alternatives cAlternatives_1_6_0 = (Alternatives)cGroup_1_6.eContents().get(0);
		private final Keyword cIsleafKeyword_1_6_0_0 = (Keyword)cAlternatives_1_6_0.eContents().get(0);
		private final Keyword cIsleaf_Keyword_1_6_0_1 = (Keyword)cAlternatives_1_6_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final Group cGroup_1_7 = (Group)cAlternatives_1.eContents().get(7);
		private final Alternatives cAlternatives_1_7_0 = (Alternatives)cGroup_1_7.eContents().get(0);
		private final Keyword cIsmilestoneKeyword_1_7_0_0 = (Keyword)cAlternatives_1_7_0.eContents().get(0);
		private final Keyword cIsmilestone_Keyword_1_7_0_1 = (Keyword)cAlternatives_1_7_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_7_1 = (Keyword)cGroup_1_7.eContents().get(1);
		private final Assignment cScenarioAssignment_1_7_2 = (Assignment)cGroup_1_7.eContents().get(2);
		private final CrossReference cScenarioScenarioCrossReference_1_7_2_0 = (CrossReference)cScenarioAssignment_1_7_2.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_7_2_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_7_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_7_3 = (Keyword)cGroup_1_7.eContents().get(3);
		private final Group cGroup_1_8 = (Group)cAlternatives_1.eContents().get(8);
		private final Alternatives cAlternatives_1_8_0 = (Alternatives)cGroup_1_8.eContents().get(0);
		private final Keyword cIsongoingKeyword_1_8_0_0 = (Keyword)cAlternatives_1_8_0.eContents().get(0);
		private final Keyword cIsongoing_Keyword_1_8_0_1 = (Keyword)cAlternatives_1_8_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_8_1 = (Keyword)cGroup_1_8.eContents().get(1);
		private final Assignment cScenarioAssignment_1_8_2 = (Assignment)cGroup_1_8.eContents().get(2);
		private final CrossReference cScenarioScenarioCrossReference_1_8_2_0 = (CrossReference)cScenarioAssignment_1_8_2.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_8_2_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_8_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_8_3 = (Keyword)cGroup_1_8.eContents().get(3);
		private final Group cGroup_1_9 = (Group)cAlternatives_1.eContents().get(9);
		private final Alternatives cAlternatives_1_9_0 = (Alternatives)cGroup_1_9.eContents().get(0);
		private final Keyword cIsresourceKeyword_1_9_0_0 = (Keyword)cAlternatives_1_9_0.eContents().get(0);
		private final Keyword cIsresource_Keyword_1_9_0_1 = (Keyword)cAlternatives_1_9_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_9_1 = (Keyword)cGroup_1_9.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_9_2 = (Keyword)cGroup_1_9.eContents().get(2);
		private final Group cGroup_1_10 = (Group)cAlternatives_1.eContents().get(10);
		private final Alternatives cAlternatives_1_10_0 = (Alternatives)cGroup_1_10.eContents().get(0);
		private final Keyword cIsresponsbilityofKeyword_1_10_0_0 = (Keyword)cAlternatives_1_10_0.eContents().get(0);
		private final Keyword cIsresponsbilityof_Keyword_1_10_0_1 = (Keyword)cAlternatives_1_10_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_10_1 = (Keyword)cGroup_1_10.eContents().get(1);
		private final Assignment cResourceAssignment_1_10_2 = (Assignment)cGroup_1_10.eContents().get(2);
		private final CrossReference cResourceResourceCrossReference_1_10_2_0 = (CrossReference)cResourceAssignment_1_10_2.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_10_2_0_1 = (RuleCall)cResourceResourceCrossReference_1_10_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_10_3 = (Keyword)cGroup_1_10.eContents().get(3);
		private final Assignment cScenarioAssignment_1_10_4 = (Assignment)cGroup_1_10.eContents().get(4);
		private final CrossReference cScenarioScenarioCrossReference_1_10_4_0 = (CrossReference)cScenarioAssignment_1_10_4.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_10_4_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_10_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_10_5 = (Keyword)cGroup_1_10.eContents().get(5);
		private final Group cGroup_1_11 = (Group)cAlternatives_1.eContents().get(11);
		private final Alternatives cAlternatives_1_11_0 = (Alternatives)cGroup_1_11.eContents().get(0);
		private final Keyword cIstaskKeyword_1_11_0_0 = (Keyword)cAlternatives_1_11_0.eContents().get(0);
		private final Keyword cIstask_Keyword_1_11_0_1 = (Keyword)cAlternatives_1_11_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_11_1 = (Keyword)cGroup_1_11.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_11_2 = (Keyword)cGroup_1_11.eContents().get(2);
		private final Group cGroup_1_12 = (Group)cAlternatives_1.eContents().get(12);
		private final Alternatives cAlternatives_1_12_0 = (Alternatives)cGroup_1_12.eContents().get(0);
		private final Keyword cTreelevelKeyword_1_12_0_0 = (Keyword)cAlternatives_1_12_0.eContents().get(0);
		private final Keyword cTreelevel_Keyword_1_12_0_1 = (Keyword)cAlternatives_1_12_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_12_1 = (Keyword)cGroup_1_12.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_12_2 = (Keyword)cGroup_1_12.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/functions.html
		//// http://www.taskjuggler.org/tj3/manual/isactive.html
		//// http://www.taskjuggler.org/tj3/manual/ischildof.html
		//// http://www.taskjuggler.org/tj3/manual/isdependencyof.html
		//// http://www.taskjuggler.org/tj3/manual/isdutyof.html
		//// http://www.taskjuggler.org/tj3/manual/isfeatureof.html
		//// http://www.taskjuggler.org/tj3/manual/isleaf.html
		//// http://www.taskjuggler.org/tj3/manual/ismilestone.html
		//// http://www.taskjuggler.org/tj3/manual/isongoing.html
		//// http://www.taskjuggler.org/tj3/manual/isresource.html
		//// http://www.taskjuggler.org/tj3/manual/istask.html
		//Function returns Function:
		//     {Function}     (
		//                 (('hasalert' | 'hasalert_' )        '('level=INT (',' date = ISODATE)? ')' )
		//          |      (('isactive' | 'isactive_' )             '('scenario = [Scenario] ')' )
		//          |      (('ischildof' | 'ischildof_' )         '(' parentId = ID ')' )
		//          |          (('isdependencyof' | 'isdependencyof_' ) '('  task=[Task] ',' scenario=[Scenario] ',' distance=INT ')'  )
		//          |          (('isdutyof' | 'isdutyof_'  )          '(' resource=[Resource] ',' scenario=[Scenario] ')' )
		//          |          (('isfeatureof' | 'isfeatureof_' ) '(' task=[Task] ',' scenario=[Scenario] ')')
		//          |           (('isleaf' | 'isleaf_' )  '('  ')'  )
		//          |          (('ismilestone' | 'ismilestone_')'('scenario = [Scenario] ')')
		//         |          (('isongoing' | 'isongoing_')'('scenario = [Scenario] ')' )
		//         |          (('isresource' | 'isresource_' ) '('  ')')
		//         |          (('isresponsbilityof' | 'isresponsbilityof_' ) '(' resource=[Resource] ',' scenario=[Scenario] ')')
		//         |          (('istask' | 'istask_' ) '('  ')' )
		//         |          (('treelevel' | 'treelevel_' ) '('  ')')
		//          )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function}     (
		//            (('hasalert' | 'hasalert_' )        '('level=INT (',' date = ISODATE)? ')' )
		//     |      (('isactive' | 'isactive_' )             '('scenario = [Scenario] ')' )
		//     |      (('ischildof' | 'ischildof_' )         '(' parentId = ID ')' )
		//     |          (('isdependencyof' | 'isdependencyof_' ) '('  task=[Task] ',' scenario=[Scenario] ',' distance=INT ')'  )
		//     |          (('isdutyof' | 'isdutyof_'  )          '(' resource=[Resource] ',' scenario=[Scenario] ')' )
		//     |          (('isfeatureof' | 'isfeatureof_' ) '(' task=[Task] ',' scenario=[Scenario] ')')
		//     |           (('isleaf' | 'isleaf_' )  '('  ')'  )
		//     |          (('ismilestone' | 'ismilestone_')'('scenario = [Scenario] ')')
		//    |          (('isongoing' | 'isongoing_')'('scenario = [Scenario] ')' )
		//    |          (('isresource' | 'isresource_' ) '('  ')')
		//    |          (('isresponsbilityof' | 'isresponsbilityof_' ) '(' resource=[Resource] ',' scenario=[Scenario] ')')
		//    |          (('istask' | 'istask_' ) '('  ')' )
		//    |          (('treelevel' | 'treelevel_' ) '('  ')')
		//     )
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//(
		//            (('hasalert' | 'hasalert_' )        '('level=INT (',' date = ISODATE)? ')' )
		//     |      (('isactive' | 'isactive_' )             '('scenario = [Scenario] ')' )
		//     |      (('ischildof' | 'ischildof_' )         '(' parentId = ID ')' )
		//     |          (('isdependencyof' | 'isdependencyof_' ) '('  task=[Task] ',' scenario=[Scenario] ',' distance=INT ')'  )
		//     |          (('isdutyof' | 'isdutyof_'  )          '(' resource=[Resource] ',' scenario=[Scenario] ')' )
		//     |          (('isfeatureof' | 'isfeatureof_' ) '(' task=[Task] ',' scenario=[Scenario] ')')
		//     |           (('isleaf' | 'isleaf_' )  '('  ')'  )
		//     |          (('ismilestone' | 'ismilestone_')'('scenario = [Scenario] ')')
		//    |          (('isongoing' | 'isongoing_')'('scenario = [Scenario] ')' )
		//    |          (('isresource' | 'isresource_' ) '('  ')')
		//    |          (('isresponsbilityof' | 'isresponsbilityof_' ) '(' resource=[Resource] ',' scenario=[Scenario] ')')
		//    |          (('istask' | 'istask_' ) '('  ')' )
		//    |          (('treelevel' | 'treelevel_' ) '('  ')')
		//     )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(('hasalert' | 'hasalert_' )		'('level=INT (',' date = ISODATE)? ')' )
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('hasalert' | 'hasalert_' )
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'hasalert'
		public Keyword getHasalertKeyword_1_0_0_0() { return cHasalertKeyword_1_0_0_0; }
		
		//'hasalert_'
		public Keyword getHasalert_Keyword_1_0_0_1() { return cHasalert_Keyword_1_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }
		
		//level=INT
		public Assignment getLevelAssignment_1_0_2() { return cLevelAssignment_1_0_2; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_1_0_2_0() { return cLevelINTTerminalRuleCall_1_0_2_0; }
		
		//(',' date = ISODATE)?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_1_0_3_0() { return cCommaKeyword_1_0_3_0; }
		
		//date = ISODATE
		public Assignment getDateAssignment_1_0_3_1() { return cDateAssignment_1_0_3_1; }
		
		//ISODATE
		public RuleCall getDateISODATEParserRuleCall_1_0_3_1_0() { return cDateISODATEParserRuleCall_1_0_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }
		
		//(('isactive' | 'isactive_' )		     '('scenario = [Scenario] ')' )
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//('isactive' | 'isactive_' )
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//'isactive'
		public Keyword getIsactiveKeyword_1_1_0_0() { return cIsactiveKeyword_1_1_0_0; }
		
		//'isactive_'
		public Keyword getIsactive_Keyword_1_1_0_1() { return cIsactive_Keyword_1_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }
		
		//scenario = [Scenario]
		public Assignment getScenarioAssignment_1_1_2() { return cScenarioAssignment_1_1_2; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_1_2_0() { return cScenarioScenarioCrossReference_1_1_2_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_1_2_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_1_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_3() { return cRightParenthesisKeyword_1_1_3; }
		
		//(('ischildof' | 'ischildof_' )	     '(' parentId = ID ')' )
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//('ischildof' | 'ischildof_' )
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//'ischildof'
		public Keyword getIschildofKeyword_1_2_0_0() { return cIschildofKeyword_1_2_0_0; }
		
		//'ischildof_'
		public Keyword getIschildof_Keyword_1_2_0_1() { return cIschildof_Keyword_1_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_1() { return cLeftParenthesisKeyword_1_2_1; }
		
		//parentId = ID
		public Assignment getParentIdAssignment_1_2_2() { return cParentIdAssignment_1_2_2; }
		
		//ID
		public RuleCall getParentIdIDTerminalRuleCall_1_2_2_0() { return cParentIdIDTerminalRuleCall_1_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_3() { return cRightParenthesisKeyword_1_2_3; }
		
		//(('isdependencyof' | 'isdependencyof_' ) '('  task=[Task] ',' scenario=[Scenario] ',' distance=INT ')'  )
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//('isdependencyof' | 'isdependencyof_' )
		public Alternatives getAlternatives_1_3_0() { return cAlternatives_1_3_0; }
		
		//'isdependencyof'
		public Keyword getIsdependencyofKeyword_1_3_0_0() { return cIsdependencyofKeyword_1_3_0_0; }
		
		//'isdependencyof_'
		public Keyword getIsdependencyof_Keyword_1_3_0_1() { return cIsdependencyof_Keyword_1_3_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_1() { return cLeftParenthesisKeyword_1_3_1; }
		
		//task=[Task]
		public Assignment getTaskAssignment_1_3_2() { return cTaskAssignment_1_3_2; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_1_3_2_0() { return cTaskTaskCrossReference_1_3_2_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_3_2_0_1() { return cTaskTaskIDTerminalRuleCall_1_3_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_3() { return cCommaKeyword_1_3_3; }
		
		//scenario=[Scenario]
		public Assignment getScenarioAssignment_1_3_4() { return cScenarioAssignment_1_3_4; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_3_4_0() { return cScenarioScenarioCrossReference_1_3_4_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_3_4_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_3_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_5() { return cCommaKeyword_1_3_5; }
		
		//distance=INT
		public Assignment getDistanceAssignment_1_3_6() { return cDistanceAssignment_1_3_6; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_1_3_6_0() { return cDistanceINTTerminalRuleCall_1_3_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_7() { return cRightParenthesisKeyword_1_3_7; }
		
		//(('isdutyof' | 'isdutyof_'  )		  '(' resource=[Resource] ',' scenario=[Scenario] ')' )
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//('isdutyof' | 'isdutyof_'  )
		public Alternatives getAlternatives_1_4_0() { return cAlternatives_1_4_0; }
		
		//'isdutyof'
		public Keyword getIsdutyofKeyword_1_4_0_0() { return cIsdutyofKeyword_1_4_0_0; }
		
		//'isdutyof_'
		public Keyword getIsdutyof_Keyword_1_4_0_1() { return cIsdutyof_Keyword_1_4_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_4_1() { return cLeftParenthesisKeyword_1_4_1; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1_4_2() { return cResourceAssignment_1_4_2; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_4_2_0() { return cResourceResourceCrossReference_1_4_2_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_4_2_0_1() { return cResourceResourceIDTerminalRuleCall_1_4_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_3() { return cCommaKeyword_1_4_3; }
		
		//scenario=[Scenario]
		public Assignment getScenarioAssignment_1_4_4() { return cScenarioAssignment_1_4_4; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_4_4_0() { return cScenarioScenarioCrossReference_1_4_4_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_4_4_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_4_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4_5() { return cRightParenthesisKeyword_1_4_5; }
		
		//(('isfeatureof' | 'isfeatureof_' ) '(' task=[Task] ',' scenario=[Scenario] ')')
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//('isfeatureof' | 'isfeatureof_' )
		public Alternatives getAlternatives_1_5_0() { return cAlternatives_1_5_0; }
		
		//'isfeatureof'
		public Keyword getIsfeatureofKeyword_1_5_0_0() { return cIsfeatureofKeyword_1_5_0_0; }
		
		//'isfeatureof_'
		public Keyword getIsfeatureof_Keyword_1_5_0_1() { return cIsfeatureof_Keyword_1_5_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_5_1() { return cLeftParenthesisKeyword_1_5_1; }
		
		//task=[Task]
		public Assignment getTaskAssignment_1_5_2() { return cTaskAssignment_1_5_2; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_1_5_2_0() { return cTaskTaskCrossReference_1_5_2_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_5_2_0_1() { return cTaskTaskIDTerminalRuleCall_1_5_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_5_3() { return cCommaKeyword_1_5_3; }
		
		//scenario=[Scenario]
		public Assignment getScenarioAssignment_1_5_4() { return cScenarioAssignment_1_5_4; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_5_4_0() { return cScenarioScenarioCrossReference_1_5_4_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_5_4_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_5_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5_5() { return cRightParenthesisKeyword_1_5_5; }
		
		//(('isleaf' | 'isleaf_' )  '('  ')'  )
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//('isleaf' | 'isleaf_' )
		public Alternatives getAlternatives_1_6_0() { return cAlternatives_1_6_0; }
		
		//'isleaf'
		public Keyword getIsleafKeyword_1_6_0_0() { return cIsleafKeyword_1_6_0_0; }
		
		//'isleaf_'
		public Keyword getIsleaf_Keyword_1_6_0_1() { return cIsleaf_Keyword_1_6_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_6_1() { return cLeftParenthesisKeyword_1_6_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6_2() { return cRightParenthesisKeyword_1_6_2; }
		
		//(('ismilestone' | 'ismilestone_')'('scenario = [Scenario] ')')
		public Group getGroup_1_7() { return cGroup_1_7; }
		
		//('ismilestone' | 'ismilestone_')
		public Alternatives getAlternatives_1_7_0() { return cAlternatives_1_7_0; }
		
		//'ismilestone'
		public Keyword getIsmilestoneKeyword_1_7_0_0() { return cIsmilestoneKeyword_1_7_0_0; }
		
		//'ismilestone_'
		public Keyword getIsmilestone_Keyword_1_7_0_1() { return cIsmilestone_Keyword_1_7_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_7_1() { return cLeftParenthesisKeyword_1_7_1; }
		
		//scenario = [Scenario]
		public Assignment getScenarioAssignment_1_7_2() { return cScenarioAssignment_1_7_2; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_7_2_0() { return cScenarioScenarioCrossReference_1_7_2_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_7_2_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_7_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7_3() { return cRightParenthesisKeyword_1_7_3; }
		
		//(('isongoing' | 'isongoing_')'('scenario = [Scenario] ')' )
		public Group getGroup_1_8() { return cGroup_1_8; }
		
		//('isongoing' | 'isongoing_')
		public Alternatives getAlternatives_1_8_0() { return cAlternatives_1_8_0; }
		
		//'isongoing'
		public Keyword getIsongoingKeyword_1_8_0_0() { return cIsongoingKeyword_1_8_0_0; }
		
		//'isongoing_'
		public Keyword getIsongoing_Keyword_1_8_0_1() { return cIsongoing_Keyword_1_8_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_8_1() { return cLeftParenthesisKeyword_1_8_1; }
		
		//scenario = [Scenario]
		public Assignment getScenarioAssignment_1_8_2() { return cScenarioAssignment_1_8_2; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_8_2_0() { return cScenarioScenarioCrossReference_1_8_2_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_8_2_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_8_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_8_3() { return cRightParenthesisKeyword_1_8_3; }
		
		//(('isresource' | 'isresource_' ) '('  ')')
		public Group getGroup_1_9() { return cGroup_1_9; }
		
		//('isresource' | 'isresource_' )
		public Alternatives getAlternatives_1_9_0() { return cAlternatives_1_9_0; }
		
		//'isresource'
		public Keyword getIsresourceKeyword_1_9_0_0() { return cIsresourceKeyword_1_9_0_0; }
		
		//'isresource_'
		public Keyword getIsresource_Keyword_1_9_0_1() { return cIsresource_Keyword_1_9_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_9_1() { return cLeftParenthesisKeyword_1_9_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_9_2() { return cRightParenthesisKeyword_1_9_2; }
		
		//(('isresponsbilityof' | 'isresponsbilityof_' ) '(' resource=[Resource] ',' scenario=[Scenario] ')')
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//('isresponsbilityof' | 'isresponsbilityof_' )
		public Alternatives getAlternatives_1_10_0() { return cAlternatives_1_10_0; }
		
		//'isresponsbilityof'
		public Keyword getIsresponsbilityofKeyword_1_10_0_0() { return cIsresponsbilityofKeyword_1_10_0_0; }
		
		//'isresponsbilityof_'
		public Keyword getIsresponsbilityof_Keyword_1_10_0_1() { return cIsresponsbilityof_Keyword_1_10_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_10_1() { return cLeftParenthesisKeyword_1_10_1; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1_10_2() { return cResourceAssignment_1_10_2; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_10_2_0() { return cResourceResourceCrossReference_1_10_2_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_10_2_0_1() { return cResourceResourceIDTerminalRuleCall_1_10_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_10_3() { return cCommaKeyword_1_10_3; }
		
		//scenario=[Scenario]
		public Assignment getScenarioAssignment_1_10_4() { return cScenarioAssignment_1_10_4; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_10_4_0() { return cScenarioScenarioCrossReference_1_10_4_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_10_4_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_10_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_10_5() { return cRightParenthesisKeyword_1_10_5; }
		
		//(('istask' | 'istask_' ) '('  ')' )
		public Group getGroup_1_11() { return cGroup_1_11; }
		
		//('istask' | 'istask_' )
		public Alternatives getAlternatives_1_11_0() { return cAlternatives_1_11_0; }
		
		//'istask'
		public Keyword getIstaskKeyword_1_11_0_0() { return cIstaskKeyword_1_11_0_0; }
		
		//'istask_'
		public Keyword getIstask_Keyword_1_11_0_1() { return cIstask_Keyword_1_11_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_11_1() { return cLeftParenthesisKeyword_1_11_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_11_2() { return cRightParenthesisKeyword_1_11_2; }
		
		//(('treelevel' | 'treelevel_' ) '('  ')')
		public Group getGroup_1_12() { return cGroup_1_12; }
		
		//('treelevel' | 'treelevel_' )
		public Alternatives getAlternatives_1_12_0() { return cAlternatives_1_12_0; }
		
		//'treelevel'
		public Keyword getTreelevelKeyword_1_12_0_0() { return cTreelevelKeyword_1_12_0_0; }
		
		//'treelevel_'
		public Keyword getTreelevel_Keyword_1_12_0_1() { return cTreelevel_Keyword_1_12_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_12_1() { return cLeftParenthesisKeyword_1_12_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_12_2() { return cRightParenthesisKeyword_1_12_2; }
	}
	public class GapDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.GapDuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGapdurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDurationQuantityParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/gapduration.html
		//GapDuration: 'gapduration' DurationQuantity;
		@Override public ParserRule getRule() { return rule; }
		
		//'gapduration' DurationQuantity
		public Group getGroup() { return cGroup; }
		
		//'gapduration'
		public Keyword getGapdurationKeyword_0() { return cGapdurationKeyword_0; }
		
		//DurationQuantity
		public RuleCall getDurationQuantityParserRuleCall_1() { return cDurationQuantityParserRuleCall_1; }
	}
	public class GapLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.GapLength");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGaplengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDurationQuantityParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/gaplength.html
		//GapLength: 'gaplength' DurationQuantity;
		@Override public ParserRule getRule() { return rule; }
		
		//'gaplength' DurationQuantity
		public Group getGroup() { return cGroup; }
		
		//'gaplength'
		public Keyword getGaplengthKeyword_0() { return cGaplengthKeyword_0; }
		
		//DurationQuantity
		public RuleCall getDurationQuantityParserRuleCall_1() { return cDurationQuantityParserRuleCall_1; }
	}
	public class HAlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HAlign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cJustificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJustificationJustificationEnumRuleCall_1_0 = (RuleCall)cJustificationAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/halign.column.html
		//// http://www.taskjuggler.org/tj3/manual/halign.center.html
		//// http://www.taskjuggler.org/tj3/manual/halign.left.html
		//// http://www.taskjuggler.org/tj3/manual/halign.right.html
		//HAlign: expression=LogicalExpression justification=Justification;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=LogicalExpression justification=Justification
		public Group getGroup() { return cGroup; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_0_0() { return cExpressionLogicalExpressionParserRuleCall_0_0; }
		
		//justification=Justification
		public Assignment getJustificationAssignment_1() { return cJustificationAssignment_1; }
		
		//Justification
		public RuleCall getJustificationJustificationEnumRuleCall_1_0() { return cJustificationJustificationEnumRuleCall_1_0; }
	}
	public class HasAlertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HasAlert");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/hasalert.html
		//// TODO - has alert
		//HasAlert: STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Header");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeaderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/header.html
		//Header: 'header' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'header' RichText
		public Group getGroup() { return cGroup; }
		
		//'header'
		public Keyword getHeaderKeyword_0() { return cHeaderKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class HeadlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Headline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadlineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/headline.html
		//Headline: 'headline' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'headline' RichText
		public Group getGroup() { return cGroup; }
		
		//'headline'
		public Keyword getHeadlineKeyword_0() { return cHeadlineKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class HideAccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HideAccount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHideaccountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalFlagExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/hidejournalentry.html
		//HideAccount: 'hideaccount' expression =  LogicalFlagExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'hideaccount' expression =  LogicalFlagExpression
		public Group getGroup() { return cGroup; }
		
		//'hideaccount'
		public Keyword getHideaccountKeyword_0() { return cHideaccountKeyword_0; }
		
		//expression =  LogicalFlagExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalFlagExpression
		public RuleCall getExpressionLogicalFlagExpressionParserRuleCall_1_0() { return cExpressionLogicalFlagExpressionParserRuleCall_1_0; }
	}
	public class HideJournalEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HideJournalEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHidejournalentryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionLogicalFlagExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/hidejournalentry.html
		//HideJournalEntry: 'hidejournalentry' '~'? expression = LogicalFlagExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'hidejournalentry' '~'? expression = LogicalFlagExpression
		public Group getGroup() { return cGroup; }
		
		//'hidejournalentry'
		public Keyword getHidejournalentryKeyword_0() { return cHidejournalentryKeyword_0; }
		
		//'~'?
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//expression = LogicalFlagExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//LogicalFlagExpression
		public RuleCall getExpressionLogicalFlagExpressionParserRuleCall_2_0() { return cExpressionLogicalFlagExpressionParserRuleCall_2_0; }
	}
	public class HideReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HideReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHidereportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCommercialAtKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Keyword cAllKeyword_2_1_1_0 = (Keyword)cAlternatives_2_1_1.eContents().get(0);
		private final Keyword cNoneKeyword_2_1_1_1 = (Keyword)cAlternatives_2_1_1.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/hidereport.html
		//HideReport: 'hidereport' '~'? (expression = LogicalExpression | '@' ('all' | 'none') );
		@Override public ParserRule getRule() { return rule; }
		
		//'hidereport' '~'? (expression = LogicalExpression | '@' ('all' | 'none') )
		public Group getGroup() { return cGroup; }
		
		//'hidereport'
		public Keyword getHidereportKeyword_0() { return cHidereportKeyword_0; }
		
		//'~'?
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//(expression = LogicalExpression | '@' ('all' | 'none') )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//expression = LogicalExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_2_0_0() { return cExpressionLogicalExpressionParserRuleCall_2_0_0; }
		
		//'@' ('all' | 'none')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2_1_0() { return cCommercialAtKeyword_2_1_0; }
		
		//('all' | 'none')
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//'all'
		public Keyword getAllKeyword_2_1_1_0() { return cAllKeyword_2_1_1_0; }
		
		//'none'
		public Keyword getNoneKeyword_2_1_1_1() { return cNoneKeyword_2_1_1_1; }
	}
	public class HideResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HideResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHideresourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCommercialAtKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Keyword cAllKeyword_2_1_1_0 = (Keyword)cAlternatives_2_1_1.eContents().get(0);
		private final Keyword cNoneKeyword_2_1_1_1 = (Keyword)cAlternatives_2_1_1.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/hideresource.html
		//HideResource: 'hideresource' '~'? (expression = LogicalExpression | '@' ('all' | 'none') );
		@Override public ParserRule getRule() { return rule; }
		
		//'hideresource' '~'? (expression = LogicalExpression | '@' ('all' | 'none') )
		public Group getGroup() { return cGroup; }
		
		//'hideresource'
		public Keyword getHideresourceKeyword_0() { return cHideresourceKeyword_0; }
		
		//'~'?
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//(expression = LogicalExpression | '@' ('all' | 'none') )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//expression = LogicalExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_2_0_0() { return cExpressionLogicalExpressionParserRuleCall_2_0_0; }
		
		//'@' ('all' | 'none')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2_1_0() { return cCommercialAtKeyword_2_1_0; }
		
		//('all' | 'none')
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//'all'
		public Keyword getAllKeyword_2_1_1_0() { return cAllKeyword_2_1_1_0; }
		
		//'none'
		public Keyword getNoneKeyword_2_1_1_1() { return cNoneKeyword_2_1_1_1; }
	}
	public class HideTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.HideTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHidetaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCommercialAtKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1_1 = (Alternatives)cGroup_2_1.eContents().get(1);
		private final Keyword cAllKeyword_2_1_1_0 = (Keyword)cAlternatives_2_1_1.eContents().get(0);
		private final Keyword cNoneKeyword_2_1_1_1 = (Keyword)cAlternatives_2_1_1.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/hidetask.html
		//HideTask: 'hidetask' '~'? (expression = LogicalExpression | '@' ('all' | 'none') );
		@Override public ParserRule getRule() { return rule; }
		
		//'hidetask' '~'? (expression = LogicalExpression | '@' ('all' | 'none') )
		public Group getGroup() { return cGroup; }
		
		//'hidetask'
		public Keyword getHidetaskKeyword_0() { return cHidetaskKeyword_0; }
		
		//'~'?
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }
		
		//(expression = LogicalExpression | '@' ('all' | 'none') )
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//expression = LogicalExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_2_0_0() { return cExpressionLogicalExpressionParserRuleCall_2_0_0; }
		
		//'@' ('all' | 'none')
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_2_1_0() { return cCommercialAtKeyword_2_1_0; }
		
		//('all' | 'none')
		public Alternatives getAlternatives_2_1_1() { return cAlternatives_2_1_1; }
		
		//'all'
		public Keyword getAllKeyword_2_1_1_0() { return cAllKeyword_2_1_1_0; }
		
		//'none'
		public Keyword getNoneKeyword_2_1_1_1() { return cNoneKeyword_2_1_1_1; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/include.macro.html
		//// http://www.taskjuggler.org/tj3/manual/include.project.html
		//// http://www.taskjuggler.org/tj3/manual/include.properties.html
		//Include: 'include' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class IncludePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.IncludeProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesIncludePropertiesAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//IncludeProperties:  'include' importURI=STRING	('{' attributes+=IncludePropertiesAttribute* '}')? ;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' importURI=STRING	('{' attributes+=IncludePropertiesAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
		
		//('{' attributes+=IncludePropertiesAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes+=IncludePropertiesAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//IncludePropertiesAttribute
		public RuleCall getAttributesIncludePropertiesAttributeParserRuleCall_2_1_0() { return cAttributesIncludePropertiesAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class IncludePropertiesAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.IncludePropertiesAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAccountPrefixParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReportPrefixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cResourcePrefixParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTaskPrefixParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//IncludePropertiesAttribute:
		//    AccountPrefix
		//    | ReportPrefix
		//    | ResourcePrefix
		//    | TaskPrefix;
		@Override public ParserRule getRule() { return rule; }
		
		//AccountPrefix
		//| ReportPrefix
		//| ResourcePrefix
		//| TaskPrefix
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AccountPrefix
		public RuleCall getAccountPrefixParserRuleCall_0() { return cAccountPrefixParserRuleCall_0; }
		
		//ReportPrefix
		public RuleCall getReportPrefixParserRuleCall_1() { return cReportPrefixParserRuleCall_1; }
		
		//ResourcePrefix
		public RuleCall getResourcePrefixParserRuleCall_2() { return cResourcePrefixParserRuleCall_2; }
		
		//TaskPrefix
		public RuleCall getTaskPrefixParserRuleCall_3() { return cTaskPrefixParserRuleCall_3; }
	}
	public class Interval1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Interval1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATEParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATEParserRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/inherit.extend.html
		//// do not implement.
		//// http://www.taskjuggler.org/tj3/manual/interval1.html
		//Interval1: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity));
		@Override public ParserRule getRule() { return rule; }
		
		//start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))
		public Group getGroup() { return cGroup; }
		
		//start = ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//ISODATE
		public RuleCall getStartISODATEParserRuleCall_0_0() { return cStartISODATEParserRuleCall_0_0; }
		
		//(('-' end = ISODATE) | ('+' duration = DurationQuantity))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('-' end = ISODATE)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }
		
		//end = ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }
		
		//ISODATE
		public RuleCall getEndISODATEParserRuleCall_1_0_1_0() { return cEndISODATEParserRuleCall_1_0_1_0; }
		
		//('+' duration = DurationQuantity)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//duration = DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}
	public class Interval2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Interval2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATEParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATEParserRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/interval2.html
		//Interval2: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity));
		@Override public ParserRule getRule() { return rule; }
		
		//start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))
		public Group getGroup() { return cGroup; }
		
		//start = ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//ISODATE
		public RuleCall getStartISODATEParserRuleCall_0_0() { return cStartISODATEParserRuleCall_0_0; }
		
		//(('-' end = ISODATE) | ('+' duration = DurationQuantity))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('-' end = ISODATE)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }
		
		//end = ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }
		
		//ISODATE
		public RuleCall getEndISODATEParserRuleCall_1_0_1_0() { return cEndISODATEParserRuleCall_1_0_1_0; }
		
		//('+' duration = DurationQuantity)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//duration = DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}
	public class Interval3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Interval3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATEParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATEParserRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/interval3.html
		//Interval3: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))?;
		@Override public ParserRule getRule() { return rule; }
		
		//start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))?
		public Group getGroup() { return cGroup; }
		
		//start = ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//ISODATE
		public RuleCall getStartISODATEParserRuleCall_0_0() { return cStartISODATEParserRuleCall_0_0; }
		
		//(('-' end = ISODATE) | ('+' duration = DurationQuantity))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('-' end = ISODATE)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }
		
		//end = ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }
		
		//ISODATE
		public RuleCall getEndISODATEParserRuleCall_1_0_1_0() { return cEndISODATEParserRuleCall_1_0_1_0; }
		
		//('+' duration = DurationQuantity)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//duration = DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}
	public class Interval4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Interval4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartISODATEParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEndISODATEParserRuleCall_1_0_1_0 = (RuleCall)cEndAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDurationAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_1_1_0 = (RuleCall)cDurationAssignment_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/interval4.html
		//Interval4: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))?;
		@Override public ParserRule getRule() { return rule; }
		
		//start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))?
		public Group getGroup() { return cGroup; }
		
		//start = ISODATE
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//ISODATE
		public RuleCall getStartISODATEParserRuleCall_0_0() { return cStartISODATEParserRuleCall_0_0; }
		
		//(('-' end = ISODATE) | ('+' duration = DurationQuantity))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('-' end = ISODATE)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_0() { return cHyphenMinusKeyword_1_0_0; }
		
		//end = ISODATE
		public Assignment getEndAssignment_1_0_1() { return cEndAssignment_1_0_1; }
		
		//ISODATE
		public RuleCall getEndISODATEParserRuleCall_1_0_1_0() { return cEndISODATEParserRuleCall_1_0_1_0; }
		
		//('+' duration = DurationQuantity)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//duration = DurationQuantity
		public Assignment getDurationAssignment_1_1_1() { return cDurationAssignment_1_1_1; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_1_1_0() { return cDurationDurationQuantityParserRuleCall_1_1_1_0; }
	}
	public class JournalAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.JournalAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJournalattributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsJournalAttributeValuesEnumRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgsJournalAttributeValuesEnumRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/journalattributes.html
		//JournalAttributes: 'journalattributes' args += JournalAttributeValues (',' args += JournalAttributeValues)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'journalattributes' args += JournalAttributeValues (',' args += JournalAttributeValues)*
		public Group getGroup() { return cGroup; }
		
		//'journalattributes'
		public Keyword getJournalattributesKeyword_0() { return cJournalattributesKeyword_0; }
		
		//args += JournalAttributeValues
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//JournalAttributeValues
		public RuleCall getArgsJournalAttributeValuesEnumRuleCall_1_0() { return cArgsJournalAttributeValuesEnumRuleCall_1_0; }
		
		//(',' args += JournalAttributeValues)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//args += JournalAttributeValues
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }
		
		//JournalAttributeValues
		public RuleCall getArgsJournalAttributeValuesEnumRuleCall_2_1_0() { return cArgsJournalAttributeValuesEnumRuleCall_2_1_0; }
	}
	public class JournalEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.JournalEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJournalentryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateISODATEParserRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Assignment cHeadlineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeadlineSTRINGTerminalRuleCall_2_0 = (RuleCall)cHeadlineAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Assignment cAlertAssignment_3_1_0 = (Assignment)cUnorderedGroup_3_1.eContents().get(0);
		private final RuleCall cAlertAlertParserRuleCall_3_1_0_0 = (RuleCall)cAlertAssignment_3_1_0.eContents().get(0);
		private final Assignment cAuthorAssignment_3_1_1 = (Assignment)cUnorderedGroup_3_1.eContents().get(1);
		private final RuleCall cAuthorAuthorParserRuleCall_3_1_1_0 = (RuleCall)cAuthorAssignment_3_1_1.eContents().get(0);
		private final Assignment cDetailsAssignment_3_1_2 = (Assignment)cUnorderedGroup_3_1.eContents().get(2);
		private final RuleCall cDetailsDetailsParserRuleCall_3_1_2_0 = (RuleCall)cDetailsAssignment_3_1_2.eContents().get(0);
		private final Assignment cSummaryAssignment_3_1_3 = (Assignment)cUnorderedGroup_3_1.eContents().get(3);
		private final RuleCall cSummarySummaryParserRuleCall_3_1_3_0 = (RuleCall)cSummaryAssignment_3_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/journalentry.html
		//JournalEntry:
		//    'journalentry' date=ISODATE headline=STRING
		//     ('{'
		//        (
		//            alert = Alert?
		//            & author = Author?
		//            & details = Details?
		//            & summary = Summary?
		//        )
		//    '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'journalentry' date=ISODATE headline=STRING
		// ('{'
		//    (
		//        alert = Alert?
		//        & author = Author?
		//        & details = Details?
		//        & summary = Summary?
		//    )
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'journalentry'
		public Keyword getJournalentryKeyword_0() { return cJournalentryKeyword_0; }
		
		//date=ISODATE
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//ISODATE
		public RuleCall getDateISODATEParserRuleCall_1_0() { return cDateISODATEParserRuleCall_1_0; }
		
		//headline=STRING
		public Assignment getHeadlineAssignment_2() { return cHeadlineAssignment_2; }
		
		//STRING
		public RuleCall getHeadlineSTRINGTerminalRuleCall_2_0() { return cHeadlineSTRINGTerminalRuleCall_2_0; }
		
		// ('{'
		//    (
		//        alert = Alert?
		//        & author = Author?
		//        & details = Details?
		//        & summary = Summary?
		//    )
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(
		//    alert = Alert?
		//    & author = Author?
		//    & details = Details?
		//    & summary = Summary?
		//)
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }
		
		//alert = Alert?
		public Assignment getAlertAssignment_3_1_0() { return cAlertAssignment_3_1_0; }
		
		//Alert
		public RuleCall getAlertAlertParserRuleCall_3_1_0_0() { return cAlertAlertParserRuleCall_3_1_0_0; }
		
		//author = Author?
		public Assignment getAuthorAssignment_3_1_1() { return cAuthorAssignment_3_1_1; }
		
		//Author
		public RuleCall getAuthorAuthorParserRuleCall_3_1_1_0() { return cAuthorAuthorParserRuleCall_3_1_1_0; }
		
		//details = Details?
		public Assignment getDetailsAssignment_3_1_2() { return cDetailsAssignment_3_1_2; }
		
		//Details
		public RuleCall getDetailsDetailsParserRuleCall_3_1_2_0() { return cDetailsDetailsParserRuleCall_3_1_2_0; }
		
		//summary = Summary?
		public Assignment getSummaryAssignment_3_1_3() { return cSummaryAssignment_3_1_3; }
		
		//Summary
		public RuleCall getSummarySummaryParserRuleCall_3_1_3_0() { return cSummarySummaryParserRuleCall_3_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class JournalModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.JournalMode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJournalmodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModeJournalModeValueEnumRuleCall_1_0 = (RuleCall)cModeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/journalmode.html
		//JournalMode: 'journalmode'  mode=JournalModeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'journalmode'  mode=JournalModeValue
		public Group getGroup() { return cGroup; }
		
		//'journalmode'
		public Keyword getJournalmodeKeyword_0() { return cJournalmodeKeyword_0; }
		
		//mode=JournalModeValue
		public Assignment getModeAssignment_1() { return cModeAssignment_1; }
		
		//JournalModeValue
		public RuleCall getModeJournalModeValueEnumRuleCall_1_0() { return cModeJournalModeValueEnumRuleCall_1_0; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/left.html
		//Left: 'left' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'left' RichText
		public Group getGroup() { return cGroup; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class LengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Length");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthDurationQuantityParserRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/length.html
		//Length: 'length' length=DurationQuantity;
		@Override public ParserRule getRule() { return rule; }
		
		//'length' length=DurationQuantity
		public Group getGroup() { return cGroup; }
		
		//'length'
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//length=DurationQuantity
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }
		
		//DurationQuantity
		public RuleCall getLengthDurationQuantityParserRuleCall_1_0() { return cLengthDurationQuantityParserRuleCall_1_0; }
	}
	public class LimitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Limits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLimitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLimitsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesLimitsAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/limits.task.html
		//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
		//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
		//// http://www.taskjuggler.org/tj3/manual/limits.html
		//Limits: 'limits' {Limits} ( '{' attributes += LimitsAttribute* '}' )? ;
		@Override public ParserRule getRule() { return rule; }
		
		//'limits' {Limits} ( '{' attributes += LimitsAttribute* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'limits'
		public Keyword getLimitsKeyword_0() { return cLimitsKeyword_0; }
		
		//{Limits}
		public Action getLimitsAction_1() { return cLimitsAction_1; }
		
		//( '{' attributes += LimitsAttribute* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes += LimitsAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//LimitsAttribute
		public RuleCall getAttributesLimitsAttributeParserRuleCall_2_1_0() { return cAttributesLimitsAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class LimitsAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LimitsAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDailyMaxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDailyMinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMaximumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinimumParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMonthlyMaxParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMonthlyMinParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWeeklyMaxParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cWeeklyMinParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//LimitsAttribute:
		//    DailyMax |
		//    DailyMin |
		//    Maximum |
		//    Minimum |
		//    MonthlyMax |
		//    MonthlyMin |
		//    WeeklyMax |
		//    WeeklyMin
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//DailyMax |
		//DailyMin |
		//Maximum |
		//Minimum |
		//MonthlyMax |
		//MonthlyMin |
		//WeeklyMax |
		//WeeklyMin
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DailyMax
		public RuleCall getDailyMaxParserRuleCall_0() { return cDailyMaxParserRuleCall_0; }
		
		//DailyMin
		public RuleCall getDailyMinParserRuleCall_1() { return cDailyMinParserRuleCall_1; }
		
		//Maximum
		public RuleCall getMaximumParserRuleCall_2() { return cMaximumParserRuleCall_2; }
		
		//Minimum
		public RuleCall getMinimumParserRuleCall_3() { return cMinimumParserRuleCall_3; }
		
		//MonthlyMax
		public RuleCall getMonthlyMaxParserRuleCall_4() { return cMonthlyMaxParserRuleCall_4; }
		
		//MonthlyMin
		public RuleCall getMonthlyMinParserRuleCall_5() { return cMonthlyMinParserRuleCall_5; }
		
		//WeeklyMax
		public RuleCall getWeeklyMaxParserRuleCall_6() { return cWeeklyMaxParserRuleCall_6; }
		
		//WeeklyMin
		public RuleCall getWeeklyMinParserRuleCall_7() { return cWeeklyMinParserRuleCall_7; }
	}
	public class ListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListitemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/listitem.column.html
		//ListItem: 'listitem' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'listitem' RichText
		public Group getGroup() { return cGroup; }
		
		//'listitem'
		public Keyword getListitemKeyword_0() { return cListitemKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeListTypeValuesEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
		//ListType: 'listtype' type=ListTypeValues;
		@Override public ParserRule getRule() { return rule; }
		
		//'listtype' type=ListTypeValues
		public Group getGroup() { return cGroup; }
		
		//'listtype'
		public Keyword getListtypeKeyword_0() { return cListtypeKeyword_0; }
		
		//type=ListTypeValues
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ListTypeValues
		public RuleCall getTypeListTypeValuesEnumRuleCall_1_0() { return cTypeListTypeValuesEnumRuleCall_1_0; }
	}
	public class LoadUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LoadUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoadunitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitLoadDisplayUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/loadunit.html
		//LoadUnit: 'loadunit' unit=LoadDisplayUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//'loadunit' unit=LoadDisplayUnit
		public Group getGroup() { return cGroup; }
		
		//'loadunit'
		public Keyword getLoadunitKeyword_0() { return cLoadunitKeyword_0; }
		
		//unit=LoadDisplayUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//LoadDisplayUnit
		public RuleCall getUnitLoadDisplayUnitEnumRuleCall_1_0() { return cUnitLoadDisplayUnitEnumRuleCall_1_0; }
	}
	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalExpression");
		private final RuleCall cLogicalOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/logicalexpression.html
		//// this implementation is borrowed from XBase XExpression
		//LogicalExpression returns LogicalExpression: LogicalOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall() { return cLogicalOrExpressionParserRuleCall; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperantLogicalAndExpressionParserRuleCall_0_0 = (RuleCall)cLeftOperantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpLEOpOrParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLogicalAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LogicalOrExpression returns LogicalExpression:
		//        leftOperant = LogicalAndExpression (op=LEOpOr rightOperand=LogicalAndExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//leftOperant = LogicalAndExpression (op=LEOpOr rightOperand=LogicalAndExpression)?
		public Group getGroup() { return cGroup; }
		
		//leftOperant = LogicalAndExpression
		public Assignment getLeftOperantAssignment_0() { return cLeftOperantAssignment_0; }
		
		//LogicalAndExpression
		public RuleCall getLeftOperantLogicalAndExpressionParserRuleCall_0_0() { return cLeftOperantLogicalAndExpressionParserRuleCall_0_0; }
		
		//(op=LEOpOr rightOperand=LogicalAndExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=LEOpOr
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//LEOpOr
		public RuleCall getOpLEOpOrParserRuleCall_1_0_0() { return cOpLEOpOrParserRuleCall_1_0_0; }
		
		//rightOperand=LogicalAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LogicalAndExpression
		public RuleCall getRightOperandLogicalAndExpressionParserRuleCall_1_1_0() { return cRightOperandLogicalAndExpressionParserRuleCall_1_1_0; }
	}
	public class LEOpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LEOpOr");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//LEOpOr: '|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperantLogicalEqualityExpressionParserRuleCall_0_0 = (RuleCall)cLeftOperantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpLEOpAndParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLogicalEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LogicalAndExpression returns LogicalExpression:
		//    leftOperant = LogicalEqualityExpression (op=LEOpAnd rightOperand=LogicalEqualityExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//leftOperant = LogicalEqualityExpression (op=LEOpAnd rightOperand=LogicalEqualityExpression)?
		public Group getGroup() { return cGroup; }
		
		//leftOperant = LogicalEqualityExpression
		public Assignment getLeftOperantAssignment_0() { return cLeftOperantAssignment_0; }
		
		//LogicalEqualityExpression
		public RuleCall getLeftOperantLogicalEqualityExpressionParserRuleCall_0_0() { return cLeftOperantLogicalEqualityExpressionParserRuleCall_0_0; }
		
		//(op=LEOpAnd rightOperand=LogicalEqualityExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=LEOpAnd
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//LEOpAnd
		public RuleCall getOpLEOpAndParserRuleCall_1_0_0() { return cOpLEOpAndParserRuleCall_1_0_0; }
		
		//rightOperand=LogicalEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LogicalEqualityExpression
		public RuleCall getRightOperandLogicalEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandLogicalEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class LEOpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LEOpAnd");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//LEOpAnd: '&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class LogicalEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperantLogicalRelationalExpressionParserRuleCall_0_0 = (RuleCall)cLeftOperantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpLEOpEqualityParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLogicalRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LogicalEqualityExpression returns LogicalExpression:
		//    leftOperant = LogicalRelationalExpression (op=LEOpEquality rightOperand=LogicalRelationalExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//leftOperant = LogicalRelationalExpression (op=LEOpEquality rightOperand=LogicalRelationalExpression)?
		public Group getGroup() { return cGroup; }
		
		//leftOperant = LogicalRelationalExpression
		public Assignment getLeftOperantAssignment_0() { return cLeftOperantAssignment_0; }
		
		//LogicalRelationalExpression
		public RuleCall getLeftOperantLogicalRelationalExpressionParserRuleCall_0_0() { return cLeftOperantLogicalRelationalExpressionParserRuleCall_0_0; }
		
		//(op=LEOpEquality rightOperand=LogicalRelationalExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=LEOpEquality
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//LEOpEquality
		public RuleCall getOpLEOpEqualityParserRuleCall_1_0_0() { return cOpLEOpEqualityParserRuleCall_1_0_0; }
		
		//rightOperand=LogicalRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LogicalRelationalExpression
		public RuleCall getRightOperandLogicalRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandLogicalRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class LEOpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LEOpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LEOpEquality:	'=' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class LogicalRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperantLogicalPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cLeftOperantAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOpCompareParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLogicalPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LogicalRelationalExpression returns LogicalExpression:
		//    leftOperant = LogicalPrimaryExpression (op=OpCompare rightOperand=LogicalPrimaryExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//leftOperant = LogicalPrimaryExpression (op=OpCompare rightOperand=LogicalPrimaryExpression)?
		public Group getGroup() { return cGroup; }
		
		//leftOperant = LogicalPrimaryExpression
		public Assignment getLeftOperantAssignment_0() { return cLeftOperantAssignment_0; }
		
		//LogicalPrimaryExpression
		public RuleCall getLeftOperantLogicalPrimaryExpressionParserRuleCall_0_0() { return cLeftOperantLogicalPrimaryExpressionParserRuleCall_0_0; }
		
		//(op=OpCompare rightOperand=LogicalPrimaryExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//op=OpCompare
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//OpCompare
		public RuleCall getOpOpCompareParserRuleCall_1_0_0() { return cOpOpCompareParserRuleCall_1_0_0; }
		
		//rightOperand=LogicalPrimaryExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LogicalPrimaryExpression
		public RuleCall getRightOperandLogicalPrimaryExpressionParserRuleCall_1_1_0() { return cRightOperandLogicalPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//    '>=' | '<=' | '>' | '<' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'>=' | '<=' | '>' | '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}
	public class LogicalPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalNumeralLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicalISODateLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLogicalPrenthesizedExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLogicalAbsoluteIdExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLogicalFunctionExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cLogicalFlagLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//LogicalPrimaryExpression returns LogicalExpression:
		//    LogicalBooleanLiteral  |
		//    LogicalNumeralLiteral |
		//    LogicalStringLiteral |
		//    LogicalISODateLiteral |
		//    LogicalPrenthesizedExpression |
		//    LogicalAbsoluteIdExpression |
		//    LogicalFunctionExpression |
		//    LogicalFlagLiteral
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalBooleanLiteral  |
		//LogicalNumeralLiteral |
		//LogicalStringLiteral |
		//LogicalISODateLiteral |
		//LogicalPrenthesizedExpression |
		//LogicalAbsoluteIdExpression |
		//LogicalFunctionExpression |
		//LogicalFlagLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LogicalBooleanLiteral
		public RuleCall getLogicalBooleanLiteralParserRuleCall_0() { return cLogicalBooleanLiteralParserRuleCall_0; }
		
		//LogicalNumeralLiteral
		public RuleCall getLogicalNumeralLiteralParserRuleCall_1() { return cLogicalNumeralLiteralParserRuleCall_1; }
		
		//LogicalStringLiteral
		public RuleCall getLogicalStringLiteralParserRuleCall_2() { return cLogicalStringLiteralParserRuleCall_2; }
		
		//LogicalISODateLiteral
		public RuleCall getLogicalISODateLiteralParserRuleCall_3() { return cLogicalISODateLiteralParserRuleCall_3; }
		
		//LogicalPrenthesizedExpression
		public RuleCall getLogicalPrenthesizedExpressionParserRuleCall_4() { return cLogicalPrenthesizedExpressionParserRuleCall_4; }
		
		//LogicalAbsoluteIdExpression
		public RuleCall getLogicalAbsoluteIdExpressionParserRuleCall_5() { return cLogicalAbsoluteIdExpressionParserRuleCall_5; }
		
		//LogicalFunctionExpression
		public RuleCall getLogicalFunctionExpressionParserRuleCall_6() { return cLogicalFunctionExpressionParserRuleCall_6; }
		
		//LogicalFlagLiteral
		public RuleCall getLogicalFlagLiteralParserRuleCall_7() { return cLogicalFlagLiteralParserRuleCall_7; }
	}
	public class LogicalFunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalFunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalFunctionExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		//LogicalFunctionExpression returns LogicalExpression: {LogicalFunctionExpression} function = Function;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalFunctionExpression} function = Function
		public Group getGroup() { return cGroup; }
		
		//{LogicalFunctionExpression}
		public Action getLogicalFunctionExpressionAction_0() { return cLogicalFunctionExpressionAction_0; }
		
		//function = Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
	}
	public class LogicalAbsoluteIdExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalAbsoluteIdExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalAbsoluteIdExressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAbsoluteIdParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LogicalAbsoluteIdExpression returns LogicalExpression: {LogicalAbsoluteIdExression} value=AbsoluteId;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalAbsoluteIdExression} value=AbsoluteId
		public Group getGroup() { return cGroup; }
		
		//{LogicalAbsoluteIdExression}
		public Action getLogicalAbsoluteIdExressionAction_0() { return cLogicalAbsoluteIdExressionAction_0; }
		
		//value=AbsoluteId
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//AbsoluteId
		public RuleCall getValueAbsoluteIdParserRuleCall_1_0() { return cValueAbsoluteIdParserRuleCall_1_0; }
	}
	public class LogicalBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//LogicalBooleanLiteral returns LogicalExpression: {LogicalBooleanLiteral} ('false' | isTrue?='true');
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalBooleanLiteral} ('false' | isTrue?='true')
		public Group getGroup() { return cGroup; }
		
		//{LogicalBooleanLiteral}
		public Action getLogicalBooleanLiteralAction_0() { return cLogicalBooleanLiteralAction_0; }
		
		//('false' | isTrue?='true')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'false'
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//isTrue?='true'
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }
		
		//'true'
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}
	public class LogicalNumeralLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalNumeralLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalNumeralLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueXFloatParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LogicalNumeralLiteral returns LogicalExpression: {LogicalNumeralLiteral}  value=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalNumeralLiteral}  value=XFloat
		public Group getGroup() { return cGroup; }
		
		//{LogicalNumeralLiteral}
		public Action getLogicalNumeralLiteralAction_0() { return cLogicalNumeralLiteralAction_0; }
		
		//value=XFloat
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//XFloat
		public RuleCall getValueXFloatParserRuleCall_1_0() { return cValueXFloatParserRuleCall_1_0; }
	}
	public class LogicalStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cMacroAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cMacroMacroCallParserRuleCall_1_1_0 = (RuleCall)cMacroAssignment_1_1.eContents().get(0);
		
		//LogicalStringLiteral returns LogicalExpression: {LogicalStringLiteral} (value=STRING | macro = MacroCall);
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalStringLiteral} (value=STRING | macro = MacroCall)
		public Group getGroup() { return cGroup; }
		
		//{LogicalStringLiteral}
		public Action getLogicalStringLiteralAction_0() { return cLogicalStringLiteralAction_0; }
		
		//(value=STRING | macro = MacroCall)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }
		
		//macro = MacroCall
		public Assignment getMacroAssignment_1_1() { return cMacroAssignment_1_1; }
		
		//MacroCall
		public RuleCall getMacroMacroCallParserRuleCall_1_1_0() { return cMacroMacroCallParserRuleCall_1_1_0; }
	}
	public class LogicalISODateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalISODateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalDateLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueISODATEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LogicalISODateLiteral returns LogicalExpression: {LogicalDateLiteral} value = ISODATE;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalDateLiteral} value = ISODATE
		public Group getGroup() { return cGroup; }
		
		//{LogicalDateLiteral}
		public Action getLogicalDateLiteralAction_0() { return cLogicalDateLiteralAction_0; }
		
		//value = ISODATE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ISODATE
		public RuleCall getValueISODATEParserRuleCall_1_0() { return cValueISODATEParserRuleCall_1_0; }
	}
	public class LogicalFlagLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalFlagLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicalFlagExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScenarioScenarioCrossReference_1_0 = (CrossReference)cScenarioAssignment_1.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumIdColumnIdEnumRuleCall_3_0 = (RuleCall)cColumIdAssignment_3.eContents().get(0);
		
		//LogicalFlagLiteral returns LogicalExpression : {LogicalFlagExpression} scenario = [Scenario] '.' columId = ColumnId ;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicalFlagExpression} scenario = [Scenario] '.' columId = ColumnId
		public Group getGroup() { return cGroup; }
		
		//{LogicalFlagExpression}
		public Action getLogicalFlagExpressionAction_0() { return cLogicalFlagExpressionAction_0; }
		
		//scenario = [Scenario]
		public Assignment getScenarioAssignment_1() { return cScenarioAssignment_1; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_0() { return cScenarioScenarioCrossReference_1_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//columId = ColumnId
		public Assignment getColumIdAssignment_3() { return cColumIdAssignment_3; }
		
		//ColumnId
		public RuleCall getColumIdColumnIdEnumRuleCall_3_0() { return cColumIdColumnIdEnumRuleCall_3_0; }
	}
	public class LogicalPrenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalPrenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLogicalExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LogicalPrenthesizedExpression returns LogicalExpression:
		//    '(' LogicalExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' LogicalExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_1() { return cLogicalExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LogicalFlagExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LogicalFlagExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/logicalflagexpression.html
		//LogicalFlagExpression: STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMacroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cValueAssignment_3_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/macro.html
		//Macro: 'macro' id = ID ('['|'{') (value=STRING | properties += Property)* (']'|'}');
		@Override public ParserRule getRule() { return rule; }
		
		//'macro' id = ID ('['|'{') (value=STRING | properties += Property)* (']'|'}')
		public Group getGroup() { return cGroup; }
		
		//'macro'
		public Keyword getMacroKeyword_0() { return cMacroKeyword_0; }
		
		//id = ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//('['|'{')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//(value=STRING | properties += Property)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//value=STRING
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0_0() { return cValueSTRINGTerminalRuleCall_3_0_0; }
		
		//properties += Property
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0() { return cPropertiesPropertyParserRuleCall_3_1_0; }
		
		//(']'|'}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_0() { return cRightSquareBracketKeyword_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1() { return cRightCurlyBracketKeyword_4_1; }
	}
	public class ManagersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Managers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_1_0 = (CrossReference)cResourcesAssignment_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourcesResourceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_1_0 = (CrossReference)cResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/managers.html
		//Managers: 'managers' resources += [Resource] (',' resources += [Resource])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'managers' resources += [Resource] (',' resources += [Resource])*
		public Group getGroup() { return cGroup; }
		
		//'managers'
		public Keyword getManagersKeyword_0() { return cManagersKeyword_0; }
		
		//resources += [Resource]
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_1_0() { return cResourcesResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_1_0_1() { return cResourcesResourceIDTerminalRuleCall_1_0_1; }
		
		//(',' resources += [Resource])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//resources += [Resource]
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_1_0() { return cResourcesResourceCrossReference_2_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_1_0_1; }
	}
	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Mandatory");
		private final Assignment cMandatoryAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMandatoryMandatoryKeyword_0 = (Keyword)cMandatoryAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/mandatory.html
		//Mandatory: mandatory ?= 'mandatory';
		@Override public ParserRule getRule() { return rule; }
		
		//mandatory ?= 'mandatory'
		public Assignment getMandatoryAssignment() { return cMandatoryAssignment; }
		
		//'mandatory'
		public Keyword getMandatoryMandatoryKeyword_0() { return cMandatoryMandatoryKeyword_0; }
	}
	public class MaxEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MaxEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxEndISODATEParserRuleCall_1_0 = (RuleCall)cMaxEndAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/maxend.html
		//MaxEnd: 'maxend' maxEnd=ISODATE;
		@Override public ParserRule getRule() { return rule; }
		
		//'maxend' maxEnd=ISODATE
		public Group getGroup() { return cGroup; }
		
		//'maxend'
		public Keyword getMaxendKeyword_0() { return cMaxendKeyword_0; }
		
		//maxEnd=ISODATE
		public Assignment getMaxEndAssignment_1() { return cMaxEndAssignment_1; }
		
		//ISODATE
		public RuleCall getMaxEndISODATEParserRuleCall_1_0() { return cMaxEndISODATEParserRuleCall_1_0; }
	}
	public class MaximumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Maximum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaximumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/maximum.html
		//Maximum: 'maximum' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'maximum' Limit
		public Group getGroup() { return cGroup; }
		
		//'maximum'
		public Keyword getMaximumKeyword_0() { return cMaximumKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class MaxStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MaxStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxstartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMaxStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMaxStartISODATEParserRuleCall_1_0 = (RuleCall)cMaxStartAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/maxstart.html
		//MaxStart: 'maxstart' maxStart=ISODATE;
		@Override public ParserRule getRule() { return rule; }
		
		//'maxstart' maxStart=ISODATE
		public Group getGroup() { return cGroup; }
		
		//'maxstart'
		public Keyword getMaxstartKeyword_0() { return cMaxstartKeyword_0; }
		
		//maxStart=ISODATE
		public Assignment getMaxStartAssignment_1() { return cMaxStartAssignment_1; }
		
		//ISODATE
		public RuleCall getMaxStartISODATEParserRuleCall_1_0() { return cMaxStartISODATEParserRuleCall_1_0; }
	}
	public class MilestoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Milestone");
		private final Assignment cMilestoneAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMilestoneMilestoneKeyword_0 = (Keyword)cMilestoneAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/milestone.html
		//Milestone: milestone ?= 'milestone';
		@Override public ParserRule getRule() { return rule; }
		
		//milestone ?= 'milestone'
		public Assignment getMilestoneAssignment() { return cMilestoneAssignment; }
		
		//'milestone'
		public Keyword getMilestoneMilestoneKeyword_0() { return cMilestoneMilestoneKeyword_0; }
	}
	public class MinimumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Minimum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinimumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/minimum.html
		//Minimum: 'minimum' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'minimum' Limit
		public Group getGroup() { return cGroup; }
		
		//'minimum'
		public Keyword getMinimumKeyword_0() { return cMinimumKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class MinEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MinEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinEndAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinEndISODATEParserRuleCall_1_0 = (RuleCall)cMinEndAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/minend.html
		//MinEnd: 'minend' minEnd=ISODATE;
		@Override public ParserRule getRule() { return rule; }
		
		//'minend' minEnd=ISODATE
		public Group getGroup() { return cGroup; }
		
		//'minend'
		public Keyword getMinendKeyword_0() { return cMinendKeyword_0; }
		
		//minEnd=ISODATE
		public Assignment getMinEndAssignment_1() { return cMinEndAssignment_1; }
		
		//ISODATE
		public RuleCall getMinEndISODATEParserRuleCall_1_0() { return cMinEndISODATEParserRuleCall_1_0; }
	}
	public class MinStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MinStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinstartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinStartISODATEParserRuleCall_1_0 = (RuleCall)cMinStartAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/minstart.html
		//MinStart: 'minstart' minStart=ISODATE;
		@Override public ParserRule getRule() { return rule; }
		
		//'minstart' minStart=ISODATE
		public Group getGroup() { return cGroup; }
		
		//'minstart'
		public Keyword getMinstartKeyword_0() { return cMinstartKeyword_0; }
		
		//minStart=ISODATE
		public Assignment getMinStartAssignment_1() { return cMinStartAssignment_1; }
		
		//ISODATE
		public RuleCall getMinStartISODATEParserRuleCall_1_0() { return cMinStartISODATEParserRuleCall_1_0; }
	}
	public class MonthlyMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MonthlyMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonthlymaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/monthlymax.html
		//MonthlyMax: 'monthlymax' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'monthlymax' Limit
		public Group getGroup() { return cGroup; }
		
		//'monthlymax'
		public Keyword getMonthlymaxKeyword_0() { return cMonthlymaxKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class MonthlyMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.MonthlyMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonthlyminKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/monthlymin.html
		//MonthlyMin: 'monthlymin' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'monthlymin' Limit
		public Group getGroup() { return cGroup; }
		
		//'monthlymin'
		public Keyword getMonthlyminKeyword_0() { return cMonthlyminKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class NoteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Note");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteSTRINGTerminalRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/note.task.html
		//Note: 'note' note=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'note' note=STRING
		public Group getGroup() { return cGroup; }
		
		//'note'
		public Keyword getNoteKeyword_0() { return cNoteKeyword_0; }
		
		//note=STRING
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }
		
		//STRING
		public RuleCall getNoteSTRINGTerminalRuleCall_1_0() { return cNoteSTRINGTerminalRuleCall_1_0; }
	}
	public class NowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Now");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNowISODATEParserRuleCall_1_0 = (RuleCall)cNowAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/now.html
		//Now: 'now' now=ISODATE;
		@Override public ParserRule getRule() { return rule; }
		
		//'now' now=ISODATE
		public Group getGroup() { return cGroup; }
		
		//'now'
		public Keyword getNowKeyword_0() { return cNowKeyword_0; }
		
		//now=ISODATE
		public Assignment getNowAssignment_1() { return cNowAssignment_1; }
		
		//ISODATE
		public RuleCall getNowISODATEParserRuleCall_1_0() { return cNowISODATEParserRuleCall_1_0; }
	}
	public class NumberFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.NumberFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRealFormatParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/numberformat.html
		//NumberFormat: 'numberformat' RealFormat;
		@Override public ParserRule getRule() { return rule; }
		
		//'numberformat' RealFormat
		public Group getGroup() { return cGroup; }
		
		//'numberformat'
		public Keyword getNumberformatKeyword_0() { return cNumberformatKeyword_0; }
		
		//RealFormat
		public RuleCall getRealFormatParserRuleCall_1() { return cRealFormatParserRuleCall_1; }
	}
	public class PeriodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Period");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeriodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPeriodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPeriodInterval2ParserRuleCall_1_0 = (RuleCall)cPeriodAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/onend.html
		//// http://www.taskjuggler.org/tj3/manual/onstart.html
		//// See DependPolicy
		//// http://www.taskjuggler.org/tj3/manual/opennodes.html
		//// internal use only
		//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
		//// See BookingRestriction
		//// http://www.taskjuggler.org/tj3/manual/period.column.html
		//Period: 'period' period=Interval2;
		@Override public ParserRule getRule() { return rule; }
		
		//'period' period=Interval2
		public Group getGroup() { return cGroup; }
		
		//'period'
		public Keyword getPeriodKeyword_0() { return cPeriodKeyword_0; }
		
		//period=Interval2
		public Assignment getPeriodAssignment_1() { return cPeriodAssignment_1; }
		
		//Interval2
		public RuleCall getPeriodInterval2ParserRuleCall_1_0() { return cPeriodInterval2ParserRuleCall_1_0; }
	}
	public class PersistentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Persistent");
		private final Assignment cPersistentAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPersistentPersistentKeyword_0 = (Keyword)cPersistentAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/persistent.html
		//Persistent: persistent ?= 'persistent';
		@Override public ParserRule getRule() { return rule; }
		
		//persistent ?= 'persistent'
		public Assignment getPersistentAssignment() { return cPersistentAssignment; }
		
		//'persistent'
		public Keyword getPersistentPersistentKeyword_0() { return cPersistentPersistentKeyword_0; }
	}
	public class PrecedesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Precedes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrecedesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTaskDependencyParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/precedes.html
		//Precedes: 'precedes' TaskDependency;
		@Override public ParserRule getRule() { return rule; }
		
		//'precedes' TaskDependency
		public Group getGroup() { return cGroup; }
		
		//'precedes'
		public Keyword getPrecedesKeyword_0() { return cPrecedesKeyword_0; }
		
		//TaskDependency
		public RuleCall getTaskDependencyParserRuleCall_1() { return cTaskDependencyParserRuleCall_1; }
	}
	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPriorityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_1_0 = (RuleCall)cPriorityAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/priority.html
		//Priority: 'priority' priority=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'priority' priority=INT
		public Group getGroup() { return cGroup; }
		
		//'priority'
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }
		
		//priority=INT
		public Assignment getPriorityAssignment_1() { return cPriorityAssignment_1; }
		
		//INT
		public RuleCall getPriorityINTTerminalRuleCall_1_0() { return cPriorityINTTerminalRuleCall_1_0; }
	}
	public class ProjectIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ProjectId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProjectIdIDTerminalRuleCall_1_0 = (RuleCall)cProjectIdAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/projectid.html
		//ProjectId: 'projectid' projectId=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'projectid' projectId=ID
		public Group getGroup() { return cGroup; }
		
		//'projectid'
		public Keyword getProjectidKeyword_0() { return cProjectidKeyword_0; }
		
		//projectId=ID
		public Assignment getProjectIdAssignment_1() { return cProjectIdAssignment_1; }
		
		//ID
		public RuleCall getProjectIdIDTerminalRuleCall_1_0() { return cProjectIdIDTerminalRuleCall_1_0; }
	}
	public class ProjectIdsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ProjectIds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectidsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_1_0 = (RuleCall)cIdsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_2_1_0 = (RuleCall)cIdsAssignment_2_1.eContents().get(0);
		
		////http://www.taskjuggler.org/tj3/manual/projectids.html
		//ProjectIds: 'projectids' ids += ID (',' ids+= ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'projectids' ids += ID (',' ids+= ID)*
		public Group getGroup() { return cGroup; }
		
		//'projectids'
		public Keyword getProjectidsKeyword_0() { return cProjectidsKeyword_0; }
		
		//ids += ID
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_1_0() { return cIdsIDTerminalRuleCall_1_0; }
		
		//(',' ids+= ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ids+= ID
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_2_1_0() { return cIdsIDTerminalRuleCall_2_1_0; }
	}
	public class PrologElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Prolog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrologKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/projection.html
		//// deprecated
		//// http://www.taskjuggler.org/tj3/manual/prolog.html
		//Prolog: 'prolog' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'prolog' RichText
		public Group getGroup() { return cGroup; }
		
		//'prolog'
		public Keyword getPrologKeyword_0() { return cPrologKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class PurgeReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.PurgeReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPurgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListAttributePurgeReportAttributeEnumRuleCall_1_0 = (RuleCall)cListAttributeAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/purge.html
		//PurgeReport: 'purge' listAttribute=PurgeReportAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//'purge' listAttribute=PurgeReportAttribute
		public Group getGroup() { return cGroup; }
		
		//'purge'
		public Keyword getPurgeKeyword_0() { return cPurgeKeyword_0; }
		
		//listAttribute=PurgeReportAttribute
		public Assignment getListAttributeAssignment_1() { return cListAttributeAssignment_1; }
		
		//PurgeReportAttribute
		public RuleCall getListAttributePurgeReportAttributeEnumRuleCall_1_0() { return cListAttributePurgeReportAttributeEnumRuleCall_1_0; }
	}
	public class PurgeResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.PurgeResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPurgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListAttributePurgeResourceAttributeEnumRuleCall_1_0 = (RuleCall)cListAttributeAssignment_1.eContents().get(0);
		
		//PurgeResource: 'purge' listAttribute=PurgeResourceAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//'purge' listAttribute=PurgeResourceAttribute
		public Group getGroup() { return cGroup; }
		
		//'purge'
		public Keyword getPurgeKeyword_0() { return cPurgeKeyword_0; }
		
		//listAttribute=PurgeResourceAttribute
		public Assignment getListAttributeAssignment_1() { return cListAttributeAssignment_1; }
		
		//PurgeResourceAttribute
		public RuleCall getListAttributePurgeResourceAttributeEnumRuleCall_1_0() { return cListAttributePurgeResourceAttributeEnumRuleCall_1_0; }
	}
	public class PurgeTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.PurgeTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPurgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListAttributePurgeTaskAttributeEnumRuleCall_1_0 = (RuleCall)cListAttributeAssignment_1.eContents().get(0);
		
		//PurgeTask: 'purge' listAttribute=PurgeTaskAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//'purge' listAttribute=PurgeTaskAttribute
		public Group getGroup() { return cGroup; }
		
		//'purge'
		public Keyword getPurgeKeyword_0() { return cPurgeKeyword_0; }
		
		//listAttribute=PurgeTaskAttribute
		public Assignment getListAttributeAssignment_1() { return cListAttributeAssignment_1; }
		
		//PurgeTaskAttribute
		public RuleCall getListAttributePurgeTaskAttributeEnumRuleCall_1_0() { return cListAttributePurgeTaskAttributeEnumRuleCall_1_0; }
	}
	public class RateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Rate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRateXFloatParserRuleCall_1_0 = (RuleCall)cRateAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rate.html
		//Rate: 'rate' rate=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'rate' rate=XFloat
		public Group getGroup() { return cGroup; }
		
		//'rate'
		public Keyword getRateKeyword_0() { return cRateKeyword_0; }
		
		//rate=XFloat
		public Assignment getRateAssignment_1() { return cRateAssignment_1; }
		
		//XFloat
		public RuleCall getRateXFloatParserRuleCall_1_0() { return cRateXFloatParserRuleCall_1_0; }
	}
	public class RemainingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Remaining");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemainingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRemainingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRemainingDurationQuantityParserRuleCall_1_0 = (RuleCall)cRemainingAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/remaining.html
		//Remaining: 'remaining' remaining=DurationQuantity;
		@Override public ParserRule getRule() { return rule; }
		
		//'remaining' remaining=DurationQuantity
		public Group getGroup() { return cGroup; }
		
		//'remaining'
		public Keyword getRemainingKeyword_0() { return cRemainingKeyword_0; }
		
		//remaining=DurationQuantity
		public Assignment getRemainingAssignment_1() { return cRemainingAssignment_1; }
		
		//DurationQuantity
		public RuleCall getRemainingDurationQuantityParserRuleCall_1_0() { return cRemainingDurationQuantityParserRuleCall_1_0; }
	}
	public class ReportPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ReportPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReportprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReportAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReportReportCrossReference_1_0 = (CrossReference)cReportAssignment_1.eContents().get(0);
		private final RuleCall cReportReportIDTerminalRuleCall_1_0_1 = (RuleCall)cReportReportCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/replace.html
		//// see Shift
		//// http://www.taskjuggler.org/tj3/manual/reportprefix.html
		//ReportPrefix: 'reportprefix' report=[Report];
		@Override public ParserRule getRule() { return rule; }
		
		//'reportprefix' report=[Report]
		public Group getGroup() { return cGroup; }
		
		//'reportprefix'
		public Keyword getReportprefixKeyword_0() { return cReportprefixKeyword_0; }
		
		//report=[Report]
		public Assignment getReportAssignment_1() { return cReportAssignment_1; }
		
		//[Report]
		public CrossReference getReportReportCrossReference_1_0() { return cReportReportCrossReference_1_0; }
		
		//ID
		public RuleCall getReportReportIDTerminalRuleCall_1_0_1() { return cReportReportIDTerminalRuleCall_1_0_1; }
	}
	public class ResourceAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ResourceAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceattributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAllAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_1_0_0 = (Keyword)cAllAssignment_1_0.eContents().get(0);
		private final Assignment cNoneAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_1_0 = (Keyword)cNoneAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cResourceAttributesAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_2_1 = (UnorderedGroup)cGroup_1_2.eContents().get(1);
		private final Assignment cVacationAssignment_1_2_1_0 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(0);
		private final Keyword cVacationVacationKeyword_1_2_1_0_0 = (Keyword)cVacationAssignment_1_2_1_0.eContents().get(0);
		private final Assignment cBookingAssignment_1_2_1_1 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(1);
		private final Keyword cBookingBookingKeyword_1_2_1_1_0 = (Keyword)cBookingAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cWorkingHoursAssignment_1_2_1_2 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(2);
		private final Keyword cWorkingHoursWorkinghoursKeyword_1_2_1_2_0 = (Keyword)cWorkingHoursAssignment_1_2_1_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/resourceattributes.html
		//ResourceAttributes: 'resourceattributes' ((all ?= '*'  | none ?= '-' |
		//        {ResourceAttributes}
		//            (vacation ?= 'vacation'? &
		//             booking ?= 'booking'? &
		//             workingHours ?= 'workinghours'?)
		//));
		@Override public ParserRule getRule() { return rule; }
		
		// 'resourceattributes' ((all ?= '*'  | none ?= '-' |
		//        {ResourceAttributes}
		//            (vacation ?= 'vacation'? &
		//             booking ?= 'booking'? &
		//             workingHours ?= 'workinghours'?)
		//))
		public Group getGroup() { return cGroup; }
		
		//'resourceattributes'
		public Keyword getResourceattributesKeyword_0() { return cResourceattributesKeyword_0; }
		
		// ((all ?= '*'  | none ?= '-' |
		//        {ResourceAttributes}
		//            (vacation ?= 'vacation'? &
		//             booking ?= 'booking'? &
		//             workingHours ?= 'workinghours'?)
		//))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//all ?= '*'
		public Assignment getAllAssignment_1_0() { return cAllAssignment_1_0; }
		
		//'*'
		public Keyword getAllAsteriskKeyword_1_0_0() { return cAllAsteriskKeyword_1_0_0; }
		
		//none ?= '-'
		public Assignment getNoneAssignment_1_1() { return cNoneAssignment_1_1; }
		
		//'-'
		public Keyword getNoneHyphenMinusKeyword_1_1_0() { return cNoneHyphenMinusKeyword_1_1_0; }
		
		//{ResourceAttributes}
		//    (vacation ?= 'vacation'? &
		//     booking ?= 'booking'? &
		//     workingHours ?= 'workinghours'?)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{ResourceAttributes}
		public Action getResourceAttributesAction_1_2_0() { return cResourceAttributesAction_1_2_0; }
		
		//(vacation ?= 'vacation'? &
		// booking ?= 'booking'? &
		// workingHours ?= 'workinghours'?)
		public UnorderedGroup getUnorderedGroup_1_2_1() { return cUnorderedGroup_1_2_1; }
		
		//vacation ?= 'vacation'?
		public Assignment getVacationAssignment_1_2_1_0() { return cVacationAssignment_1_2_1_0; }
		
		//'vacation'
		public Keyword getVacationVacationKeyword_1_2_1_0_0() { return cVacationVacationKeyword_1_2_1_0_0; }
		
		//booking ?= 'booking'?
		public Assignment getBookingAssignment_1_2_1_1() { return cBookingAssignment_1_2_1_1; }
		
		//'booking'
		public Keyword getBookingBookingKeyword_1_2_1_1_0() { return cBookingBookingKeyword_1_2_1_1_0; }
		
		//workingHours ?= 'workinghours'?
		public Assignment getWorkingHoursAssignment_1_2_1_2() { return cWorkingHoursAssignment_1_2_1_2; }
		
		//'workinghours'
		public Keyword getWorkingHoursWorkinghoursKeyword_1_2_1_2_0() { return cWorkingHoursWorkinghoursKeyword_1_2_1_2_0; }
	}
	public class ResourcePrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ResourcePrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resourceprefix.html
		//ResourcePrefix: 'resourceprefix' resource=[Resource];
		@Override public ParserRule getRule() { return rule; }
		
		//'resourceprefix' resource=[Resource]
		public Group getGroup() { return cGroup; }
		
		//'resourceprefix'
		public Keyword getResourceprefixKeyword_0() { return cResourceprefixKeyword_0; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
	}
	public class ResourceReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ResourceReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcereportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
		//ResourceReport: 'resourcereport' Report;
		@Override public ParserRule getRule() { return rule; }
		
		//'resourcereport' Report
		public Group getGroup() { return cGroup; }
		
		//'resourcereport'
		public Keyword getResourcereportKeyword_0() { return cResourcereportKeyword_0; }
		
		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}
	public class ResourceRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ResourceRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcerootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resourceroot.html
		//ResourceRoot: 'resourceroot' resource = [Resource|ID];
		@Override public ParserRule getRule() { return rule; }
		
		//'resourceroot' resource = [Resource|ID]
		public Group getGroup() { return cGroup; }
		
		//'resourceroot'
		public Keyword getResourcerootKeyword_0() { return cResourcerootKeyword_0; }
		
		//resource = [Resource|ID]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }
		
		//[Resource|ID]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
	}
	public class ResponsibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Responsible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResponsibleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourcesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_1_0 = (CrossReference)cResourcesAssignment_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourcesResourceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_1_0 = (CrossReference)cResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/resources.limit.html
		//// See Limit
		//// http://www.taskjuggler.org/tj3/manual/responsible.html
		//Responsible: 'responsible' resources+=[Resource] (',' resources+=[Resource])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'responsible' resources+=[Resource] (',' resources+=[Resource])*
		public Group getGroup() { return cGroup; }
		
		//'responsible'
		public Keyword getResponsibleKeyword_0() { return cResponsibleKeyword_0; }
		
		//resources+=[Resource]
		public Assignment getResourcesAssignment_1() { return cResourcesAssignment_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_1_0() { return cResourcesResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_1_0_1() { return cResourcesResourceIDTerminalRuleCall_1_0_1; }
		
		//(',' resources+=[Resource])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_1_0() { return cResourcesResourceCrossReference_2_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_1_0_1; }
	}
	public class RGBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.RGB");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////TODO validate rgb string
		//RGB: value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/right.html
		//Right: 'right' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'right' RichText
		public Group getGroup() { return cGroup; }
		
		//'right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class RollupAccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.RollupAccount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRollupaccountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rollupaccount.html
		//RollupAccount: 'rollupaccount' expression=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'rollupaccount' expression=LogicalExpression
		public Group getGroup() { return cGroup; }
		
		//'rollupaccount'
		public Keyword getRollupaccountKeyword_0() { return cRollupaccountKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}
	public class RollupResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.RollupResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRollupresourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rollupresource.html
		//RollupResource: 'rollupresource' expression=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'rollupresource' expression=LogicalExpression
		public Group getGroup() { return cGroup; }
		
		//'rollupresource'
		public Keyword getRollupresourceKeyword_0() { return cRollupresourceKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}
	public class RollupTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.RollupTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRolluptaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/rolluptask.html
		//RollupTask: 'rolluptask' expression=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'rolluptask' expression=LogicalExpression
		public Group getGroup() { return cGroup; }
		
		//'rolluptask'
		public Keyword getRolluptaskKeyword_0() { return cRolluptaskKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}
	public class ScaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Scale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScaleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScaleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cScaleAlternatives_1_0 = (Alternatives)cScaleAssignment_1.eContents().get(0);
		private final Keyword cScaleHourKeyword_1_0_0 = (Keyword)cScaleAlternatives_1_0.eContents().get(0);
		private final Keyword cScaleDayKeyword_1_0_1 = (Keyword)cScaleAlternatives_1_0.eContents().get(1);
		private final Keyword cScaleWeekKeyword_1_0_2 = (Keyword)cScaleAlternatives_1_0.eContents().get(2);
		private final Keyword cScaleMonthKeyword_1_0_3 = (Keyword)cScaleAlternatives_1_0.eContents().get(3);
		private final Keyword cScaleQuarterKeyword_1_0_4 = (Keyword)cScaleAlternatives_1_0.eContents().get(4);
		private final Keyword cScaleYearKeyword_1_0_5 = (Keyword)cScaleAlternatives_1_0.eContents().get(5);
		
		//// http://www.taskjuggler.org/tj3/manual/scale.column.html
		//Scale: 'scale' scale=('hour' | 'day' |'week' | 'month' | 'quarter' | 'year');
		@Override public ParserRule getRule() { return rule; }
		
		//'scale' scale=('hour' | 'day' |'week' | 'month' | 'quarter' | 'year')
		public Group getGroup() { return cGroup; }
		
		//'scale'
		public Keyword getScaleKeyword_0() { return cScaleKeyword_0; }
		
		//scale=('hour' | 'day' |'week' | 'month' | 'quarter' | 'year')
		public Assignment getScaleAssignment_1() { return cScaleAssignment_1; }
		
		//('hour' | 'day' |'week' | 'month' | 'quarter' | 'year')
		public Alternatives getScaleAlternatives_1_0() { return cScaleAlternatives_1_0; }
		
		//'hour'
		public Keyword getScaleHourKeyword_1_0_0() { return cScaleHourKeyword_1_0_0; }
		
		//'day'
		public Keyword getScaleDayKeyword_1_0_1() { return cScaleDayKeyword_1_0_1; }
		
		//'week'
		public Keyword getScaleWeekKeyword_1_0_2() { return cScaleWeekKeyword_1_0_2; }
		
		//'month'
		public Keyword getScaleMonthKeyword_1_0_3() { return cScaleMonthKeyword_1_0_3; }
		
		//'quarter'
		public Keyword getScaleQuarterKeyword_1_0_4() { return cScaleQuarterKeyword_1_0_4; }
		
		//'year'
		public Keyword getScaleYearKeyword_1_0_5() { return cScaleYearKeyword_1_0_5; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cActiveKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cActiveAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cActiveYesNoEnumRuleCall_3_1_0_1_0 = (RuleCall)cActiveAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cScenarioAssignment_3_1_1 = (Assignment)cUnorderedGroup_3_1.eContents().get(1);
		private final RuleCall cScenarioScenarioParserRuleCall_3_1_1_0 = (RuleCall)cScenarioAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/scenario.html
		//Scenario:
		//    'scenario' id=ID name=STRING ('{'
		//        (
		//            ('active' active=YesNo)? &
		//            (scenario=Scenario)?
		//        )
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' id=ID name=STRING ('{'
		//    (
		//        ('active' active=YesNo)? &
		//        (scenario=Scenario)?
		//    )
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//('{'
		//       (
		//           ('active' active=YesNo)? &
		//           (scenario=Scenario)?
		//       )
		//   '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(
		//    ('active' active=YesNo)? &
		//    (scenario=Scenario)?
		//)
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }
		
		//('active' active=YesNo)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'active'
		public Keyword getActiveKeyword_3_1_0_0() { return cActiveKeyword_3_1_0_0; }
		
		//active=YesNo
		public Assignment getActiveAssignment_3_1_0_1() { return cActiveAssignment_3_1_0_1; }
		
		//YesNo
		public RuleCall getActiveYesNoEnumRuleCall_3_1_0_1_0() { return cActiveYesNoEnumRuleCall_3_1_0_1_0; }
		
		//(scenario=Scenario)?
		public Assignment getScenarioAssignment_3_1_1() { return cScenarioAssignment_3_1_1; }
		
		//Scenario
		public RuleCall getScenarioScenarioParserRuleCall_3_1_1_0() { return cScenarioScenarioParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ScenarioIcalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ScenarioIcal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScenarioScenarioCrossReference_1_0 = (CrossReference)cScenarioAssignment_1.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/scenario.ical.html
		//ScenarioIcal: 'scenario' scenario = [Scenario];
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' scenario = [Scenario]
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//scenario = [Scenario]
		public Assignment getScenarioAssignment_1() { return cScenarioAssignment_1; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_0() { return cScenarioScenarioCrossReference_1_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_0_1; }
	}
	public class ScenariosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Scenarios");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenariosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenariosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScenariosScenarioCrossReference_1_0 = (CrossReference)cScenariosAssignment_1.eContents().get(0);
		private final RuleCall cScenariosScenarioIDTerminalRuleCall_1_0_1 = (RuleCall)cScenariosScenarioCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cScenariosAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cScenariosScenarioCrossReference_2_1_0 = (CrossReference)cScenariosAssignment_2_1.eContents().get(0);
		private final RuleCall cScenariosScenarioIDTerminalRuleCall_2_1_0_1 = (RuleCall)cScenariosScenarioCrossReference_2_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/scenarios.export.html
		//// http://www.taskjuggler.org/tj3/manual/scenarios.html
		//Scenarios: 'scenarios' scenarios+=[Scenario] (',' scenarios+=[Scenario])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenarios' scenarios+=[Scenario] (',' scenarios+=[Scenario])*
		public Group getGroup() { return cGroup; }
		
		//'scenarios'
		public Keyword getScenariosKeyword_0() { return cScenariosKeyword_0; }
		
		//scenarios+=[Scenario]
		public Assignment getScenariosAssignment_1() { return cScenariosAssignment_1; }
		
		//[Scenario]
		public CrossReference getScenariosScenarioCrossReference_1_0() { return cScenariosScenarioCrossReference_1_0; }
		
		//ID
		public RuleCall getScenariosScenarioIDTerminalRuleCall_1_0_1() { return cScenariosScenarioIDTerminalRuleCall_1_0_1; }
		
		//(',' scenarios+=[Scenario])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//scenarios+=[Scenario]
		public Assignment getScenariosAssignment_2_1() { return cScenariosAssignment_2_1; }
		
		//[Scenario]
		public CrossReference getScenariosScenarioCrossReference_2_1_0() { return cScenariosScenarioCrossReference_2_1_0; }
		
		//ID
		public RuleCall getScenariosScenarioIDTerminalRuleCall_2_1_0_1() { return cScenariosScenarioIDTerminalRuleCall_2_1_0_1; }
	}
	public class ScheduledElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Scheduled");
		private final Assignment cScheduledAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cScheduledScheduledKeyword_0 = (Keyword)cScheduledAssignment.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
		//// see ExtendAttribute
		//// http://www.taskjuggler.org/tj3/manual/scheduled.html
		//Scheduled: scheduled?='scheduled';
		@Override public ParserRule getRule() { return rule; }
		
		//scheduled?='scheduled'
		public Assignment getScheduledAssignment() { return cScheduledAssignment; }
		
		//'scheduled'
		public Keyword getScheduledScheduledKeyword_0() { return cScheduledScheduledKeyword_0; }
	}
	public class SchedulingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Scheduling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchedulingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSchedulingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchedulingSchedulingPolicyEnumRuleCall_1_0 = (RuleCall)cSchedulingAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/scheduling.html
		//Scheduling: 'scheduling' scheduling=SchedulingPolicy;
		@Override public ParserRule getRule() { return rule; }
		
		//'scheduling' scheduling=SchedulingPolicy
		public Group getGroup() { return cGroup; }
		
		//'scheduling'
		public Keyword getSchedulingKeyword_0() { return cSchedulingKeyword_0; }
		
		//scheduling=SchedulingPolicy
		public Assignment getSchedulingAssignment_1() { return cSchedulingAssignment_1; }
		
		//SchedulingPolicy
		public RuleCall getSchedulingSchedulingPolicyEnumRuleCall_1_0() { return cSchedulingSchedulingPolicyEnumRuleCall_1_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentSelectArgumentEnumRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/select.html
		//Select: 'select' argument=SelectArgument;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' argument=SelectArgument
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//argument=SelectArgument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }
		
		//SelectArgument
		public RuleCall getArgumentSelectArgumentEnumRuleCall_1_0() { return cArgumentSelectArgumentEnumRuleCall_1_0; }
	}
	public class SelfContainedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SelfContained");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelfcontainedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelfcontainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelfcontainedYesNoEnumRuleCall_1_0 = (RuleCall)cSelfcontainedAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/selfcontained.html
		//SelfContained: 'selfcontained' selfcontained=YesNo;
		@Override public ParserRule getRule() { return rule; }
		
		//'selfcontained' selfcontained=YesNo
		public Group getGroup() { return cGroup; }
		
		//'selfcontained'
		public Keyword getSelfcontainedKeyword_0() { return cSelfcontainedKeyword_0; }
		
		//selfcontained=YesNo
		public Assignment getSelfcontainedAssignment_1() { return cSelfcontainedAssignment_1; }
		
		//YesNo
		public RuleCall getSelfcontainedYesNoEnumRuleCall_1_0() { return cSelfcontainedYesNoEnumRuleCall_1_0; }
	}
	public class ShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Shift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Assignment cReplaceAssignment_3_1_0 = (Assignment)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cReplaceReplaceKeyword_3_1_0_0 = (Keyword)cReplaceAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cUnorderedGroup_3_1.eContents().get(1);
		private final Keyword cTimezoneKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cTimezoneAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cTimezoneSTRINGTerminalRuleCall_3_1_1_1_0 = (RuleCall)cTimezoneAssignment_3_1_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cUnorderedGroup_3_1.eContents().get(2);
		private final Keyword cVacationKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cVacationAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cVacationVacationShiftParserRuleCall_3_1_2_1_0 = (RuleCall)cVacationAssignment_3_1_2_1.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cUnorderedGroup_3_1.eContents().get(3);
		private final Keyword cShiftKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cShiftAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cShiftShiftParserRuleCall_3_1_3_1_0 = (RuleCall)cShiftAssignment_3_1_3_1.eContents().get(0);
		private final Group cGroup_3_1_4 = (Group)cUnorderedGroup_3_1.eContents().get(4);
		private final Keyword cWorkinghoursKeyword_3_1_4_0 = (Keyword)cGroup_3_1_4.eContents().get(0);
		private final Assignment cWorkingHoursAssignment_3_1_4_1 = (Assignment)cGroup_3_1_4.eContents().get(1);
		private final RuleCall cWorkingHoursWorkingHoursParserRuleCall_3_1_4_1_0 = (RuleCall)cWorkingHoursAssignment_3_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/shift.html
		//Shift:
		//    'shift' id=ID? name=STRING ( '{'
		//        ((replace='replace')? &
		//        ('timezone' timezone=STRING)?  &
		//        ('vacation' vacation=VacationShift)? &
		//        ('shift' shift=Shift)? &
		//        ('workinghours' workingHours=WorkingHours)?)
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'shift' id=ID? name=STRING ( '{'
		//    ((replace='replace')? &
		//    ('timezone' timezone=STRING)?  &
		//    ('vacation' vacation=VacationShift)? &
		//    ('shift' shift=Shift)? &
		//    ('workinghours' workingHours=WorkingHours)?)
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'shift'
		public Keyword getShiftKeyword_0() { return cShiftKeyword_0; }
		
		//id=ID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//( '{'
		//       ((replace='replace')? &
		//       ('timezone' timezone=STRING)?  &
		//       ('vacation' vacation=VacationShift)? &
		//       ('shift' shift=Shift)? &
		//       ('workinghours' workingHours=WorkingHours)?)
		//   '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//((replace='replace')? &
		//('timezone' timezone=STRING)?  &
		//('vacation' vacation=VacationShift)? &
		//('shift' shift=Shift)? &
		//('workinghours' workingHours=WorkingHours)?)
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }
		
		//(replace='replace')?
		public Assignment getReplaceAssignment_3_1_0() { return cReplaceAssignment_3_1_0; }
		
		//'replace'
		public Keyword getReplaceReplaceKeyword_3_1_0_0() { return cReplaceReplaceKeyword_3_1_0_0; }
		
		//('timezone' timezone=STRING)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'timezone'
		public Keyword getTimezoneKeyword_3_1_1_0() { return cTimezoneKeyword_3_1_1_0; }
		
		//timezone=STRING
		public Assignment getTimezoneAssignment_3_1_1_1() { return cTimezoneAssignment_3_1_1_1; }
		
		//STRING
		public RuleCall getTimezoneSTRINGTerminalRuleCall_3_1_1_1_0() { return cTimezoneSTRINGTerminalRuleCall_3_1_1_1_0; }
		
		//('vacation' vacation=VacationShift)?
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'vacation'
		public Keyword getVacationKeyword_3_1_2_0() { return cVacationKeyword_3_1_2_0; }
		
		//vacation=VacationShift
		public Assignment getVacationAssignment_3_1_2_1() { return cVacationAssignment_3_1_2_1; }
		
		//VacationShift
		public RuleCall getVacationVacationShiftParserRuleCall_3_1_2_1_0() { return cVacationVacationShiftParserRuleCall_3_1_2_1_0; }
		
		//('shift' shift=Shift)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//'shift'
		public Keyword getShiftKeyword_3_1_3_0() { return cShiftKeyword_3_1_3_0; }
		
		//shift=Shift
		public Assignment getShiftAssignment_3_1_3_1() { return cShiftAssignment_3_1_3_1; }
		
		//Shift
		public RuleCall getShiftShiftParserRuleCall_3_1_3_1_0() { return cShiftShiftParserRuleCall_3_1_3_1_0; }
		
		//('workinghours' workingHours=WorkingHours)?
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }
		
		//'workinghours'
		public Keyword getWorkinghoursKeyword_3_1_4_0() { return cWorkinghoursKeyword_3_1_4_0; }
		
		//workingHours=WorkingHours
		public Assignment getWorkingHoursAssignment_3_1_4_1() { return cWorkingHoursAssignment_3_1_4_1; }
		
		//WorkingHours
		public RuleCall getWorkingHoursWorkingHoursParserRuleCall_3_1_4_1_0() { return cWorkingHoursWorkingHoursParserRuleCall_3_1_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class ShiftTimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ShiftTimesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShiftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cShiftShiftCrossReference_1_0 = (CrossReference)cShiftAssignment_1.eContents().get(0);
		private final RuleCall cShiftShiftIDTerminalRuleCall_1_0_1 = (RuleCall)cShiftShiftCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/shift.resource.html - deprecated
		//// http://www.taskjuggler.org/tj3/manual/shifts.task.html - deprecated
		//// http://www.taskjuggler.org/tj3/manual/shift.timesheet.html
		//ShiftTimesheet: 'shift' shift=[Shift];
		@Override public ParserRule getRule() { return rule; }
		
		//'shift' shift=[Shift]
		public Group getGroup() { return cGroup; }
		
		//'shift'
		public Keyword getShiftKeyword_0() { return cShiftKeyword_0; }
		
		//shift=[Shift]
		public Assignment getShiftAssignment_1() { return cShiftAssignment_1; }
		
		//[Shift]
		public CrossReference getShiftShiftCrossReference_1_0() { return cShiftShiftCrossReference_1_0; }
		
		//ID
		public RuleCall getShiftShiftIDTerminalRuleCall_1_0_1() { return cShiftShiftIDTerminalRuleCall_1_0_1; }
	}
	public class ShiftsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Shifts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLimitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitsShiftsLimitParserRuleCall_1_0 = (RuleCall)cLimitsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLimitsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLimitsShiftsLimitParserRuleCall_2_1_0 = (RuleCall)cLimitsAssignment_2_1.eContents().get(0);
		
		//Shifts: 'shifts' limits+=ShiftsLimit (',' limits+=ShiftsLimit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'shifts' limits+=ShiftsLimit (',' limits+=ShiftsLimit)*
		public Group getGroup() { return cGroup; }
		
		//'shifts'
		public Keyword getShiftsKeyword_0() { return cShiftsKeyword_0; }
		
		//limits+=ShiftsLimit
		public Assignment getLimitsAssignment_1() { return cLimitsAssignment_1; }
		
		//ShiftsLimit
		public RuleCall getLimitsShiftsLimitParserRuleCall_1_0() { return cLimitsShiftsLimitParserRuleCall_1_0; }
		
		//(',' limits+=ShiftsLimit)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//limits+=ShiftsLimit
		public Assignment getLimitsAssignment_2_1() { return cLimitsAssignment_2_1; }
		
		//ShiftsLimit
		public RuleCall getLimitsShiftsLimitParserRuleCall_2_1_0() { return cLimitsShiftsLimitParserRuleCall_2_1_0; }
	}
	public class ShiftsLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ShiftsLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShiftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cShiftShiftCrossReference_0_0 = (CrossReference)cShiftAssignment_0.eContents().get(0);
		private final RuleCall cShiftShiftIDTerminalRuleCall_0_0_1 = (RuleCall)cShiftShiftCrossReference_0_0.eContents().get(1);
		private final Assignment cLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitInterval2ParserRuleCall_1_0 = (RuleCall)cLimitAssignment_1.eContents().get(0);
		
		//ShiftsLimit: shift=[Shift] (limit=Interval2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//shift=[Shift] (limit=Interval2)?
		public Group getGroup() { return cGroup; }
		
		//shift=[Shift]
		public Assignment getShiftAssignment_0() { return cShiftAssignment_0; }
		
		//[Shift]
		public CrossReference getShiftShiftCrossReference_0_0() { return cShiftShiftCrossReference_0_0; }
		
		//ID
		public RuleCall getShiftShiftIDTerminalRuleCall_0_0_1() { return cShiftShiftIDTerminalRuleCall_0_0_1; }
		
		//(limit=Interval2)?
		public Assignment getLimitAssignment_1() { return cLimitAssignment_1; }
		
		//Interval2
		public RuleCall getLimitInterval2ParserRuleCall_1_0() { return cLimitInterval2ParserRuleCall_1_0; }
	}
	public class ShiftsAllocateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ShiftsAllocate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShiftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cShiftShiftCrossReference_1_0 = (CrossReference)cShiftAssignment_1.eContents().get(0);
		private final RuleCall cShiftShiftIDTerminalRuleCall_1_0_1 = (RuleCall)cShiftShiftCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIntervalsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIntervalsInterval3ParserRuleCall_2_0_0 = (RuleCall)cIntervalsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_2_1_1_0 = (RuleCall)cIntervalsAssignment_2_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/shifts.allocate.html
		//ShiftsAllocate: 'shifts' shift=[Shift] ((intervals+=Interval3) (',' intervals+=Interval3)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'shifts' shift=[Shift] ((intervals+=Interval3) (',' intervals+=Interval3)*)?
		public Group getGroup() { return cGroup; }
		
		//'shifts'
		public Keyword getShiftsKeyword_0() { return cShiftsKeyword_0; }
		
		//shift=[Shift]
		public Assignment getShiftAssignment_1() { return cShiftAssignment_1; }
		
		//[Shift]
		public CrossReference getShiftShiftCrossReference_1_0() { return cShiftShiftCrossReference_1_0; }
		
		//ID
		public RuleCall getShiftShiftIDTerminalRuleCall_1_0_1() { return cShiftShiftIDTerminalRuleCall_1_0_1; }
		
		//((intervals+=Interval3) (',' intervals+=Interval3)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(intervals+=Interval3)
		public Assignment getIntervalsAssignment_2_0() { return cIntervalsAssignment_2_0; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_2_0_0() { return cIntervalsInterval3ParserRuleCall_2_0_0; }
		
		//(',' intervals+=Interval3)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_2_1_1() { return cIntervalsAssignment_2_1_1; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_2_1_1_0() { return cIntervalsInterval3ParserRuleCall_2_1_1_0; }
	}
	public class ShiftsResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ShiftsResource");
		private final RuleCall cShiftsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/shifts.resource.html
		//ShiftsResource: Shifts;
		@Override public ParserRule getRule() { return rule; }
		
		//Shifts
		public RuleCall getShiftsParserRuleCall() { return cShiftsParserRuleCall; }
	}
	public class ShiftsTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ShiftsTask");
		private final RuleCall cShiftsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////http://www.taskjuggler.org/tj3/manual/shifts.task.html
		//ShiftsTask: Shifts;
		@Override public ParserRule getRule() { return rule; }
		
		//Shifts
		public RuleCall getShiftsParserRuleCall() { return cShiftsParserRuleCall; }
	}
	public class ShortTimeFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ShortTimeFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShorttimeformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cShortTimeFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShortTimeFormatSTRINGTerminalRuleCall_1_0 = (RuleCall)cShortTimeFormatAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/shorttimeformat.html
		//ShortTimeFormat: 'shorttimeformat' shortTimeFormat=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'shorttimeformat' shortTimeFormat=STRING
		public Group getGroup() { return cGroup; }
		
		//'shorttimeformat'
		public Keyword getShorttimeformatKeyword_0() { return cShorttimeformatKeyword_0; }
		
		//shortTimeFormat=STRING
		public Assignment getShortTimeFormatAssignment_1() { return cShortTimeFormatAssignment_1; }
		
		//STRING
		public RuleCall getShortTimeFormatSTRINGTerminalRuleCall_1_0() { return cShortTimeFormatSTRINGTerminalRuleCall_1_0; }
	}
	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSortAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTreeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cTreeTreeKeyword_1_0_0 = (Keyword)cTreeAssignment_1_0.eContents().get(0);
		private final Assignment cCriteriaAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cCriteriaCriterionParserRuleCall_1_1_0 = (RuleCall)cCriteriaAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCriteriaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCriteriaCriterionParserRuleCall_2_1_0 = (RuleCall)cCriteriaAssignment_2_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
		//// http://www.taskjuggler.org/tj3/manual/sloppy.projection.html
		//// see Booking
		//// http://www.taskjuggler.org/tj3/manual/sortaccounts.html
		//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//Sort:
		//      {Sort}  (tree?='tree'? | criteria+=Criterion) (',' criteria+=Criterion)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Sort}  (tree?='tree'? | criteria+=Criterion) (',' criteria+=Criterion)*
		public Group getGroup() { return cGroup; }
		
		//{Sort}
		public Action getSortAction_0() { return cSortAction_0; }
		
		//(tree?='tree'? | criteria+=Criterion)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//tree?='tree'?
		public Assignment getTreeAssignment_1_0() { return cTreeAssignment_1_0; }
		
		//'tree'
		public Keyword getTreeTreeKeyword_1_0_0() { return cTreeTreeKeyword_1_0_0; }
		
		//criteria+=Criterion
		public Assignment getCriteriaAssignment_1_1() { return cCriteriaAssignment_1_1; }
		
		//Criterion
		public RuleCall getCriteriaCriterionParserRuleCall_1_1_0() { return cCriteriaCriterionParserRuleCall_1_1_0; }
		
		//(',' criteria+=Criterion)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//criteria+=Criterion
		public Assignment getCriteriaAssignment_2_1() { return cCriteriaAssignment_2_1; }
		
		//Criterion
		public RuleCall getCriteriaCriterionParserRuleCall_2_1_0() { return cCriteriaCriterionParserRuleCall_2_1_0; }
	}
	public class SortAccountsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SortAccounts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortaccountsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SortAccounts: 'sortaccounts' Sort;
		@Override public ParserRule getRule() { return rule; }
		
		//'sortaccounts' Sort
		public Group getGroup() { return cGroup; }
		
		//'sortaccounts'
		public Keyword getSortaccountsKeyword_0() { return cSortaccountsKeyword_0; }
		
		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}
	public class SortJournalEntriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SortJournalEntries");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortjournalentriesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SortJournalEntries: 'sortjournalentries' Sort;
		@Override public ParserRule getRule() { return rule; }
		
		//'sortjournalentries' Sort
		public Group getGroup() { return cGroup; }
		
		//'sortjournalentries'
		public Keyword getSortjournalentriesKeyword_0() { return cSortjournalentriesKeyword_0; }
		
		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}
	public class SortResourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SortResources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortresourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SortResources: 'sortresources' Sort;
		@Override public ParserRule getRule() { return rule; }
		
		//'sortresources' Sort
		public Group getGroup() { return cGroup; }
		
		//'sortresources'
		public Keyword getSortresourcesKeyword_0() { return cSortresourcesKeyword_0; }
		
		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}
	public class SortTasksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SortTasks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSorttasksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SortTasks: 'sorttasks' Sort;
		@Override public ParserRule getRule() { return rule; }
		
		//'sorttasks' Sort
		public Group getGroup() { return cGroup; }
		
		//'sorttasks'
		public Keyword getSorttasksKeyword_0() { return cSorttasksKeyword_0; }
		
		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cStartISODATEParserRuleCall_1_0_0 = (RuleCall)cStartAssignment_1_0.eContents().get(0);
		private final RuleCall cMacroCallParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/start.html
		//// http://www.taskjuggler.org/tj3/manual/start.column.html
		//// http://www.taskjuggler.org/tj3/manual/start.limit.html
		//// http://www.taskjuggler.org/tj3/manual/start.report.html
		//Start: 'start' (start=ISODATE | MacroCall);
		@Override public ParserRule getRule() { return rule; }
		
		//'start' (start=ISODATE | MacroCall)
		public Group getGroup() { return cGroup; }
		
		//'start'
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//(start=ISODATE | MacroCall)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//start=ISODATE
		public Assignment getStartAssignment_1_0() { return cStartAssignment_1_0; }
		
		//ISODATE
		public RuleCall getStartISODATEParserRuleCall_1_0_0() { return cStartISODATEParserRuleCall_1_0_0; }
		
		//MacroCall
		public RuleCall getMacroCallParserRuleCall_1_1() { return cMacroCallParserRuleCall_1_1; }
	}
	public class StatusStatusSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusStatusSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelAlertLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesStatusStatusSheetAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/status.statussheet.html
		//StatusStatusSheet: 'status' level=AlertLevel text=STRING ( '{' attributes += StatusStatusSheetAttribute* '}' ) ?;
		@Override public ParserRule getRule() { return rule; }
		
		//'status' level=AlertLevel text=STRING ( '{' attributes += StatusStatusSheetAttribute* '}' ) ?
		public Group getGroup() { return cGroup; }
		
		//'status'
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }
		
		//level=AlertLevel
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//AlertLevel
		public RuleCall getLevelAlertLevelEnumRuleCall_1_0() { return cLevelAlertLevelEnumRuleCall_1_0; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
		
		//( '{' attributes += StatusStatusSheetAttribute* '}' ) ?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes += StatusStatusSheetAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//StatusStatusSheetAttribute
		public RuleCall getAttributesStatusStatusSheetAttributeParserRuleCall_3_1_0() { return cAttributesStatusStatusSheetAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class StatusStatusSheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusStatusSheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAuthorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDetailsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFlagsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSummaryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StatusStatusSheetAttribute:
		//    Author |
		//    Details |
		//    Flags |
		//    Summary;
		@Override public ParserRule getRule() { return rule; }
		
		//Author |
		//Details |
		//Flags |
		//Summary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Author
		public RuleCall getAuthorParserRuleCall_0() { return cAuthorParserRuleCall_0; }
		
		//Details
		public RuleCall getDetailsParserRuleCall_1() { return cDetailsParserRuleCall_1; }
		
		//Flags
		public RuleCall getFlagsParserRuleCall_2() { return cFlagsParserRuleCall_2; }
		
		//Summary
		public RuleCall getSummaryParserRuleCall_3() { return cSummaryParserRuleCall_3; }
	}
	public class StatusTimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusTimesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelAlertLevelEnumRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesStatusTimesheetAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/status.timesheet.html
		//StatusTimesheet: 'status' level=AlertLevel text=STRING ( '{' attributes += StatusTimesheetAttribute* '}' ) ?;
		@Override public ParserRule getRule() { return rule; }
		
		//'status' level=AlertLevel text=STRING ( '{' attributes += StatusTimesheetAttribute* '}' ) ?
		public Group getGroup() { return cGroup; }
		
		//'status'
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }
		
		//level=AlertLevel
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//AlertLevel
		public RuleCall getLevelAlertLevelEnumRuleCall_1_0() { return cLevelAlertLevelEnumRuleCall_1_0; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
		
		//( '{' attributes += StatusTimesheetAttribute* '}' ) ?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes += StatusTimesheetAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//StatusTimesheetAttribute
		public RuleCall getAttributesStatusTimesheetAttributeParserRuleCall_3_1_0() { return cAttributesStatusTimesheetAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class StatusTimesheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusTimesheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDetailsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFlagsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSummaryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StatusTimesheetAttribute: Details | Flags | Summary;
		@Override public ParserRule getRule() { return rule; }
		
		//Details | Flags | Summary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Details
		public RuleCall getDetailsParserRuleCall_0() { return cDetailsParserRuleCall_0; }
		
		//Flags
		public RuleCall getFlagsParserRuleCall_1() { return cFlagsParserRuleCall_1; }
		
		//Summary
		public RuleCall getSummaryParserRuleCall_2() { return cSummaryParserRuleCall_2; }
	}
	public class StatusSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatussheetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalInterval4ParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesStatusSheetAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/statussheet.html
		//StatusSheet: 'statussheet' resource=[Resource]
		//    interval=Interval4 ('{' (attributes += StatusSheetAttribute*) '}')? ;
		@Override public ParserRule getRule() { return rule; }
		
		//'statussheet' resource=[Resource]
		//   interval=Interval4 ('{' (attributes += StatusSheetAttribute*) '}')?
		public Group getGroup() { return cGroup; }
		
		//'statussheet'
		public Keyword getStatussheetKeyword_0() { return cStatussheetKeyword_0; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
		
		//interval=Interval4
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//Interval4
		public RuleCall getIntervalInterval4ParserRuleCall_2_0() { return cIntervalInterval4ParserRuleCall_2_0; }
		
		//('{' (attributes += StatusSheetAttribute*) '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(attributes += StatusSheetAttribute*)
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//StatusSheetAttribute
		public RuleCall getAttributesStatusSheetAttributeParserRuleCall_3_1_0() { return cAttributesStatusSheetAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class StatusSheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusSheetAttribute");
		private final RuleCall cTaskStatusSheetParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StatusSheetAttribute:
		//    TaskStatusSheet
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//TaskStatusSheet
		public RuleCall getTaskStatusSheetParserRuleCall() { return cTaskStatusSheetParserRuleCall; }
	}
	public class StatusSheetReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusSheetReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatussheetreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesStatusSheetReportAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/statussheetreport.html
		//StatusSheetReport: 'statussheetreport' filename=STRING
		//        ('{' (attributes+=StatusSheetReportAttribute*) '}' )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'statussheetreport' filename=STRING
		//       ('{' (attributes+=StatusSheetReportAttribute*) '}' )?
		public Group getGroup() { return cGroup; }
		
		//'statussheetreport'
		public Keyword getStatussheetreportKeyword_0() { return cStatussheetreportKeyword_0; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }
		
		//('{' (attributes+=StatusSheetReportAttribute*) '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//(attributes+=StatusSheetReportAttribute*)
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//StatusSheetReportAttribute
		public RuleCall getAttributesStatusSheetReportAttributeParserRuleCall_2_1_0() { return cAttributesStatusSheetReportAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class StatusSheetReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.StatusSheetReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHideResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHideTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPeriodParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSortResourcesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSortTasksParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStartParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//StatusSheetReportAttribute:
		//        End
		//        | HideResource
		//        | HideTask
		//        | Period
		//        | SortResources
		//        | SortTasks
		//        | Start
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//End
		//| HideResource
		//| HideTask
		//| Period
		//| SortResources
		//| SortTasks
		//| Start
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//HideResource
		public RuleCall getHideResourceParserRuleCall_1() { return cHideResourceParserRuleCall_1; }
		
		//HideTask
		public RuleCall getHideTaskParserRuleCall_2() { return cHideTaskParserRuleCall_2; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_3() { return cPeriodParserRuleCall_3; }
		
		//SortResources
		public RuleCall getSortResourcesParserRuleCall_4() { return cSortResourcesParserRuleCall_4; }
		
		//SortTasks
		public RuleCall getSortTasksParserRuleCall_5() { return cSortTasksParserRuleCall_5; }
		
		//Start
		public RuleCall getStartParserRuleCall_6() { return cStartParserRuleCall_6; }
	}
	public class SummaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Summary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSummaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cRichTextParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/strict.projection.html
		//// deprecated.
		//// http://www.taskjuggler.org/tj3/manual/summary.html
		//// TODO: limit to 240 characters
		//Summary: 'summary' RichText;
		@Override public ParserRule getRule() { return rule; }
		
		//'summary' RichText
		public Group getGroup() { return cGroup; }
		
		//'summary'
		public Keyword getSummaryKeyword_0() { return cSummaryKeyword_0; }
		
		//RichText
		public RuleCall getRichTextParserRuleCall_1() { return cRichTextParserRuleCall_1; }
	}
	public class SupplementAccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SupplementAccount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAccountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAccountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAccountAccountCrossReference_2_0 = (CrossReference)cAccountAssignment_2.eContents().get(0);
		private final RuleCall cAccountAccountIDTerminalRuleCall_2_0_1 = (RuleCall)cAccountAccountCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesAccountAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.html
		//SupplementAccount:
		//     'supplement' 'account' account=[Account] ('{' attributes+=AccountAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'supplement' 'account' account=[Account] ('{' attributes+=AccountAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'supplement'
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }
		
		//'account'
		public Keyword getAccountKeyword_1() { return cAccountKeyword_1; }
		
		//account=[Account]
		public Assignment getAccountAssignment_2() { return cAccountAssignment_2; }
		
		//[Account]
		public CrossReference getAccountAccountCrossReference_2_0() { return cAccountAccountCrossReference_2_0; }
		
		//ID
		public RuleCall getAccountAccountIDTerminalRuleCall_2_0_1() { return cAccountAccountIDTerminalRuleCall_2_0_1; }
		
		//('{' attributes+=AccountAttribute* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=AccountAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//AccountAttribute
		public RuleCall getAttributesAccountAttributeParserRuleCall_3_1_0() { return cAttributesAccountAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class SupplementReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SupplementReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cReportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReportAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReportReportCrossReference_2_0 = (CrossReference)cReportAssignment_2.eContents().get(0);
		private final RuleCall cReportReportIDTerminalRuleCall_2_0_1 = (RuleCall)cReportReportCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesReportAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.html
		//SupplementReport:
		//        'supplement' 'report' report=[Report] ('{' attributes+=ReportAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'supplement' 'report' report=[Report] ('{' attributes+=ReportAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'supplement'
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }
		
		//'report'
		public Keyword getReportKeyword_1() { return cReportKeyword_1; }
		
		//report=[Report]
		public Assignment getReportAssignment_2() { return cReportAssignment_2; }
		
		//[Report]
		public CrossReference getReportReportCrossReference_2_0() { return cReportReportCrossReference_2_0; }
		
		//ID
		public RuleCall getReportReportIDTerminalRuleCall_2_0_1() { return cReportReportIDTerminalRuleCall_2_0_1; }
		
		//('{' attributes+=ReportAttribute* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=ReportAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//ReportAttribute
		public RuleCall getAttributesReportAttributeParserRuleCall_3_1_0() { return cAttributesReportAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class SupplementResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SupplementResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cResourceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cResourceResourceCrossReference_2_0 = (CrossReference)cResourceAssignment_2.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_2_0_1 = (RuleCall)cResourceResourceCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesResourceAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SupplementResource:
		//        'supplement' 'resource' resource=[Resource] ( '{' attributes+=ResourceAttribute*    '}'    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'supplement' 'resource' resource=[Resource] ( '{' attributes+=ResourceAttribute*	'}'	)?
		public Group getGroup() { return cGroup; }
		
		//'supplement'
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }
		
		//'resource'
		public Keyword getResourceKeyword_1() { return cResourceKeyword_1; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_2() { return cResourceAssignment_2; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_2_0() { return cResourceResourceCrossReference_2_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_2_0_1() { return cResourceResourceIDTerminalRuleCall_2_0_1; }
		
		//( '{' attributes+=ResourceAttribute*	'}'	)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=ResourceAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//ResourceAttribute
		public RuleCall getAttributesResourceAttributeParserRuleCall_3_1_0() { return cAttributesResourceAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class SupplementTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SupplementTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSupplementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_2_0 = (CrossReference)cTaskAssignment_2.eContents().get(0);
		private final RuleCall cTaskTaskTaskPathParserRuleCall_2_0_1 = (RuleCall)cTaskTaskCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTaskAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
		//SupplementTask:
		//    'supplement' 'task' task=[Task|TaskPath] ( '{' attributes+=TaskAttribute*    '}'    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'supplement' 'task' task=[Task|TaskPath] ( '{' attributes+=TaskAttribute*	'}'	)?
		public Group getGroup() { return cGroup; }
		
		//'supplement'
		public Keyword getSupplementKeyword_0() { return cSupplementKeyword_0; }
		
		//'task'
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//task=[Task|TaskPath]
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }
		
		//[Task|TaskPath]
		public CrossReference getTaskTaskCrossReference_2_0() { return cTaskTaskCrossReference_2_0; }
		
		//TaskPath
		public RuleCall getTaskTaskTaskPathParserRuleCall_2_0_1() { return cTaskTaskTaskPathParserRuleCall_2_0_1; }
		
		//( '{' attributes+=TaskAttribute*	'}'	)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=TaskAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//TaskAttribute
		public RuleCall getAttributesTaskAttributeParserRuleCall_3_1_0() { return cAttributesTaskAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class TagFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TagFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cHideResourceAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cHideResourceHideResourceParserRuleCall_3_0_1_0 = (RuleCall)cHideResourceAssignment_3_0_1.eContents().get(0);
		private final Assignment cHideTaskAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cHideTaskHideTaskParserRuleCall_3_1_0 = (RuleCall)cHideTaskAssignment_3_1.eContents().get(0);
		private final Assignment cRollupResourceAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cRollupResourceRollupResourceParserRuleCall_3_2_0 = (RuleCall)cRollupResourceAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Assignment cRollupTaskAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cRollupTaskRollupTaskParserRuleCall_3_3_0_0 = (RuleCall)cRollupTaskAssignment_3_3_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/supplement.html
		//// http://www.taskjuggler.org/tj3/manual/supplement.resource.html
		//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
		//// TODO
		//// http://www.taskjuggler.org/tj3/manual/tagfile.html
		//TagFile: 'tagfile' (id=ID)? filename = STRING
		//    ('{' hideResource = HideResource?
		//        & hideTask = HideTask?
		//        & rollupResource = RollupResource?
		//        & rollupTask = RollupTask?
		//        '}'
		//    )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'tagfile' (id=ID)? filename = STRING
		//   ('{' hideResource = HideResource?
		//       & hideTask = HideTask?
		//       & rollupResource = RollupResource?
		//       & rollupTask = RollupTask?
		//       '}'
		//   )?
		public Group getGroup() { return cGroup; }
		
		//'tagfile'
		public Keyword getTagfileKeyword_0() { return cTagfileKeyword_0; }
		
		//(id=ID)?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//filename = STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }
		
		//('{' hideResource = HideResource?
		//    & hideTask = HideTask?
		//    & rollupResource = RollupResource?
		//    & rollupTask = RollupTask?
		//    '}'
		//)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//'{' hideResource = HideResource?
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//hideResource = HideResource?
		public Assignment getHideResourceAssignment_3_0_1() { return cHideResourceAssignment_3_0_1; }
		
		//HideResource
		public RuleCall getHideResourceHideResourceParserRuleCall_3_0_1_0() { return cHideResourceHideResourceParserRuleCall_3_0_1_0; }
		
		//hideTask = HideTask?
		public Assignment getHideTaskAssignment_3_1() { return cHideTaskAssignment_3_1; }
		
		//HideTask
		public RuleCall getHideTaskHideTaskParserRuleCall_3_1_0() { return cHideTaskHideTaskParserRuleCall_3_1_0; }
		
		//rollupResource = RollupResource?
		public Assignment getRollupResourceAssignment_3_2() { return cRollupResourceAssignment_3_2; }
		
		//RollupResource
		public RuleCall getRollupResourceRollupResourceParserRuleCall_3_2_0() { return cRollupResourceRollupResourceParserRuleCall_3_2_0; }
		
		//rollupTask = RollupTask?
		//       '}'
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//rollupTask = RollupTask?
		public Assignment getRollupTaskAssignment_3_3_0() { return cRollupTaskAssignment_3_3_0; }
		
		//RollupTask
		public RuleCall getRollupTaskRollupTaskParserRuleCall_3_3_0_0() { return cRollupTaskRollupTaskParserRuleCall_3_3_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3_1() { return cRightCurlyBracketKeyword_3_3_1; }
	}
	public class TaskStatusSheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskStatusSheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskAbsoluteIdParserRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesTaskStatusSheetAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/task.statussheet.html
		//TaskStatusSheet: 'task' task=[Task|AbsoluteId] ('{' attributes += TaskStatusSheetAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' task=[Task|AbsoluteId] ('{' attributes += TaskStatusSheetAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//task=[Task|AbsoluteId]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task|AbsoluteId]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//AbsoluteId
		public RuleCall getTaskTaskAbsoluteIdParserRuleCall_1_0_1() { return cTaskTaskAbsoluteIdParserRuleCall_1_0_1; }
		
		//('{' attributes += TaskStatusSheetAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes += TaskStatusSheetAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//TaskStatusSheetAttribute
		public RuleCall getAttributesTaskStatusSheetAttributeParserRuleCall_2_1_0() { return cAttributesTaskStatusSheetAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class TaskStatusSheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskStatusSheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTaskStatusSheetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatusSheetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TaskStatusSheetAttribute: TaskStatusSheet | StatusStatusSheet;
		@Override public ParserRule getRule() { return rule; }
		
		//TaskStatusSheet | StatusStatusSheet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TaskStatusSheet
		public RuleCall getTaskStatusSheetParserRuleCall_0() { return cTaskStatusSheetParserRuleCall_0; }
		
		//StatusStatusSheet
		public RuleCall getStatusStatusSheetParserRuleCall_1() { return cStatusStatusSheetParserRuleCall_1; }
	}
	public class TaskTimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskTimesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesTaskTimesheetAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
		//TaskTimesheet: 'task' task=[Task] ('{' attributes += TaskTimesheetAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' task=[Task] ('{' attributes += TaskTimesheetAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
		
		//('{' attributes += TaskTimesheetAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes += TaskTimesheetAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//TaskTimesheetAttribute
		public RuleCall getAttributesTaskTimesheetAttributeParserRuleCall_2_1_0() { return cAttributesTaskTimesheetAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class TaskTimesheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskTimesheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPriorityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRemainingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatusTimesheetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWorkParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
		//TaskTimesheetAttribute:
		//    End
		//    | Priority
		//    | Remaining
		//    | StatusTimesheet
		//    | Work
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//End
		//| Priority
		//| Remaining
		//| StatusTimesheet
		//| Work
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//Priority
		public RuleCall getPriorityParserRuleCall_1() { return cPriorityParserRuleCall_1; }
		
		//Remaining
		public RuleCall getRemainingParserRuleCall_2() { return cRemainingParserRuleCall_2; }
		
		//StatusTimesheet
		public RuleCall getStatusTimesheetParserRuleCall_3() { return cStatusTimesheetParserRuleCall_3; }
		
		//Work
		public RuleCall getWorkParserRuleCall_4() { return cWorkParserRuleCall_4; }
	}
	public class TaskAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskattributesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cAllAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cAllAsteriskKeyword_1_0_0 = (Keyword)cAllAssignment_1_0.eContents().get(0);
		private final Assignment cNoneAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cNoneHyphenMinusKeyword_1_1_0 = (Keyword)cNoneAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cTaskAttributesAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_2_1 = (UnorderedGroup)cGroup_1_2.eContents().get(1);
		private final Assignment cResponsibleAssignment_1_2_1_0 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(0);
		private final Keyword cResponsibleResponsibleKeyword_1_2_1_0_0 = (Keyword)cResponsibleAssignment_1_2_1_0.eContents().get(0);
		private final Assignment cFlagsAssignment_1_2_1_1 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(1);
		private final Keyword cFlagsFlagsKeyword_1_2_1_1_0 = (Keyword)cFlagsAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cMaxstartAssignment_1_2_1_2 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(2);
		private final Keyword cMaxstartMaxstartKeyword_1_2_1_2_0 = (Keyword)cMaxstartAssignment_1_2_1_2.eContents().get(0);
		private final Assignment cMaxendAssignment_1_2_1_3 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(3);
		private final Keyword cMaxendMaxendKeyword_1_2_1_3_0 = (Keyword)cMaxendAssignment_1_2_1_3.eContents().get(0);
		private final Assignment cPriorityAssignment_1_2_1_4 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(4);
		private final Keyword cPriorityPriorityKeyword_1_2_1_4_0 = (Keyword)cPriorityAssignment_1_2_1_4.eContents().get(0);
		private final Assignment cBookingAssignment_1_2_1_5 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(5);
		private final Keyword cBookingBookingKeyword_1_2_1_5_0 = (Keyword)cBookingAssignment_1_2_1_5.eContents().get(0);
		private final Assignment cNoteAssignment_1_2_1_6 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(6);
		private final Keyword cNoteNoteKeyword_1_2_1_6_0 = (Keyword)cNoteAssignment_1_2_1_6.eContents().get(0);
		private final Assignment cMinstartAssignment_1_2_1_7 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(7);
		private final Keyword cMinstartMinstartKeyword_1_2_1_7_0 = (Keyword)cMinstartAssignment_1_2_1_7.eContents().get(0);
		private final Assignment cMinendAssignment_1_2_1_8 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(8);
		private final Keyword cMinendMinendKeyword_1_2_1_8_0 = (Keyword)cMinendAssignment_1_2_1_8.eContents().get(0);
		private final Assignment cCompleteAssignment_1_2_1_9 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(9);
		private final Keyword cCompleteCompleteKeyword_1_2_1_9_0 = (Keyword)cCompleteAssignment_1_2_1_9.eContents().get(0);
		private final Assignment cDependsAssignment_1_2_1_10 = (Assignment)cUnorderedGroup_1_2_1.eContents().get(10);
		private final Keyword cDependsDependsKeyword_1_2_1_10_0 = (Keyword)cDependsAssignment_1_2_1_10.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/taskattributes.html
		//TaskAttributes: 'taskattributes' (all ?= '*' | none ?= '-' |
		//        {TaskAttributes} (responsible ?= 'responsible'? &
		//             flags ?= 'flags'? &
		//             maxstart ?= 'maxstart'? &
		//             maxend ?= 'maxend'? &
		//             priority ?= 'priority'? &
		//             booking ?= 'booking'? &
		//             note ?= 'note'? &
		//             minstart ?= 'minstart'? &
		//             minend ?= 'minend'? &
		//             complete ?= 'complete'? &
		//             depends ?= 'depends'?)
		//);
		@Override public ParserRule getRule() { return rule; }
		
		// 'taskattributes' (all ?= '*' | none ?= '-' |
		//        {TaskAttributes} (responsible ?= 'responsible'? &
		//             flags ?= 'flags'? &
		//             maxstart ?= 'maxstart'? &
		//             maxend ?= 'maxend'? &
		//             priority ?= 'priority'? &
		//             booking ?= 'booking'? &
		//             note ?= 'note'? &
		//             minstart ?= 'minstart'? &
		//             minend ?= 'minend'? &
		//             complete ?= 'complete'? &
		//             depends ?= 'depends'?)
		//)
		public Group getGroup() { return cGroup; }
		
		//'taskattributes'
		public Keyword getTaskattributesKeyword_0() { return cTaskattributesKeyword_0; }
		
		// (all ?= '*' | none ?= '-' |
		//        {TaskAttributes} (responsible ?= 'responsible'? &
		//             flags ?= 'flags'? &
		//             maxstart ?= 'maxstart'? &
		//             maxend ?= 'maxend'? &
		//             priority ?= 'priority'? &
		//             booking ?= 'booking'? &
		//             note ?= 'note'? &
		//             minstart ?= 'minstart'? &
		//             minend ?= 'minend'? &
		//             complete ?= 'complete'? &
		//             depends ?= 'depends'?)
		//)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//all ?= '*'
		public Assignment getAllAssignment_1_0() { return cAllAssignment_1_0; }
		
		//'*'
		public Keyword getAllAsteriskKeyword_1_0_0() { return cAllAsteriskKeyword_1_0_0; }
		
		//none ?= '-'
		public Assignment getNoneAssignment_1_1() { return cNoneAssignment_1_1; }
		
		//'-'
		public Keyword getNoneHyphenMinusKeyword_1_1_0() { return cNoneHyphenMinusKeyword_1_1_0; }
		
		//{TaskAttributes} (responsible ?= 'responsible'? &
		//     flags ?= 'flags'? &
		//     maxstart ?= 'maxstart'? &
		//     maxend ?= 'maxend'? &
		//     priority ?= 'priority'? &
		//     booking ?= 'booking'? &
		//     note ?= 'note'? &
		//     minstart ?= 'minstart'? &
		//     minend ?= 'minend'? &
		//     complete ?= 'complete'? &
		//     depends ?= 'depends'?)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{TaskAttributes}
		public Action getTaskAttributesAction_1_2_0() { return cTaskAttributesAction_1_2_0; }
		
		//(responsible ?= 'responsible'? &
		//            flags ?= 'flags'? &
		//            maxstart ?= 'maxstart'? &
		//            maxend ?= 'maxend'? &
		//            priority ?= 'priority'? &
		//            booking ?= 'booking'? &
		//            note ?= 'note'? &
		//            minstart ?= 'minstart'? &
		//            minend ?= 'minend'? &
		//            complete ?= 'complete'? &
		//            depends ?= 'depends'?)
		public UnorderedGroup getUnorderedGroup_1_2_1() { return cUnorderedGroup_1_2_1; }
		
		//responsible ?= 'responsible'?
		public Assignment getResponsibleAssignment_1_2_1_0() { return cResponsibleAssignment_1_2_1_0; }
		
		//'responsible'
		public Keyword getResponsibleResponsibleKeyword_1_2_1_0_0() { return cResponsibleResponsibleKeyword_1_2_1_0_0; }
		
		//flags ?= 'flags'?
		public Assignment getFlagsAssignment_1_2_1_1() { return cFlagsAssignment_1_2_1_1; }
		
		//'flags'
		public Keyword getFlagsFlagsKeyword_1_2_1_1_0() { return cFlagsFlagsKeyword_1_2_1_1_0; }
		
		//maxstart ?= 'maxstart'?
		public Assignment getMaxstartAssignment_1_2_1_2() { return cMaxstartAssignment_1_2_1_2; }
		
		//'maxstart'
		public Keyword getMaxstartMaxstartKeyword_1_2_1_2_0() { return cMaxstartMaxstartKeyword_1_2_1_2_0; }
		
		//maxend ?= 'maxend'?
		public Assignment getMaxendAssignment_1_2_1_3() { return cMaxendAssignment_1_2_1_3; }
		
		//'maxend'
		public Keyword getMaxendMaxendKeyword_1_2_1_3_0() { return cMaxendMaxendKeyword_1_2_1_3_0; }
		
		//priority ?= 'priority'?
		public Assignment getPriorityAssignment_1_2_1_4() { return cPriorityAssignment_1_2_1_4; }
		
		//'priority'
		public Keyword getPriorityPriorityKeyword_1_2_1_4_0() { return cPriorityPriorityKeyword_1_2_1_4_0; }
		
		//booking ?= 'booking'?
		public Assignment getBookingAssignment_1_2_1_5() { return cBookingAssignment_1_2_1_5; }
		
		//'booking'
		public Keyword getBookingBookingKeyword_1_2_1_5_0() { return cBookingBookingKeyword_1_2_1_5_0; }
		
		//note ?= 'note'?
		public Assignment getNoteAssignment_1_2_1_6() { return cNoteAssignment_1_2_1_6; }
		
		//'note'
		public Keyword getNoteNoteKeyword_1_2_1_6_0() { return cNoteNoteKeyword_1_2_1_6_0; }
		
		//minstart ?= 'minstart'?
		public Assignment getMinstartAssignment_1_2_1_7() { return cMinstartAssignment_1_2_1_7; }
		
		//'minstart'
		public Keyword getMinstartMinstartKeyword_1_2_1_7_0() { return cMinstartMinstartKeyword_1_2_1_7_0; }
		
		//minend ?= 'minend'?
		public Assignment getMinendAssignment_1_2_1_8() { return cMinendAssignment_1_2_1_8; }
		
		//'minend'
		public Keyword getMinendMinendKeyword_1_2_1_8_0() { return cMinendMinendKeyword_1_2_1_8_0; }
		
		//complete ?= 'complete'?
		public Assignment getCompleteAssignment_1_2_1_9() { return cCompleteAssignment_1_2_1_9; }
		
		//'complete'
		public Keyword getCompleteCompleteKeyword_1_2_1_9_0() { return cCompleteCompleteKeyword_1_2_1_9_0; }
		
		//depends ?= 'depends'?
		public Assignment getDependsAssignment_1_2_1_10() { return cDependsAssignment_1_2_1_10; }
		
		//'depends'
		public Keyword getDependsDependsKeyword_1_2_1_10_0() { return cDependsDependsKeyword_1_2_1_10_0; }
	}
	public class TaskPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskprefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/taskprefix.html
		//TaskPrefix: 'taskprefix' task=[Task];
		@Override public ParserRule getRule() { return rule; }
		
		//'taskprefix' task=[Task]
		public Group getGroup() { return cGroup; }
		
		//'taskprefix'
		public Keyword getTaskprefixKeyword_0() { return cTaskprefixKeyword_0; }
		
		//task=[Task]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1; }
	}
	public class TaskReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/taskreport.html
		//TaskReport: 'taskreport' Report;
		@Override public ParserRule getRule() { return rule; }
		
		//'taskreport' Report
		public Group getGroup() { return cGroup; }
		
		//'taskreport'
		public Keyword getTaskreportKeyword_0() { return cTaskreportKeyword_0; }
		
		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}
	public class TaskRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskrootKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0 = (CrossReference)cTaskAssignment_1.eContents().get(0);
		private final RuleCall cTaskTaskAbsoluteIdParserRuleCall_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/taskroot.html
		//TaskRoot: 'taskroot' task=[Task|AbsoluteId];
		@Override public ParserRule getRule() { return rule; }
		
		//'taskroot' task=[Task|AbsoluteId]
		public Group getGroup() { return cGroup; }
		
		//'taskroot'
		public Keyword getTaskrootKeyword_0() { return cTaskrootKeyword_0; }
		
		//task=[Task|AbsoluteId]
		public Assignment getTaskAssignment_1() { return cTaskAssignment_1; }
		
		//[Task|AbsoluteId]
		public CrossReference getTaskTaskCrossReference_1_0() { return cTaskTaskCrossReference_1_0; }
		
		//AbsoluteId
		public RuleCall getTaskTaskAbsoluteIdParserRuleCall_1_0_1() { return cTaskTaskAbsoluteIdParserRuleCall_1_0_1; }
	}
	public class TextReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TextReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReportParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/textreport.html
		//TextReport: 'textreport' Report;
		@Override public ParserRule getRule() { return rule; }
		
		//'textreport' Report
		public Group getGroup() { return cGroup; }
		
		//'textreport'
		public Keyword getTextreportKeyword_0() { return cTextreportKeyword_0; }
		
		//Report
		public RuleCall getReportParserRuleCall_1() { return cReportParserRuleCall_1; }
	}
	public class TimeFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TimeFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeformatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimeformatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeformatSTRINGTerminalRuleCall_1_0 = (RuleCall)cTimeformatAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timeformat.html
		//// TODO: specify format string syntax ?
		//TimeFormat: 'timeformat' timeformat=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'timeformat' timeformat=STRING
		public Group getGroup() { return cGroup; }
		
		//'timeformat'
		public Keyword getTimeformatKeyword_0() { return cTimeformatKeyword_0; }
		
		//timeformat=STRING
		public Assignment getTimeformatAssignment_1() { return cTimeformatAssignment_1; }
		
		//STRING
		public RuleCall getTimeformatSTRINGTerminalRuleCall_1_0() { return cTimeformatSTRINGTerminalRuleCall_1_0; }
	}
	public class TimeoffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Timeoff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoffKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timeoff.nikureport.html
		//Timeoff: 'timeoff' id = STRING name = STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'timeoff' id = STRING name = STRING
		public Group getGroup() { return cGroup; }
		
		//'timeoff'
		public Keyword getTimeoffKeyword_0() { return cTimeoffKeyword_0; }
		
		//id = STRING
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_1_0() { return cIdSTRINGTerminalRuleCall_1_0; }
		
		//name = STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}
	public class TimesheetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Timesheet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimesheetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cResourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceResourceCrossReference_1_0 = (CrossReference)cResourceAssignment_1.eContents().get(0);
		private final RuleCall cResourceResourceIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceResourceCrossReference_1_0.eContents().get(1);
		private final Assignment cIntervalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalInterval4ParserRuleCall_2_0 = (RuleCall)cIntervalAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttributesTimesheetAttributeParserRuleCall_3_1_0 = (RuleCall)cAttributesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheet.html
		//Timesheet: 'timesheet' resource=[Resource] interval=Interval4
		//    ('{' attributes+=TimesheetAttribute* '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'timesheet' resource=[Resource] interval=Interval4
		//   ('{' attributes+=TimesheetAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'timesheet'
		public Keyword getTimesheetKeyword_0() { return cTimesheetKeyword_0; }
		
		//resource=[Resource]
		public Assignment getResourceAssignment_1() { return cResourceAssignment_1; }
		
		//[Resource]
		public CrossReference getResourceResourceCrossReference_1_0() { return cResourceResourceCrossReference_1_0; }
		
		//ID
		public RuleCall getResourceResourceIDTerminalRuleCall_1_0_1() { return cResourceResourceIDTerminalRuleCall_1_0_1; }
		
		//interval=Interval4
		public Assignment getIntervalAssignment_2() { return cIntervalAssignment_2; }
		
		//Interval4
		public RuleCall getIntervalInterval4ParserRuleCall_2_0() { return cIntervalInterval4ParserRuleCall_2_0; }
		
		//('{' attributes+=TimesheetAttribute* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//attributes+=TimesheetAttribute*
		public Assignment getAttributesAssignment_3_1() { return cAttributesAssignment_3_1; }
		
		//TimesheetAttribute
		public RuleCall getAttributesTimesheetAttributeParserRuleCall_3_1_0() { return cAttributesTimesheetAttributeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class TimesheetAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TimesheetAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNewTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShiftTimesheetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatusTimesheetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTaskTimesheetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheet.html
		//TimesheetAttribute:
		//    NewTask | ShiftTimesheet | StatusTimesheet | TaskTimesheet;
		@Override public ParserRule getRule() { return rule; }
		
		//NewTask | ShiftTimesheet | StatusTimesheet | TaskTimesheet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NewTask
		public RuleCall getNewTaskParserRuleCall_0() { return cNewTaskParserRuleCall_0; }
		
		//ShiftTimesheet
		public RuleCall getShiftTimesheetParserRuleCall_1() { return cShiftTimesheetParserRuleCall_1; }
		
		//StatusTimesheet
		public RuleCall getStatusTimesheetParserRuleCall_2() { return cStatusTimesheetParserRuleCall_2; }
		
		//TaskTimesheet
		public RuleCall getTaskTimesheetParserRuleCall_3() { return cTaskTimesheetParserRuleCall_3; }
	}
	public class TimesheetReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TimesheetReport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimesheetreportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesTimesheetReportAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/timesheetreport.html
		//TimesheetReport: 'timesheetreport' filename=STRING
		//     ('{' attributes+=TimesheetReportAttribute* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'timesheetreport' filename=STRING
		//    ('{' attributes+=TimesheetReportAttribute* '}')?
		public Group getGroup() { return cGroup; }
		
		//'timesheetreport'
		public Keyword getTimesheetreportKeyword_0() { return cTimesheetreportKeyword_0; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }
		
		//('{' attributes+=TimesheetReportAttribute* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//attributes+=TimesheetReportAttribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }
		
		//TimesheetReportAttribute
		public RuleCall getAttributesTimesheetReportAttributeParserRuleCall_2_1_0() { return cAttributesTimesheetReportAttributeParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class TimesheetReportAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TimesheetReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHideResourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPeriodParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStartParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TimesheetReportAttribute:
		//    End | HideResource | Period | Start;
		@Override public ParserRule getRule() { return rule; }
		
		//End | HideResource | Period | Start
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//HideResource
		public RuleCall getHideResourceParserRuleCall_1() { return cHideResourceParserRuleCall_1; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_2() { return cPeriodParserRuleCall_2; }
		
		//Start
		public RuleCall getStartParserRuleCall_3() { return cStartParserRuleCall_3; }
	}
	public class TimezoneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Timezone");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimezoneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimezoneAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimezoneSTRINGTerminalRuleCall_1_0 = (RuleCall)cTimezoneAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/timezone.export.html
		//// http://www.taskjuggler.org/tj3/manual/timezone.html
		//// http://www.taskjuggler.org/tj3/manual/timezone.shift.html
		//Timezone: 'timezone' timezone=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'timezone' timezone=STRING
		public Group getGroup() { return cGroup; }
		
		//'timezone'
		public Keyword getTimezoneKeyword_0() { return cTimezoneKeyword_0; }
		
		//timezone=STRING
		public Assignment getTimezoneAssignment_1() { return cTimezoneAssignment_1; }
		
		//STRING
		public RuleCall getTimezoneSTRINGTerminalRuleCall_1_0() { return cTimezoneSTRINGTerminalRuleCall_1_0; }
	}
	public class TimingResolutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TimingResolution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimingresolutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimingResolutionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimingResolutionINTTerminalRuleCall_1_0 = (RuleCall)cTimingResolutionAssignment_1.eContents().get(0);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/timingresolution.html
		//TimingResolution: 'timingresolution' timingResolution=INT 'min';
		@Override public ParserRule getRule() { return rule; }
		
		//'timingresolution' timingResolution=INT 'min'
		public Group getGroup() { return cGroup; }
		
		//'timingresolution'
		public Keyword getTimingresolutionKeyword_0() { return cTimingresolutionKeyword_0; }
		
		//timingResolution=INT
		public Assignment getTimingResolutionAssignment_1() { return cTimingResolutionAssignment_1; }
		
		//INT
		public RuleCall getTimingResolutionINTTerminalRuleCall_1_0() { return cTimingResolutionINTTerminalRuleCall_1_0; }
		
		//'min'
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/title.column.html
		//// http://www.taskjuggler.org/tj3/manual/title.html
		//Title: 'title' title=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'title' title=STRING
		public Group getGroup() { return cGroup; }
		
		//'title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
	}
	public class ToolTipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ToolTip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTooltipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cTipAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipSTRINGTerminalRuleCall_2_0 = (RuleCall)cTipAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/tooltip.column.html
		//ToolTip: 'tooltip' expression=LogicalExpression tip=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'tooltip' expression=LogicalExpression tip=STRING
		public Group getGroup() { return cGroup; }
		
		//'tooltip'
		public Keyword getTooltipKeyword_0() { return cTooltipKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
		
		//tip=STRING
		public Assignment getTipAssignment_2() { return cTipAssignment_2; }
		
		//STRING
		public RuleCall getTipSTRINGTerminalRuleCall_2_0() { return cTipSTRINGTerminalRuleCall_2_0; }
	}
	public class TrackingScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TrackingScenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrackingscenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cScenarioScenarioCrossReference_1_0 = (CrossReference)cScenarioAssignment_1.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_1_0_1 = (RuleCall)cScenarioScenarioCrossReference_1_0.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/trackingscenario.html
		//TrackingScenario: 'trackingscenario' scenario = [Scenario];
		@Override public ParserRule getRule() { return rule; }
		
		//'trackingscenario' scenario = [Scenario]
		public Group getGroup() { return cGroup; }
		
		//'trackingscenario'
		public Keyword getTrackingscenarioKeyword_0() { return cTrackingscenarioKeyword_0; }
		
		//scenario = [Scenario]
		public Assignment getScenarioAssignment_1() { return cScenarioAssignment_1; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_1_0() { return cScenarioScenarioCrossReference_1_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_1_0_1() { return cScenarioScenarioIDTerminalRuleCall_1_0_1; }
	}
	public class TreeLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TreeLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTreelevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLevelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLevelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLevelAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/treelevel.html
		//// TODO
		//TreeLevel: 'treelevel' level=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'treelevel' level=STRING
		public Group getGroup() { return cGroup; }
		
		//'treelevel'
		public Keyword getTreelevelKeyword_0() { return cTreelevelKeyword_0; }
		
		//level=STRING
		public Assignment getLevelAssignment_1() { return cLevelAssignment_1; }
		
		//STRING
		public RuleCall getLevelSTRINGTerminalRuleCall_1_0() { return cLevelSTRINGTerminalRuleCall_1_0; }
	}
	public class VacationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Vacation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVacationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalsInterval3ParserRuleCall_2_0 = (RuleCall)cIntervalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntervalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_1_0 = (RuleCall)cIntervalsAssignment_3_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/vacation.html
		//Vacation:
		//    'vacation' name=STRING intervals+=Interval3 (',' intervals+=Interval3)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'vacation' name=STRING intervals+=Interval3 (',' intervals+=Interval3)*
		public Group getGroup() { return cGroup; }
		
		//'vacation'
		public Keyword getVacationKeyword_0() { return cVacationKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_2() { return cIntervalsAssignment_2; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_2_0() { return cIntervalsInterval3ParserRuleCall_2_0; }
		
		//(',' intervals+=Interval3)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_1() { return cIntervalsAssignment_3_1; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_1_0() { return cIntervalsInterval3ParserRuleCall_3_1_0; }
	}
	public class VacationShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.VacationShift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVacationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVacationAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIntervalsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_0_0 = (RuleCall)cIntervalsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_1_1_0 = (RuleCall)cIntervalsAssignment_3_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/vacation.shift.html
		//VacationShift returns Vacation:
		//    'vacation' {Vacation} name=STRING?
		//        (intervals+=Interval3 (',' intervals+=Interval3)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'vacation' {Vacation} name=STRING?
		//    (intervals+=Interval3 (',' intervals+=Interval3)*)?
		public Group getGroup() { return cGroup; }
		
		//'vacation'
		public Keyword getVacationKeyword_0() { return cVacationKeyword_0; }
		
		//{Vacation}
		public Action getVacationAction_1() { return cVacationAction_1; }
		
		//name=STRING?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//(intervals+=Interval3 (',' intervals+=Interval3)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_0() { return cIntervalsAssignment_3_0; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_0_0() { return cIntervalsInterval3ParserRuleCall_3_0_0; }
		
		//(',' intervals+=Interval3)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_1_1() { return cIntervalsAssignment_3_1_1; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_1_1_0() { return cIntervalsInterval3ParserRuleCall_3_1_1_0; }
	}
	public class VacationResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.VacationResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVacationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIntervalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIntervalsInterval3ParserRuleCall_2_0 = (RuleCall)cIntervalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIntervalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIntervalsInterval3ParserRuleCall_3_1_0 = (RuleCall)cIntervalsAssignment_3_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/vacation.resource.html
		//VacationResource returns Vacation:
		//    'vacation' name=STRING? intervals+=Interval3 (',' intervals+=Interval3)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'vacation' name=STRING? intervals+=Interval3 (',' intervals+=Interval3)*
		public Group getGroup() { return cGroup; }
		
		//'vacation'
		public Keyword getVacationKeyword_0() { return cVacationKeyword_0; }
		
		//name=STRING?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_2() { return cIntervalsAssignment_2; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_2_0() { return cIntervalsInterval3ParserRuleCall_2_0; }
		
		//(',' intervals+=Interval3)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//intervals+=Interval3
		public Assignment getIntervalsAssignment_3_1() { return cIntervalsAssignment_3_1; }
		
		//Interval3
		public RuleCall getIntervalsInterval3ParserRuleCall_3_1_0() { return cIntervalsInterval3ParserRuleCall_3_1_0; }
	}
	public class WarnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Warn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWarnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/warn.html
		//Warn: 'warn' expression=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'warn' expression=LogicalExpression
		public Group getGroup() { return cGroup; }
		
		//'warn'
		public Keyword getWarnKeyword_0() { return cWarnKeyword_0; }
		
		//expression=LogicalExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_0; }
	}
	public class WeekStartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.WeekStarts");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSundayAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSundayWeekstartssundayKeyword_0_0 = (Keyword)cSundayAssignment_0.eContents().get(0);
		private final Assignment cMondayAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMondayWeekstartsmondayKeyword_1_0 = (Keyword)cMondayAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/weekstartsmonday.html;
		//// http://www.taskjuggler.org/tj3/manual/weekstartssunday.html
		//WeekStarts: (sunday?='weekstartssunday') | (monday?='weekstartsmonday');
		@Override public ParserRule getRule() { return rule; }
		
		//(sunday?='weekstartssunday') | (monday?='weekstartsmonday')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(sunday?='weekstartssunday')
		public Assignment getSundayAssignment_0() { return cSundayAssignment_0; }
		
		//'weekstartssunday'
		public Keyword getSundayWeekstartssundayKeyword_0_0() { return cSundayWeekstartssundayKeyword_0_0; }
		
		//(monday?='weekstartsmonday')
		public Assignment getMondayAssignment_1() { return cMondayAssignment_1; }
		
		//'weekstartsmonday'
		public Keyword getMondayWeekstartsmondayKeyword_1_0() { return cMondayWeekstartsmondayKeyword_1_0; }
	}
	public class WeeklyMaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.WeeklyMax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeeklymaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/weeklymax.html
		//WeeklyMax: 'weeklymax' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'weeklymax' Limit
		public Group getGroup() { return cGroup; }
		
		//'weeklymax'
		public Keyword getWeeklymaxKeyword_0() { return cWeeklymaxKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class WeeklyMinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.WeeklyMin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeeklyminKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLimitParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// http://www.taskjuggler.org/tj3/manual/weeklymin.html
		//WeeklyMin: 'weeklymin' Limit;
		@Override public ParserRule getRule() { return rule; }
		
		//'weeklymin' Limit
		public Group getGroup() { return cGroup; }
		
		//'weeklymin'
		public Keyword getWeeklyminKeyword_0() { return cWeeklyminKeyword_0; }
		
		//Limit
		public RuleCall getLimitParserRuleCall_1() { return cLimitParserRuleCall_1; }
	}
	public class WidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Width");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWidthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWidthXFloatParserRuleCall_1_0 = (RuleCall)cWidthAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/width.column.html
		//Width: 'width' width=XFloat;
		@Override public ParserRule getRule() { return rule; }
		
		//'width' width=XFloat
		public Group getGroup() { return cGroup; }
		
		//'width'
		public Keyword getWidthKeyword_0() { return cWidthKeyword_0; }
		
		//width=XFloat
		public Assignment getWidthAssignment_1() { return cWidthAssignment_1; }
		
		//XFloat
		public RuleCall getWidthXFloatParserRuleCall_1_0() { return cWidthXFloatParserRuleCall_1_0; }
	}
	public class WorkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Work");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueXFloatParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitWorkQuantityUnitEnumRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/work.html
		//Work:  'work' value=XFloat unit = WorkQuantityUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//'work' value=XFloat unit = WorkQuantityUnit
		public Group getGroup() { return cGroup; }
		
		//'work'
		public Keyword getWorkKeyword_0() { return cWorkKeyword_0; }
		
		//value=XFloat
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//XFloat
		public RuleCall getValueXFloatParserRuleCall_1_0() { return cValueXFloatParserRuleCall_1_0; }
		
		//unit = WorkQuantityUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//WorkQuantityUnit
		public RuleCall getUnitWorkQuantityUnitEnumRuleCall_2_0() { return cUnitWorkQuantityUnitEnumRuleCall_2_0; }
	}
	public class WorkingHoursElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.WorkingHours");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkinghoursKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeekdaysAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cWeekdaysWeekdaysParserRuleCall_1_0_0 = (RuleCall)cWeekdaysAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cWeekdaysAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cWeekdaysWeekdaysParserRuleCall_1_1_1_0 = (RuleCall)cWeekdaysAssignment_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOffAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cOffOffKeyword_2_0_0 = (Keyword)cOffAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cHoursAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cHoursWorkHoursParserRuleCall_2_1_0_0 = (RuleCall)cHoursAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cHoursAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cHoursWorkHoursParserRuleCall_2_1_1_1_0 = (RuleCall)cHoursAssignment_2_1_1_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
		//WorkingHours: 'workinghours'
		//    (weekdays+=Weekdays (',' weekdays+=Weekdays)*) ((off?='off') | (hours+=WorkHours (',' hours+=WorkHours)*));
		@Override public ParserRule getRule() { return rule; }
		
		//'workinghours'
		//   (weekdays+=Weekdays (',' weekdays+=Weekdays)*) ((off?='off') | (hours+=WorkHours (',' hours+=WorkHours)*))
		public Group getGroup() { return cGroup; }
		
		//'workinghours'
		public Keyword getWorkinghoursKeyword_0() { return cWorkinghoursKeyword_0; }
		
		//(weekdays+=Weekdays (',' weekdays+=Weekdays)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//weekdays+=Weekdays
		public Assignment getWeekdaysAssignment_1_0() { return cWeekdaysAssignment_1_0; }
		
		//Weekdays
		public RuleCall getWeekdaysWeekdaysParserRuleCall_1_0_0() { return cWeekdaysWeekdaysParserRuleCall_1_0_0; }
		
		//(',' weekdays+=Weekdays)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//weekdays+=Weekdays
		public Assignment getWeekdaysAssignment_1_1_1() { return cWeekdaysAssignment_1_1_1; }
		
		//Weekdays
		public RuleCall getWeekdaysWeekdaysParserRuleCall_1_1_1_0() { return cWeekdaysWeekdaysParserRuleCall_1_1_1_0; }
		
		//((off?='off') | (hours+=WorkHours (',' hours+=WorkHours)*))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(off?='off')
		public Assignment getOffAssignment_2_0() { return cOffAssignment_2_0; }
		
		//'off'
		public Keyword getOffOffKeyword_2_0_0() { return cOffOffKeyword_2_0_0; }
		
		//(hours+=WorkHours (',' hours+=WorkHours)*)
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//hours+=WorkHours
		public Assignment getHoursAssignment_2_1_0() { return cHoursAssignment_2_1_0; }
		
		//WorkHours
		public RuleCall getHoursWorkHoursParserRuleCall_2_1_0_0() { return cHoursWorkHoursParserRuleCall_2_1_0_0; }
		
		//(',' hours+=WorkHours)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//hours+=WorkHours
		public Assignment getHoursAssignment_2_1_1_1() { return cHoursAssignment_2_1_1_1; }
		
		//WorkHours
		public RuleCall getHoursWorkHoursParserRuleCall_2_1_1_1_0() { return cHoursWorkHoursParserRuleCall_2_1_1_1_0; }
	}
	public class YearlyWorkingDaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.YearlyWorkingDays");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYearlyworkingdaysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cYearlyWorkingDaysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYearlyWorkingDaysINTTerminalRuleCall_1_0 = (RuleCall)cYearlyWorkingDaysAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/yearlyworkingdays.html
		//YearlyWorkingDays: 'yearlyworkingdays' yearlyWorkingDays=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'yearlyworkingdays' yearlyWorkingDays=INT
		public Group getGroup() { return cGroup; }
		
		//'yearlyworkingdays'
		public Keyword getYearlyworkingdaysKeyword_0() { return cYearlyworkingdaysKeyword_0; }
		
		//yearlyWorkingDays=INT
		public Assignment getYearlyWorkingDaysAssignment_1() { return cYearlyWorkingDaysAssignment_1; }
		
		//INT
		public RuleCall getYearlyWorkingDaysINTTerminalRuleCall_1_0() { return cYearlyWorkingDaysINTTerminalRuleCall_1_0; }
	}
	public class AccountShareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AccountShare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccountAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAccountAccountCrossReference_0_0 = (CrossReference)cAccountAssignment_0.eContents().get(0);
		private final RuleCall cAccountAccountIDTerminalRuleCall_0_0_1 = (RuleCall)cAccountAccountCrossReference_0_0.eContents().get(1);
		private final Assignment cShareAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShareXFloatParserRuleCall_1_0 = (RuleCall)cShareAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/chargeset.html
		//AccountShare: account=[Account] (share=XFloat)?;
		@Override public ParserRule getRule() { return rule; }
		
		//account=[Account] (share=XFloat)?
		public Group getGroup() { return cGroup; }
		
		//account=[Account]
		public Assignment getAccountAssignment_0() { return cAccountAssignment_0; }
		
		//[Account]
		public CrossReference getAccountAccountCrossReference_0_0() { return cAccountAccountCrossReference_0_0; }
		
		//ID
		public RuleCall getAccountAccountIDTerminalRuleCall_0_0_1() { return cAccountAccountIDTerminalRuleCall_0_0_1; }
		
		//(share=XFloat)?
		public Assignment getShareAssignment_1() { return cShareAssignment_1; }
		
		//XFloat
		public RuleCall getShareXFloatParserRuleCall_1_0() { return cShareXFloatParserRuleCall_1_0; }
	}
	public class ColumnAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ColumnAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCellColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCellTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFontColorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHAlignParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cListItemParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPeriodParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cScaleParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStartParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTitleParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cToolTipParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cWidthParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMacroCallParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cExtendedResourceAttributeColumnParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//// http://www.taskjuggler.org/tj3/manual/columns.html
		//ColumnAttribute: CellColor
		//    | CellText
		//    | End
		//    | FontColor
		//    | HAlign
		//    | ListItem
		//    | ListType
		//    | Period
		//    | Scale
		//    | Start
		//    | Title
		//    | ToolTip
		//    | Width
		//    | MacroCall
		//    | ExtendedResourceAttributeColumn
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CellColor
		//   | CellText
		//   | End
		//   | FontColor
		//   | HAlign
		//   | ListItem
		//   | ListType
		//   | Period
		//   | Scale
		//   | Start
		//   | Title
		//   | ToolTip
		//   | Width
		//   | MacroCall
		//   | ExtendedResourceAttributeColumn
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CellColor
		public RuleCall getCellColorParserRuleCall_0() { return cCellColorParserRuleCall_0; }
		
		//CellText
		public RuleCall getCellTextParserRuleCall_1() { return cCellTextParserRuleCall_1; }
		
		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
		
		//FontColor
		public RuleCall getFontColorParserRuleCall_3() { return cFontColorParserRuleCall_3; }
		
		//HAlign
		public RuleCall getHAlignParserRuleCall_4() { return cHAlignParserRuleCall_4; }
		
		//ListItem
		public RuleCall getListItemParserRuleCall_5() { return cListItemParserRuleCall_5; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_6() { return cListTypeParserRuleCall_6; }
		
		//Period
		public RuleCall getPeriodParserRuleCall_7() { return cPeriodParserRuleCall_7; }
		
		//Scale
		public RuleCall getScaleParserRuleCall_8() { return cScaleParserRuleCall_8; }
		
		//Start
		public RuleCall getStartParserRuleCall_9() { return cStartParserRuleCall_9; }
		
		//Title
		public RuleCall getTitleParserRuleCall_10() { return cTitleParserRuleCall_10; }
		
		//ToolTip
		public RuleCall getToolTipParserRuleCall_11() { return cToolTipParserRuleCall_11; }
		
		//Width
		public RuleCall getWidthParserRuleCall_12() { return cWidthParserRuleCall_12; }
		
		//MacroCall
		public RuleCall getMacroCallParserRuleCall_13() { return cMacroCallParserRuleCall_13; }
		
		//ExtendedResourceAttributeColumn
		public RuleCall getExtendedResourceAttributeColumnParserRuleCall_14() { return cExtendedResourceAttributeColumnParserRuleCall_14; }
	}
	public class ExtendedResourceAttributeColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExtendedResourceAttributeColumn");
		private final Assignment cExtensionAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cExtensionExtendCrossReference_0 = (CrossReference)cExtensionAssignment.eContents().get(0);
		private final RuleCall cExtensionExtendIDTerminalRuleCall_0_1 = (RuleCall)cExtensionExtendCrossReference_0.eContents().get(1);
		
		//ExtendedResourceAttributeColumn : extension = [Extend];
		@Override public ParserRule getRule() { return rule; }
		
		//extension = [Extend]
		public Assignment getExtensionAssignment() { return cExtensionAssignment; }
		
		//[Extend]
		public CrossReference getExtensionExtendCrossReference_0() { return cExtensionExtendCrossReference_0; }
		
		//ID
		public RuleCall getExtensionExtendIDTerminalRuleCall_0_1() { return cExtensionExtendIDTerminalRuleCall_0_1; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIdColumnIdEnumRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Assignment cExtAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cExtExtendedResourceAttributeColumnParserRuleCall_0_1_0 = (RuleCall)cExtAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesColumnAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/columns.html
		//// TODO: extend column id to user defined column ids.
		//Column: (id=ColumnId | ext=ExtendedResourceAttributeColumn) ('{' (attributes+=ColumnAttribute)+ '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(id=ColumnId | ext=ExtendedResourceAttributeColumn) ('{' (attributes+=ColumnAttribute)+ '}')?
		public Group getGroup() { return cGroup; }
		
		//(id=ColumnId | ext=ExtendedResourceAttributeColumn)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//id=ColumnId
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ColumnId
		public RuleCall getIdColumnIdEnumRuleCall_0_0_0() { return cIdColumnIdEnumRuleCall_0_0_0; }
		
		//ext=ExtendedResourceAttributeColumn
		public Assignment getExtAssignment_0_1() { return cExtAssignment_0_1; }
		
		//ExtendedResourceAttributeColumn
		public RuleCall getExtExtendedResourceAttributeColumnParserRuleCall_0_1_0() { return cExtExtendedResourceAttributeColumnParserRuleCall_0_1_0; }
		
		//('{' (attributes+=ColumnAttribute)+ '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(attributes+=ColumnAttribute)+
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//ColumnAttribute
		public RuleCall getAttributesColumnAttributeParserRuleCall_1_1_0() { return cAttributesColumnAttributeParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class CriterionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Criterion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cScenarioAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cScenarioScenarioCrossReference_0_0_0 = (CrossReference)cScenarioAssignment_0_0.eContents().get(0);
		private final RuleCall cScenarioScenarioIDTerminalRuleCall_0_0_0_1 = (RuleCall)cScenarioScenarioCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cColumnIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnIdColumnIdEnumRuleCall_1_0 = (RuleCall)cColumnIdAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDirectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDirectionCriterionDirectionEnumRuleCall_3_0 = (RuleCall)cDirectionAssignment_3.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//Criterion: (scenario=[Scenario]'.')? columnId=ColumnId '.' direction=CriterionDirection;
		@Override public ParserRule getRule() { return rule; }
		
		//(scenario=[Scenario]'.')? columnId=ColumnId '.' direction=CriterionDirection
		public Group getGroup() { return cGroup; }
		
		//(scenario=[Scenario]'.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//scenario=[Scenario]
		public Assignment getScenarioAssignment_0_0() { return cScenarioAssignment_0_0; }
		
		//[Scenario]
		public CrossReference getScenarioScenarioCrossReference_0_0_0() { return cScenarioScenarioCrossReference_0_0_0; }
		
		//ID
		public RuleCall getScenarioScenarioIDTerminalRuleCall_0_0_0_1() { return cScenarioScenarioIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//columnId=ColumnId
		public Assignment getColumnIdAssignment_1() { return cColumnIdAssignment_1; }
		
		//ColumnId
		public RuleCall getColumnIdColumnIdEnumRuleCall_1_0() { return cColumnIdColumnIdEnumRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//direction=CriterionDirection
		public Assignment getDirectionAssignment_3() { return cDirectionAssignment_3; }
		
		//CriterionDirection
		public RuleCall getDirectionCriterionDirectionEnumRuleCall_3_0() { return cDirectionCriterionDirectionEnumRuleCall_3_0; }
	}
	public class DurationQuantityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.DurationQuantity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueXFloatParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/duration.html
		//// http://www.taskjuggler.org/tj3/manual/effort.html
		//// http://www.taskjuggler.org/tj3/manual/gapduration.html
		//// http://www.taskjuggler.org/tj3/manual/gaplength.html
		//// http://www.taskjuggler.org/tj3/manual/interval1.html
		//// http://www.taskjuggler.org/tj3/manual/interval2.html
		//// http://www.taskjuggler.org/tj3/manual/interval3.html
		//// http://www.taskjuggler.org/tj3/manual/interval4.html
		//// http://www.taskjuggler.org/tj3/manual/length.html
		//// http://www.taskjuggler.org/tj3/manual/remaining.html
		//DurationQuantity: value=XFloat unit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//value=XFloat unit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//value=XFloat
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//XFloat
		public RuleCall getValueXFloatParserRuleCall_0_0() { return cValueXFloatParserRuleCall_0_0; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDurationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDurationDurationQuantityParserRuleCall_0_0 = (RuleCall)cDurationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesLimitAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// http://www.taskjuggler.org/tj3/manual/limits.task.html
		//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
		//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
		//// http://www.taskjuggler.org/tj3/manual/limits.html
		//Limit:
		//        duration=DurationQuantity ('{' attributes+=LimitAttribute*    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//duration=DurationQuantity ('{' attributes+=LimitAttribute*	'}')?
		public Group getGroup() { return cGroup; }
		
		//duration=DurationQuantity
		public Assignment getDurationAssignment_0() { return cDurationAssignment_0; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_0_0() { return cDurationDurationQuantityParserRuleCall_0_0; }
		
		//('{' attributes+=LimitAttribute*	'}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//attributes+=LimitAttribute*
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//LimitAttribute
		public RuleCall getAttributesLimitAttributeParserRuleCall_1_1_0() { return cAttributesLimitAttributeParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class LimitAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LimitAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEndKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEndAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEndISODATEParserRuleCall_0_1_0 = (RuleCall)cEndAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPeriodKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPeriodAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPeriodInterval1ParserRuleCall_1_1_0 = (RuleCall)cPeriodAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cResourcesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_1_0 = (CrossReference)cResourcesAssignment_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cResourcesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cResourcesResourceCrossReference_2_2_1_0 = (CrossReference)cResourcesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cResourcesResourceCrossReference_2_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cStartKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStartISODATEParserRuleCall_3_1_0 = (RuleCall)cStartAssignment_3_1.eContents().get(0);
		
		//LimitAttribute:
		//            ('end' end=ISODATE) |
		//            ('period' period=Interval1) |
		//            ('resources' resources+=[Resource] (',' resources+=[Resource])*) |
		//            ('start' start=ISODATE)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('end' end=ISODATE) |
		//('period' period=Interval1) |
		//('resources' resources+=[Resource] (',' resources+=[Resource])*) |
		//('start' start=ISODATE)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('end' end=ISODATE)
		public Group getGroup_0() { return cGroup_0; }
		
		//'end'
		public Keyword getEndKeyword_0_0() { return cEndKeyword_0_0; }
		
		//end=ISODATE
		public Assignment getEndAssignment_0_1() { return cEndAssignment_0_1; }
		
		//ISODATE
		public RuleCall getEndISODATEParserRuleCall_0_1_0() { return cEndISODATEParserRuleCall_0_1_0; }
		
		//('period' period=Interval1)
		public Group getGroup_1() { return cGroup_1; }
		
		//'period'
		public Keyword getPeriodKeyword_1_0() { return cPeriodKeyword_1_0; }
		
		//period=Interval1
		public Assignment getPeriodAssignment_1_1() { return cPeriodAssignment_1_1; }
		
		//Interval1
		public RuleCall getPeriodInterval1ParserRuleCall_1_1_0() { return cPeriodInterval1ParserRuleCall_1_1_0; }
		
		//('resources' resources+=[Resource] (',' resources+=[Resource])*)
		public Group getGroup_2() { return cGroup_2; }
		
		//'resources'
		public Keyword getResourcesKeyword_2_0() { return cResourcesKeyword_2_0; }
		
		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_1_0() { return cResourcesResourceCrossReference_2_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_1_0_1; }
		
		//(',' resources+=[Resource])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//resources+=[Resource]
		public Assignment getResourcesAssignment_2_2_1() { return cResourcesAssignment_2_2_1; }
		
		//[Resource]
		public CrossReference getResourcesResourceCrossReference_2_2_1_0() { return cResourcesResourceCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_2_2_1_0_1() { return cResourcesResourceIDTerminalRuleCall_2_2_1_0_1; }
		
		//('start' start=ISODATE)
		public Group getGroup_3() { return cGroup_3; }
		
		//'start'
		public Keyword getStartKeyword_3_0() { return cStartKeyword_3_0; }
		
		//start=ISODATE
		public Assignment getStartAssignment_3_1() { return cStartAssignment_3_1; }
		
		//ISODATE
		public RuleCall getStartISODATEParserRuleCall_3_1_0() { return cStartISODATEParserRuleCall_3_1_0; }
	}
	public class RealFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.RealFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativePrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNegativePrefixSTRINGTerminalRuleCall_0_0 = (RuleCall)cNegativePrefixAssignment_0.eContents().get(0);
		private final Assignment cNegativeSuffixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNegativeSuffixSTRINGTerminalRuleCall_1_0 = (RuleCall)cNegativeSuffixAssignment_1.eContents().get(0);
		private final Assignment cThousandsSeparatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThousandsSeparatorSTRINGTerminalRuleCall_2_0 = (RuleCall)cThousandsSeparatorAssignment_2.eContents().get(0);
		private final Assignment cFractionSeparatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFractionSeparatorSTRINGTerminalRuleCall_3_0 = (RuleCall)cFractionSeparatorAssignment_3.eContents().get(0);
		private final Assignment cFractionDigitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFractionDigitsINTTerminalRuleCall_4_0 = (RuleCall)cFractionDigitsAssignment_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
		//// http://www.taskjuggler.org/tj3/manual/numberformat.html
		//RealFormat:
		//    negativePrefix=STRING negativeSuffix=STRING thousandsSeparator=STRING fractionSeparator=STRING fractionDigits=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//negativePrefix=STRING negativeSuffix=STRING thousandsSeparator=STRING fractionSeparator=STRING fractionDigits=INT
		public Group getGroup() { return cGroup; }
		
		//negativePrefix=STRING
		public Assignment getNegativePrefixAssignment_0() { return cNegativePrefixAssignment_0; }
		
		//STRING
		public RuleCall getNegativePrefixSTRINGTerminalRuleCall_0_0() { return cNegativePrefixSTRINGTerminalRuleCall_0_0; }
		
		//negativeSuffix=STRING
		public Assignment getNegativeSuffixAssignment_1() { return cNegativeSuffixAssignment_1; }
		
		//STRING
		public RuleCall getNegativeSuffixSTRINGTerminalRuleCall_1_0() { return cNegativeSuffixSTRINGTerminalRuleCall_1_0; }
		
		//thousandsSeparator=STRING
		public Assignment getThousandsSeparatorAssignment_2() { return cThousandsSeparatorAssignment_2; }
		
		//STRING
		public RuleCall getThousandsSeparatorSTRINGTerminalRuleCall_2_0() { return cThousandsSeparatorSTRINGTerminalRuleCall_2_0; }
		
		//fractionSeparator=STRING
		public Assignment getFractionSeparatorAssignment_3() { return cFractionSeparatorAssignment_3; }
		
		//STRING
		public RuleCall getFractionSeparatorSTRINGTerminalRuleCall_3_0() { return cFractionSeparatorSTRINGTerminalRuleCall_3_0; }
		
		//fractionDigits=INT
		public Assignment getFractionDigitsAssignment_4() { return cFractionDigitsAssignment_4; }
		
		//INT
		public RuleCall getFractionDigitsINTTerminalRuleCall_4_0() { return cFractionDigitsINTTerminalRuleCall_4_0; }
	}
	public class TaskDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTaskAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTaskTaskCrossReference_0_0 = (CrossReference)cTaskAssignment_0.eContents().get(0);
		private final RuleCall cTaskTaskTaskPathParserRuleCall_0_0_1 = (RuleCall)cTaskTaskCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cGroup_1.eContents().get(1);
		private final Assignment cGapDurationAssignment_1_1_0 = (Assignment)cUnorderedGroup_1_1.eContents().get(0);
		private final RuleCall cGapDurationGapDurationParserRuleCall_1_1_0_0 = (RuleCall)cGapDurationAssignment_1_1_0.eContents().get(0);
		private final Assignment cGapLengthAssignment_1_1_1 = (Assignment)cUnorderedGroup_1_1.eContents().get(1);
		private final RuleCall cGapLengthGapLengthParserRuleCall_1_1_1_0 = (RuleCall)cGapLengthAssignment_1_1_1.eContents().get(0);
		private final Assignment cPolicyAssignment_1_1_2 = (Assignment)cUnorderedGroup_1_1.eContents().get(2);
		private final RuleCall cPolicyDependsPolicyEnumRuleCall_1_1_2_0 = (RuleCall)cPolicyAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TaskDependency: task=[Task|TaskPath] ('{'
		//        (
		//            (gapDuration = GapDuration)? &
		//            (gapLength = GapLength)? &
		//            (policy=DependsPolicy)?
		//        )
		//    '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//task=[Task|TaskPath] ('{'
		//       (
		//           (gapDuration = GapDuration)? &
		//           (gapLength = GapLength)? &
		//           (policy=DependsPolicy)?
		//       )
		//   '}')?
		public Group getGroup() { return cGroup; }
		
		//task=[Task|TaskPath]
		public Assignment getTaskAssignment_0() { return cTaskAssignment_0; }
		
		//[Task|TaskPath]
		public CrossReference getTaskTaskCrossReference_0_0() { return cTaskTaskCrossReference_0_0; }
		
		//TaskPath
		public RuleCall getTaskTaskTaskPathParserRuleCall_0_0_1() { return cTaskTaskTaskPathParserRuleCall_0_0_1; }
		
		//('{'
		//       (
		//           (gapDuration = GapDuration)? &
		//           (gapLength = GapLength)? &
		//           (policy=DependsPolicy)?
		//       )
		//   '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(
		//    (gapDuration = GapDuration)? &
		//    (gapLength = GapLength)? &
		//    (policy=DependsPolicy)?
		//)
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }
		
		//(gapDuration = GapDuration)?
		public Assignment getGapDurationAssignment_1_1_0() { return cGapDurationAssignment_1_1_0; }
		
		//GapDuration
		public RuleCall getGapDurationGapDurationParserRuleCall_1_1_0_0() { return cGapDurationGapDurationParserRuleCall_1_1_0_0; }
		
		//(gapLength = GapLength)?
		public Assignment getGapLengthAssignment_1_1_1() { return cGapLengthAssignment_1_1_1; }
		
		//GapLength
		public RuleCall getGapLengthGapLengthParserRuleCall_1_1_1_0() { return cGapLengthGapLengthParserRuleCall_1_1_1_0; }
		
		//(policy=DependsPolicy)?
		public Assignment getPolicyAssignment_1_1_2() { return cPolicyAssignment_1_1_2; }
		
		//DependsPolicy
		public RuleCall getPolicyDependsPolicyEnumRuleCall_1_1_2_0() { return cPolicyDependsPolicyEnumRuleCall_1_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class TaskPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TaskPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TaskPath: '!'* QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'!'* QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'!'*
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
	}
	public class RichTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.RichText");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//RichText: text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//text=STRING
		public Assignment getTextAssignment() { return cTextAssignment; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0() { return cTextSTRINGTerminalRuleCall_0; }
	}
	public class WorkHoursElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.WorkHours");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartTIMETerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStopAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStopTIMETerminalRuleCall_2_0 = (RuleCall)cStopAssignment_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
		//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
		//WorkHours:
		//    (start=TIME '-' stop=TIME);
		@Override public ParserRule getRule() { return rule; }
		
		//(start=TIME '-' stop=TIME)
		public Group getGroup() { return cGroup; }
		
		//start=TIME
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//TIME
		public RuleCall getStartTIMETerminalRuleCall_0_0() { return cStartTIMETerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//stop=TIME
		public Assignment getStopAssignment_2() { return cStopAssignment_2; }
		
		//TIME
		public RuleCall getStopTIMETerminalRuleCall_2_0() { return cStopTIMETerminalRuleCall_2_0; }
	}
	public class WeekdaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Weekdays");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstWeekdayEnumRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLastAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLastWeekdayEnumRuleCall_1_1_0 = (RuleCall)cLastAssignment_1_1.eContents().get(0);
		
		//Weekdays:
		//    (first=Weekday ('-' last=Weekday)?);
		@Override public ParserRule getRule() { return rule; }
		
		//(first=Weekday ('-' last=Weekday)?)
		public Group getGroup() { return cGroup; }
		
		//first=Weekday
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//Weekday
		public RuleCall getFirstWeekdayEnumRuleCall_0_0() { return cFirstWeekdayEnumRuleCall_0_0; }
		
		//('-' last=Weekday)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }
		
		//last=Weekday
		public Assignment getLastAssignment_1_1() { return cLastAssignment_1_1; }
		
		//Weekday
		public RuleCall getLastWeekdayEnumRuleCall_1_1_0() { return cLastWeekdayEnumRuleCall_1_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName : ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class XFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.XFloat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// XFloat is permitting either an int or a float: eg: 4 and 4.0 are parsed as intended.
		//// this technique avoids a FLOAT terminal definition that would hide INT:
		//// eg: avoiding 4 would only be INT and 4.0 would only be FLOAT.
		//XFloat returns ecore::EFloat:
		//    FLOAT | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//FLOAT | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_0() { return cFLOATTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString :
		//    QualifiedName | STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName | STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class ISODATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ISODATE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDateExtDateParserRuleCall_0_0 = (RuleCall)cDateAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDateAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDateExtDateParserRuleCall_1_2_0 = (RuleCall)cDateAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Keyword cPlusSignKeyword_1_3_0 = (Keyword)cAlternatives_1_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_3_1 = (Keyword)cAlternatives_1_3.eContents().get(1);
		private final Assignment cDurationAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cDurationDurationQuantityParserRuleCall_1_4_0 = (RuleCall)cDurationAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//ISODATE : ( date = ExtDate | '%' '{' date = ExtDate ('+'|'-') duration=DurationQuantity '}');
		@Override public ParserRule getRule() { return rule; }
		
		//( date = ExtDate | '%' '{' date = ExtDate ('+'|'-') duration=DurationQuantity '}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//date = ExtDate
		public Assignment getDateAssignment_0() { return cDateAssignment_0; }
		
		//ExtDate
		public RuleCall getDateExtDateParserRuleCall_0_0() { return cDateExtDateParserRuleCall_0_0; }
		
		//'%' '{' date = ExtDate ('+'|'-') duration=DurationQuantity '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_0() { return cPercentSignKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//date = ExtDate
		public Assignment getDateAssignment_1_2() { return cDateAssignment_1_2; }
		
		//ExtDate
		public RuleCall getDateExtDateParserRuleCall_1_2_0() { return cDateExtDateParserRuleCall_1_2_0; }
		
		//('+'|'-')
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3_0() { return cPlusSignKeyword_1_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_3_1() { return cHyphenMinusKeyword_1_3_1; }
		
		//duration=DurationQuantity
		public Assignment getDurationAssignment_1_4() { return cDurationAssignment_1_4; }
		
		//DurationQuantity
		public RuleCall getDurationDurationQuantityParserRuleCall_1_4_0() { return cDurationDurationQuantityParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class ExtDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ExtDate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDATETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExtDate : DATE | MacroCall;
		@Override public ParserRule getRule() { return rule; }
		
		//DATE | MacroCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DATE
		public RuleCall getDATETerminalRuleCall_0() { return cDATETerminalRuleCall_0; }
		
		//MacroCall
		public RuleCall getMacroCallParserRuleCall_1() { return cMacroCallParserRuleCall_1; }
	}
	
	public class LeaveTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LeaveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cProjectEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cProjectProjectKeyword_0_0 = (Keyword)cProjectEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnnualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnnualAnnualKeyword_1_0 = (Keyword)cAnnualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSpecialEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSpecialSpecialKeyword_2_0 = (Keyword)cSpecialEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSickEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSickSickKeyword_3_0 = (Keyword)cSickEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cUnpaidEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cUnpaidUnpaidKeyword_4_0 = (Keyword)cUnpaidEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHolidayEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHolidayHolidayKeyword_5_0 = (Keyword)cHolidayEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cUnemployedEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cUnemployedUnemployedKeyword_6_0 = (Keyword)cUnemployedEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum LeaveType : project | annual | special | sick | unpaid | holiday | unemployed;
		public EnumRule getRule() { return rule; }
		
		//project | annual | special | sick | unpaid | holiday | unemployed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//project
		public EnumLiteralDeclaration getProjectEnumLiteralDeclaration_0() { return cProjectEnumLiteralDeclaration_0; }
		
		public Keyword getProjectProjectKeyword_0_0() { return cProjectProjectKeyword_0_0; }
		
		//annual
		public EnumLiteralDeclaration getAnnualEnumLiteralDeclaration_1() { return cAnnualEnumLiteralDeclaration_1; }
		
		public Keyword getAnnualAnnualKeyword_1_0() { return cAnnualAnnualKeyword_1_0; }
		
		//special
		public EnumLiteralDeclaration getSpecialEnumLiteralDeclaration_2() { return cSpecialEnumLiteralDeclaration_2; }
		
		public Keyword getSpecialSpecialKeyword_2_0() { return cSpecialSpecialKeyword_2_0; }
		
		//sick
		public EnumLiteralDeclaration getSickEnumLiteralDeclaration_3() { return cSickEnumLiteralDeclaration_3; }
		
		public Keyword getSickSickKeyword_3_0() { return cSickSickKeyword_3_0; }
		
		//unpaid
		public EnumLiteralDeclaration getUnpaidEnumLiteralDeclaration_4() { return cUnpaidEnumLiteralDeclaration_4; }
		
		public Keyword getUnpaidUnpaidKeyword_4_0() { return cUnpaidUnpaidKeyword_4_0; }
		
		//holiday
		public EnumLiteralDeclaration getHolidayEnumLiteralDeclaration_5() { return cHolidayEnumLiteralDeclaration_5; }
		
		public Keyword getHolidayHolidayKeyword_5_0() { return cHolidayHolidayKeyword_5_0; }
		
		//unemployed
		public EnumLiteralDeclaration getUnemployedEnumLiteralDeclaration_6() { return cUnemployedEnumLiteralDeclaration_6; }
		
		public Keyword getUnemployedUnemployedKeyword_6_0() { return cUnemployedUnemployedKeyword_6_0; }
	}
	public class BuildInMacroElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.BuildInMacro");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cProjectstartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cProjectstartProjectstartKeyword_0_0 = (Keyword)cProjectstartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cProjectendEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cProjectendProjectendKeyword_1_0 = (Keyword)cProjectendEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNowEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNowNowKeyword_2_0 = (Keyword)cNowEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BuildInMacro : projectstart | projectend | now;
		public EnumRule getRule() { return rule; }
		
		//projectstart | projectend | now
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//projectstart
		public EnumLiteralDeclaration getProjectstartEnumLiteralDeclaration_0() { return cProjectstartEnumLiteralDeclaration_0; }
		
		public Keyword getProjectstartProjectstartKeyword_0_0() { return cProjectstartProjectstartKeyword_0_0; }
		
		//projectend
		public EnumLiteralDeclaration getProjectendEnumLiteralDeclaration_1() { return cProjectendEnumLiteralDeclaration_1; }
		
		public Keyword getProjectendProjectendKeyword_1_0() { return cProjectendProjectendKeyword_1_0; }
		
		//now
		public EnumLiteralDeclaration getNowEnumLiteralDeclaration_2() { return cNowEnumLiteralDeclaration_2; }
		
		public Keyword getNowNowKeyword_2_0() { return cNowNowKeyword_2_0; }
	}
	public class JournalAttributeValuesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.JournalAttributeValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLAsteriskKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONEHyphenMinusKeyword_1_0 = (Keyword)cNONEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAlertEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAlertAlertKeyword_2_0 = (Keyword)cAlertEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAuthorEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAuthorAuthorKeyword_3_0 = (Keyword)cAuthorEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDetailsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDetailsDetailsKeyword_5_0 = (Keyword)cDetailsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFlagsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFlagsFlagsKeyword_6_0 = (Keyword)cFlagsEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHeadlineEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHeadlineHeadlineKeyword_7_0 = (Keyword)cHeadlineEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPropertyEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPropertyPropertyKeyword_8_0 = (Keyword)cPropertyEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPropertyidEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPropertyidPropertyidKeyword_9_0 = (Keyword)cPropertyidEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cSummaryEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cSummarySummaryKeyword_10_0 = (Keyword)cSummaryEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTimesheetEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTimesheetTimesheetKeyword_11_0 = (Keyword)cTimesheetEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum JournalAttributeValues : ALL='*' | NONE='-' | alert | author | date | details | flags | headline | property | propertyid | summary | timesheet;
		public EnumRule getRule() { return rule; }
		
		//ALL='*' | NONE='-' | alert | author | date | details | flags | headline | property | propertyid | summary | timesheet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALL='*'
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getALLAsteriskKeyword_0_0() { return cALLAsteriskKeyword_0_0; }
		
		//NONE='-'
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_1() { return cNONEEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getNONEHyphenMinusKeyword_1_0() { return cNONEHyphenMinusKeyword_1_0; }
		
		//alert
		public EnumLiteralDeclaration getAlertEnumLiteralDeclaration_2() { return cAlertEnumLiteralDeclaration_2; }
		
		public Keyword getAlertAlertKeyword_2_0() { return cAlertAlertKeyword_2_0; }
		
		//author
		public EnumLiteralDeclaration getAuthorEnumLiteralDeclaration_3() { return cAuthorEnumLiteralDeclaration_3; }
		
		public Keyword getAuthorAuthorKeyword_3_0() { return cAuthorAuthorKeyword_3_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }
		
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }
		
		//details
		public EnumLiteralDeclaration getDetailsEnumLiteralDeclaration_5() { return cDetailsEnumLiteralDeclaration_5; }
		
		public Keyword getDetailsDetailsKeyword_5_0() { return cDetailsDetailsKeyword_5_0; }
		
		//flags
		public EnumLiteralDeclaration getFlagsEnumLiteralDeclaration_6() { return cFlagsEnumLiteralDeclaration_6; }
		
		public Keyword getFlagsFlagsKeyword_6_0() { return cFlagsFlagsKeyword_6_0; }
		
		//headline
		public EnumLiteralDeclaration getHeadlineEnumLiteralDeclaration_7() { return cHeadlineEnumLiteralDeclaration_7; }
		
		public Keyword getHeadlineHeadlineKeyword_7_0() { return cHeadlineHeadlineKeyword_7_0; }
		
		//property
		public EnumLiteralDeclaration getPropertyEnumLiteralDeclaration_8() { return cPropertyEnumLiteralDeclaration_8; }
		
		public Keyword getPropertyPropertyKeyword_8_0() { return cPropertyPropertyKeyword_8_0; }
		
		//propertyid
		public EnumLiteralDeclaration getPropertyidEnumLiteralDeclaration_9() { return cPropertyidEnumLiteralDeclaration_9; }
		
		public Keyword getPropertyidPropertyidKeyword_9_0() { return cPropertyidPropertyidKeyword_9_0; }
		
		//summary
		public EnumLiteralDeclaration getSummaryEnumLiteralDeclaration_10() { return cSummaryEnumLiteralDeclaration_10; }
		
		public Keyword getSummarySummaryKeyword_10_0() { return cSummarySummaryKeyword_10_0; }
		
		//timesheet
		public EnumLiteralDeclaration getTimesheetEnumLiteralDeclaration_11() { return cTimesheetEnumLiteralDeclaration_11; }
		
		public Keyword getTimesheetTimesheetKeyword_11_0() { return cTimesheetTimesheetKeyword_11_0; }
	}
	public class PurgeReportAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.PurgeReportAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCOLUMNSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCOLUMNSColumnsKeyword_0_0 = (Keyword)cCOLUMNSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDEFINITIONSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDEFINITIONSDefinitionsKeyword_1_0 = (Keyword)cDEFINITIONSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFLAGSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFLAGSFlagsKeyword_2_0 = (Keyword)cFLAGSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFORMATSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFORMATSFormatsKeyword_3_0 = (Keyword)cFORMATSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cJOURNALATTRIBUTESEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cJOURNALATTRIBUTESJournalAttributesKeyword_4_0 = (Keyword)cJOURNALATTRIBUTESEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSCENARIOSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSCENARIOSScenariosKeyword_5_0 = (Keyword)cSCENARIOSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSORTACCOUNTSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSORTACCOUNTSSortaccountsKeyword_6_0 = (Keyword)cSORTACCOUNTSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSORTJOURNALENTRIESEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSORTJOURNALENTRIESSortjournalentriesKeyword_7_0 = (Keyword)cSORTJOURNALENTRIESEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSORTRESOURCESEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSORTRESOURCESSortresourcesKeyword_8_0 = (Keyword)cSORTRESOURCESEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSORTTASKSEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSORTTASKSSorttasksKeyword_9_0 = (Keyword)cSORTTASKSEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum PurgeReportAttribute:
		//    COLUMNS = 'columns' |
		//    DEFINITIONS = 'definitions' |
		//    FLAGS = 'flags' |
		//    FORMATS = 'formats' |
		//    JOURNALATTRIBUTES = 'journalAttributes' |
		//    SCENARIOS = 'scenarios' |
		//    SORTACCOUNTS = 'sortaccounts' |
		//    SORTJOURNALENTRIES = 'sortjournalentries' |
		//    SORTRESOURCES = 'sortresources' |
		//    SORTTASKS = 'sorttasks'
		//;
		public EnumRule getRule() { return rule; }
		
		//COLUMNS = 'columns' |
		//DEFINITIONS = 'definitions' |
		//FLAGS = 'flags' |
		//FORMATS = 'formats' |
		//JOURNALATTRIBUTES = 'journalAttributes' |
		//SCENARIOS = 'scenarios' |
		//SORTACCOUNTS = 'sortaccounts' |
		//SORTJOURNALENTRIES = 'sortjournalentries' |
		//SORTRESOURCES = 'sortresources' |
		//SORTTASKS = 'sorttasks'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COLUMNS = 'columns'
		public EnumLiteralDeclaration getCOLUMNSEnumLiteralDeclaration_0() { return cCOLUMNSEnumLiteralDeclaration_0; }
		
		//'columns'
		public Keyword getCOLUMNSColumnsKeyword_0_0() { return cCOLUMNSColumnsKeyword_0_0; }
		
		//DEFINITIONS = 'definitions'
		public EnumLiteralDeclaration getDEFINITIONSEnumLiteralDeclaration_1() { return cDEFINITIONSEnumLiteralDeclaration_1; }
		
		//'definitions'
		public Keyword getDEFINITIONSDefinitionsKeyword_1_0() { return cDEFINITIONSDefinitionsKeyword_1_0; }
		
		//FLAGS = 'flags'
		public EnumLiteralDeclaration getFLAGSEnumLiteralDeclaration_2() { return cFLAGSEnumLiteralDeclaration_2; }
		
		//'flags'
		public Keyword getFLAGSFlagsKeyword_2_0() { return cFLAGSFlagsKeyword_2_0; }
		
		//FORMATS = 'formats'
		public EnumLiteralDeclaration getFORMATSEnumLiteralDeclaration_3() { return cFORMATSEnumLiteralDeclaration_3; }
		
		//'formats'
		public Keyword getFORMATSFormatsKeyword_3_0() { return cFORMATSFormatsKeyword_3_0; }
		
		//JOURNALATTRIBUTES = 'journalAttributes'
		public EnumLiteralDeclaration getJOURNALATTRIBUTESEnumLiteralDeclaration_4() { return cJOURNALATTRIBUTESEnumLiteralDeclaration_4; }
		
		//'journalAttributes'
		public Keyword getJOURNALATTRIBUTESJournalAttributesKeyword_4_0() { return cJOURNALATTRIBUTESJournalAttributesKeyword_4_0; }
		
		//SCENARIOS = 'scenarios'
		public EnumLiteralDeclaration getSCENARIOSEnumLiteralDeclaration_5() { return cSCENARIOSEnumLiteralDeclaration_5; }
		
		//'scenarios'
		public Keyword getSCENARIOSScenariosKeyword_5_0() { return cSCENARIOSScenariosKeyword_5_0; }
		
		//SORTACCOUNTS = 'sortaccounts'
		public EnumLiteralDeclaration getSORTACCOUNTSEnumLiteralDeclaration_6() { return cSORTACCOUNTSEnumLiteralDeclaration_6; }
		
		//'sortaccounts'
		public Keyword getSORTACCOUNTSSortaccountsKeyword_6_0() { return cSORTACCOUNTSSortaccountsKeyword_6_0; }
		
		//SORTJOURNALENTRIES = 'sortjournalentries'
		public EnumLiteralDeclaration getSORTJOURNALENTRIESEnumLiteralDeclaration_7() { return cSORTJOURNALENTRIESEnumLiteralDeclaration_7; }
		
		//'sortjournalentries'
		public Keyword getSORTJOURNALENTRIESSortjournalentriesKeyword_7_0() { return cSORTJOURNALENTRIESSortjournalentriesKeyword_7_0; }
		
		//SORTRESOURCES = 'sortresources'
		public EnumLiteralDeclaration getSORTRESOURCESEnumLiteralDeclaration_8() { return cSORTRESOURCESEnumLiteralDeclaration_8; }
		
		//'sortresources'
		public Keyword getSORTRESOURCESSortresourcesKeyword_8_0() { return cSORTRESOURCESSortresourcesKeyword_8_0; }
		
		//SORTTASKS = 'sorttasks'
		public EnumLiteralDeclaration getSORTTASKSEnumLiteralDeclaration_9() { return cSORTTASKSEnumLiteralDeclaration_9; }
		
		//'sorttasks'
		public Keyword getSORTTASKSSorttasksKeyword_9_0() { return cSORTTASKSSorttasksKeyword_9_0; }
	}
	public class PurgeResourceAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.PurgeResourceAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFAILEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFAILFailKeyword_0_0 = (Keyword)cFAILEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFLAGSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFLAGSFlagsKeyword_1_0 = (Keyword)cFLAGSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMANAGERSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMANAGERSManagersKeyword_2_0 = (Keyword)cMANAGERSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREPORTSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREPORTSReportsKeyword_3_0 = (Keyword)cREPORTSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVACATIONSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVACATIONSVacationsKeyword_4_0 = (Keyword)cVACATIONSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWARNEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWARNWarnKeyword_5_0 = (Keyword)cWARNEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PurgeResourceAttribute:
		//    FAIL = 'fail' |
		//    FLAGS  = 'flags' |
		//    MANAGERS = 'managers' |
		//    REPORTS  = 'reports' |
		//    VACATIONS = 'vacations' |
		//    WARN = 'warn'
		//;
		public EnumRule getRule() { return rule; }
		
		//FAIL = 'fail' |
		//FLAGS  = 'flags' |
		//MANAGERS = 'managers' |
		//REPORTS  = 'reports' |
		//VACATIONS = 'vacations' |
		//WARN = 'warn'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FAIL = 'fail'
		public EnumLiteralDeclaration getFAILEnumLiteralDeclaration_0() { return cFAILEnumLiteralDeclaration_0; }
		
		//'fail'
		public Keyword getFAILFailKeyword_0_0() { return cFAILFailKeyword_0_0; }
		
		//FLAGS  = 'flags'
		public EnumLiteralDeclaration getFLAGSEnumLiteralDeclaration_1() { return cFLAGSEnumLiteralDeclaration_1; }
		
		//'flags'
		public Keyword getFLAGSFlagsKeyword_1_0() { return cFLAGSFlagsKeyword_1_0; }
		
		//MANAGERS = 'managers'
		public EnumLiteralDeclaration getMANAGERSEnumLiteralDeclaration_2() { return cMANAGERSEnumLiteralDeclaration_2; }
		
		//'managers'
		public Keyword getMANAGERSManagersKeyword_2_0() { return cMANAGERSManagersKeyword_2_0; }
		
		//REPORTS  = 'reports'
		public EnumLiteralDeclaration getREPORTSEnumLiteralDeclaration_3() { return cREPORTSEnumLiteralDeclaration_3; }
		
		//'reports'
		public Keyword getREPORTSReportsKeyword_3_0() { return cREPORTSReportsKeyword_3_0; }
		
		//VACATIONS = 'vacations'
		public EnumLiteralDeclaration getVACATIONSEnumLiteralDeclaration_4() { return cVACATIONSEnumLiteralDeclaration_4; }
		
		//'vacations'
		public Keyword getVACATIONSVacationsKeyword_4_0() { return cVACATIONSVacationsKeyword_4_0; }
		
		//WARN = 'warn'
		public EnumLiteralDeclaration getWARNEnumLiteralDeclaration_5() { return cWARNEnumLiteralDeclaration_5; }
		
		//'warn'
		public Keyword getWARNWarnKeyword_5_0() { return cWARNWarnKeyword_5_0; }
	}
	public class PurgeTaskAttributeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.PurgeTaskAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOKINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOKINGBookingKeyword_0_0 = (Keyword)cBOOKINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCHARGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCHARGEChargeKeyword_1_0 = (Keyword)cCHARGEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCHARGESETEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCHARGESETChargesetKeyword_2_0 = (Keyword)cCHARGESETEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEPENDSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDEPENDSDependsKeyword_3_0 = (Keyword)cDEPENDSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFAILEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFAILFailKeyword_4_0 = (Keyword)cFAILEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFLAGSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFLAGSFlagsKeyword_5_0 = (Keyword)cFLAGSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPRECEDESEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPRECEDESPrecedesKeyword_6_0 = (Keyword)cPRECEDESEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cWARNEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cWARNWarnKeyword_7_0 = (Keyword)cWARNEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum PurgeTaskAttribute:
		//    BOOKING = 'booking' |
		//    CHARGE = 'charge' |
		//    CHARGESET = 'chargeset' |
		//    DEPENDS = 'depends' |
		//    FAIL = 'fail' |
		//    FLAGS = 'flags' |
		//    PRECEDES = 'precedes' |
		//    WARN = 'warn'
		//;
		public EnumRule getRule() { return rule; }
		
		//BOOKING = 'booking' |
		//CHARGE = 'charge' |
		//CHARGESET = 'chargeset' |
		//DEPENDS = 'depends' |
		//FAIL = 'fail' |
		//FLAGS = 'flags' |
		//PRECEDES = 'precedes' |
		//WARN = 'warn'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOKING = 'booking'
		public EnumLiteralDeclaration getBOOKINGEnumLiteralDeclaration_0() { return cBOOKINGEnumLiteralDeclaration_0; }
		
		//'booking'
		public Keyword getBOOKINGBookingKeyword_0_0() { return cBOOKINGBookingKeyword_0_0; }
		
		//CHARGE = 'charge'
		public EnumLiteralDeclaration getCHARGEEnumLiteralDeclaration_1() { return cCHARGEEnumLiteralDeclaration_1; }
		
		//'charge'
		public Keyword getCHARGEChargeKeyword_1_0() { return cCHARGEChargeKeyword_1_0; }
		
		//CHARGESET = 'chargeset'
		public EnumLiteralDeclaration getCHARGESETEnumLiteralDeclaration_2() { return cCHARGESETEnumLiteralDeclaration_2; }
		
		//'chargeset'
		public Keyword getCHARGESETChargesetKeyword_2_0() { return cCHARGESETChargesetKeyword_2_0; }
		
		//DEPENDS = 'depends'
		public EnumLiteralDeclaration getDEPENDSEnumLiteralDeclaration_3() { return cDEPENDSEnumLiteralDeclaration_3; }
		
		//'depends'
		public Keyword getDEPENDSDependsKeyword_3_0() { return cDEPENDSDependsKeyword_3_0; }
		
		//FAIL = 'fail'
		public EnumLiteralDeclaration getFAILEnumLiteralDeclaration_4() { return cFAILEnumLiteralDeclaration_4; }
		
		//'fail'
		public Keyword getFAILFailKeyword_4_0() { return cFAILFailKeyword_4_0; }
		
		//FLAGS = 'flags'
		public EnumLiteralDeclaration getFLAGSEnumLiteralDeclaration_5() { return cFLAGSEnumLiteralDeclaration_5; }
		
		//'flags'
		public Keyword getFLAGSFlagsKeyword_5_0() { return cFLAGSFlagsKeyword_5_0; }
		
		//PRECEDES = 'precedes'
		public EnumLiteralDeclaration getPRECEDESEnumLiteralDeclaration_6() { return cPRECEDESEnumLiteralDeclaration_6; }
		
		//'precedes'
		public Keyword getPRECEDESPrecedesKeyword_6_0() { return cPRECEDESPrecedesKeyword_6_0; }
		
		//WARN = 'warn'
		public EnumLiteralDeclaration getWARNEnumLiteralDeclaration_7() { return cWARNEnumLiteralDeclaration_7; }
		
		//'warn'
		public Keyword getWARNWarnKeyword_7_0() { return cWARNWarnKeyword_7_0; }
	}
	public class ChargeAppliesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ChargeApplies");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONSTARTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONSTARTOnstartKeyword_0_0 = (Keyword)cONSTARTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONENDOnendKeyword_1_0 = (Keyword)cONENDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPERHOUREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPERHOURPerhourKeyword_2_0 = (Keyword)cPERHOUREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPERDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPERDAYPerdayKeyword_3_0 = (Keyword)cPERDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPERWEEKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPERWEEKPerweekKeyword_4_0 = (Keyword)cPERWEEKEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/charge.html
		//enum ChargeApplies:
		//    ONSTART = 'onstart' | ONEND = 'onend' | PERHOUR = 'perhour' | PERDAY = 'perday' | PERWEEK = 'perweek';
		public EnumRule getRule() { return rule; }
		
		//ONSTART = 'onstart' | ONEND = 'onend' | PERHOUR = 'perhour' | PERDAY = 'perday' | PERWEEK = 'perweek'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ONSTART = 'onstart'
		public EnumLiteralDeclaration getONSTARTEnumLiteralDeclaration_0() { return cONSTARTEnumLiteralDeclaration_0; }
		
		//'onstart'
		public Keyword getONSTARTOnstartKeyword_0_0() { return cONSTARTOnstartKeyword_0_0; }
		
		//ONEND = 'onend'
		public EnumLiteralDeclaration getONENDEnumLiteralDeclaration_1() { return cONENDEnumLiteralDeclaration_1; }
		
		//'onend'
		public Keyword getONENDOnendKeyword_1_0() { return cONENDOnendKeyword_1_0; }
		
		//PERHOUR = 'perhour'
		public EnumLiteralDeclaration getPERHOUREnumLiteralDeclaration_2() { return cPERHOUREnumLiteralDeclaration_2; }
		
		//'perhour'
		public Keyword getPERHOURPerhourKeyword_2_0() { return cPERHOURPerhourKeyword_2_0; }
		
		//PERDAY = 'perday'
		public EnumLiteralDeclaration getPERDAYEnumLiteralDeclaration_3() { return cPERDAYEnumLiteralDeclaration_3; }
		
		//'perday'
		public Keyword getPERDAYPerdayKeyword_3_0() { return cPERDAYPerdayKeyword_3_0; }
		
		//PERWEEK = 'perweek'
		public EnumLiteralDeclaration getPERWEEKEnumLiteralDeclaration_4() { return cPERWEEKEnumLiteralDeclaration_4; }
		
		//'perweek'
		public Keyword getPERWEEKPerweekKeyword_4_0() { return cPERWEEKPerweekKeyword_4_0; }
	}
	public class JustificationElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Justification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFTLeftKeyword_0_0 = (Keyword)cLEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCENTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCENTERCenterKeyword_1_0 = (Keyword)cCENTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRIGHTRightKeyword_2_0 = (Keyword)cRIGHTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Justification:
		//    LEFT = 'left' |
		//    CENTER = 'center' |
		//    RIGHT = 'right'
		//;
		public EnumRule getRule() { return rule; }
		
		//LEFT = 'left' |
		//CENTER = 'center' |
		//RIGHT = 'right'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT = 'left'
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_0() { return cLEFTEnumLiteralDeclaration_0; }
		
		//'left'
		public Keyword getLEFTLeftKeyword_0_0() { return cLEFTLeftKeyword_0_0; }
		
		//CENTER = 'center'
		public EnumLiteralDeclaration getCENTEREnumLiteralDeclaration_1() { return cCENTEREnumLiteralDeclaration_1; }
		
		//'center'
		public Keyword getCENTERCenterKeyword_1_0() { return cCENTERCenterKeyword_1_0; }
		
		//RIGHT = 'right'
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_2() { return cRIGHTEnumLiteralDeclaration_2; }
		
		//'right'
		public Keyword getRIGHTRightKeyword_2_0() { return cRIGHTRightKeyword_2_0; }
	}
	public class JournalModeValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.JournalModeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJOURNALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJOURNALJournalKeyword_0_0 = (Keyword)cJOURNALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJOURNAL_SUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJOURNAL_SUBJournal_subKeyword_1_0 = (Keyword)cJOURNAL_SUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTATUS_DOWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTATUS_DOWNStatus_downKeyword_2_0 = (Keyword)cSTATUS_DOWNEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSTATUS_UPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSTATUS_UPStatus_upKeyword_3_0 = (Keyword)cSTATUS_UPEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cALERTS_DOWNEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cALERTS_DOWNAlerts_downKeyword_4_0 = (Keyword)cALERTS_DOWNEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/journalmode.html
		//enum JournalModeValue:
		//    JOURNAL = 'journal'
		//    | JOURNAL_SUB = 'journal_sub'
		//    | STATUS_DOWN = 'status_down'
		//    | STATUS_UP = 'status_up'
		//    | ALERTS_DOWN = 'alerts_down'
		//;
		public EnumRule getRule() { return rule; }
		
		//JOURNAL = 'journal'
		//| JOURNAL_SUB = 'journal_sub'
		//| STATUS_DOWN = 'status_down'
		//| STATUS_UP = 'status_up'
		//| ALERTS_DOWN = 'alerts_down'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JOURNAL = 'journal'
		public EnumLiteralDeclaration getJOURNALEnumLiteralDeclaration_0() { return cJOURNALEnumLiteralDeclaration_0; }
		
		//'journal'
		public Keyword getJOURNALJournalKeyword_0_0() { return cJOURNALJournalKeyword_0_0; }
		
		//JOURNAL_SUB = 'journal_sub'
		public EnumLiteralDeclaration getJOURNAL_SUBEnumLiteralDeclaration_1() { return cJOURNAL_SUBEnumLiteralDeclaration_1; }
		
		//'journal_sub'
		public Keyword getJOURNAL_SUBJournal_subKeyword_1_0() { return cJOURNAL_SUBJournal_subKeyword_1_0; }
		
		//STATUS_DOWN = 'status_down'
		public EnumLiteralDeclaration getSTATUS_DOWNEnumLiteralDeclaration_2() { return cSTATUS_DOWNEnumLiteralDeclaration_2; }
		
		//'status_down'
		public Keyword getSTATUS_DOWNStatus_downKeyword_2_0() { return cSTATUS_DOWNStatus_downKeyword_2_0; }
		
		//STATUS_UP = 'status_up'
		public EnumLiteralDeclaration getSTATUS_UPEnumLiteralDeclaration_3() { return cSTATUS_UPEnumLiteralDeclaration_3; }
		
		//'status_up'
		public Keyword getSTATUS_UPStatus_upKeyword_3_0() { return cSTATUS_UPStatus_upKeyword_3_0; }
		
		//ALERTS_DOWN = 'alerts_down'
		public EnumLiteralDeclaration getALERTS_DOWNEnumLiteralDeclaration_4() { return cALERTS_DOWNEnumLiteralDeclaration_4; }
		
		//'alerts_down'
		public Keyword getALERTS_DOWNAlerts_downKeyword_4_0() { return cALERTS_DOWNAlerts_downKeyword_4_0; }
	}
	public class JournalEntrySortCriterionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.JournalEntrySortCriterion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDATE_DOWNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDATE_DOWNDateDownKeyword_0_0 = (Keyword)cDATE_DOWNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDATE_UPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDATE_UPDateUpKeyword_1_0 = (Keyword)cDATE_UPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cALERT_DOWNEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cALERT_DOWNAlertDownKeyword_2_0 = (Keyword)cALERT_DOWNEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cALERT_UPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cALERT_UPAlertUpKeyword_3_0 = (Keyword)cALERT_UPEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPROPERTY_UPEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPROPERTY_UPPropertyUpKeyword_4_0 = (Keyword)cPROPERTY_UPEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
		//enum JournalEntrySortCriterion:
		//    DATE_DOWN = 'date.down'
		//    | DATE_UP = 'date.up'
		//    | ALERT_DOWN = 'alert.down'
		//    | ALERT_UP = 'alert.up'
		//    | PROPERTY_UP = 'property.up'
		//;
		public EnumRule getRule() { return rule; }
		
		//DATE_DOWN = 'date.down'
		//| DATE_UP = 'date.up'
		//| ALERT_DOWN = 'alert.down'
		//| ALERT_UP = 'alert.up'
		//| PROPERTY_UP = 'property.up'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DATE_DOWN = 'date.down'
		public EnumLiteralDeclaration getDATE_DOWNEnumLiteralDeclaration_0() { return cDATE_DOWNEnumLiteralDeclaration_0; }
		
		//'date.down'
		public Keyword getDATE_DOWNDateDownKeyword_0_0() { return cDATE_DOWNDateDownKeyword_0_0; }
		
		//DATE_UP = 'date.up'
		public EnumLiteralDeclaration getDATE_UPEnumLiteralDeclaration_1() { return cDATE_UPEnumLiteralDeclaration_1; }
		
		//'date.up'
		public Keyword getDATE_UPDateUpKeyword_1_0() { return cDATE_UPDateUpKeyword_1_0; }
		
		//ALERT_DOWN = 'alert.down'
		public EnumLiteralDeclaration getALERT_DOWNEnumLiteralDeclaration_2() { return cALERT_DOWNEnumLiteralDeclaration_2; }
		
		//'alert.down'
		public Keyword getALERT_DOWNAlertDownKeyword_2_0() { return cALERT_DOWNAlertDownKeyword_2_0; }
		
		//ALERT_UP = 'alert.up'
		public EnumLiteralDeclaration getALERT_UPEnumLiteralDeclaration_3() { return cALERT_UPEnumLiteralDeclaration_3; }
		
		//'alert.up'
		public Keyword getALERT_UPAlertUpKeyword_3_0() { return cALERT_UPAlertUpKeyword_3_0; }
		
		//PROPERTY_UP = 'property.up'
		public EnumLiteralDeclaration getPROPERTY_UPEnumLiteralDeclaration_4() { return cPROPERTY_UPEnumLiteralDeclaration_4; }
		
		//'property.up'
		public Keyword getPROPERTY_UPPropertyUpKeyword_4_0() { return cPROPERTY_UPPropertyUpKeyword_4_0; }
	}
	public class ListTypeValuesElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ListTypeValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBULLETSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBULLETSBulletsKeyword_0_0 = (Keyword)cBULLETSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMMAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMMACommaKeyword_1_0 = (Keyword)cCOMMAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNUMBEREDNumberedKeyword_2_0 = (Keyword)cNUMBEREDEnumLiteralDeclaration_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
		//enum ListTypeValues:
		//    BULLETS = 'bullets'
		//    | COMMA = 'comma'
		//    | NUMBERED = 'numbered'
		//;
		public EnumRule getRule() { return rule; }
		
		//BULLETS = 'bullets'
		//| COMMA = 'comma'
		//| NUMBERED = 'numbered'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BULLETS = 'bullets'
		public EnumLiteralDeclaration getBULLETSEnumLiteralDeclaration_0() { return cBULLETSEnumLiteralDeclaration_0; }
		
		//'bullets'
		public Keyword getBULLETSBulletsKeyword_0_0() { return cBULLETSBulletsKeyword_0_0; }
		
		//COMMA = 'comma'
		public EnumLiteralDeclaration getCOMMAEnumLiteralDeclaration_1() { return cCOMMAEnumLiteralDeclaration_1; }
		
		//'comma'
		public Keyword getCOMMACommaKeyword_1_0() { return cCOMMACommaKeyword_1_0; }
		
		//NUMBERED = 'numbered'
		public EnumLiteralDeclaration getNUMBEREDEnumLiteralDeclaration_2() { return cNUMBEREDEnumLiteralDeclaration_2; }
		
		//'numbered'
		public Keyword getNUMBEREDNumberedKeyword_2_0() { return cNUMBEREDNumberedKeyword_2_0; }
	}
	public class CriterionDirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.CriterionDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUPUpKeyword_0_0 = (Keyword)cUPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDOWNEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDOWNDownKeyword_1_0 = (Keyword)cDOWNEnumLiteralDeclaration_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
		//// http://www.taskjuggler.org/tj3/manual/sortresources.html
		//enum CriterionDirection:
		//    UP = 'up' | DOWN = 'down';
		public EnumRule getRule() { return rule; }
		
		//UP = 'up' | DOWN = 'down'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UP = 'up'
		public EnumLiteralDeclaration getUPEnumLiteralDeclaration_0() { return cUPEnumLiteralDeclaration_0; }
		
		//'up'
		public Keyword getUPUpKeyword_0_0() { return cUPUpKeyword_0_0; }
		
		//DOWN = 'down'
		public EnumLiteralDeclaration getDOWNEnumLiteralDeclaration_1() { return cDOWNEnumLiteralDeclaration_1; }
		
		//'down'
		public Keyword getDOWNDownKeyword_1_0() { return cDOWNDownKeyword_1_0; }
	}
	public class YesNoElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.YesNo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cYESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cYESYesKeyword_0_0 = (Keyword)cYESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONoKeyword_1_0 = (Keyword)cNOEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum YesNo:
		//    YES = 'yes' | NO = 'no';
		public EnumRule getRule() { return rule; }
		
		//YES = 'yes' | NO = 'no'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YES = 'yes'
		public EnumLiteralDeclaration getYESEnumLiteralDeclaration_0() { return cYESEnumLiteralDeclaration_0; }
		
		//'yes'
		public Keyword getYESYesKeyword_0_0() { return cYESYesKeyword_0_0; }
		
		//NO = 'no'
		public EnumLiteralDeclaration getNOEnumLiteralDeclaration_1() { return cNOEnumLiteralDeclaration_1; }
		
		//'no'
		public Keyword getNONoKeyword_1_0() { return cNONoKeyword_1_0; }
	}
	public class ReportFormatElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ReportFormat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCSVEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCSVCsvKeyword_0_0 = (Keyword)cCSVEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHTMLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHTMLHtmlKeyword_1_0 = (Keyword)cHTMLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNIKUEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNIKUNikuKeyword_2_0 = (Keyword)cNIKUEnumLiteralDeclaration_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/formats.html
		//enum ReportFormat:
		//    CSV = 'csv' | HTML = 'html' | NIKU = 'niku';
		public EnumRule getRule() { return rule; }
		
		//CSV = 'csv' | HTML = 'html' | NIKU = 'niku'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CSV = 'csv'
		public EnumLiteralDeclaration getCSVEnumLiteralDeclaration_0() { return cCSVEnumLiteralDeclaration_0; }
		
		//'csv'
		public Keyword getCSVCsvKeyword_0_0() { return cCSVCsvKeyword_0_0; }
		
		//HTML = 'html'
		public EnumLiteralDeclaration getHTMLEnumLiteralDeclaration_1() { return cHTMLEnumLiteralDeclaration_1; }
		
		//'html'
		public Keyword getHTMLHtmlKeyword_1_0() { return cHTMLHtmlKeyword_1_0; }
		
		//NIKU = 'niku'
		public EnumLiteralDeclaration getNIKUEnumLiteralDeclaration_2() { return cNIKUEnumLiteralDeclaration_2; }
		
		//'niku'
		public Keyword getNIKUNikuKeyword_2_0() { return cNIKUNikuKeyword_2_0; }
	}
	public class LoadDisplayUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.LoadDisplayUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDAYSDaysKeyword_0_0 = (Keyword)cDAYSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHOURSHoursKeyword_1_0 = (Keyword)cHOURSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLONGAUTOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLONGAUTOLongautoKeyword_2_0 = (Keyword)cLONGAUTOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMINUTESMinutesKeyword_3_0 = (Keyword)cMINUTESEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMONTHSMonthsKeyword_4_0 = (Keyword)cMONTHSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTAUTOEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSHORTAUTOShortautoKeyword_5_0 = (Keyword)cSHORTAUTOEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWEEKSWeeksKeyword_6_0 = (Keyword)cWEEKSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cYEARSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cYEARSYearsKeyword_7_0 = (Keyword)cYEARSEnumLiteralDeclaration_7.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/loadunit.html
		//enum LoadDisplayUnit:
		//    DAYS = 'days' |
		//    HOURS = 'hours' |
		//    LONGAUTO = 'longauto' |
		//    MINUTES = 'minutes' |
		//    MONTHS = 'months' |
		//    SHORTAUTO = 'shortauto' |
		//    WEEKS = 'weeks' |
		//    YEARS = 'years';
		public EnumRule getRule() { return rule; }
		
		//DAYS = 'days' |
		//HOURS = 'hours' |
		//LONGAUTO = 'longauto' |
		//MINUTES = 'minutes' |
		//MONTHS = 'months' |
		//SHORTAUTO = 'shortauto' |
		//WEEKS = 'weeks' |
		//YEARS = 'years'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DAYS = 'days'
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_0() { return cDAYSEnumLiteralDeclaration_0; }
		
		//'days'
		public Keyword getDAYSDaysKeyword_0_0() { return cDAYSDaysKeyword_0_0; }
		
		//HOURS = 'hours'
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_1() { return cHOURSEnumLiteralDeclaration_1; }
		
		//'hours'
		public Keyword getHOURSHoursKeyword_1_0() { return cHOURSHoursKeyword_1_0; }
		
		//LONGAUTO = 'longauto'
		public EnumLiteralDeclaration getLONGAUTOEnumLiteralDeclaration_2() { return cLONGAUTOEnumLiteralDeclaration_2; }
		
		//'longauto'
		public Keyword getLONGAUTOLongautoKeyword_2_0() { return cLONGAUTOLongautoKeyword_2_0; }
		
		//MINUTES = 'minutes'
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_3() { return cMINUTESEnumLiteralDeclaration_3; }
		
		//'minutes'
		public Keyword getMINUTESMinutesKeyword_3_0() { return cMINUTESMinutesKeyword_3_0; }
		
		//MONTHS = 'months'
		public EnumLiteralDeclaration getMONTHSEnumLiteralDeclaration_4() { return cMONTHSEnumLiteralDeclaration_4; }
		
		//'months'
		public Keyword getMONTHSMonthsKeyword_4_0() { return cMONTHSMonthsKeyword_4_0; }
		
		//SHORTAUTO = 'shortauto'
		public EnumLiteralDeclaration getSHORTAUTOEnumLiteralDeclaration_5() { return cSHORTAUTOEnumLiteralDeclaration_5; }
		
		//'shortauto'
		public Keyword getSHORTAUTOShortautoKeyword_5_0() { return cSHORTAUTOShortautoKeyword_5_0; }
		
		//WEEKS = 'weeks'
		public EnumLiteralDeclaration getWEEKSEnumLiteralDeclaration_6() { return cWEEKSEnumLiteralDeclaration_6; }
		
		//'weeks'
		public Keyword getWEEKSWeeksKeyword_6_0() { return cWEEKSWeeksKeyword_6_0; }
		
		//YEARS = 'years'
		public EnumLiteralDeclaration getYEARSEnumLiteralDeclaration_7() { return cYEARSEnumLiteralDeclaration_7; }
		
		//'years'
		public Keyword getYEARSYearsKeyword_7_0() { return cYEARSYearsKeyword_7_0; }
	}
	public class ScaleResolutionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ScaleResolution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHOURHourKeyword_0_0 = (Keyword)cHOUREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDAYDayKeyword_1_0 = (Keyword)cDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEEKWeekKeyword_2_0 = (Keyword)cWEEKEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMONTHMonthKeyword_3_0 = (Keyword)cMONTHEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cQUARTEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cQUARTERQuarterKeyword_4_0 = (Keyword)cQUARTEREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARYearKeyword_5_0 = (Keyword)cYEAREnumLiteralDeclaration_5.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/scale.column.html
		//enum ScaleResolution:
		//    HOUR = 'hour' |
		//    DAY = 'day' |
		//    WEEK = 'week' |
		//    MONTH = 'month' |
		//    QUARTER = 'quarter' |
		//    YEAR = 'year';
		public EnumRule getRule() { return rule; }
		
		//HOUR = 'hour' |
		//DAY = 'day' |
		//WEEK = 'week' |
		//MONTH = 'month' |
		//QUARTER = 'quarter' |
		//YEAR = 'year'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HOUR = 'hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_0() { return cHOUREnumLiteralDeclaration_0; }
		
		//'hour'
		public Keyword getHOURHourKeyword_0_0() { return cHOURHourKeyword_0_0; }
		
		//DAY = 'day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_1() { return cDAYEnumLiteralDeclaration_1; }
		
		//'day'
		public Keyword getDAYDayKeyword_1_0() { return cDAYDayKeyword_1_0; }
		
		//WEEK = 'week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_2() { return cWEEKEnumLiteralDeclaration_2; }
		
		//'week'
		public Keyword getWEEKWeekKeyword_2_0() { return cWEEKWeekKeyword_2_0; }
		
		//MONTH = 'month'
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_3() { return cMONTHEnumLiteralDeclaration_3; }
		
		//'month'
		public Keyword getMONTHMonthKeyword_3_0() { return cMONTHMonthKeyword_3_0; }
		
		//QUARTER = 'quarter'
		public EnumLiteralDeclaration getQUARTEREnumLiteralDeclaration_4() { return cQUARTEREnumLiteralDeclaration_4; }
		
		//'quarter'
		public Keyword getQUARTERQuarterKeyword_4_0() { return cQUARTERQuarterKeyword_4_0; }
		
		//YEAR = 'year'
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_5() { return cYEAREnumLiteralDeclaration_5; }
		
		//'year'
		public Keyword getYEARYearKeyword_5_0() { return cYEARYearKeyword_5_0; }
	}
	public class SelectArgumentElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SelectArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMAXLOADEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMAXLOADEDMaxloadedKeyword_0_0 = (Keyword)cMAXLOADEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINLOADEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINLOADEDMinloadedKeyword_1_0 = (Keyword)cMINLOADEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMINALLOCATEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMINALLOCATEDMinallocatedKeyword_2_0 = (Keyword)cMINALLOCATEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cORDEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cORDEROrderKeyword_3_0 = (Keyword)cORDEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRANDOMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRANDOMRandomKeyword_4_0 = (Keyword)cRANDOMEnumLiteralDeclaration_4.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/select.html
		//enum SelectArgument:
		//    MAXLOADED = 'maxloaded' |
		//    MINLOADED = 'minloaded' |
		//    MINALLOCATED = 'minallocated' |
		//    ORDER = 'order' |
		//    RANDOM = 'random'
		//;
		public EnumRule getRule() { return rule; }
		
		//MAXLOADED = 'maxloaded' |
		//MINLOADED = 'minloaded' |
		//MINALLOCATED = 'minallocated' |
		//ORDER = 'order' |
		//RANDOM = 'random'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MAXLOADED = 'maxloaded'
		public EnumLiteralDeclaration getMAXLOADEDEnumLiteralDeclaration_0() { return cMAXLOADEDEnumLiteralDeclaration_0; }
		
		//'maxloaded'
		public Keyword getMAXLOADEDMaxloadedKeyword_0_0() { return cMAXLOADEDMaxloadedKeyword_0_0; }
		
		//MINLOADED = 'minloaded'
		public EnumLiteralDeclaration getMINLOADEDEnumLiteralDeclaration_1() { return cMINLOADEDEnumLiteralDeclaration_1; }
		
		//'minloaded'
		public Keyword getMINLOADEDMinloadedKeyword_1_0() { return cMINLOADEDMinloadedKeyword_1_0; }
		
		//MINALLOCATED = 'minallocated'
		public EnumLiteralDeclaration getMINALLOCATEDEnumLiteralDeclaration_2() { return cMINALLOCATEDEnumLiteralDeclaration_2; }
		
		//'minallocated'
		public Keyword getMINALLOCATEDMinallocatedKeyword_2_0() { return cMINALLOCATEDMinallocatedKeyword_2_0; }
		
		//ORDER = 'order'
		public EnumLiteralDeclaration getORDEREnumLiteralDeclaration_3() { return cORDEREnumLiteralDeclaration_3; }
		
		//'order'
		public Keyword getORDEROrderKeyword_3_0() { return cORDEROrderKeyword_3_0; }
		
		//RANDOM = 'random'
		public EnumLiteralDeclaration getRANDOMEnumLiteralDeclaration_4() { return cRANDOMEnumLiteralDeclaration_4; }
		
		//'random'
		public Keyword getRANDOMRandomKeyword_4_0() { return cRANDOMRandomKeyword_4_0; }
	}
	public class ColumnIdElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ColumnId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cActivetasksEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cActivetasksActivetasksKeyword_0_0 = (Keyword)cActivetasksEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnnualleaveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnnualleaveAnnualleaveKeyword_1_0 = (Keyword)cAnnualleaveEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnnualleavebalanceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnnualleavebalanceAnnualleavebalanceKeyword_2_0 = (Keyword)cAnnualleavebalanceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAlertEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAlertAlertKeyword_3_0 = (Keyword)cAlertEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAlertmessagesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAlertmessagesAlertmessagesKeyword_4_0 = (Keyword)cAlertmessagesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAlertsummariesEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAlertsummariesAlertsummariesKeyword_5_0 = (Keyword)cAlertsummariesEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAlerttrendEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAlerttrendAlerttrendKeyword_6_0 = (Keyword)cAlerttrendEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBalanceEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBalanceBalanceKeyword_7_0 = (Keyword)cBalanceEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBsiEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBsiBsiKeyword_8_0 = (Keyword)cBsiEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cChartEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cChartChartKeyword_9_0 = (Keyword)cChartEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cChildrenEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cChildrenChildrenKeyword_10_0 = (Keyword)cChildrenEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cClosedtasksEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cClosedtasksClosedtasksKeyword_11_0 = (Keyword)cClosedtasksEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cCompetitorcountEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cCompetitorcountCompetitorcountKeyword_12_0 = (Keyword)cCompetitorcountEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cCompetitorsEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cCompetitorsCompetitorsKeyword_13_0 = (Keyword)cCompetitorsEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cCompleteEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cCompleteCompleteKeyword_14_0 = (Keyword)cCompleteEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cCompletedEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cCompletedCompletedKeyword_15_0 = (Keyword)cCompletedEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cCriticalnessEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cCriticalnessCriticalnessKeyword_16_0 = (Keyword)cCriticalnessEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cCostEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cCostCostKeyword_17_0 = (Keyword)cCostEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cDailyEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cDailyDailyKeyword_18_0 = (Keyword)cDailyEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cDirectreportsEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cDirectreportsDirectreportsKeyword_19_0 = (Keyword)cDirectreportsEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cDurationEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cDurationDurationKeyword_20_0 = (Keyword)cDurationEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cDutiesEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cDutiesDutiesKeyword_21_0 = (Keyword)cDutiesEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cEfficiencyEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cEfficiencyEfficiencyKeyword_22_0 = (Keyword)cEfficiencyEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cEffortEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cEffortEffortKeyword_23_0 = (Keyword)cEffortEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cEffortdoneEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cEffortdoneEffortdoneKeyword_24_0 = (Keyword)cEffortdoneEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cEffortleftEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cEffortleftEffortleftKeyword_25_0 = (Keyword)cEffortleftEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cEmailEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cEmailEmailKeyword_26_0 = (Keyword)cEmailEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cEndEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cEndEndKeyword_27_0 = (Keyword)cEndEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cFlagsEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cFlagsFlagsKeyword_28_0 = (Keyword)cFlagsEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cFollowersEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cFollowersFollowersKeyword_29_0 = (Keyword)cFollowersEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cFreetimeEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cFreetimeFreetimeKeyword_30_0 = (Keyword)cFreetimeEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cFreeworkEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cFreeworkFreeworkKeyword_31_0 = (Keyword)cFreeworkEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cFteEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cFteFteKeyword_32_0 = (Keyword)cFteEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cGaugeEnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cGaugeGaugeKeyword_33_0 = (Keyword)cGaugeEnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cHeadcountEnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cHeadcountHeadcountKeyword_34_0 = (Keyword)cHeadcountEnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cHierarchindexEnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cHierarchindexHierarchindexKeyword_35_0 = (Keyword)cHierarchindexEnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cHourlyEnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cHourlyHourlyKeyword_36_0 = (Keyword)cHourlyEnumLiteralDeclaration_36.eContents().get(0);
		private final EnumLiteralDeclaration cIdEnumLiteralDeclaration_37 = (EnumLiteralDeclaration)cAlternatives.eContents().get(37);
		private final Keyword cIdIdKeyword_37_0 = (Keyword)cIdEnumLiteralDeclaration_37.eContents().get(0);
		private final EnumLiteralDeclaration cIndexEnumLiteralDeclaration_38 = (EnumLiteralDeclaration)cAlternatives.eContents().get(38);
		private final Keyword cIndexIndexKeyword_38_0 = (Keyword)cIndexEnumLiteralDeclaration_38.eContents().get(0);
		private final EnumLiteralDeclaration cInputsEnumLiteralDeclaration_39 = (EnumLiteralDeclaration)cAlternatives.eContents().get(39);
		private final Keyword cInputsInputsKeyword_39_0 = (Keyword)cInputsEnumLiteralDeclaration_39.eContents().get(0);
		private final EnumLiteralDeclaration cJournalEnumLiteralDeclaration_40 = (EnumLiteralDeclaration)cAlternatives.eContents().get(40);
		private final Keyword cJournalJournalKeyword_40_0 = (Keyword)cJournalEnumLiteralDeclaration_40.eContents().get(0);
		private final EnumLiteralDeclaration cJournal_subEnumLiteralDeclaration_41 = (EnumLiteralDeclaration)cAlternatives.eContents().get(41);
		private final Keyword cJournal_subJournal_subKeyword_41_0 = (Keyword)cJournal_subEnumLiteralDeclaration_41.eContents().get(0);
		private final EnumLiteralDeclaration cJournalmessagesEnumLiteralDeclaration_42 = (EnumLiteralDeclaration)cAlternatives.eContents().get(42);
		private final Keyword cJournalmessagesJournalmessagesKeyword_42_0 = (Keyword)cJournalmessagesEnumLiteralDeclaration_42.eContents().get(0);
		private final EnumLiteralDeclaration cJournalsummariesEnumLiteralDeclaration_43 = (EnumLiteralDeclaration)cAlternatives.eContents().get(43);
		private final Keyword cJournalsummariesJournalsummariesKeyword_43_0 = (Keyword)cJournalsummariesEnumLiteralDeclaration_43.eContents().get(0);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_44 = (EnumLiteralDeclaration)cAlternatives.eContents().get(44);
		private final Keyword cLineLineKeyword_44_0 = (Keyword)cLineEnumLiteralDeclaration_44.eContents().get(0);
		private final EnumLiteralDeclaration cManagersEnumLiteralDeclaration_45 = (EnumLiteralDeclaration)cAlternatives.eContents().get(45);
		private final Keyword cManagersManagersKeyword_45_0 = (Keyword)cManagersEnumLiteralDeclaration_45.eContents().get(0);
		private final EnumLiteralDeclaration cMaxendEnumLiteralDeclaration_46 = (EnumLiteralDeclaration)cAlternatives.eContents().get(46);
		private final Keyword cMaxendMaxendKeyword_46_0 = (Keyword)cMaxendEnumLiteralDeclaration_46.eContents().get(0);
		private final EnumLiteralDeclaration cMaxstartEnumLiteralDeclaration_47 = (EnumLiteralDeclaration)cAlternatives.eContents().get(47);
		private final Keyword cMaxstartMaxstartKeyword_47_0 = (Keyword)cMaxstartEnumLiteralDeclaration_47.eContents().get(0);
		private final EnumLiteralDeclaration cMinendEnumLiteralDeclaration_48 = (EnumLiteralDeclaration)cAlternatives.eContents().get(48);
		private final Keyword cMinendMinendKeyword_48_0 = (Keyword)cMinendEnumLiteralDeclaration_48.eContents().get(0);
		private final EnumLiteralDeclaration cMinstartEnumLiteralDeclaration_49 = (EnumLiteralDeclaration)cAlternatives.eContents().get(49);
		private final Keyword cMinstartMinstartKeyword_49_0 = (Keyword)cMinstartEnumLiteralDeclaration_49.eContents().get(0);
		private final EnumLiteralDeclaration cMonthlyEnumLiteralDeclaration_50 = (EnumLiteralDeclaration)cAlternatives.eContents().get(50);
		private final Keyword cMonthlyMonthlyKeyword_50_0 = (Keyword)cMonthlyEnumLiteralDeclaration_50.eContents().get(0);
		private final EnumLiteralDeclaration cNoEnumLiteralDeclaration_51 = (EnumLiteralDeclaration)cAlternatives.eContents().get(51);
		private final Keyword cNoNoKeyword_51_0 = (Keyword)cNoEnumLiteralDeclaration_51.eContents().get(0);
		private final EnumLiteralDeclaration cNameEnumLiteralDeclaration_52 = (EnumLiteralDeclaration)cAlternatives.eContents().get(52);
		private final Keyword cNameNameKeyword_52_0 = (Keyword)cNameEnumLiteralDeclaration_52.eContents().get(0);
		private final EnumLiteralDeclaration cNoteEnumLiteralDeclaration_53 = (EnumLiteralDeclaration)cAlternatives.eContents().get(53);
		private final Keyword cNoteNoteKeyword_53_0 = (Keyword)cNoteEnumLiteralDeclaration_53.eContents().get(0);
		private final EnumLiteralDeclaration cOpentasksEnumLiteralDeclaration_54 = (EnumLiteralDeclaration)cAlternatives.eContents().get(54);
		private final Keyword cOpentasksOpentasksKeyword_54_0 = (Keyword)cOpentasksEnumLiteralDeclaration_54.eContents().get(0);
		private final EnumLiteralDeclaration cPathcriticalnessEnumLiteralDeclaration_55 = (EnumLiteralDeclaration)cAlternatives.eContents().get(55);
		private final Keyword cPathcriticalnessPathcriticalnessKeyword_55_0 = (Keyword)cPathcriticalnessEnumLiteralDeclaration_55.eContents().get(0);
		private final EnumLiteralDeclaration cPrecursorsEnumLiteralDeclaration_56 = (EnumLiteralDeclaration)cAlternatives.eContents().get(56);
		private final Keyword cPrecursorsPrecursorsKeyword_56_0 = (Keyword)cPrecursorsEnumLiteralDeclaration_56.eContents().get(0);
		private final EnumLiteralDeclaration cPriorityEnumLiteralDeclaration_57 = (EnumLiteralDeclaration)cAlternatives.eContents().get(57);
		private final Keyword cPriorityPriorityKeyword_57_0 = (Keyword)cPriorityEnumLiteralDeclaration_57.eContents().get(0);
		private final EnumLiteralDeclaration cQuarterlyEnumLiteralDeclaration_58 = (EnumLiteralDeclaration)cAlternatives.eContents().get(58);
		private final Keyword cQuarterlyQuarterlyKeyword_58_0 = (Keyword)cQuarterlyEnumLiteralDeclaration_58.eContents().get(0);
		private final EnumLiteralDeclaration cRateEnumLiteralDeclaration_59 = (EnumLiteralDeclaration)cAlternatives.eContents().get(59);
		private final Keyword cRateRateKeyword_59_0 = (Keyword)cRateEnumLiteralDeclaration_59.eContents().get(0);
		private final EnumLiteralDeclaration cReportsEnumLiteralDeclaration_60 = (EnumLiteralDeclaration)cAlternatives.eContents().get(60);
		private final Keyword cReportsReportsKeyword_60_0 = (Keyword)cReportsEnumLiteralDeclaration_60.eContents().get(0);
		private final EnumLiteralDeclaration cResourcesEnumLiteralDeclaration_61 = (EnumLiteralDeclaration)cAlternatives.eContents().get(61);
		private final Keyword cResourcesResourcesKeyword_61_0 = (Keyword)cResourcesEnumLiteralDeclaration_61.eContents().get(0);
		private final EnumLiteralDeclaration cResponsibleEnumLiteralDeclaration_62 = (EnumLiteralDeclaration)cAlternatives.eContents().get(62);
		private final Keyword cResponsibleResponsibleKeyword_62_0 = (Keyword)cResponsibleEnumLiteralDeclaration_62.eContents().get(0);
		private final EnumLiteralDeclaration cRevenueEnumLiteralDeclaration_63 = (EnumLiteralDeclaration)cAlternatives.eContents().get(63);
		private final Keyword cRevenueRevenueKeyword_63_0 = (Keyword)cRevenueEnumLiteralDeclaration_63.eContents().get(0);
		private final EnumLiteralDeclaration cScenarioEnumLiteralDeclaration_64 = (EnumLiteralDeclaration)cAlternatives.eContents().get(64);
		private final Keyword cScenarioScenarioKeyword_64_0 = (Keyword)cScenarioEnumLiteralDeclaration_64.eContents().get(0);
		private final EnumLiteralDeclaration cSchedulingEnumLiteralDeclaration_65 = (EnumLiteralDeclaration)cAlternatives.eContents().get(65);
		private final Keyword cSchedulingSchedulingKeyword_65_0 = (Keyword)cSchedulingEnumLiteralDeclaration_65.eContents().get(0);
		private final EnumLiteralDeclaration cSeqnoEnumLiteralDeclaration_66 = (EnumLiteralDeclaration)cAlternatives.eContents().get(66);
		private final Keyword cSeqnoSeqnoKeyword_66_0 = (Keyword)cSeqnoEnumLiteralDeclaration_66.eContents().get(0);
		private final EnumLiteralDeclaration cSickleaveEnumLiteralDeclaration_67 = (EnumLiteralDeclaration)cAlternatives.eContents().get(67);
		private final Keyword cSickleaveSickleaveKeyword_67_0 = (Keyword)cSickleaveEnumLiteralDeclaration_67.eContents().get(0);
		private final EnumLiteralDeclaration cSpecialleaveEnumLiteralDeclaration_68 = (EnumLiteralDeclaration)cAlternatives.eContents().get(68);
		private final Keyword cSpecialleaveSpecialleaveKeyword_68_0 = (Keyword)cSpecialleaveEnumLiteralDeclaration_68.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_69 = (EnumLiteralDeclaration)cAlternatives.eContents().get(69);
		private final Keyword cStartStartKeyword_69_0 = (Keyword)cStartEnumLiteralDeclaration_69.eContents().get(0);
		private final EnumLiteralDeclaration cStatusEnumLiteralDeclaration_70 = (EnumLiteralDeclaration)cAlternatives.eContents().get(70);
		private final Keyword cStatusStatusKeyword_70_0 = (Keyword)cStatusEnumLiteralDeclaration_70.eContents().get(0);
		private final EnumLiteralDeclaration cTargetsEnumLiteralDeclaration_71 = (EnumLiteralDeclaration)cAlternatives.eContents().get(71);
		private final Keyword cTargetsTargetsKeyword_71_0 = (Keyword)cTargetsEnumLiteralDeclaration_71.eContents().get(0);
		private final EnumLiteralDeclaration cTurnoverEnumLiteralDeclaration_72 = (EnumLiteralDeclaration)cAlternatives.eContents().get(72);
		private final Keyword cTurnoverTurnoverKeyword_72_0 = (Keyword)cTurnoverEnumLiteralDeclaration_72.eContents().get(0);
		private final EnumLiteralDeclaration cWbsEnumLiteralDeclaration_73 = (EnumLiteralDeclaration)cAlternatives.eContents().get(73);
		private final Keyword cWbsWbsKeyword_73_0 = (Keyword)cWbsEnumLiteralDeclaration_73.eContents().get(0);
		private final EnumLiteralDeclaration cUnpaidleaveEnumLiteralDeclaration_74 = (EnumLiteralDeclaration)cAlternatives.eContents().get(74);
		private final Keyword cUnpaidleaveUnpaidleaveKeyword_74_0 = (Keyword)cUnpaidleaveEnumLiteralDeclaration_74.eContents().get(0);
		private final EnumLiteralDeclaration cWeeklyEnumLiteralDeclaration_75 = (EnumLiteralDeclaration)cAlternatives.eContents().get(75);
		private final Keyword cWeeklyWeeklyKeyword_75_0 = (Keyword)cWeeklyEnumLiteralDeclaration_75.eContents().get(0);
		private final EnumLiteralDeclaration cYearlyEnumLiteralDeclaration_76 = (EnumLiteralDeclaration)cAlternatives.eContents().get(76);
		private final Keyword cYearlyYearlyKeyword_76_0 = (Keyword)cYearlyEnumLiteralDeclaration_76.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/columnid.html
		//enum ColumnId:
		//        activetasks | annualleave | annualleavebalance | alert | alertmessages | alertsummaries | alerttrend | balance | bsi | chart | children
		//    |     closedtasks | competitorcount | competitors | complete | completed | criticalness | cost | daily | directreports | duration | duties
		//    |     efficiency | effort | effortdone | effortleft | email | end | flags | followers | freetime | freework | fte | gauge | headcount
		//    |     hierarchindex | hourly | id | index | inputs | journal | journal_sub | journalmessages | journalsummaries | line | managers
		//    |     maxend | maxstart | minend | minstart | monthly | no | name | note | opentasks | pathcriticalness | precursors | priority
		//    |     quarterly | rate | reports | resources | responsible | revenue | scenario | scheduling | seqno | sickleave | specialleave
		//    |     start | status | targets | turnover | wbs | unpaidleave | weekly | yearly
		//;
		public EnumRule getRule() { return rule; }
		
		//    activetasks | annualleave | annualleavebalance | alert | alertmessages | alertsummaries | alerttrend | balance | bsi | chart | children
		//|     closedtasks | competitorcount | competitors | complete | completed | criticalness | cost | daily | directreports | duration | duties
		//|     efficiency | effort | effortdone | effortleft | email | end | flags | followers | freetime | freework | fte | gauge | headcount
		//|     hierarchindex | hourly | id | index | inputs | journal | journal_sub | journalmessages | journalsummaries | line | managers
		//|     maxend | maxstart | minend | minstart | monthly | no | name | note | opentasks | pathcriticalness | precursors | priority
		//|     quarterly | rate | reports | resources | responsible | revenue | scenario | scheduling | seqno | sickleave | specialleave
		//|     start | status | targets | turnover | wbs | unpaidleave | weekly | yearly
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//activetasks
		public EnumLiteralDeclaration getActivetasksEnumLiteralDeclaration_0() { return cActivetasksEnumLiteralDeclaration_0; }
		
		public Keyword getActivetasksActivetasksKeyword_0_0() { return cActivetasksActivetasksKeyword_0_0; }
		
		//annualleave
		public EnumLiteralDeclaration getAnnualleaveEnumLiteralDeclaration_1() { return cAnnualleaveEnumLiteralDeclaration_1; }
		
		public Keyword getAnnualleaveAnnualleaveKeyword_1_0() { return cAnnualleaveAnnualleaveKeyword_1_0; }
		
		//annualleavebalance
		public EnumLiteralDeclaration getAnnualleavebalanceEnumLiteralDeclaration_2() { return cAnnualleavebalanceEnumLiteralDeclaration_2; }
		
		public Keyword getAnnualleavebalanceAnnualleavebalanceKeyword_2_0() { return cAnnualleavebalanceAnnualleavebalanceKeyword_2_0; }
		
		//alert
		public EnumLiteralDeclaration getAlertEnumLiteralDeclaration_3() { return cAlertEnumLiteralDeclaration_3; }
		
		public Keyword getAlertAlertKeyword_3_0() { return cAlertAlertKeyword_3_0; }
		
		//alertmessages
		public EnumLiteralDeclaration getAlertmessagesEnumLiteralDeclaration_4() { return cAlertmessagesEnumLiteralDeclaration_4; }
		
		public Keyword getAlertmessagesAlertmessagesKeyword_4_0() { return cAlertmessagesAlertmessagesKeyword_4_0; }
		
		//alertsummaries
		public EnumLiteralDeclaration getAlertsummariesEnumLiteralDeclaration_5() { return cAlertsummariesEnumLiteralDeclaration_5; }
		
		public Keyword getAlertsummariesAlertsummariesKeyword_5_0() { return cAlertsummariesAlertsummariesKeyword_5_0; }
		
		//alerttrend
		public EnumLiteralDeclaration getAlerttrendEnumLiteralDeclaration_6() { return cAlerttrendEnumLiteralDeclaration_6; }
		
		public Keyword getAlerttrendAlerttrendKeyword_6_0() { return cAlerttrendAlerttrendKeyword_6_0; }
		
		//balance
		public EnumLiteralDeclaration getBalanceEnumLiteralDeclaration_7() { return cBalanceEnumLiteralDeclaration_7; }
		
		public Keyword getBalanceBalanceKeyword_7_0() { return cBalanceBalanceKeyword_7_0; }
		
		//bsi
		public EnumLiteralDeclaration getBsiEnumLiteralDeclaration_8() { return cBsiEnumLiteralDeclaration_8; }
		
		public Keyword getBsiBsiKeyword_8_0() { return cBsiBsiKeyword_8_0; }
		
		//chart
		public EnumLiteralDeclaration getChartEnumLiteralDeclaration_9() { return cChartEnumLiteralDeclaration_9; }
		
		public Keyword getChartChartKeyword_9_0() { return cChartChartKeyword_9_0; }
		
		//children
		public EnumLiteralDeclaration getChildrenEnumLiteralDeclaration_10() { return cChildrenEnumLiteralDeclaration_10; }
		
		public Keyword getChildrenChildrenKeyword_10_0() { return cChildrenChildrenKeyword_10_0; }
		
		//closedtasks
		public EnumLiteralDeclaration getClosedtasksEnumLiteralDeclaration_11() { return cClosedtasksEnumLiteralDeclaration_11; }
		
		public Keyword getClosedtasksClosedtasksKeyword_11_0() { return cClosedtasksClosedtasksKeyword_11_0; }
		
		//competitorcount
		public EnumLiteralDeclaration getCompetitorcountEnumLiteralDeclaration_12() { return cCompetitorcountEnumLiteralDeclaration_12; }
		
		public Keyword getCompetitorcountCompetitorcountKeyword_12_0() { return cCompetitorcountCompetitorcountKeyword_12_0; }
		
		//competitors
		public EnumLiteralDeclaration getCompetitorsEnumLiteralDeclaration_13() { return cCompetitorsEnumLiteralDeclaration_13; }
		
		public Keyword getCompetitorsCompetitorsKeyword_13_0() { return cCompetitorsCompetitorsKeyword_13_0; }
		
		//complete
		public EnumLiteralDeclaration getCompleteEnumLiteralDeclaration_14() { return cCompleteEnumLiteralDeclaration_14; }
		
		public Keyword getCompleteCompleteKeyword_14_0() { return cCompleteCompleteKeyword_14_0; }
		
		//completed
		public EnumLiteralDeclaration getCompletedEnumLiteralDeclaration_15() { return cCompletedEnumLiteralDeclaration_15; }
		
		public Keyword getCompletedCompletedKeyword_15_0() { return cCompletedCompletedKeyword_15_0; }
		
		//criticalness
		public EnumLiteralDeclaration getCriticalnessEnumLiteralDeclaration_16() { return cCriticalnessEnumLiteralDeclaration_16; }
		
		public Keyword getCriticalnessCriticalnessKeyword_16_0() { return cCriticalnessCriticalnessKeyword_16_0; }
		
		//cost
		public EnumLiteralDeclaration getCostEnumLiteralDeclaration_17() { return cCostEnumLiteralDeclaration_17; }
		
		public Keyword getCostCostKeyword_17_0() { return cCostCostKeyword_17_0; }
		
		//daily
		public EnumLiteralDeclaration getDailyEnumLiteralDeclaration_18() { return cDailyEnumLiteralDeclaration_18; }
		
		public Keyword getDailyDailyKeyword_18_0() { return cDailyDailyKeyword_18_0; }
		
		//directreports
		public EnumLiteralDeclaration getDirectreportsEnumLiteralDeclaration_19() { return cDirectreportsEnumLiteralDeclaration_19; }
		
		public Keyword getDirectreportsDirectreportsKeyword_19_0() { return cDirectreportsDirectreportsKeyword_19_0; }
		
		//duration
		public EnumLiteralDeclaration getDurationEnumLiteralDeclaration_20() { return cDurationEnumLiteralDeclaration_20; }
		
		public Keyword getDurationDurationKeyword_20_0() { return cDurationDurationKeyword_20_0; }
		
		//duties
		public EnumLiteralDeclaration getDutiesEnumLiteralDeclaration_21() { return cDutiesEnumLiteralDeclaration_21; }
		
		public Keyword getDutiesDutiesKeyword_21_0() { return cDutiesDutiesKeyword_21_0; }
		
		//efficiency
		public EnumLiteralDeclaration getEfficiencyEnumLiteralDeclaration_22() { return cEfficiencyEnumLiteralDeclaration_22; }
		
		public Keyword getEfficiencyEfficiencyKeyword_22_0() { return cEfficiencyEfficiencyKeyword_22_0; }
		
		//effort
		public EnumLiteralDeclaration getEffortEnumLiteralDeclaration_23() { return cEffortEnumLiteralDeclaration_23; }
		
		public Keyword getEffortEffortKeyword_23_0() { return cEffortEffortKeyword_23_0; }
		
		//effortdone
		public EnumLiteralDeclaration getEffortdoneEnumLiteralDeclaration_24() { return cEffortdoneEnumLiteralDeclaration_24; }
		
		public Keyword getEffortdoneEffortdoneKeyword_24_0() { return cEffortdoneEffortdoneKeyword_24_0; }
		
		//effortleft
		public EnumLiteralDeclaration getEffortleftEnumLiteralDeclaration_25() { return cEffortleftEnumLiteralDeclaration_25; }
		
		public Keyword getEffortleftEffortleftKeyword_25_0() { return cEffortleftEffortleftKeyword_25_0; }
		
		//email
		public EnumLiteralDeclaration getEmailEnumLiteralDeclaration_26() { return cEmailEnumLiteralDeclaration_26; }
		
		public Keyword getEmailEmailKeyword_26_0() { return cEmailEmailKeyword_26_0; }
		
		//end
		public EnumLiteralDeclaration getEndEnumLiteralDeclaration_27() { return cEndEnumLiteralDeclaration_27; }
		
		public Keyword getEndEndKeyword_27_0() { return cEndEndKeyword_27_0; }
		
		//flags
		public EnumLiteralDeclaration getFlagsEnumLiteralDeclaration_28() { return cFlagsEnumLiteralDeclaration_28; }
		
		public Keyword getFlagsFlagsKeyword_28_0() { return cFlagsFlagsKeyword_28_0; }
		
		//followers
		public EnumLiteralDeclaration getFollowersEnumLiteralDeclaration_29() { return cFollowersEnumLiteralDeclaration_29; }
		
		public Keyword getFollowersFollowersKeyword_29_0() { return cFollowersFollowersKeyword_29_0; }
		
		//freetime
		public EnumLiteralDeclaration getFreetimeEnumLiteralDeclaration_30() { return cFreetimeEnumLiteralDeclaration_30; }
		
		public Keyword getFreetimeFreetimeKeyword_30_0() { return cFreetimeFreetimeKeyword_30_0; }
		
		//freework
		public EnumLiteralDeclaration getFreeworkEnumLiteralDeclaration_31() { return cFreeworkEnumLiteralDeclaration_31; }
		
		public Keyword getFreeworkFreeworkKeyword_31_0() { return cFreeworkFreeworkKeyword_31_0; }
		
		//fte
		public EnumLiteralDeclaration getFteEnumLiteralDeclaration_32() { return cFteEnumLiteralDeclaration_32; }
		
		public Keyword getFteFteKeyword_32_0() { return cFteFteKeyword_32_0; }
		
		//gauge
		public EnumLiteralDeclaration getGaugeEnumLiteralDeclaration_33() { return cGaugeEnumLiteralDeclaration_33; }
		
		public Keyword getGaugeGaugeKeyword_33_0() { return cGaugeGaugeKeyword_33_0; }
		
		//headcount
		public EnumLiteralDeclaration getHeadcountEnumLiteralDeclaration_34() { return cHeadcountEnumLiteralDeclaration_34; }
		
		public Keyword getHeadcountHeadcountKeyword_34_0() { return cHeadcountHeadcountKeyword_34_0; }
		
		//hierarchindex
		public EnumLiteralDeclaration getHierarchindexEnumLiteralDeclaration_35() { return cHierarchindexEnumLiteralDeclaration_35; }
		
		public Keyword getHierarchindexHierarchindexKeyword_35_0() { return cHierarchindexHierarchindexKeyword_35_0; }
		
		//hourly
		public EnumLiteralDeclaration getHourlyEnumLiteralDeclaration_36() { return cHourlyEnumLiteralDeclaration_36; }
		
		public Keyword getHourlyHourlyKeyword_36_0() { return cHourlyHourlyKeyword_36_0; }
		
		//id
		public EnumLiteralDeclaration getIdEnumLiteralDeclaration_37() { return cIdEnumLiteralDeclaration_37; }
		
		public Keyword getIdIdKeyword_37_0() { return cIdIdKeyword_37_0; }
		
		//index
		public EnumLiteralDeclaration getIndexEnumLiteralDeclaration_38() { return cIndexEnumLiteralDeclaration_38; }
		
		public Keyword getIndexIndexKeyword_38_0() { return cIndexIndexKeyword_38_0; }
		
		//inputs
		public EnumLiteralDeclaration getInputsEnumLiteralDeclaration_39() { return cInputsEnumLiteralDeclaration_39; }
		
		public Keyword getInputsInputsKeyword_39_0() { return cInputsInputsKeyword_39_0; }
		
		//journal
		public EnumLiteralDeclaration getJournalEnumLiteralDeclaration_40() { return cJournalEnumLiteralDeclaration_40; }
		
		public Keyword getJournalJournalKeyword_40_0() { return cJournalJournalKeyword_40_0; }
		
		//journal_sub
		public EnumLiteralDeclaration getJournal_subEnumLiteralDeclaration_41() { return cJournal_subEnumLiteralDeclaration_41; }
		
		public Keyword getJournal_subJournal_subKeyword_41_0() { return cJournal_subJournal_subKeyword_41_0; }
		
		//journalmessages
		public EnumLiteralDeclaration getJournalmessagesEnumLiteralDeclaration_42() { return cJournalmessagesEnumLiteralDeclaration_42; }
		
		public Keyword getJournalmessagesJournalmessagesKeyword_42_0() { return cJournalmessagesJournalmessagesKeyword_42_0; }
		
		//journalsummaries
		public EnumLiteralDeclaration getJournalsummariesEnumLiteralDeclaration_43() { return cJournalsummariesEnumLiteralDeclaration_43; }
		
		public Keyword getJournalsummariesJournalsummariesKeyword_43_0() { return cJournalsummariesJournalsummariesKeyword_43_0; }
		
		//line
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_44() { return cLineEnumLiteralDeclaration_44; }
		
		public Keyword getLineLineKeyword_44_0() { return cLineLineKeyword_44_0; }
		
		//managers
		public EnumLiteralDeclaration getManagersEnumLiteralDeclaration_45() { return cManagersEnumLiteralDeclaration_45; }
		
		public Keyword getManagersManagersKeyword_45_0() { return cManagersManagersKeyword_45_0; }
		
		//maxend
		public EnumLiteralDeclaration getMaxendEnumLiteralDeclaration_46() { return cMaxendEnumLiteralDeclaration_46; }
		
		public Keyword getMaxendMaxendKeyword_46_0() { return cMaxendMaxendKeyword_46_0; }
		
		//maxstart
		public EnumLiteralDeclaration getMaxstartEnumLiteralDeclaration_47() { return cMaxstartEnumLiteralDeclaration_47; }
		
		public Keyword getMaxstartMaxstartKeyword_47_0() { return cMaxstartMaxstartKeyword_47_0; }
		
		//minend
		public EnumLiteralDeclaration getMinendEnumLiteralDeclaration_48() { return cMinendEnumLiteralDeclaration_48; }
		
		public Keyword getMinendMinendKeyword_48_0() { return cMinendMinendKeyword_48_0; }
		
		//minstart
		public EnumLiteralDeclaration getMinstartEnumLiteralDeclaration_49() { return cMinstartEnumLiteralDeclaration_49; }
		
		public Keyword getMinstartMinstartKeyword_49_0() { return cMinstartMinstartKeyword_49_0; }
		
		//monthly
		public EnumLiteralDeclaration getMonthlyEnumLiteralDeclaration_50() { return cMonthlyEnumLiteralDeclaration_50; }
		
		public Keyword getMonthlyMonthlyKeyword_50_0() { return cMonthlyMonthlyKeyword_50_0; }
		
		//no
		public EnumLiteralDeclaration getNoEnumLiteralDeclaration_51() { return cNoEnumLiteralDeclaration_51; }
		
		public Keyword getNoNoKeyword_51_0() { return cNoNoKeyword_51_0; }
		
		//name
		public EnumLiteralDeclaration getNameEnumLiteralDeclaration_52() { return cNameEnumLiteralDeclaration_52; }
		
		public Keyword getNameNameKeyword_52_0() { return cNameNameKeyword_52_0; }
		
		//note
		public EnumLiteralDeclaration getNoteEnumLiteralDeclaration_53() { return cNoteEnumLiteralDeclaration_53; }
		
		public Keyword getNoteNoteKeyword_53_0() { return cNoteNoteKeyword_53_0; }
		
		//opentasks
		public EnumLiteralDeclaration getOpentasksEnumLiteralDeclaration_54() { return cOpentasksEnumLiteralDeclaration_54; }
		
		public Keyword getOpentasksOpentasksKeyword_54_0() { return cOpentasksOpentasksKeyword_54_0; }
		
		//pathcriticalness
		public EnumLiteralDeclaration getPathcriticalnessEnumLiteralDeclaration_55() { return cPathcriticalnessEnumLiteralDeclaration_55; }
		
		public Keyword getPathcriticalnessPathcriticalnessKeyword_55_0() { return cPathcriticalnessPathcriticalnessKeyword_55_0; }
		
		//precursors
		public EnumLiteralDeclaration getPrecursorsEnumLiteralDeclaration_56() { return cPrecursorsEnumLiteralDeclaration_56; }
		
		public Keyword getPrecursorsPrecursorsKeyword_56_0() { return cPrecursorsPrecursorsKeyword_56_0; }
		
		//priority
		public EnumLiteralDeclaration getPriorityEnumLiteralDeclaration_57() { return cPriorityEnumLiteralDeclaration_57; }
		
		public Keyword getPriorityPriorityKeyword_57_0() { return cPriorityPriorityKeyword_57_0; }
		
		//quarterly
		public EnumLiteralDeclaration getQuarterlyEnumLiteralDeclaration_58() { return cQuarterlyEnumLiteralDeclaration_58; }
		
		public Keyword getQuarterlyQuarterlyKeyword_58_0() { return cQuarterlyQuarterlyKeyword_58_0; }
		
		//rate
		public EnumLiteralDeclaration getRateEnumLiteralDeclaration_59() { return cRateEnumLiteralDeclaration_59; }
		
		public Keyword getRateRateKeyword_59_0() { return cRateRateKeyword_59_0; }
		
		//reports
		public EnumLiteralDeclaration getReportsEnumLiteralDeclaration_60() { return cReportsEnumLiteralDeclaration_60; }
		
		public Keyword getReportsReportsKeyword_60_0() { return cReportsReportsKeyword_60_0; }
		
		//resources
		public EnumLiteralDeclaration getResourcesEnumLiteralDeclaration_61() { return cResourcesEnumLiteralDeclaration_61; }
		
		public Keyword getResourcesResourcesKeyword_61_0() { return cResourcesResourcesKeyword_61_0; }
		
		//responsible
		public EnumLiteralDeclaration getResponsibleEnumLiteralDeclaration_62() { return cResponsibleEnumLiteralDeclaration_62; }
		
		public Keyword getResponsibleResponsibleKeyword_62_0() { return cResponsibleResponsibleKeyword_62_0; }
		
		//revenue
		public EnumLiteralDeclaration getRevenueEnumLiteralDeclaration_63() { return cRevenueEnumLiteralDeclaration_63; }
		
		public Keyword getRevenueRevenueKeyword_63_0() { return cRevenueRevenueKeyword_63_0; }
		
		//scenario
		public EnumLiteralDeclaration getScenarioEnumLiteralDeclaration_64() { return cScenarioEnumLiteralDeclaration_64; }
		
		public Keyword getScenarioScenarioKeyword_64_0() { return cScenarioScenarioKeyword_64_0; }
		
		//scheduling
		public EnumLiteralDeclaration getSchedulingEnumLiteralDeclaration_65() { return cSchedulingEnumLiteralDeclaration_65; }
		
		public Keyword getSchedulingSchedulingKeyword_65_0() { return cSchedulingSchedulingKeyword_65_0; }
		
		//seqno
		public EnumLiteralDeclaration getSeqnoEnumLiteralDeclaration_66() { return cSeqnoEnumLiteralDeclaration_66; }
		
		public Keyword getSeqnoSeqnoKeyword_66_0() { return cSeqnoSeqnoKeyword_66_0; }
		
		//sickleave
		public EnumLiteralDeclaration getSickleaveEnumLiteralDeclaration_67() { return cSickleaveEnumLiteralDeclaration_67; }
		
		public Keyword getSickleaveSickleaveKeyword_67_0() { return cSickleaveSickleaveKeyword_67_0; }
		
		//specialleave
		public EnumLiteralDeclaration getSpecialleaveEnumLiteralDeclaration_68() { return cSpecialleaveEnumLiteralDeclaration_68; }
		
		public Keyword getSpecialleaveSpecialleaveKeyword_68_0() { return cSpecialleaveSpecialleaveKeyword_68_0; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_69() { return cStartEnumLiteralDeclaration_69; }
		
		public Keyword getStartStartKeyword_69_0() { return cStartStartKeyword_69_0; }
		
		//status
		public EnumLiteralDeclaration getStatusEnumLiteralDeclaration_70() { return cStatusEnumLiteralDeclaration_70; }
		
		public Keyword getStatusStatusKeyword_70_0() { return cStatusStatusKeyword_70_0; }
		
		//targets
		public EnumLiteralDeclaration getTargetsEnumLiteralDeclaration_71() { return cTargetsEnumLiteralDeclaration_71; }
		
		public Keyword getTargetsTargetsKeyword_71_0() { return cTargetsTargetsKeyword_71_0; }
		
		//turnover
		public EnumLiteralDeclaration getTurnoverEnumLiteralDeclaration_72() { return cTurnoverEnumLiteralDeclaration_72; }
		
		public Keyword getTurnoverTurnoverKeyword_72_0() { return cTurnoverTurnoverKeyword_72_0; }
		
		//wbs
		public EnumLiteralDeclaration getWbsEnumLiteralDeclaration_73() { return cWbsEnumLiteralDeclaration_73; }
		
		public Keyword getWbsWbsKeyword_73_0() { return cWbsWbsKeyword_73_0; }
		
		//unpaidleave
		public EnumLiteralDeclaration getUnpaidleaveEnumLiteralDeclaration_74() { return cUnpaidleaveEnumLiteralDeclaration_74; }
		
		public Keyword getUnpaidleaveUnpaidleaveKeyword_74_0() { return cUnpaidleaveUnpaidleaveKeyword_74_0; }
		
		//weekly
		public EnumLiteralDeclaration getWeeklyEnumLiteralDeclaration_75() { return cWeeklyEnumLiteralDeclaration_75; }
		
		public Keyword getWeeklyWeeklyKeyword_75_0() { return cWeeklyWeeklyKeyword_75_0; }
		
		//yearly
		public EnumLiteralDeclaration getYearlyEnumLiteralDeclaration_76() { return cYearlyEnumLiteralDeclaration_76; }
		
		public Keyword getYearlyYearlyKeyword_76_0() { return cYearlyYearlyKeyword_76_0; }
	}
	public class AlertLevelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.AlertLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREDRedKeyword_0_0 = (Keyword)cREDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cYELLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cYELLOWYellowKeyword_1_0 = (Keyword)cYELLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREENEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREENGreenKeyword_2_0 = (Keyword)cGREENEnumLiteralDeclaration_2.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/alert.html
		//enum AlertLevel:
		//    RED='red' |
		//    YELLOW='yellow' |
		//    GREEN='green';
		public EnumRule getRule() { return rule; }
		
		//RED='red' |
		//YELLOW='yellow' |
		//GREEN='green'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RED='red'
		public EnumLiteralDeclaration getREDEnumLiteralDeclaration_0() { return cREDEnumLiteralDeclaration_0; }
		
		//'red'
		public Keyword getREDRedKeyword_0_0() { return cREDRedKeyword_0_0; }
		
		//YELLOW='yellow'
		public EnumLiteralDeclaration getYELLOWEnumLiteralDeclaration_1() { return cYELLOWEnumLiteralDeclaration_1; }
		
		//'yellow'
		public Keyword getYELLOWYellowKeyword_1_0() { return cYELLOWYellowKeyword_1_0; }
		
		//GREEN='green'
		public EnumLiteralDeclaration getGREENEnumLiteralDeclaration_2() { return cGREENEnumLiteralDeclaration_2; }
		
		//'green'
		public Keyword getGREENGreenKeyword_2_0() { return cGREENGreenKeyword_2_0; }
	}
	public class DependsPolicyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.DependsPolicy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONENDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONENDOnendKeyword_0_0 = (Keyword)cONENDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONSTARTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONSTARTOnstartKeyword_1_0 = (Keyword)cONSTARTEnumLiteralDeclaration_1.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/onend.html
		//// http://www.taskjuggler.org/tj3/manual/onstart.html
		//enum DependsPolicy:
		//  ONEND = 'onend' |
		//  ONSTART = 'onstart';
		public EnumRule getRule() { return rule; }
		
		//ONEND = 'onend' |
		//ONSTART = 'onstart'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ONEND = 'onend'
		public EnumLiteralDeclaration getONENDEnumLiteralDeclaration_0() { return cONENDEnumLiteralDeclaration_0; }
		
		//'onend'
		public Keyword getONENDOnendKeyword_0_0() { return cONENDOnendKeyword_0_0; }
		
		//ONSTART = 'onstart'
		public EnumLiteralDeclaration getONSTARTEnumLiteralDeclaration_1() { return cONSTARTEnumLiteralDeclaration_1; }
		
		//'onstart'
		public Keyword getONSTARTOnstartKeyword_1_0() { return cONSTARTOnstartKeyword_1_0; }
	}
	public class SchedulingPolicyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SchedulingPolicy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALAPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALAPAlapKeyword_0_0 = (Keyword)cALAPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASAPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASAPAsapKeyword_1_0 = (Keyword)cASAPEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SchedulingPolicy:
		//    ALAP = 'alap' |
		//    ASAP = 'asap';
		public EnumRule getRule() { return rule; }
		
		//ALAP = 'alap' |
		//ASAP = 'asap'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALAP = 'alap'
		public EnumLiteralDeclaration getALAPEnumLiteralDeclaration_0() { return cALAPEnumLiteralDeclaration_0; }
		
		//'alap'
		public Keyword getALAPAlapKeyword_0_0() { return cALAPAlapKeyword_0_0; }
		
		//ASAP = 'asap'
		public EnumLiteralDeclaration getASAPEnumLiteralDeclaration_1() { return cASAPEnumLiteralDeclaration_1; }
		
		//'asap'
		public Keyword getASAPAsapKeyword_1_0() { return cASAPAsapKeyword_1_0; }
	}
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUTEMinKeyword_0_0 = (Keyword)cMINUTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHOURHKeyword_1_0 = (Keyword)cHOUREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDAYDKeyword_2_0 = (Keyword)cDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEEKWKeyword_3_0 = (Keyword)cWEEKEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMONTHMKeyword_4_0 = (Keyword)cMONTHEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARYKeyword_5_0 = (Keyword)cYEAREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TimeUnit:
		//    MINUTE='min'|
		//    HOUR='h'|
		//    DAY='d'|
		//    WEEK='w'|
		//    MONTH='m'|
		//    YEAR='y';
		public EnumRule getRule() { return rule; }
		
		//MINUTE='min'|
		//HOUR='h'|
		//DAY='d'|
		//WEEK='w'|
		//MONTH='m'|
		//YEAR='y'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUTE='min'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_0() { return cMINUTEEnumLiteralDeclaration_0; }
		
		//'min'
		public Keyword getMINUTEMinKeyword_0_0() { return cMINUTEMinKeyword_0_0; }
		
		//HOUR='h'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_1() { return cHOUREnumLiteralDeclaration_1; }
		
		//'h'
		public Keyword getHOURHKeyword_1_0() { return cHOURHKeyword_1_0; }
		
		//DAY='d'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_2() { return cDAYEnumLiteralDeclaration_2; }
		
		//'d'
		public Keyword getDAYDKeyword_2_0() { return cDAYDKeyword_2_0; }
		
		//WEEK='w'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_3() { return cWEEKEnumLiteralDeclaration_3; }
		
		//'w'
		public Keyword getWEEKWKeyword_3_0() { return cWEEKWKeyword_3_0; }
		
		//MONTH='m'
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_4() { return cMONTHEnumLiteralDeclaration_4; }
		
		//'m'
		public Keyword getMONTHMKeyword_4_0() { return cMONTHMKeyword_4_0; }
		
		//YEAR='y'
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_5() { return cYEAREnumLiteralDeclaration_5; }
		
		//'y'
		public Keyword getYEARYKeyword_5_0() { return cYEARYKeyword_5_0; }
	}
	public class WeekdayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.Weekday");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMONMonKeyword_0_0 = (Keyword)cMONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTUETueKeyword_1_0 = (Keyword)cTUEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWEDWedKeyword_2_0 = (Keyword)cWEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTHREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTHRThuKeyword_3_0 = (Keyword)cTHREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFRIEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFRIFriKeyword_4_0 = (Keyword)cFRIEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSATEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSATSatKeyword_5_0 = (Keyword)cSATEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSUNEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSUNSunKeyword_6_0 = (Keyword)cSUNEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Weekday:
		//  MON = 'mon' |
		//  TUE = 'tue' |
		//  WED = 'wed' |
		//  THR = 'thu' |
		//  FRI = 'fri' |
		//  SAT = 'sat' |
		//  SUN = 'sun'
		//;
		public EnumRule getRule() { return rule; }
		
		//MON = 'mon' |
		//TUE = 'tue' |
		//WED = 'wed' |
		//THR = 'thu' |
		//FRI = 'fri' |
		//SAT = 'sat' |
		//SUN = 'sun'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MON = 'mon'
		public EnumLiteralDeclaration getMONEnumLiteralDeclaration_0() { return cMONEnumLiteralDeclaration_0; }
		
		//'mon'
		public Keyword getMONMonKeyword_0_0() { return cMONMonKeyword_0_0; }
		
		//TUE = 'tue'
		public EnumLiteralDeclaration getTUEEnumLiteralDeclaration_1() { return cTUEEnumLiteralDeclaration_1; }
		
		//'tue'
		public Keyword getTUETueKeyword_1_0() { return cTUETueKeyword_1_0; }
		
		//WED = 'wed'
		public EnumLiteralDeclaration getWEDEnumLiteralDeclaration_2() { return cWEDEnumLiteralDeclaration_2; }
		
		//'wed'
		public Keyword getWEDWedKeyword_2_0() { return cWEDWedKeyword_2_0; }
		
		//THR = 'thu'
		public EnumLiteralDeclaration getTHREnumLiteralDeclaration_3() { return cTHREnumLiteralDeclaration_3; }
		
		//'thu'
		public Keyword getTHRThuKeyword_3_0() { return cTHRThuKeyword_3_0; }
		
		//FRI = 'fri'
		public EnumLiteralDeclaration getFRIEnumLiteralDeclaration_4() { return cFRIEnumLiteralDeclaration_4; }
		
		//'fri'
		public Keyword getFRIFriKeyword_4_0() { return cFRIFriKeyword_4_0; }
		
		//SAT = 'sat'
		public EnumLiteralDeclaration getSATEnumLiteralDeclaration_5() { return cSATEnumLiteralDeclaration_5; }
		
		//'sat'
		public Keyword getSATSatKeyword_5_0() { return cSATSatKeyword_5_0; }
		
		//SUN = 'sun'
		public EnumLiteralDeclaration getSUNEnumLiteralDeclaration_6() { return cSUNEnumLiteralDeclaration_6; }
		
		//'sun'
		public Keyword getSUNSunKeyword_6_0() { return cSUNSunKeyword_6_0; }
	}
	public class WorkQuantityUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.WorkQuantityUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPERCENTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPERCENTPercentSignKeyword_0_0 = (Keyword)cPERCENTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTESMinKeyword_1_0 = (Keyword)cMINUTESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURSHKeyword_2_0 = (Keyword)cHOURSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYSDKeyword_3_0 = (Keyword)cDAYSEnumLiteralDeclaration_3.eContents().get(0);
		
		//// http://www.taskjuggler.org/tj3/manual/work.html
		//enum WorkQuantityUnit:
		//    PERCENT = '%'
		//    | MINUTES = 'min'
		//    | HOURS = 'h'
		//    | DAYS = 'd'
		//;
		public EnumRule getRule() { return rule; }
		
		//PERCENT = '%'
		//| MINUTES = 'min'
		//| HOURS = 'h'
		//| DAYS = 'd'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PERCENT = '%'
		public EnumLiteralDeclaration getPERCENTEnumLiteralDeclaration_0() { return cPERCENTEnumLiteralDeclaration_0; }
		
		//'%'
		public Keyword getPERCENTPercentSignKeyword_0_0() { return cPERCENTPercentSignKeyword_0_0; }
		
		//MINUTES = 'min'
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_1() { return cMINUTESEnumLiteralDeclaration_1; }
		
		//'min'
		public Keyword getMINUTESMinKeyword_1_0() { return cMINUTESMinKeyword_1_0; }
		
		//HOURS = 'h'
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_2() { return cHOURSEnumLiteralDeclaration_2; }
		
		//'h'
		public Keyword getHOURSHKeyword_2_0() { return cHOURSHKeyword_2_0; }
		
		//DAYS = 'd'
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_3() { return cDAYSEnumLiteralDeclaration_3; }
		
		//'d'
		public Keyword getDAYSDKeyword_3_0() { return cDAYSDKeyword_3_0; }
	}
	
	private final GlobalElements pGlobal;
	private final PropertyElements pProperty;
	private final LeavesElements pLeaves;
	private final LeaveDetailsElements pLeaveDetails;
	private final LeaveTypeElements eLeaveType;
	private final AbsoluteIdElements pAbsoluteId;
	private final AccountElements pAccount;
	private final AccountAttributeElements pAccountAttribute;
	private final AccountPrefixElements pAccountPrefix;
	private final AccountReportElements pAccountReport;
	private final AccountRootElements pAccountRoot;
	private final ProjectElements pProject;
	private final ProjectAttributeElements pProjectAttribute;
	private final TaskElements pTask;
	private final TaskAttributeElements pTaskAttribute;
	private final BuildInMacroElements eBuildInMacro;
	private final MacroCallElements pMacroCall;
	private final ReportElements pReport;
	private final ReportAttributeElements pReportAttribute;
	private final IcalReportElements pIcalReport;
	private final IcalReportAttributeElements pIcalReportAttribute;
	private final ExportElements pExport;
	private final ExportAttributeElements pExportAttribute;
	private final ResourceElements pResource;
	private final ResourceAttributeElements pResourceAttribute;
	private final AllocateElements pAllocate;
	private final AllocateResourceElements pAllocateResource;
	private final AllocateResourceAttributeElements pAllocateResourceAttribute;
	private final NavigatorElements pNavigator;
	private final NavigatorAttributeElements pNavigatorAttribute;
	private final NewTaskElements pNewTask;
	private final NewTaskAttributeElements pNewTaskAttribute;
	private final NikuReportElements pNikuReport;
	private final NikuReportAttributeElements pNikuReportAttribute;
	private final AlertElements pAlert;
	private final AlternativeElements pAlternative;
	private final AuthorElements pAuthor;
	private final BalanceElements pBalance;
	private final BookingElements pBooking;
	private final BookingTaskElements pBookingTask;
	private final BookingResourceElements pBookingResource;
	private final CaptionElements pCaption;
	private final CellColorElements pCellColor;
	private final CellTextElements pCellText;
	private final CenterElements pCenter;
	private final ChargeElements pCharge;
	private final ChargeSetElements pChargeSet;
	private final ColumnsElements pColumns;
	private final CompleteElements pComplete;
	private final CopyrightElements pCopyright;
	private final CreditElements pCredit;
	private final CurrencyElements pCurrency;
	private final CurrencyFormatElements pCurrencyFormat;
	private final DailyMaxElements pDailyMax;
	private final DailyMinElements pDailyMin;
	private final DailyWorkingHoursElements pDailyWorkingHours;
	private final DefinitionsElements pDefinitions;
	private final DependsElements pDepends;
	private final DetailsElements pDetails;
	private final DurationElements pDuration;
	private final EfficiencyElements pEfficiency;
	private final EffortElements pEffort;
	private final EmailElements pEmail;
	private final EndElements pEnd;
	private final EndCreditElements pEndCredit;
	private final EpilogElements pEpilog;
	private final ExtendElements pExtend;
	private final ExtendResourceElements pExtendResource;
	private final ExtendedResourceAttributeElements pExtendedResourceAttribute;
	private final ExtendTaskElements pExtendTask;
	private final ExtendedTaskAttributeElements pExtendedTaskAttribute;
	private final FailElements pFail;
	private final FlagsElements pFlags;
	private final FontColorElements pFontColor;
	private final FooterElements pFooter;
	private final FormatsElements pFormats;
	private final FunctionElements pFunction;
	private final GapDurationElements pGapDuration;
	private final GapLengthElements pGapLength;
	private final HAlignElements pHAlign;
	private final HasAlertElements pHasAlert;
	private final HeaderElements pHeader;
	private final HeadlineElements pHeadline;
	private final HideAccountElements pHideAccount;
	private final HideJournalEntryElements pHideJournalEntry;
	private final HideReportElements pHideReport;
	private final HideResourceElements pHideResource;
	private final HideTaskElements pHideTask;
	private final IncludeElements pInclude;
	private final IncludePropertiesElements pIncludeProperties;
	private final IncludePropertiesAttributeElements pIncludePropertiesAttribute;
	private final Interval1Elements pInterval1;
	private final Interval2Elements pInterval2;
	private final Interval3Elements pInterval3;
	private final Interval4Elements pInterval4;
	private final JournalAttributesElements pJournalAttributes;
	private final JournalAttributeValuesElements eJournalAttributeValues;
	private final JournalEntryElements pJournalEntry;
	private final JournalModeElements pJournalMode;
	private final LeftElements pLeft;
	private final LengthElements pLength;
	private final LimitsElements pLimits;
	private final LimitsAttributeElements pLimitsAttribute;
	private final ListItemElements pListItem;
	private final ListTypeElements pListType;
	private final LoadUnitElements pLoadUnit;
	private final LogicalExpressionElements pLogicalExpression;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LEOpOrElements pLEOpOr;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final LEOpAndElements pLEOpAnd;
	private final LogicalEqualityExpressionElements pLogicalEqualityExpression;
	private final LEOpEqualityElements pLEOpEquality;
	private final LogicalRelationalExpressionElements pLogicalRelationalExpression;
	private final OpCompareElements pOpCompare;
	private final LogicalPrimaryExpressionElements pLogicalPrimaryExpression;
	private final LogicalFunctionExpressionElements pLogicalFunctionExpression;
	private final LogicalAbsoluteIdExpressionElements pLogicalAbsoluteIdExpression;
	private final LogicalBooleanLiteralElements pLogicalBooleanLiteral;
	private final LogicalNumeralLiteralElements pLogicalNumeralLiteral;
	private final LogicalStringLiteralElements pLogicalStringLiteral;
	private final LogicalISODateLiteralElements pLogicalISODateLiteral;
	private final LogicalFlagLiteralElements pLogicalFlagLiteral;
	private final LogicalPrenthesizedExpressionElements pLogicalPrenthesizedExpression;
	private final LogicalFlagExpressionElements pLogicalFlagExpression;
	private final MacroElements pMacro;
	private final ManagersElements pManagers;
	private final MandatoryElements pMandatory;
	private final MaxEndElements pMaxEnd;
	private final MaximumElements pMaximum;
	private final MaxStartElements pMaxStart;
	private final MilestoneElements pMilestone;
	private final MinimumElements pMinimum;
	private final MinEndElements pMinEnd;
	private final MinStartElements pMinStart;
	private final MonthlyMaxElements pMonthlyMax;
	private final MonthlyMinElements pMonthlyMin;
	private final NoteElements pNote;
	private final NowElements pNow;
	private final NumberFormatElements pNumberFormat;
	private final PeriodElements pPeriod;
	private final PersistentElements pPersistent;
	private final PrecedesElements pPrecedes;
	private final PriorityElements pPriority;
	private final ProjectIdElements pProjectId;
	private final ProjectIdsElements pProjectIds;
	private final PrologElements pProlog;
	private final PurgeReportElements pPurgeReport;
	private final PurgeReportAttributeElements ePurgeReportAttribute;
	private final PurgeResourceElements pPurgeResource;
	private final PurgeResourceAttributeElements ePurgeResourceAttribute;
	private final PurgeTaskElements pPurgeTask;
	private final PurgeTaskAttributeElements ePurgeTaskAttribute;
	private final RateElements pRate;
	private final RemainingElements pRemaining;
	private final ReportPrefixElements pReportPrefix;
	private final ResourceAttributesElements pResourceAttributes;
	private final ResourcePrefixElements pResourcePrefix;
	private final ResourceReportElements pResourceReport;
	private final ResourceRootElements pResourceRoot;
	private final ResponsibleElements pResponsible;
	private final RGBElements pRGB;
	private final RightElements pRight;
	private final RollupAccountElements pRollupAccount;
	private final RollupResourceElements pRollupResource;
	private final RollupTaskElements pRollupTask;
	private final ScaleElements pScale;
	private final ScenarioElements pScenario;
	private final ScenarioIcalElements pScenarioIcal;
	private final ScenariosElements pScenarios;
	private final ScheduledElements pScheduled;
	private final SchedulingElements pScheduling;
	private final SelectElements pSelect;
	private final SelfContainedElements pSelfContained;
	private final ShiftElements pShift;
	private final ShiftTimesheetElements pShiftTimesheet;
	private final ShiftsElements pShifts;
	private final ShiftsLimitElements pShiftsLimit;
	private final ShiftsAllocateElements pShiftsAllocate;
	private final ShiftsResourceElements pShiftsResource;
	private final ShiftsTaskElements pShiftsTask;
	private final ShortTimeFormatElements pShortTimeFormat;
	private final SortElements pSort;
	private final SortAccountsElements pSortAccounts;
	private final SortJournalEntriesElements pSortJournalEntries;
	private final SortResourcesElements pSortResources;
	private final SortTasksElements pSortTasks;
	private final StartElements pStart;
	private final StatusStatusSheetElements pStatusStatusSheet;
	private final StatusStatusSheetAttributeElements pStatusStatusSheetAttribute;
	private final StatusTimesheetElements pStatusTimesheet;
	private final StatusTimesheetAttributeElements pStatusTimesheetAttribute;
	private final StatusSheetElements pStatusSheet;
	private final StatusSheetAttributeElements pStatusSheetAttribute;
	private final StatusSheetReportElements pStatusSheetReport;
	private final StatusSheetReportAttributeElements pStatusSheetReportAttribute;
	private final SummaryElements pSummary;
	private final SupplementAccountElements pSupplementAccount;
	private final SupplementReportElements pSupplementReport;
	private final SupplementResourceElements pSupplementResource;
	private final SupplementTaskElements pSupplementTask;
	private final TagFileElements pTagFile;
	private final TaskStatusSheetElements pTaskStatusSheet;
	private final TaskStatusSheetAttributeElements pTaskStatusSheetAttribute;
	private final TaskTimesheetElements pTaskTimesheet;
	private final TaskTimesheetAttributeElements pTaskTimesheetAttribute;
	private final TaskAttributesElements pTaskAttributes;
	private final TaskPrefixElements pTaskPrefix;
	private final TaskReportElements pTaskReport;
	private final TaskRootElements pTaskRoot;
	private final TextReportElements pTextReport;
	private final TimeFormatElements pTimeFormat;
	private final TimeoffElements pTimeoff;
	private final TimesheetElements pTimesheet;
	private final TimesheetAttributeElements pTimesheetAttribute;
	private final TimesheetReportElements pTimesheetReport;
	private final TimesheetReportAttributeElements pTimesheetReportAttribute;
	private final TimezoneElements pTimezone;
	private final TimingResolutionElements pTimingResolution;
	private final TitleElements pTitle;
	private final ToolTipElements pToolTip;
	private final TrackingScenarioElements pTrackingScenario;
	private final TreeLevelElements pTreeLevel;
	private final VacationElements pVacation;
	private final VacationShiftElements pVacationShift;
	private final VacationResourceElements pVacationResource;
	private final WarnElements pWarn;
	private final WeekStartsElements pWeekStarts;
	private final WeeklyMaxElements pWeeklyMax;
	private final WeeklyMinElements pWeeklyMin;
	private final WidthElements pWidth;
	private final WorkElements pWork;
	private final WorkingHoursElements pWorkingHours;
	private final YearlyWorkingDaysElements pYearlyWorkingDays;
	private final AccountShareElements pAccountShare;
	private final ColumnAttributeElements pColumnAttribute;
	private final ExtendedResourceAttributeColumnElements pExtendedResourceAttributeColumn;
	private final ColumnElements pColumn;
	private final CriterionElements pCriterion;
	private final DurationQuantityElements pDurationQuantity;
	private final LimitElements pLimit;
	private final LimitAttributeElements pLimitAttribute;
	private final RealFormatElements pRealFormat;
	private final TaskDependencyElements pTaskDependency;
	private final TaskPathElements pTaskPath;
	private final RichTextElements pRichText;
	private final WorkHoursElements pWorkHours;
	private final WeekdaysElements pWeekdays;
	private final ChargeAppliesElements eChargeApplies;
	private final JustificationElements eJustification;
	private final JournalModeValueElements eJournalModeValue;
	private final JournalEntrySortCriterionElements eJournalEntrySortCriterion;
	private final ListTypeValuesElements eListTypeValues;
	private final CriterionDirectionElements eCriterionDirection;
	private final YesNoElements eYesNo;
	private final ReportFormatElements eReportFormat;
	private final LoadDisplayUnitElements eLoadDisplayUnit;
	private final ScaleResolutionElements eScaleResolution;
	private final SelectArgumentElements eSelectArgument;
	private final ColumnIdElements eColumnId;
	private final AlertLevelElements eAlertLevel;
	private final DependsPolicyElements eDependsPolicy;
	private final SchedulingPolicyElements eSchedulingPolicy;
	private final TimeUnitElements eTimeUnit;
	private final WeekdayElements eWeekday;
	private final WorkQuantityUnitElements eWorkQuantityUnit;
	private final TerminalRule tID;
	private final QualifiedNameElements pQualifiedName;
	private final XFloatElements pXFloat;
	private final TerminalRule tFLOAT;
	private final EStringElements pEString;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tTIME;
	private final ISODATEElements pISODATE;
	private final ExtDateElements pExtDate;
	private final TerminalRule tDATE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ETJGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGlobal = new GlobalElements();
		this.pProperty = new PropertyElements();
		this.pLeaves = new LeavesElements();
		this.pLeaveDetails = new LeaveDetailsElements();
		this.eLeaveType = new LeaveTypeElements();
		this.pAbsoluteId = new AbsoluteIdElements();
		this.pAccount = new AccountElements();
		this.pAccountAttribute = new AccountAttributeElements();
		this.pAccountPrefix = new AccountPrefixElements();
		this.pAccountReport = new AccountReportElements();
		this.pAccountRoot = new AccountRootElements();
		this.pProject = new ProjectElements();
		this.pProjectAttribute = new ProjectAttributeElements();
		this.pTask = new TaskElements();
		this.pTaskAttribute = new TaskAttributeElements();
		this.eBuildInMacro = new BuildInMacroElements();
		this.pMacroCall = new MacroCallElements();
		this.pReport = new ReportElements();
		this.pReportAttribute = new ReportAttributeElements();
		this.pIcalReport = new IcalReportElements();
		this.pIcalReportAttribute = new IcalReportAttributeElements();
		this.pExport = new ExportElements();
		this.pExportAttribute = new ExportAttributeElements();
		this.pResource = new ResourceElements();
		this.pResourceAttribute = new ResourceAttributeElements();
		this.pAllocate = new AllocateElements();
		this.pAllocateResource = new AllocateResourceElements();
		this.pAllocateResourceAttribute = new AllocateResourceAttributeElements();
		this.pNavigator = new NavigatorElements();
		this.pNavigatorAttribute = new NavigatorAttributeElements();
		this.pNewTask = new NewTaskElements();
		this.pNewTaskAttribute = new NewTaskAttributeElements();
		this.pNikuReport = new NikuReportElements();
		this.pNikuReportAttribute = new NikuReportAttributeElements();
		this.pAlert = new AlertElements();
		this.pAlternative = new AlternativeElements();
		this.pAuthor = new AuthorElements();
		this.pBalance = new BalanceElements();
		this.pBooking = new BookingElements();
		this.pBookingTask = new BookingTaskElements();
		this.pBookingResource = new BookingResourceElements();
		this.pCaption = new CaptionElements();
		this.pCellColor = new CellColorElements();
		this.pCellText = new CellTextElements();
		this.pCenter = new CenterElements();
		this.pCharge = new ChargeElements();
		this.pChargeSet = new ChargeSetElements();
		this.pColumns = new ColumnsElements();
		this.pComplete = new CompleteElements();
		this.pCopyright = new CopyrightElements();
		this.pCredit = new CreditElements();
		this.pCurrency = new CurrencyElements();
		this.pCurrencyFormat = new CurrencyFormatElements();
		this.pDailyMax = new DailyMaxElements();
		this.pDailyMin = new DailyMinElements();
		this.pDailyWorkingHours = new DailyWorkingHoursElements();
		this.pDefinitions = new DefinitionsElements();
		this.pDepends = new DependsElements();
		this.pDetails = new DetailsElements();
		this.pDuration = new DurationElements();
		this.pEfficiency = new EfficiencyElements();
		this.pEffort = new EffortElements();
		this.pEmail = new EmailElements();
		this.pEnd = new EndElements();
		this.pEndCredit = new EndCreditElements();
		this.pEpilog = new EpilogElements();
		this.pExtend = new ExtendElements();
		this.pExtendResource = new ExtendResourceElements();
		this.pExtendedResourceAttribute = new ExtendedResourceAttributeElements();
		this.pExtendTask = new ExtendTaskElements();
		this.pExtendedTaskAttribute = new ExtendedTaskAttributeElements();
		this.pFail = new FailElements();
		this.pFlags = new FlagsElements();
		this.pFontColor = new FontColorElements();
		this.pFooter = new FooterElements();
		this.pFormats = new FormatsElements();
		this.pFunction = new FunctionElements();
		this.pGapDuration = new GapDurationElements();
		this.pGapLength = new GapLengthElements();
		this.pHAlign = new HAlignElements();
		this.pHasAlert = new HasAlertElements();
		this.pHeader = new HeaderElements();
		this.pHeadline = new HeadlineElements();
		this.pHideAccount = new HideAccountElements();
		this.pHideJournalEntry = new HideJournalEntryElements();
		this.pHideReport = new HideReportElements();
		this.pHideResource = new HideResourceElements();
		this.pHideTask = new HideTaskElements();
		this.pInclude = new IncludeElements();
		this.pIncludeProperties = new IncludePropertiesElements();
		this.pIncludePropertiesAttribute = new IncludePropertiesAttributeElements();
		this.pInterval1 = new Interval1Elements();
		this.pInterval2 = new Interval2Elements();
		this.pInterval3 = new Interval3Elements();
		this.pInterval4 = new Interval4Elements();
		this.pJournalAttributes = new JournalAttributesElements();
		this.eJournalAttributeValues = new JournalAttributeValuesElements();
		this.pJournalEntry = new JournalEntryElements();
		this.pJournalMode = new JournalModeElements();
		this.pLeft = new LeftElements();
		this.pLength = new LengthElements();
		this.pLimits = new LimitsElements();
		this.pLimitsAttribute = new LimitsAttributeElements();
		this.pListItem = new ListItemElements();
		this.pListType = new ListTypeElements();
		this.pLoadUnit = new LoadUnitElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLEOpOr = new LEOpOrElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pLEOpAnd = new LEOpAndElements();
		this.pLogicalEqualityExpression = new LogicalEqualityExpressionElements();
		this.pLEOpEquality = new LEOpEqualityElements();
		this.pLogicalRelationalExpression = new LogicalRelationalExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pLogicalPrimaryExpression = new LogicalPrimaryExpressionElements();
		this.pLogicalFunctionExpression = new LogicalFunctionExpressionElements();
		this.pLogicalAbsoluteIdExpression = new LogicalAbsoluteIdExpressionElements();
		this.pLogicalBooleanLiteral = new LogicalBooleanLiteralElements();
		this.pLogicalNumeralLiteral = new LogicalNumeralLiteralElements();
		this.pLogicalStringLiteral = new LogicalStringLiteralElements();
		this.pLogicalISODateLiteral = new LogicalISODateLiteralElements();
		this.pLogicalFlagLiteral = new LogicalFlagLiteralElements();
		this.pLogicalPrenthesizedExpression = new LogicalPrenthesizedExpressionElements();
		this.pLogicalFlagExpression = new LogicalFlagExpressionElements();
		this.pMacro = new MacroElements();
		this.pManagers = new ManagersElements();
		this.pMandatory = new MandatoryElements();
		this.pMaxEnd = new MaxEndElements();
		this.pMaximum = new MaximumElements();
		this.pMaxStart = new MaxStartElements();
		this.pMilestone = new MilestoneElements();
		this.pMinimum = new MinimumElements();
		this.pMinEnd = new MinEndElements();
		this.pMinStart = new MinStartElements();
		this.pMonthlyMax = new MonthlyMaxElements();
		this.pMonthlyMin = new MonthlyMinElements();
		this.pNote = new NoteElements();
		this.pNow = new NowElements();
		this.pNumberFormat = new NumberFormatElements();
		this.pPeriod = new PeriodElements();
		this.pPersistent = new PersistentElements();
		this.pPrecedes = new PrecedesElements();
		this.pPriority = new PriorityElements();
		this.pProjectId = new ProjectIdElements();
		this.pProjectIds = new ProjectIdsElements();
		this.pProlog = new PrologElements();
		this.pPurgeReport = new PurgeReportElements();
		this.ePurgeReportAttribute = new PurgeReportAttributeElements();
		this.pPurgeResource = new PurgeResourceElements();
		this.ePurgeResourceAttribute = new PurgeResourceAttributeElements();
		this.pPurgeTask = new PurgeTaskElements();
		this.ePurgeTaskAttribute = new PurgeTaskAttributeElements();
		this.pRate = new RateElements();
		this.pRemaining = new RemainingElements();
		this.pReportPrefix = new ReportPrefixElements();
		this.pResourceAttributes = new ResourceAttributesElements();
		this.pResourcePrefix = new ResourcePrefixElements();
		this.pResourceReport = new ResourceReportElements();
		this.pResourceRoot = new ResourceRootElements();
		this.pResponsible = new ResponsibleElements();
		this.pRGB = new RGBElements();
		this.pRight = new RightElements();
		this.pRollupAccount = new RollupAccountElements();
		this.pRollupResource = new RollupResourceElements();
		this.pRollupTask = new RollupTaskElements();
		this.pScale = new ScaleElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioIcal = new ScenarioIcalElements();
		this.pScenarios = new ScenariosElements();
		this.pScheduled = new ScheduledElements();
		this.pScheduling = new SchedulingElements();
		this.pSelect = new SelectElements();
		this.pSelfContained = new SelfContainedElements();
		this.pShift = new ShiftElements();
		this.pShiftTimesheet = new ShiftTimesheetElements();
		this.pShifts = new ShiftsElements();
		this.pShiftsLimit = new ShiftsLimitElements();
		this.pShiftsAllocate = new ShiftsAllocateElements();
		this.pShiftsResource = new ShiftsResourceElements();
		this.pShiftsTask = new ShiftsTaskElements();
		this.pShortTimeFormat = new ShortTimeFormatElements();
		this.pSort = new SortElements();
		this.pSortAccounts = new SortAccountsElements();
		this.pSortJournalEntries = new SortJournalEntriesElements();
		this.pSortResources = new SortResourcesElements();
		this.pSortTasks = new SortTasksElements();
		this.pStart = new StartElements();
		this.pStatusStatusSheet = new StatusStatusSheetElements();
		this.pStatusStatusSheetAttribute = new StatusStatusSheetAttributeElements();
		this.pStatusTimesheet = new StatusTimesheetElements();
		this.pStatusTimesheetAttribute = new StatusTimesheetAttributeElements();
		this.pStatusSheet = new StatusSheetElements();
		this.pStatusSheetAttribute = new StatusSheetAttributeElements();
		this.pStatusSheetReport = new StatusSheetReportElements();
		this.pStatusSheetReportAttribute = new StatusSheetReportAttributeElements();
		this.pSummary = new SummaryElements();
		this.pSupplementAccount = new SupplementAccountElements();
		this.pSupplementReport = new SupplementReportElements();
		this.pSupplementResource = new SupplementResourceElements();
		this.pSupplementTask = new SupplementTaskElements();
		this.pTagFile = new TagFileElements();
		this.pTaskStatusSheet = new TaskStatusSheetElements();
		this.pTaskStatusSheetAttribute = new TaskStatusSheetAttributeElements();
		this.pTaskTimesheet = new TaskTimesheetElements();
		this.pTaskTimesheetAttribute = new TaskTimesheetAttributeElements();
		this.pTaskAttributes = new TaskAttributesElements();
		this.pTaskPrefix = new TaskPrefixElements();
		this.pTaskReport = new TaskReportElements();
		this.pTaskRoot = new TaskRootElements();
		this.pTextReport = new TextReportElements();
		this.pTimeFormat = new TimeFormatElements();
		this.pTimeoff = new TimeoffElements();
		this.pTimesheet = new TimesheetElements();
		this.pTimesheetAttribute = new TimesheetAttributeElements();
		this.pTimesheetReport = new TimesheetReportElements();
		this.pTimesheetReportAttribute = new TimesheetReportAttributeElements();
		this.pTimezone = new TimezoneElements();
		this.pTimingResolution = new TimingResolutionElements();
		this.pTitle = new TitleElements();
		this.pToolTip = new ToolTipElements();
		this.pTrackingScenario = new TrackingScenarioElements();
		this.pTreeLevel = new TreeLevelElements();
		this.pVacation = new VacationElements();
		this.pVacationShift = new VacationShiftElements();
		this.pVacationResource = new VacationResourceElements();
		this.pWarn = new WarnElements();
		this.pWeekStarts = new WeekStartsElements();
		this.pWeeklyMax = new WeeklyMaxElements();
		this.pWeeklyMin = new WeeklyMinElements();
		this.pWidth = new WidthElements();
		this.pWork = new WorkElements();
		this.pWorkingHours = new WorkingHoursElements();
		this.pYearlyWorkingDays = new YearlyWorkingDaysElements();
		this.pAccountShare = new AccountShareElements();
		this.pColumnAttribute = new ColumnAttributeElements();
		this.pExtendedResourceAttributeColumn = new ExtendedResourceAttributeColumnElements();
		this.pColumn = new ColumnElements();
		this.pCriterion = new CriterionElements();
		this.pDurationQuantity = new DurationQuantityElements();
		this.pLimit = new LimitElements();
		this.pLimitAttribute = new LimitAttributeElements();
		this.pRealFormat = new RealFormatElements();
		this.pTaskDependency = new TaskDependencyElements();
		this.pTaskPath = new TaskPathElements();
		this.pRichText = new RichTextElements();
		this.pWorkHours = new WorkHoursElements();
		this.pWeekdays = new WeekdaysElements();
		this.eChargeApplies = new ChargeAppliesElements();
		this.eJustification = new JustificationElements();
		this.eJournalModeValue = new JournalModeValueElements();
		this.eJournalEntrySortCriterion = new JournalEntrySortCriterionElements();
		this.eListTypeValues = new ListTypeValuesElements();
		this.eCriterionDirection = new CriterionDirectionElements();
		this.eYesNo = new YesNoElements();
		this.eReportFormat = new ReportFormatElements();
		this.eLoadDisplayUnit = new LoadDisplayUnitElements();
		this.eScaleResolution = new ScaleResolutionElements();
		this.eSelectArgument = new SelectArgumentElements();
		this.eColumnId = new ColumnIdElements();
		this.eAlertLevel = new AlertLevelElements();
		this.eDependsPolicy = new DependsPolicyElements();
		this.eSchedulingPolicy = new SchedulingPolicyElements();
		this.eTimeUnit = new TimeUnitElements();
		this.eWeekday = new WeekdayElements();
		this.eWorkQuantityUnit = new WorkQuantityUnitElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.ID");
		this.pQualifiedName = new QualifiedNameElements();
		this.pXFloat = new XFloatElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.FLOAT");
		this.pEString = new EStringElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.SL_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.STRING");
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.TIME");
		this.pISODATE = new ISODATEElements();
		this.pExtDate = new ExtDateElements();
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.sos.etj.ETJ.DATE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.sos.etj.ETJ".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////
	//// The pattern used here for specifying attributes
	//// XXXX:
	////  'xxxx' ..... ( '{' attributes+=XxxxAttribute* '}' )?;
	////
	//// XxxxAttribute:
	////    Yyyy | Zzzz | ....
	////
	//// See Account below for real life example.  This pattern is
	//// in use because TaskJuggler permits attributes in any
	//// order and permits repeats
	////
	//// TODO: Include
	//// project is optional so the same rules can be
	//// used for tji files.
	//Global: project=Project? properties+=Property*;
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	//Property:
	//    Account
	//    | AccountReport
	//    | Balance
	//    | Copyright
	//    | CellColor
	//    | Export
	//    | Flags
	//    | IcalReport
	//    | IncludeProperties
	//    | Limits
	//    | Macro
	//    | Navigator
	//    | NikuReport
	//    | ProjectIds
	//    | Rate
	//    | ResourceReport
	//    | TaskReport
	//    | TextReport
	//    | Resource
	//    | Shift
	//    | StatusSheet
	//    | StatusSheetReport
	//    | SupplementAccount
	//    | SupplementReport
	//    | SupplementResource
	//    | SupplementTask
	//    | TagFile
	//    | Task
	//    | Timesheet
	//    | TimesheetReport
	//    | ToolTip
	//    | Vacation
	//    | Leaves
	//    | Allocate
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	////http://www.taskjuggler.org/tj3/manual/leaves.html
	//Leaves : 'leaves' details+=LeaveDetails (',' details+=LeaveDetails)*;
	public LeavesElements getLeavesAccess() {
		return pLeaves;
	}
	
	public ParserRule getLeavesRule() {
		return getLeavesAccess().getRule();
	}
	
	//LeaveDetails: type = LeaveType (name = (ID|STRING))? interval = Interval3;
	public LeaveDetailsElements getLeaveDetailsAccess() {
		return pLeaveDetails;
	}
	
	public ParserRule getLeaveDetailsRule() {
		return getLeaveDetailsAccess().getRule();
	}
	
	//enum LeaveType : project | annual | special | sick | unpaid | holiday | unemployed;
	public LeaveTypeElements getLeaveTypeAccess() {
		return eLeaveType;
	}
	
	public EnumRule getLeaveTypeRule() {
		return getLeaveTypeAccess().getRule();
	}
	
	//AbsoluteId: ID ('.' ID)*;
	public AbsoluteIdElements getAbsoluteIdAccess() {
		return pAbsoluteId;
	}
	
	public ParserRule getAbsoluteIdRule() {
		return getAbsoluteIdAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/account.html
	//Account:
	//    'account' id=ID? name=STRING ('{' attributes+=AccountAttribute* '}')?;
	public AccountElements getAccountAccess() {
		return pAccount;
	}
	
	public ParserRule getAccountRule() {
		return getAccountAccess().getRule();
	}
	
	//AccountAttribute:
	//    Account
	//    | Credit
	//    | Flags
	//;
	public AccountAttributeElements getAccountAttributeAccess() {
		return pAccountAttribute;
	}
	
	public ParserRule getAccountAttributeRule() {
		return getAccountAttributeAccess().getRule();
	}
	
	//AccountPrefix: 'accountprefix' account=[Account];
	public AccountPrefixElements getAccountPrefixAccess() {
		return pAccountPrefix;
	}
	
	public ParserRule getAccountPrefixRule() {
		return getAccountPrefixAccess().getRule();
	}
	
	//AccountReport: 'accountreport' Report;
	public AccountReportElements getAccountReportAccess() {
		return pAccountReport;
	}
	
	public ParserRule getAccountReportRule() {
		return getAccountReportAccess().getRule();
	}
	
	//AccountRoot: 'accountroot' account=[Account|ID];
	public AccountRootElements getAccountRootAccess() {
		return pAccountRoot;
	}
	
	public ParserRule getAccountRootRule() {
		return getAccountRootAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/project.html
	//Project :
	//    'project' id=ID? name=STRING version=STRING? interval=Interval2 ('{' attributes+=ProjectAttribute* '}' )?;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//ProjectAttribute:
	//    (
	//        Currency
	//        | CurrencyFormat
	//        | DailyWorkingHours
	//        | ExtendTask
	//        | ExtendResource
	//        | Include
	//        | JournalEntry
	//        | Now
	//        | NumberFormat
	//        | Scenario
	//        | ShortTimeFormat
	//        | TimeFormat
	//        | Timezone
	//        | TimingResolution
	//        | TrackingScenario
	//        | WeekStarts
	//        | WorkingHours
	//        | YearlyWorkingDays
	//    )
	//;
	public ProjectAttributeElements getProjectAttributeAccess() {
		return pProjectAttribute;
	}
	
	public ParserRule getProjectAttributeRule() {
		return getProjectAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/task.html
	//Task:
	//    'task' id=ID? name=STRING ( '{' attributes+=TaskAttribute*    '}'    )?;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//TaskAttribute:
	//    (scenario = [Scenario|QualifiedName] ':')?
	//    attr = (
	////        AccountTask -- deprecated
	////         AdoptTask -- experimental
	//         Allocate
	//        | BookingTask
	//        | Charge
	//        | ChargeSet
	//        | Complete
	//        | Depends
	//        | Duration
	//        | Effort
	//        | End
	//        | EndCredit
	//        | ExtendedTaskAttribute
	//        | Fail
	//        | Flags
	//        | JournalEntry
	//        | Length
	//        | Limits
	//        | MaxEnd
	//        | MaxStart
	//        | Milestone
	//        | MinEnd
	//        | MinStart
	//        | Note
	//        | Period
	//        | Precedes
	//        | Priority
	//        | ProjectId
	//        | PurgeTask
	//        | Responsible
	//        | Scheduled
	//        | Scheduling
	//        | ShiftsTask
	//        | Start
	////         | StartCredit -- deprecated
	//        | SupplementTask
	//        | Task
	//        | Warn
	//        | MacroCall
	//    )
	//;
	public TaskAttributeElements getTaskAttributeAccess() {
		return pTaskAttribute;
	}
	
	public ParserRule getTaskAttributeRule() {
		return getTaskAttributeAccess().getRule();
	}
	
	//enum BuildInMacro : projectstart | projectend | now;
	public BuildInMacroElements getBuildInMacroAccess() {
		return eBuildInMacro;
	}
	
	public EnumRule getBuildInMacroRule() {
		return getBuildInMacroAccess().getRule();
	}
	
	//MacroCall : '$''{' (macro = [Macro|QualifiedName] | buildin = BuildInMacro ) '}';
	public MacroCallElements getMacroCallAccess() {
		return pMacroCall;
	}
	
	public ParserRule getMacroCallRule() {
		return getMacroCallAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/report.html
	//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
	//// http://www.taskjuggler.org/tj3/manual/taskreport.html
	//// http://www.taskjuggler.org/tj3/manual/textreport.html
	//Report: id=ID? name=STRING ('{' attributes+=ReportAttribute* '}')?;
	public ReportElements getReportAccess() {
		return pReport;
	}
	
	public ParserRule getReportRule() {
		return getReportAccess().getRule();
	}
	
	//ReportAttribute:
	//    AccountRoot
	//    | Balance
	//    | Caption
	//    | Center
	//    | Columns
	//    | CurrencyFormat
	//    | End
	//    | Epilog
	//    | Flags
	//    | Footer
	//    | Formats
	//    | Header
	//    | Headline
	//    | HideAccount
	//    | HideJournalEntry
	//    | HideResource
	//    | HideTask
	//    | JournalAttributes
	//    | JournalMode
	//    | Left
	//    | LoadUnit
	//    | NumberFormat
	//    | Period
	//    | Prolog
	//    | AccountReport
	//    | ResourceReport
	//    | TaskReport
	//    | TextReport
	//    | PurgeReport
	//    | ResourceRoot
	//    | Right
	//    | RollupAccount
	//    | RollupResource
	//    | RollupTask
	//    | Scenarios
	//    | SelfContained
	//    | SortAccounts
	//    | SortJournalEntries
	//    | SortResources
	//    | SortTasks
	//    | Start
	//    | TaskRoot
	//    | TimeFormat
	//    | Timezone
	//    | Title
	//;
	public ReportAttributeElements getReportAttributeAccess() {
		return pReportAttribute;
	}
	
	public ParserRule getReportAttributeRule() {
		return getReportAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/icalreport.html
	//// TODO: ical report
	//IcalReport: 'icalreport' filename=STRING ('{' attributes+=IcalReportAttribute* '}')?;
	public IcalReportElements getIcalReportAccess() {
		return pIcalReport;
	}
	
	public ParserRule getIcalReportRule() {
		return getIcalReportAccess().getRule();
	}
	
	//IcalReportAttribute:
	//    End
	//    | HideJournalEntry
	//    | HideResource
	//    | HideTask
	//    | Period
	//    | RollupResource
	//    | RollupTask
	//    | ScenarioIcal
	//    | Start
	//;
	public IcalReportAttributeElements getIcalReportAttributeAccess() {
		return pIcalReportAttribute;
	}
	
	public ParserRule getIcalReportAttributeRule() {
		return getIcalReportAttributeAccess().getRule();
	}
	
	//// TODO: export report
	//// http://www.taskjuggler.org/tj3/manual/export.html
	//Export: 'export' id=ID? filename=STRING ('{' attributes += ExportAttribute* '}')?;
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//ExportAttribute: (
	//    Definitions
	//    | End
	//    | HideResource
	//    | HideTask
	//    | Period
	//    | ResourceAttributes
	//    | RollupResource
	//    | RollupTask
	//    | Scenarios
	//    | Start
	//    | TaskAttributes
	//    | Timezone
	//    );
	public ExportAttributeElements getExportAttributeAccess() {
		return pExportAttribute;
	}
	
	public ParserRule getExportAttributeRule() {
		return getExportAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/resource.html
	//Resource:
	//    'resource' id=ID? name=STRING ( '{' attributes+=ResourceAttribute*    '}'    )?;
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//ResourceAttribute:
	//    (
	//        BookingResource
	//        | Efficiency
	//        | Email
	//        | ExtendedResourceAttribute
	//        | Fail
	//        | Flags
	//        | JournalEntry
	//        | Limits
	//        | Managers
	//        | PurgeResource
	//        | Rate
	//        | Resource
	////         | Shift // deprecated
	//        | ShiftsResource
	//        | SupplementResource
	//         | VacationResource
	//         | Warn
	//         | WorkingHours
	//         | Leaves
	//    );
	public ResourceAttributeElements getResourceAttributeAccess() {
		return pResourceAttribute;
	}
	
	public ParserRule getResourceAttributeRule() {
		return getResourceAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/allocate.html
	//Allocate: 'allocate' resources+=AllocateResource (',' resources+=AllocateResource)*;
	public AllocateElements getAllocateAccess() {
		return pAllocate;
	}
	
	public ParserRule getAllocateRule() {
		return getAllocateAccess().getRule();
	}
	
	//AllocateResource: resource=[Resource] ('{' attributes += AllocateResourceAttribute* '}')?;
	public AllocateResourceElements getAllocateResourceAccess() {
		return pAllocateResource;
	}
	
	public ParserRule getAllocateResourceRule() {
		return getAllocateResourceAccess().getRule();
	}
	
	//AllocateResourceAttribute:
	//    Alternative
	////    | Limits -- deprecated
	//    | Mandatory
	//    | Persistent
	//    | Select
	//    | ShiftsAllocate
	//;
	public AllocateResourceAttributeElements getAllocateResourceAttributeAccess() {
		return pAllocateResourceAttribute;
	}
	
	public ParserRule getAllocateResourceAttributeRule() {
		return getAllocateResourceAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/navigator.html
	//Navigator: 'navigator' id=ID ('{' attributes += NavigatorAttribute* '}')?;
	public NavigatorElements getNavigatorAccess() {
		return pNavigator;
	}
	
	public ParserRule getNavigatorRule() {
		return getNavigatorAccess().getRule();
	}
	
	//NavigatorAttribute:
	//    HideReport
	//;
	public NavigatorAttributeElements getNavigatorAttributeAccess() {
		return pNavigatorAttribute;
	}
	
	public ParserRule getNavigatorAttributeRule() {
		return getNavigatorAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/newtask.html
	//NewTask: 'newtask' id=ID text=STRING ('{' attributes += NewTaskAttribute* '}')?;
	public NewTaskElements getNewTaskAccess() {
		return pNewTask;
	}
	
	public ParserRule getNewTaskRule() {
		return getNewTaskAccess().getRule();
	}
	
	//NewTaskAttribute:
	//    End
	//    | Priority
	//    | Remaining
	////    | StatusTimesheet
	//    | Work
	//;
	public NewTaskAttributeElements getNewTaskAttributeAccess() {
		return pNewTaskAttribute;
	}
	
	public ParserRule getNewTaskAttributeRule() {
		return getNewTaskAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/nikureport.html
	//NikuReport: 'nikureport' filename = STRING ('{' attributes += NikuReportAttribute* '}')?;
	public NikuReportElements getNikuReportAccess() {
		return pNikuReport;
	}
	
	public ParserRule getNikuReportRule() {
		return getNikuReportAccess().getRule();
	}
	
	//NikuReportAttribute:
	//    End
	//    | Formats
	//    | Headline
	//    | HideResource
	//    | HideTask
	//    | NumberFormat
	//    | Period
	//    | Start
	//    | Timeoff
	//    | Title;
	public NikuReportAttributeElements getNikuReportAttributeAccess() {
		return pNikuReportAttribute;
	}
	
	public ParserRule getNikuReportAttributeRule() {
		return getNikuReportAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/alert.html
	//Alert: 'alert' level=AlertLevel;
	public AlertElements getAlertAccess() {
		return pAlert;
	}
	
	public ParserRule getAlertRule() {
		return getAlertAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/alternative.html
	//Alternative: resources+=[Resource] (',' resources += [Resource])*;
	public AlternativeElements getAlternativeAccess() {
		return pAlternative;
	}
	
	public ParserRule getAlternativeRule() {
		return getAlternativeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/author.html
	//Author: 'author' resource=[Resource];
	public AuthorElements getAuthorAccess() {
		return pAuthor;
	}
	
	public ParserRule getAuthorRule() {
		return getAuthorAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/balance.html
	//Balance: 'balance' cost=[Account] revenue=[Account];
	public BalanceElements getBalanceAccess() {
		return pBalance;
	}
	
	public ParserRule getBalanceRule() {
		return getBalanceAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/booking.task.html
	//// http://www.taskjuggler.org/tj3/manual/booking.resource.html
	//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
	//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
	//// TODO: Validate these values in sloppy and overtime
	////    WORKING_TIME_ONLY = '0' |
	////    PLUS_OFF_DUTY = '1' |
	////    PLUS_VACATION = '2'
	//Booking: interval=Interval4 ('{'
	//        (
	//            ('overtime' overtime=INT)? &
	//            ('sloppy' sloppy=INT)?
	//        )
	//'}')?;
	public BookingElements getBookingAccess() {
		return pBooking;
	}
	
	public ParserRule getBookingRule() {
		return getBookingAccess().getRule();
	}
	
	//BookingTask: 'booking' resource=[Resource] booking=Booking ;
	public BookingTaskElements getBookingTaskAccess() {
		return pBookingTask;
	}
	
	public ParserRule getBookingTaskRule() {
		return getBookingTaskAccess().getRule();
	}
	
	//BookingResource:  'booking' task=[Task] booking=Booking;
	public BookingResourceElements getBookingResourceAccess() {
		return pBookingResource;
	}
	
	public ParserRule getBookingResourceRule() {
		return getBookingResourceAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/caption.html
	//Caption: 'caption' RichText;
	public CaptionElements getCaptionAccess() {
		return pCaption;
	}
	
	public ParserRule getCaptionRule() {
		return getCaptionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/cellcolor.column.html
	//CellColor: 'cellcolor' expression=LogicalExpression color=RGB;
	public CellColorElements getCellColorAccess() {
		return pCellColor;
	}
	
	public ParserRule getCellColorRule() {
		return getCellColorAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/celltext.column.html
	//CellText: 'celltext' expresssion=LogicalExpression text=STRING;
	public CellTextElements getCellTextAccess() {
		return pCellText;
	}
	
	public ParserRule getCellTextRule() {
		return getCellTextAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/center.html
	//Center: 'center' RichText;
	public CenterElements getCenterAccess() {
		return pCenter;
	}
	
	public ParserRule getCenterRule() {
		return getCenterAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/charge.html
	//Charge: 'charge' amount=XFloat applies=ChargeApplies;
	public ChargeElements getChargeAccess() {
		return pCharge;
	}
	
	public ParserRule getChargeRule() {
		return getChargeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/chargeset.html
	//ChargeSet: 'chargeset' accountShares+=AccountShare (',' accountShares+=AccountShare)*;
	public ChargeSetElements getChargeSetAccess() {
		return pChargeSet;
	}
	
	public ParserRule getChargeSetRule() {
		return getChargeSetAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/columns.html
	//Columns: 'columns' columns+=Column (',' columns+=Column)*;
	public ColumnsElements getColumnsAccess() {
		return pColumns;
	}
	
	public ParserRule getColumnsRule() {
		return getColumnsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/complete.html
	//Complete: 'complete' complete=XFloat;
	public CompleteElements getCompleteAccess() {
		return pComplete;
	}
	
	public ParserRule getCompleteRule() {
		return getCompleteAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/copyright.html
	//Copyright: 'copyright' text=STRING;
	public CopyrightElements getCopyrightAccess() {
		return pCopyright;
	}
	
	public ParserRule getCopyrightRule() {
		return getCopyrightAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/credit.html
	//Credit:    'credit' date=ISODATE description=STRING amount=XFloat;
	public CreditElements getCreditAccess() {
		return pCredit;
	}
	
	public ParserRule getCreditRule() {
		return getCreditAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/currency.html
	//Currency: 'currency' currency=STRING;
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
	//CurrencyFormat: 'currencyformat' RealFormat;
	public CurrencyFormatElements getCurrencyFormatAccess() {
		return pCurrencyFormat;
	}
	
	public ParserRule getCurrencyFormatRule() {
		return getCurrencyFormatAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/dailymax.html
	//DailyMax: 'dailymax' Limit;
	public DailyMaxElements getDailyMaxAccess() {
		return pDailyMax;
	}
	
	public ParserRule getDailyMaxRule() {
		return getDailyMaxAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/dailymin.html
	//DailyMin: 'dailymin' Limit;
	public DailyMinElements getDailyMinAccess() {
		return pDailyMin;
	}
	
	public ParserRule getDailyMinRule() {
		return getDailyMinAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/dailyworkinghours.html
	//DailyWorkingHours: 'dailyworkinghours' dailyWorkingHours=XFloat;
	public DailyWorkingHoursElements getDailyWorkingHoursAccess() {
		return pDailyWorkingHours;
	}
	
	public ParserRule getDailyWorkingHoursRule() {
		return getDailyWorkingHoursAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/date.html
	//// http://www.taskjuggler.org/tj3/manual/date.extend.html
	//// Date: see ISODATE below
	//// http://www.taskjuggler.org/tj3/manual/definitions.html
	//Definitions: 'definitions' (all ?= '*'  | none ?= '-'
	//     | {Defintions}
	//        (flags ?= 'flags'? &
	//             resources ?= 'resources'? &
	//             tasks ?= 'tasks'? &
	//             project ?= 'project'? &
	//             projectids ?= 'projectids'?)
	//)
	//;
	public DefinitionsElements getDefinitionsAccess() {
		return pDefinitions;
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/depends.html
	//Depends: 'depends' dependency += TaskDependency (',' dependency += TaskDependency)*;
	public DependsElements getDependsAccess() {
		return pDepends;
	}
	
	public ParserRule getDependsRule() {
		return getDependsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/details.html
	//Details: 'details' RichText;
	public DetailsElements getDetailsAccess() {
		return pDetails;
	}
	
	public ParserRule getDetailsRule() {
		return getDetailsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/duration.html
	//Duration: 'duration' duration=DurationQuantity;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/efficiency.html
	//Efficiency: 'efficiency' efficiency=XFloat;
	public EfficiencyElements getEfficiencyAccess() {
		return pEfficiency;
	}
	
	public ParserRule getEfficiencyRule() {
		return getEfficiencyAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/effort.html
	//Effort: 'effort' effort=DurationQuantity;
	public EffortElements getEffortAccess() {
		return pEffort;
	}
	
	public ParserRule getEffortRule() {
		return getEffortAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/email.html
	//Email: 'email' address = STRING;
	public EmailElements getEmailAccess() {
		return pEmail;
	}
	
	public ParserRule getEmailRule() {
		return getEmailAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/end.html
	//End: 'end' (end=ISODATE | MacroCall);
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/endcredit.html
	//EndCredit: 'endcredit' credit=XFloat;
	public EndCreditElements getEndCreditAccess() {
		return pEndCredit;
	}
	
	public ParserRule getEndCreditRule() {
		return getEndCreditAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/epilog.html
	//Epilog: 'epilog' RichText;
	public EpilogElements getEpilogAccess() {
		return pEpilog;
	}
	
	public ParserRule getEpilogRule() {
		return getEpilogAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/extend.html
	//// http://www.taskjuggler.org/tj3/manual/date.extend.html
	//// http://www.taskjuggler.org/tj3/manual/reference.extend.html
	//// http://www.taskjuggler.org/tj3/manual/richtext.extend.html
	//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
	//// http://www.taskjuggler.org/tj3/manual/text.extend.html
	//Extend: ('reference' | 'date' | 'richtext' | 'text')
	//        name=ID description=STRING
	//         ('{' (inherit?='inherit'? & scenariospecific?='scenariospecific'?) '}')?
	//;
	public ExtendElements getExtendAccess() {
		return pExtend;
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}
	
	//// TODO: handle date format with validator
	//// TODO: handle reference w/ label with validator?
	//ExtendResource: {ExtendResource} 'extend' 'resource' ('{' extends +=  Extend* '}')?;
	public ExtendResourceElements getExtendResourceAccess() {
		return pExtendResource;
	}
	
	public ParserRule getExtendResourceRule() {
		return getExtendResourceAccess().getRule();
	}
	
	//ExtendedResourceAttribute: extend=[Extend|QualifiedName] value = STRING;
	public ExtendedResourceAttributeElements getExtendedResourceAttributeAccess() {
		return pExtendedResourceAttribute;
	}
	
	public ParserRule getExtendedResourceAttributeRule() {
		return getExtendedResourceAttributeAccess().getRule();
	}
	
	//ExtendTask: {ExtendTask} 'extend' 'task' ('{' extends +=  Extend* '}')?;
	public ExtendTaskElements getExtendTaskAccess() {
		return pExtendTask;
	}
	
	public ParserRule getExtendTaskRule() {
		return getExtendTaskAccess().getRule();
	}
	
	//ExtendedTaskAttribute: extend=[Extend] value=STRING;
	public ExtendedTaskAttributeElements getExtendedTaskAttributeAccess() {
		return pExtendedTaskAttribute;
	}
	
	public ParserRule getExtendedTaskAttributeRule() {
		return getExtendedTaskAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/fail.html
	//Fail: 'fail' expression=LogicalExpression;
	public FailElements getFailAccess() {
		return pFail;
	}
	
	public ParserRule getFailRule() {
		return getFailAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/flags.html
	//Flags: 'flags' flags += ID (',' flags += ID)*;
	public FlagsElements getFlagsAccess() {
		return pFlags;
	}
	
	public ParserRule getFlagsRule() {
		return getFlagsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/fontcolor.column.html
	//FontColor: 'fontcolor' color=STRING;
	public FontColorElements getFontColorAccess() {
		return pFontColor;
	}
	
	public ParserRule getFontColorRule() {
		return getFontColorAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/footer.html
	//Footer: 'footer' RichText;
	public FooterElements getFooterAccess() {
		return pFooter;
	}
	
	public ParserRule getFooterRule() {
		return getFooterAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/formats.html
	//Formats: 'formats' formats+=ReportFormat (',' formats+=ReportFormat)*;
	public FormatsElements getFormatsAccess() {
		return pFormats;
	}
	
	public ParserRule getFormatsRule() {
		return getFormatsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/functions.html
	//// http://www.taskjuggler.org/tj3/manual/isactive.html
	//// http://www.taskjuggler.org/tj3/manual/ischildof.html
	//// http://www.taskjuggler.org/tj3/manual/isdependencyof.html
	//// http://www.taskjuggler.org/tj3/manual/isdutyof.html
	//// http://www.taskjuggler.org/tj3/manual/isfeatureof.html
	//// http://www.taskjuggler.org/tj3/manual/isleaf.html
	//// http://www.taskjuggler.org/tj3/manual/ismilestone.html
	//// http://www.taskjuggler.org/tj3/manual/isongoing.html
	//// http://www.taskjuggler.org/tj3/manual/isresource.html
	//// http://www.taskjuggler.org/tj3/manual/istask.html
	//Function returns Function:
	//     {Function}     (
	//                 (('hasalert' | 'hasalert_' )        '('level=INT (',' date = ISODATE)? ')' )
	//          |      (('isactive' | 'isactive_' )             '('scenario = [Scenario] ')' )
	//          |      (('ischildof' | 'ischildof_' )         '(' parentId = ID ')' )
	//          |          (('isdependencyof' | 'isdependencyof_' ) '('  task=[Task] ',' scenario=[Scenario] ',' distance=INT ')'  )
	//          |          (('isdutyof' | 'isdutyof_'  )          '(' resource=[Resource] ',' scenario=[Scenario] ')' )
	//          |          (('isfeatureof' | 'isfeatureof_' ) '(' task=[Task] ',' scenario=[Scenario] ')')
	//          |           (('isleaf' | 'isleaf_' )  '('  ')'  )
	//          |          (('ismilestone' | 'ismilestone_')'('scenario = [Scenario] ')')
	//         |          (('isongoing' | 'isongoing_')'('scenario = [Scenario] ')' )
	//         |          (('isresource' | 'isresource_' ) '('  ')')
	//         |          (('isresponsbilityof' | 'isresponsbilityof_' ) '(' resource=[Resource] ',' scenario=[Scenario] ')')
	//         |          (('istask' | 'istask_' ) '('  ')' )
	//         |          (('treelevel' | 'treelevel_' ) '('  ')')
	//          )
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/gapduration.html
	//GapDuration: 'gapduration' DurationQuantity;
	public GapDurationElements getGapDurationAccess() {
		return pGapDuration;
	}
	
	public ParserRule getGapDurationRule() {
		return getGapDurationAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/gaplength.html
	//GapLength: 'gaplength' DurationQuantity;
	public GapLengthElements getGapLengthAccess() {
		return pGapLength;
	}
	
	public ParserRule getGapLengthRule() {
		return getGapLengthAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/halign.column.html
	//// http://www.taskjuggler.org/tj3/manual/halign.center.html
	//// http://www.taskjuggler.org/tj3/manual/halign.left.html
	//// http://www.taskjuggler.org/tj3/manual/halign.right.html
	//HAlign: expression=LogicalExpression justification=Justification;
	public HAlignElements getHAlignAccess() {
		return pHAlign;
	}
	
	public ParserRule getHAlignRule() {
		return getHAlignAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/hasalert.html
	//// TODO - has alert
	//HasAlert: STRING;
	public HasAlertElements getHasAlertAccess() {
		return pHasAlert;
	}
	
	public ParserRule getHasAlertRule() {
		return getHasAlertAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/header.html
	//Header: 'header' RichText;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/headline.html
	//Headline: 'headline' RichText;
	public HeadlineElements getHeadlineAccess() {
		return pHeadline;
	}
	
	public ParserRule getHeadlineRule() {
		return getHeadlineAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/hidejournalentry.html
	//HideAccount: 'hideaccount' expression =  LogicalFlagExpression;
	public HideAccountElements getHideAccountAccess() {
		return pHideAccount;
	}
	
	public ParserRule getHideAccountRule() {
		return getHideAccountAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/hidejournalentry.html
	//HideJournalEntry: 'hidejournalentry' '~'? expression = LogicalFlagExpression;
	public HideJournalEntryElements getHideJournalEntryAccess() {
		return pHideJournalEntry;
	}
	
	public ParserRule getHideJournalEntryRule() {
		return getHideJournalEntryAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/hidereport.html
	//HideReport: 'hidereport' '~'? (expression = LogicalExpression | '@' ('all' | 'none') );
	public HideReportElements getHideReportAccess() {
		return pHideReport;
	}
	
	public ParserRule getHideReportRule() {
		return getHideReportAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/hideresource.html
	//HideResource: 'hideresource' '~'? (expression = LogicalExpression | '@' ('all' | 'none') );
	public HideResourceElements getHideResourceAccess() {
		return pHideResource;
	}
	
	public ParserRule getHideResourceRule() {
		return getHideResourceAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/hidetask.html
	//HideTask: 'hidetask' '~'? (expression = LogicalExpression | '@' ('all' | 'none') );
	public HideTaskElements getHideTaskAccess() {
		return pHideTask;
	}
	
	public ParserRule getHideTaskRule() {
		return getHideTaskAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/include.macro.html
	//// http://www.taskjuggler.org/tj3/manual/include.project.html
	//// http://www.taskjuggler.org/tj3/manual/include.properties.html
	//Include: 'include' importURI=STRING;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//IncludeProperties:  'include' importURI=STRING	('{' attributes+=IncludePropertiesAttribute* '}')? ;
	public IncludePropertiesElements getIncludePropertiesAccess() {
		return pIncludeProperties;
	}
	
	public ParserRule getIncludePropertiesRule() {
		return getIncludePropertiesAccess().getRule();
	}
	
	//IncludePropertiesAttribute:
	//    AccountPrefix
	//    | ReportPrefix
	//    | ResourcePrefix
	//    | TaskPrefix;
	public IncludePropertiesAttributeElements getIncludePropertiesAttributeAccess() {
		return pIncludePropertiesAttribute;
	}
	
	public ParserRule getIncludePropertiesAttributeRule() {
		return getIncludePropertiesAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/inherit.extend.html
	//// do not implement.
	//// http://www.taskjuggler.org/tj3/manual/interval1.html
	//Interval1: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity));
	public Interval1Elements getInterval1Access() {
		return pInterval1;
	}
	
	public ParserRule getInterval1Rule() {
		return getInterval1Access().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/interval2.html
	//Interval2: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity));
	public Interval2Elements getInterval2Access() {
		return pInterval2;
	}
	
	public ParserRule getInterval2Rule() {
		return getInterval2Access().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/interval3.html
	//Interval3: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))?;
	public Interval3Elements getInterval3Access() {
		return pInterval3;
	}
	
	public ParserRule getInterval3Rule() {
		return getInterval3Access().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/interval4.html
	//Interval4: start = ISODATE (('-' end = ISODATE) | ('+' duration = DurationQuantity))?;
	public Interval4Elements getInterval4Access() {
		return pInterval4;
	}
	
	public ParserRule getInterval4Rule() {
		return getInterval4Access().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/journalattributes.html
	//JournalAttributes: 'journalattributes' args += JournalAttributeValues (',' args += JournalAttributeValues)*;
	public JournalAttributesElements getJournalAttributesAccess() {
		return pJournalAttributes;
	}
	
	public ParserRule getJournalAttributesRule() {
		return getJournalAttributesAccess().getRule();
	}
	
	//enum JournalAttributeValues : ALL='*' | NONE='-' | alert | author | date | details | flags | headline | property | propertyid | summary | timesheet;
	public JournalAttributeValuesElements getJournalAttributeValuesAccess() {
		return eJournalAttributeValues;
	}
	
	public EnumRule getJournalAttributeValuesRule() {
		return getJournalAttributeValuesAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/journalentry.html
	//JournalEntry:
	//    'journalentry' date=ISODATE headline=STRING
	//     ('{'
	//        (
	//            alert = Alert?
	//            & author = Author?
	//            & details = Details?
	//            & summary = Summary?
	//        )
	//    '}')?
	//;
	public JournalEntryElements getJournalEntryAccess() {
		return pJournalEntry;
	}
	
	public ParserRule getJournalEntryRule() {
		return getJournalEntryAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/journalmode.html
	//JournalMode: 'journalmode'  mode=JournalModeValue;
	public JournalModeElements getJournalModeAccess() {
		return pJournalMode;
	}
	
	public ParserRule getJournalModeRule() {
		return getJournalModeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/left.html
	//Left: 'left' RichText;
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/length.html
	//Length: 'length' length=DurationQuantity;
	public LengthElements getLengthAccess() {
		return pLength;
	}
	
	public ParserRule getLengthRule() {
		return getLengthAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/limits.task.html
	//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
	//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
	//// http://www.taskjuggler.org/tj3/manual/limits.html
	//Limits: 'limits' {Limits} ( '{' attributes += LimitsAttribute* '}' )? ;
	public LimitsElements getLimitsAccess() {
		return pLimits;
	}
	
	public ParserRule getLimitsRule() {
		return getLimitsAccess().getRule();
	}
	
	//LimitsAttribute:
	//    DailyMax |
	//    DailyMin |
	//    Maximum |
	//    Minimum |
	//    MonthlyMax |
	//    MonthlyMin |
	//    WeeklyMax |
	//    WeeklyMin
	//;
	public LimitsAttributeElements getLimitsAttributeAccess() {
		return pLimitsAttribute;
	}
	
	public ParserRule getLimitsAttributeRule() {
		return getLimitsAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/listitem.column.html
	//ListItem: 'listitem' RichText;
	public ListItemElements getListItemAccess() {
		return pListItem;
	}
	
	public ParserRule getListItemRule() {
		return getListItemAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
	//ListType: 'listtype' type=ListTypeValues;
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/loadunit.html
	//LoadUnit: 'loadunit' unit=LoadDisplayUnit;
	public LoadUnitElements getLoadUnitAccess() {
		return pLoadUnit;
	}
	
	public ParserRule getLoadUnitRule() {
		return getLoadUnitAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/logicalexpression.html
	//// this implementation is borrowed from XBase XExpression
	//LogicalExpression returns LogicalExpression: LogicalOrExpression;
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}
	
	//LogicalOrExpression returns LogicalExpression:
	//        leftOperant = LogicalAndExpression (op=LEOpOr rightOperand=LogicalAndExpression)?;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LEOpOr: '|';
	public LEOpOrElements getLEOpOrAccess() {
		return pLEOpOr;
	}
	
	public ParserRule getLEOpOrRule() {
		return getLEOpOrAccess().getRule();
	}
	
	//LogicalAndExpression returns LogicalExpression:
	//    leftOperant = LogicalEqualityExpression (op=LEOpAnd rightOperand=LogicalEqualityExpression)?;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LEOpAnd: '&';
	public LEOpAndElements getLEOpAndAccess() {
		return pLEOpAnd;
	}
	
	public ParserRule getLEOpAndRule() {
		return getLEOpAndAccess().getRule();
	}
	
	//LogicalEqualityExpression returns LogicalExpression:
	//    leftOperant = LogicalRelationalExpression (op=LEOpEquality rightOperand=LogicalRelationalExpression)?;
	public LogicalEqualityExpressionElements getLogicalEqualityExpressionAccess() {
		return pLogicalEqualityExpression;
	}
	
	public ParserRule getLogicalEqualityExpressionRule() {
		return getLogicalEqualityExpressionAccess().getRule();
	}
	
	//LEOpEquality:	'=' | '!=';
	public LEOpEqualityElements getLEOpEqualityAccess() {
		return pLEOpEquality;
	}
	
	public ParserRule getLEOpEqualityRule() {
		return getLEOpEqualityAccess().getRule();
	}
	
	//LogicalRelationalExpression returns LogicalExpression:
	//    leftOperant = LogicalPrimaryExpression (op=OpCompare rightOperand=LogicalPrimaryExpression)?;
	public LogicalRelationalExpressionElements getLogicalRelationalExpressionAccess() {
		return pLogicalRelationalExpression;
	}
	
	public ParserRule getLogicalRelationalExpressionRule() {
		return getLogicalRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//    '>=' | '<=' | '>' | '<' ;
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//LogicalPrimaryExpression returns LogicalExpression:
	//    LogicalBooleanLiteral  |
	//    LogicalNumeralLiteral |
	//    LogicalStringLiteral |
	//    LogicalISODateLiteral |
	//    LogicalPrenthesizedExpression |
	//    LogicalAbsoluteIdExpression |
	//    LogicalFunctionExpression |
	//    LogicalFlagLiteral
	//    ;
	public LogicalPrimaryExpressionElements getLogicalPrimaryExpressionAccess() {
		return pLogicalPrimaryExpression;
	}
	
	public ParserRule getLogicalPrimaryExpressionRule() {
		return getLogicalPrimaryExpressionAccess().getRule();
	}
	
	//LogicalFunctionExpression returns LogicalExpression: {LogicalFunctionExpression} function = Function;
	public LogicalFunctionExpressionElements getLogicalFunctionExpressionAccess() {
		return pLogicalFunctionExpression;
	}
	
	public ParserRule getLogicalFunctionExpressionRule() {
		return getLogicalFunctionExpressionAccess().getRule();
	}
	
	//LogicalAbsoluteIdExpression returns LogicalExpression: {LogicalAbsoluteIdExression} value=AbsoluteId;
	public LogicalAbsoluteIdExpressionElements getLogicalAbsoluteIdExpressionAccess() {
		return pLogicalAbsoluteIdExpression;
	}
	
	public ParserRule getLogicalAbsoluteIdExpressionRule() {
		return getLogicalAbsoluteIdExpressionAccess().getRule();
	}
	
	//LogicalBooleanLiteral returns LogicalExpression: {LogicalBooleanLiteral} ('false' | isTrue?='true');
	public LogicalBooleanLiteralElements getLogicalBooleanLiteralAccess() {
		return pLogicalBooleanLiteral;
	}
	
	public ParserRule getLogicalBooleanLiteralRule() {
		return getLogicalBooleanLiteralAccess().getRule();
	}
	
	//LogicalNumeralLiteral returns LogicalExpression: {LogicalNumeralLiteral}  value=XFloat;
	public LogicalNumeralLiteralElements getLogicalNumeralLiteralAccess() {
		return pLogicalNumeralLiteral;
	}
	
	public ParserRule getLogicalNumeralLiteralRule() {
		return getLogicalNumeralLiteralAccess().getRule();
	}
	
	//LogicalStringLiteral returns LogicalExpression: {LogicalStringLiteral} (value=STRING | macro = MacroCall);
	public LogicalStringLiteralElements getLogicalStringLiteralAccess() {
		return pLogicalStringLiteral;
	}
	
	public ParserRule getLogicalStringLiteralRule() {
		return getLogicalStringLiteralAccess().getRule();
	}
	
	//LogicalISODateLiteral returns LogicalExpression: {LogicalDateLiteral} value = ISODATE;
	public LogicalISODateLiteralElements getLogicalISODateLiteralAccess() {
		return pLogicalISODateLiteral;
	}
	
	public ParserRule getLogicalISODateLiteralRule() {
		return getLogicalISODateLiteralAccess().getRule();
	}
	
	//LogicalFlagLiteral returns LogicalExpression : {LogicalFlagExpression} scenario = [Scenario] '.' columId = ColumnId ;
	public LogicalFlagLiteralElements getLogicalFlagLiteralAccess() {
		return pLogicalFlagLiteral;
	}
	
	public ParserRule getLogicalFlagLiteralRule() {
		return getLogicalFlagLiteralAccess().getRule();
	}
	
	//LogicalPrenthesizedExpression returns LogicalExpression:
	//    '(' LogicalExpression ')';
	public LogicalPrenthesizedExpressionElements getLogicalPrenthesizedExpressionAccess() {
		return pLogicalPrenthesizedExpression;
	}
	
	public ParserRule getLogicalPrenthesizedExpressionRule() {
		return getLogicalPrenthesizedExpressionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/logicalflagexpression.html
	//LogicalFlagExpression: STRING;
	public LogicalFlagExpressionElements getLogicalFlagExpressionAccess() {
		return pLogicalFlagExpression;
	}
	
	public ParserRule getLogicalFlagExpressionRule() {
		return getLogicalFlagExpressionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/macro.html
	//Macro: 'macro' id = ID ('['|'{') (value=STRING | properties += Property)* (']'|'}');
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/managers.html
	//Managers: 'managers' resources += [Resource] (',' resources += [Resource])*;
	public ManagersElements getManagersAccess() {
		return pManagers;
	}
	
	public ParserRule getManagersRule() {
		return getManagersAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/mandatory.html
	//Mandatory: mandatory ?= 'mandatory';
	public MandatoryElements getMandatoryAccess() {
		return pMandatory;
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/maxend.html
	//MaxEnd: 'maxend' maxEnd=ISODATE;
	public MaxEndElements getMaxEndAccess() {
		return pMaxEnd;
	}
	
	public ParserRule getMaxEndRule() {
		return getMaxEndAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/maximum.html
	//Maximum: 'maximum' Limit;
	public MaximumElements getMaximumAccess() {
		return pMaximum;
	}
	
	public ParserRule getMaximumRule() {
		return getMaximumAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/maxstart.html
	//MaxStart: 'maxstart' maxStart=ISODATE;
	public MaxStartElements getMaxStartAccess() {
		return pMaxStart;
	}
	
	public ParserRule getMaxStartRule() {
		return getMaxStartAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/milestone.html
	//Milestone: milestone ?= 'milestone';
	public MilestoneElements getMilestoneAccess() {
		return pMilestone;
	}
	
	public ParserRule getMilestoneRule() {
		return getMilestoneAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/minimum.html
	//Minimum: 'minimum' Limit;
	public MinimumElements getMinimumAccess() {
		return pMinimum;
	}
	
	public ParserRule getMinimumRule() {
		return getMinimumAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/minend.html
	//MinEnd: 'minend' minEnd=ISODATE;
	public MinEndElements getMinEndAccess() {
		return pMinEnd;
	}
	
	public ParserRule getMinEndRule() {
		return getMinEndAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/minstart.html
	//MinStart: 'minstart' minStart=ISODATE;
	public MinStartElements getMinStartAccess() {
		return pMinStart;
	}
	
	public ParserRule getMinStartRule() {
		return getMinStartAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/monthlymax.html
	//MonthlyMax: 'monthlymax' Limit;
	public MonthlyMaxElements getMonthlyMaxAccess() {
		return pMonthlyMax;
	}
	
	public ParserRule getMonthlyMaxRule() {
		return getMonthlyMaxAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/monthlymin.html
	//MonthlyMin: 'monthlymin' Limit;
	public MonthlyMinElements getMonthlyMinAccess() {
		return pMonthlyMin;
	}
	
	public ParserRule getMonthlyMinRule() {
		return getMonthlyMinAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/note.task.html
	//Note: 'note' note=STRING;
	public NoteElements getNoteAccess() {
		return pNote;
	}
	
	public ParserRule getNoteRule() {
		return getNoteAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/now.html
	//Now: 'now' now=ISODATE;
	public NowElements getNowAccess() {
		return pNow;
	}
	
	public ParserRule getNowRule() {
		return getNowAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/numberformat.html
	//NumberFormat: 'numberformat' RealFormat;
	public NumberFormatElements getNumberFormatAccess() {
		return pNumberFormat;
	}
	
	public ParserRule getNumberFormatRule() {
		return getNumberFormatAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/onend.html
	//// http://www.taskjuggler.org/tj3/manual/onstart.html
	//// See DependPolicy
	//// http://www.taskjuggler.org/tj3/manual/opennodes.html
	//// internal use only
	//// http://www.taskjuggler.org/tj3/manual/overtime.booking.html
	//// See BookingRestriction
	//// http://www.taskjuggler.org/tj3/manual/period.column.html
	//Period: 'period' period=Interval2;
	public PeriodElements getPeriodAccess() {
		return pPeriod;
	}
	
	public ParserRule getPeriodRule() {
		return getPeriodAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/persistent.html
	//Persistent: persistent ?= 'persistent';
	public PersistentElements getPersistentAccess() {
		return pPersistent;
	}
	
	public ParserRule getPersistentRule() {
		return getPersistentAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/precedes.html
	//Precedes: 'precedes' TaskDependency;
	public PrecedesElements getPrecedesAccess() {
		return pPrecedes;
	}
	
	public ParserRule getPrecedesRule() {
		return getPrecedesAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/priority.html
	//Priority: 'priority' priority=INT;
	public PriorityElements getPriorityAccess() {
		return pPriority;
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/projectid.html
	//ProjectId: 'projectid' projectId=ID;
	public ProjectIdElements getProjectIdAccess() {
		return pProjectId;
	}
	
	public ParserRule getProjectIdRule() {
		return getProjectIdAccess().getRule();
	}
	
	////http://www.taskjuggler.org/tj3/manual/projectids.html
	//ProjectIds: 'projectids' ids += ID (',' ids+= ID)*;
	public ProjectIdsElements getProjectIdsAccess() {
		return pProjectIds;
	}
	
	public ParserRule getProjectIdsRule() {
		return getProjectIdsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/projection.html
	//// deprecated
	//// http://www.taskjuggler.org/tj3/manual/prolog.html
	//Prolog: 'prolog' RichText;
	public PrologElements getPrologAccess() {
		return pProlog;
	}
	
	public ParserRule getPrologRule() {
		return getPrologAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/purge.html
	//PurgeReport: 'purge' listAttribute=PurgeReportAttribute;
	public PurgeReportElements getPurgeReportAccess() {
		return pPurgeReport;
	}
	
	public ParserRule getPurgeReportRule() {
		return getPurgeReportAccess().getRule();
	}
	
	//enum PurgeReportAttribute:
	//    COLUMNS = 'columns' |
	//    DEFINITIONS = 'definitions' |
	//    FLAGS = 'flags' |
	//    FORMATS = 'formats' |
	//    JOURNALATTRIBUTES = 'journalAttributes' |
	//    SCENARIOS = 'scenarios' |
	//    SORTACCOUNTS = 'sortaccounts' |
	//    SORTJOURNALENTRIES = 'sortjournalentries' |
	//    SORTRESOURCES = 'sortresources' |
	//    SORTTASKS = 'sorttasks'
	//;
	public PurgeReportAttributeElements getPurgeReportAttributeAccess() {
		return ePurgeReportAttribute;
	}
	
	public EnumRule getPurgeReportAttributeRule() {
		return getPurgeReportAttributeAccess().getRule();
	}
	
	//PurgeResource: 'purge' listAttribute=PurgeResourceAttribute;
	public PurgeResourceElements getPurgeResourceAccess() {
		return pPurgeResource;
	}
	
	public ParserRule getPurgeResourceRule() {
		return getPurgeResourceAccess().getRule();
	}
	
	//enum PurgeResourceAttribute:
	//    FAIL = 'fail' |
	//    FLAGS  = 'flags' |
	//    MANAGERS = 'managers' |
	//    REPORTS  = 'reports' |
	//    VACATIONS = 'vacations' |
	//    WARN = 'warn'
	//;
	public PurgeResourceAttributeElements getPurgeResourceAttributeAccess() {
		return ePurgeResourceAttribute;
	}
	
	public EnumRule getPurgeResourceAttributeRule() {
		return getPurgeResourceAttributeAccess().getRule();
	}
	
	//PurgeTask: 'purge' listAttribute=PurgeTaskAttribute;
	public PurgeTaskElements getPurgeTaskAccess() {
		return pPurgeTask;
	}
	
	public ParserRule getPurgeTaskRule() {
		return getPurgeTaskAccess().getRule();
	}
	
	//enum PurgeTaskAttribute:
	//    BOOKING = 'booking' |
	//    CHARGE = 'charge' |
	//    CHARGESET = 'chargeset' |
	//    DEPENDS = 'depends' |
	//    FAIL = 'fail' |
	//    FLAGS = 'flags' |
	//    PRECEDES = 'precedes' |
	//    WARN = 'warn'
	//;
	public PurgeTaskAttributeElements getPurgeTaskAttributeAccess() {
		return ePurgeTaskAttribute;
	}
	
	public EnumRule getPurgeTaskAttributeRule() {
		return getPurgeTaskAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/rate.html
	//Rate: 'rate' rate=XFloat;
	public RateElements getRateAccess() {
		return pRate;
	}
	
	public ParserRule getRateRule() {
		return getRateAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/remaining.html
	//Remaining: 'remaining' remaining=DurationQuantity;
	public RemainingElements getRemainingAccess() {
		return pRemaining;
	}
	
	public ParserRule getRemainingRule() {
		return getRemainingAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/replace.html
	//// see Shift
	//// http://www.taskjuggler.org/tj3/manual/reportprefix.html
	//ReportPrefix: 'reportprefix' report=[Report];
	public ReportPrefixElements getReportPrefixAccess() {
		return pReportPrefix;
	}
	
	public ParserRule getReportPrefixRule() {
		return getReportPrefixAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/resourceattributes.html
	//ResourceAttributes: 'resourceattributes' ((all ?= '*'  | none ?= '-' |
	//        {ResourceAttributes}
	//            (vacation ?= 'vacation'? &
	//             booking ?= 'booking'? &
	//             workingHours ?= 'workinghours'?)
	//));
	public ResourceAttributesElements getResourceAttributesAccess() {
		return pResourceAttributes;
	}
	
	public ParserRule getResourceAttributesRule() {
		return getResourceAttributesAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/resourceprefix.html
	//ResourcePrefix: 'resourceprefix' resource=[Resource];
	public ResourcePrefixElements getResourcePrefixAccess() {
		return pResourcePrefix;
	}
	
	public ParserRule getResourcePrefixRule() {
		return getResourcePrefixAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/resourcereport.html
	//ResourceReport: 'resourcereport' Report;
	public ResourceReportElements getResourceReportAccess() {
		return pResourceReport;
	}
	
	public ParserRule getResourceReportRule() {
		return getResourceReportAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/resourceroot.html
	//ResourceRoot: 'resourceroot' resource = [Resource|ID];
	public ResourceRootElements getResourceRootAccess() {
		return pResourceRoot;
	}
	
	public ParserRule getResourceRootRule() {
		return getResourceRootAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/resources.limit.html
	//// See Limit
	//// http://www.taskjuggler.org/tj3/manual/responsible.html
	//Responsible: 'responsible' resources+=[Resource] (',' resources+=[Resource])*;
	public ResponsibleElements getResponsibleAccess() {
		return pResponsible;
	}
	
	public ParserRule getResponsibleRule() {
		return getResponsibleAccess().getRule();
	}
	
	////TODO validate rgb string
	//RGB: value=STRING;
	public RGBElements getRGBAccess() {
		return pRGB;
	}
	
	public ParserRule getRGBRule() {
		return getRGBAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/right.html
	//Right: 'right' RichText;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/rollupaccount.html
	//RollupAccount: 'rollupaccount' expression=LogicalExpression;
	public RollupAccountElements getRollupAccountAccess() {
		return pRollupAccount;
	}
	
	public ParserRule getRollupAccountRule() {
		return getRollupAccountAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/rollupresource.html
	//RollupResource: 'rollupresource' expression=LogicalExpression;
	public RollupResourceElements getRollupResourceAccess() {
		return pRollupResource;
	}
	
	public ParserRule getRollupResourceRule() {
		return getRollupResourceAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/rolluptask.html
	//RollupTask: 'rolluptask' expression=LogicalExpression;
	public RollupTaskElements getRollupTaskAccess() {
		return pRollupTask;
	}
	
	public ParserRule getRollupTaskRule() {
		return getRollupTaskAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scale.column.html
	//Scale: 'scale' scale=('hour' | 'day' |'week' | 'month' | 'quarter' | 'year');
	public ScaleElements getScaleAccess() {
		return pScale;
	}
	
	public ParserRule getScaleRule() {
		return getScaleAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scenario.html
	//Scenario:
	//    'scenario' id=ID name=STRING ('{'
	//        (
	//            ('active' active=YesNo)? &
	//            (scenario=Scenario)?
	//        )
	//    '}')?;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scenario.ical.html
	//ScenarioIcal: 'scenario' scenario = [Scenario];
	public ScenarioIcalElements getScenarioIcalAccess() {
		return pScenarioIcal;
	}
	
	public ParserRule getScenarioIcalRule() {
		return getScenarioIcalAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scenarios.export.html
	//// http://www.taskjuggler.org/tj3/manual/scenarios.html
	//Scenarios: 'scenarios' scenarios+=[Scenario] (',' scenarios+=[Scenario])*;
	public ScenariosElements getScenariosAccess() {
		return pScenarios;
	}
	
	public ParserRule getScenariosRule() {
		return getScenariosAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scenariospecific.extend.html
	//// see ExtendAttribute
	//// http://www.taskjuggler.org/tj3/manual/scheduled.html
	//Scheduled: scheduled?='scheduled';
	public ScheduledElements getScheduledAccess() {
		return pScheduled;
	}
	
	public ParserRule getScheduledRule() {
		return getScheduledAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scheduling.html
	//Scheduling: 'scheduling' scheduling=SchedulingPolicy;
	public SchedulingElements getSchedulingAccess() {
		return pScheduling;
	}
	
	public ParserRule getSchedulingRule() {
		return getSchedulingAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/select.html
	//Select: 'select' argument=SelectArgument;
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/selfcontained.html
	//SelfContained: 'selfcontained' selfcontained=YesNo;
	public SelfContainedElements getSelfContainedAccess() {
		return pSelfContained;
	}
	
	public ParserRule getSelfContainedRule() {
		return getSelfContainedAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/shift.html
	//Shift:
	//    'shift' id=ID? name=STRING ( '{'
	//        ((replace='replace')? &
	//        ('timezone' timezone=STRING)?  &
	//        ('vacation' vacation=VacationShift)? &
	//        ('shift' shift=Shift)? &
	//        ('workinghours' workingHours=WorkingHours)?)
	//    '}')?;
	public ShiftElements getShiftAccess() {
		return pShift;
	}
	
	public ParserRule getShiftRule() {
		return getShiftAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/shift.resource.html - deprecated
	//// http://www.taskjuggler.org/tj3/manual/shifts.task.html - deprecated
	//// http://www.taskjuggler.org/tj3/manual/shift.timesheet.html
	//ShiftTimesheet: 'shift' shift=[Shift];
	public ShiftTimesheetElements getShiftTimesheetAccess() {
		return pShiftTimesheet;
	}
	
	public ParserRule getShiftTimesheetRule() {
		return getShiftTimesheetAccess().getRule();
	}
	
	//Shifts: 'shifts' limits+=ShiftsLimit (',' limits+=ShiftsLimit)*;
	public ShiftsElements getShiftsAccess() {
		return pShifts;
	}
	
	public ParserRule getShiftsRule() {
		return getShiftsAccess().getRule();
	}
	
	//ShiftsLimit: shift=[Shift] (limit=Interval2)?;
	public ShiftsLimitElements getShiftsLimitAccess() {
		return pShiftsLimit;
	}
	
	public ParserRule getShiftsLimitRule() {
		return getShiftsLimitAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/shifts.allocate.html
	//ShiftsAllocate: 'shifts' shift=[Shift] ((intervals+=Interval3) (',' intervals+=Interval3)*)?;
	public ShiftsAllocateElements getShiftsAllocateAccess() {
		return pShiftsAllocate;
	}
	
	public ParserRule getShiftsAllocateRule() {
		return getShiftsAllocateAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/shifts.resource.html
	//ShiftsResource: Shifts;
	public ShiftsResourceElements getShiftsResourceAccess() {
		return pShiftsResource;
	}
	
	public ParserRule getShiftsResourceRule() {
		return getShiftsResourceAccess().getRule();
	}
	
	////http://www.taskjuggler.org/tj3/manual/shifts.task.html
	//ShiftsTask: Shifts;
	public ShiftsTaskElements getShiftsTaskAccess() {
		return pShiftsTask;
	}
	
	public ParserRule getShiftsTaskRule() {
		return getShiftsTaskAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/shorttimeformat.html
	//ShortTimeFormat: 'shorttimeformat' shortTimeFormat=STRING;
	public ShortTimeFormatElements getShortTimeFormatAccess() {
		return pShortTimeFormat;
	}
	
	public ParserRule getShortTimeFormatRule() {
		return getShortTimeFormatAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/sloppy.booking.html
	//// http://www.taskjuggler.org/tj3/manual/sloppy.projection.html
	//// see Booking
	//// http://www.taskjuggler.org/tj3/manual/sortaccounts.html
	//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//Sort:
	//      {Sort}  (tree?='tree'? | criteria+=Criterion) (',' criteria+=Criterion)*;
	public SortElements getSortAccess() {
		return pSort;
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}
	
	//SortAccounts: 'sortaccounts' Sort;
	public SortAccountsElements getSortAccountsAccess() {
		return pSortAccounts;
	}
	
	public ParserRule getSortAccountsRule() {
		return getSortAccountsAccess().getRule();
	}
	
	//SortJournalEntries: 'sortjournalentries' Sort;
	public SortJournalEntriesElements getSortJournalEntriesAccess() {
		return pSortJournalEntries;
	}
	
	public ParserRule getSortJournalEntriesRule() {
		return getSortJournalEntriesAccess().getRule();
	}
	
	//SortResources: 'sortresources' Sort;
	public SortResourcesElements getSortResourcesAccess() {
		return pSortResources;
	}
	
	public ParserRule getSortResourcesRule() {
		return getSortResourcesAccess().getRule();
	}
	
	//SortTasks: 'sorttasks' Sort;
	public SortTasksElements getSortTasksAccess() {
		return pSortTasks;
	}
	
	public ParserRule getSortTasksRule() {
		return getSortTasksAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/start.html
	//// http://www.taskjuggler.org/tj3/manual/start.column.html
	//// http://www.taskjuggler.org/tj3/manual/start.limit.html
	//// http://www.taskjuggler.org/tj3/manual/start.report.html
	//Start: 'start' (start=ISODATE | MacroCall);
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/status.statussheet.html
	//StatusStatusSheet: 'status' level=AlertLevel text=STRING ( '{' attributes += StatusStatusSheetAttribute* '}' ) ?;
	public StatusStatusSheetElements getStatusStatusSheetAccess() {
		return pStatusStatusSheet;
	}
	
	public ParserRule getStatusStatusSheetRule() {
		return getStatusStatusSheetAccess().getRule();
	}
	
	//StatusStatusSheetAttribute:
	//    Author |
	//    Details |
	//    Flags |
	//    Summary;
	public StatusStatusSheetAttributeElements getStatusStatusSheetAttributeAccess() {
		return pStatusStatusSheetAttribute;
	}
	
	public ParserRule getStatusStatusSheetAttributeRule() {
		return getStatusStatusSheetAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/status.timesheet.html
	//StatusTimesheet: 'status' level=AlertLevel text=STRING ( '{' attributes += StatusTimesheetAttribute* '}' ) ?;
	public StatusTimesheetElements getStatusTimesheetAccess() {
		return pStatusTimesheet;
	}
	
	public ParserRule getStatusTimesheetRule() {
		return getStatusTimesheetAccess().getRule();
	}
	
	//StatusTimesheetAttribute: Details | Flags | Summary;
	public StatusTimesheetAttributeElements getStatusTimesheetAttributeAccess() {
		return pStatusTimesheetAttribute;
	}
	
	public ParserRule getStatusTimesheetAttributeRule() {
		return getStatusTimesheetAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/statussheet.html
	//StatusSheet: 'statussheet' resource=[Resource]
	//    interval=Interval4 ('{' (attributes += StatusSheetAttribute*) '}')? ;
	public StatusSheetElements getStatusSheetAccess() {
		return pStatusSheet;
	}
	
	public ParserRule getStatusSheetRule() {
		return getStatusSheetAccess().getRule();
	}
	
	//StatusSheetAttribute:
	//    TaskStatusSheet
	//    ;
	public StatusSheetAttributeElements getStatusSheetAttributeAccess() {
		return pStatusSheetAttribute;
	}
	
	public ParserRule getStatusSheetAttributeRule() {
		return getStatusSheetAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/statussheetreport.html
	//StatusSheetReport: 'statussheetreport' filename=STRING
	//        ('{' (attributes+=StatusSheetReportAttribute*) '}' )?;
	public StatusSheetReportElements getStatusSheetReportAccess() {
		return pStatusSheetReport;
	}
	
	public ParserRule getStatusSheetReportRule() {
		return getStatusSheetReportAccess().getRule();
	}
	
	//StatusSheetReportAttribute:
	//        End
	//        | HideResource
	//        | HideTask
	//        | Period
	//        | SortResources
	//        | SortTasks
	//        | Start
	//;
	public StatusSheetReportAttributeElements getStatusSheetReportAttributeAccess() {
		return pStatusSheetReportAttribute;
	}
	
	public ParserRule getStatusSheetReportAttributeRule() {
		return getStatusSheetReportAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/strict.projection.html
	//// deprecated.
	//// http://www.taskjuggler.org/tj3/manual/summary.html
	//// TODO: limit to 240 characters
	//Summary: 'summary' RichText;
	public SummaryElements getSummaryAccess() {
		return pSummary;
	}
	
	public ParserRule getSummaryRule() {
		return getSummaryAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/supplement.html
	//SupplementAccount:
	//     'supplement' 'account' account=[Account] ('{' attributes+=AccountAttribute* '}')?;
	public SupplementAccountElements getSupplementAccountAccess() {
		return pSupplementAccount;
	}
	
	public ParserRule getSupplementAccountRule() {
		return getSupplementAccountAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/supplement.html
	//SupplementReport:
	//        'supplement' 'report' report=[Report] ('{' attributes+=ReportAttribute* '}')?;
	public SupplementReportElements getSupplementReportAccess() {
		return pSupplementReport;
	}
	
	public ParserRule getSupplementReportRule() {
		return getSupplementReportAccess().getRule();
	}
	
	//SupplementResource:
	//        'supplement' 'resource' resource=[Resource] ( '{' attributes+=ResourceAttribute*    '}'    )?;
	public SupplementResourceElements getSupplementResourceAccess() {
		return pSupplementResource;
	}
	
	public ParserRule getSupplementResourceRule() {
		return getSupplementResourceAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
	//SupplementTask:
	//    'supplement' 'task' task=[Task|TaskPath] ( '{' attributes+=TaskAttribute*    '}'    )?;
	public SupplementTaskElements getSupplementTaskAccess() {
		return pSupplementTask;
	}
	
	public ParserRule getSupplementTaskRule() {
		return getSupplementTaskAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/supplement.html
	//// http://www.taskjuggler.org/tj3/manual/supplement.resource.html
	//// http://www.taskjuggler.org/tj3/manual/supplement.task.html
	//// TODO
	//// http://www.taskjuggler.org/tj3/manual/tagfile.html
	//TagFile: 'tagfile' (id=ID)? filename = STRING
	//    ('{' hideResource = HideResource?
	//        & hideTask = HideTask?
	//        & rollupResource = RollupResource?
	//        & rollupTask = RollupTask?
	//        '}'
	//    )?;
	public TagFileElements getTagFileAccess() {
		return pTagFile;
	}
	
	public ParserRule getTagFileRule() {
		return getTagFileAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/task.statussheet.html
	//TaskStatusSheet: 'task' task=[Task|AbsoluteId] ('{' attributes += TaskStatusSheetAttribute* '}')?;
	public TaskStatusSheetElements getTaskStatusSheetAccess() {
		return pTaskStatusSheet;
	}
	
	public ParserRule getTaskStatusSheetRule() {
		return getTaskStatusSheetAccess().getRule();
	}
	
	//TaskStatusSheetAttribute: TaskStatusSheet | StatusStatusSheet;
	public TaskStatusSheetAttributeElements getTaskStatusSheetAttributeAccess() {
		return pTaskStatusSheetAttribute;
	}
	
	public ParserRule getTaskStatusSheetAttributeRule() {
		return getTaskStatusSheetAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
	//TaskTimesheet: 'task' task=[Task] ('{' attributes += TaskTimesheetAttribute* '}')?;
	public TaskTimesheetElements getTaskTimesheetAccess() {
		return pTaskTimesheet;
	}
	
	public ParserRule getTaskTimesheetRule() {
		return getTaskTimesheetAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/task.timesheet.html
	//TaskTimesheetAttribute:
	//    End
	//    | Priority
	//    | Remaining
	//    | StatusTimesheet
	//    | Work
	//;
	public TaskTimesheetAttributeElements getTaskTimesheetAttributeAccess() {
		return pTaskTimesheetAttribute;
	}
	
	public ParserRule getTaskTimesheetAttributeRule() {
		return getTaskTimesheetAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/taskattributes.html
	//TaskAttributes: 'taskattributes' (all ?= '*' | none ?= '-' |
	//        {TaskAttributes} (responsible ?= 'responsible'? &
	//             flags ?= 'flags'? &
	//             maxstart ?= 'maxstart'? &
	//             maxend ?= 'maxend'? &
	//             priority ?= 'priority'? &
	//             booking ?= 'booking'? &
	//             note ?= 'note'? &
	//             minstart ?= 'minstart'? &
	//             minend ?= 'minend'? &
	//             complete ?= 'complete'? &
	//             depends ?= 'depends'?)
	//);
	public TaskAttributesElements getTaskAttributesAccess() {
		return pTaskAttributes;
	}
	
	public ParserRule getTaskAttributesRule() {
		return getTaskAttributesAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/taskprefix.html
	//TaskPrefix: 'taskprefix' task=[Task];
	public TaskPrefixElements getTaskPrefixAccess() {
		return pTaskPrefix;
	}
	
	public ParserRule getTaskPrefixRule() {
		return getTaskPrefixAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/taskreport.html
	//TaskReport: 'taskreport' Report;
	public TaskReportElements getTaskReportAccess() {
		return pTaskReport;
	}
	
	public ParserRule getTaskReportRule() {
		return getTaskReportAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/taskroot.html
	//TaskRoot: 'taskroot' task=[Task|AbsoluteId];
	public TaskRootElements getTaskRootAccess() {
		return pTaskRoot;
	}
	
	public ParserRule getTaskRootRule() {
		return getTaskRootAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/textreport.html
	//TextReport: 'textreport' Report;
	public TextReportElements getTextReportAccess() {
		return pTextReport;
	}
	
	public ParserRule getTextReportRule() {
		return getTextReportAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timeformat.html
	//// TODO: specify format string syntax ?
	//TimeFormat: 'timeformat' timeformat=STRING;
	public TimeFormatElements getTimeFormatAccess() {
		return pTimeFormat;
	}
	
	public ParserRule getTimeFormatRule() {
		return getTimeFormatAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timeoff.nikureport.html
	//Timeoff: 'timeoff' id = STRING name = STRING;
	public TimeoffElements getTimeoffAccess() {
		return pTimeoff;
	}
	
	public ParserRule getTimeoffRule() {
		return getTimeoffAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timesheet.html
	//Timesheet: 'timesheet' resource=[Resource] interval=Interval4
	//    ('{' attributes+=TimesheetAttribute* '}')?
	//;
	public TimesheetElements getTimesheetAccess() {
		return pTimesheet;
	}
	
	public ParserRule getTimesheetRule() {
		return getTimesheetAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timesheet.html
	//TimesheetAttribute:
	//    NewTask | ShiftTimesheet | StatusTimesheet | TaskTimesheet;
	public TimesheetAttributeElements getTimesheetAttributeAccess() {
		return pTimesheetAttribute;
	}
	
	public ParserRule getTimesheetAttributeRule() {
		return getTimesheetAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timesheetreport.html
	//TimesheetReport: 'timesheetreport' filename=STRING
	//     ('{' attributes+=TimesheetReportAttribute* '}')?;
	public TimesheetReportElements getTimesheetReportAccess() {
		return pTimesheetReport;
	}
	
	public ParserRule getTimesheetReportRule() {
		return getTimesheetReportAccess().getRule();
	}
	
	//TimesheetReportAttribute:
	//    End | HideResource | Period | Start;
	public TimesheetReportAttributeElements getTimesheetReportAttributeAccess() {
		return pTimesheetReportAttribute;
	}
	
	public ParserRule getTimesheetReportAttributeRule() {
		return getTimesheetReportAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timezone.export.html
	//// http://www.taskjuggler.org/tj3/manual/timezone.html
	//// http://www.taskjuggler.org/tj3/manual/timezone.shift.html
	//Timezone: 'timezone' timezone=STRING;
	public TimezoneElements getTimezoneAccess() {
		return pTimezone;
	}
	
	public ParserRule getTimezoneRule() {
		return getTimezoneAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/timingresolution.html
	//TimingResolution: 'timingresolution' timingResolution=INT 'min';
	public TimingResolutionElements getTimingResolutionAccess() {
		return pTimingResolution;
	}
	
	public ParserRule getTimingResolutionRule() {
		return getTimingResolutionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/title.column.html
	//// http://www.taskjuggler.org/tj3/manual/title.html
	//Title: 'title' title=STRING;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/tooltip.column.html
	//ToolTip: 'tooltip' expression=LogicalExpression tip=STRING;
	public ToolTipElements getToolTipAccess() {
		return pToolTip;
	}
	
	public ParserRule getToolTipRule() {
		return getToolTipAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/trackingscenario.html
	//TrackingScenario: 'trackingscenario' scenario = [Scenario];
	public TrackingScenarioElements getTrackingScenarioAccess() {
		return pTrackingScenario;
	}
	
	public ParserRule getTrackingScenarioRule() {
		return getTrackingScenarioAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/treelevel.html
	//// TODO
	//TreeLevel: 'treelevel' level=STRING;
	public TreeLevelElements getTreeLevelAccess() {
		return pTreeLevel;
	}
	
	public ParserRule getTreeLevelRule() {
		return getTreeLevelAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/vacation.html
	//Vacation:
	//    'vacation' name=STRING intervals+=Interval3 (',' intervals+=Interval3)*;
	public VacationElements getVacationAccess() {
		return pVacation;
	}
	
	public ParserRule getVacationRule() {
		return getVacationAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/vacation.shift.html
	//VacationShift returns Vacation:
	//    'vacation' {Vacation} name=STRING?
	//        (intervals+=Interval3 (',' intervals+=Interval3)*)?;
	public VacationShiftElements getVacationShiftAccess() {
		return pVacationShift;
	}
	
	public ParserRule getVacationShiftRule() {
		return getVacationShiftAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/vacation.resource.html
	//VacationResource returns Vacation:
	//    'vacation' name=STRING? intervals+=Interval3 (',' intervals+=Interval3)*;
	public VacationResourceElements getVacationResourceAccess() {
		return pVacationResource;
	}
	
	public ParserRule getVacationResourceRule() {
		return getVacationResourceAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/warn.html
	//Warn: 'warn' expression=LogicalExpression;
	public WarnElements getWarnAccess() {
		return pWarn;
	}
	
	public ParserRule getWarnRule() {
		return getWarnAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/weekstartsmonday.html;
	//// http://www.taskjuggler.org/tj3/manual/weekstartssunday.html
	//WeekStarts: (sunday?='weekstartssunday') | (monday?='weekstartsmonday');
	public WeekStartsElements getWeekStartsAccess() {
		return pWeekStarts;
	}
	
	public ParserRule getWeekStartsRule() {
		return getWeekStartsAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/weeklymax.html
	//WeeklyMax: 'weeklymax' Limit;
	public WeeklyMaxElements getWeeklyMaxAccess() {
		return pWeeklyMax;
	}
	
	public ParserRule getWeeklyMaxRule() {
		return getWeeklyMaxAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/weeklymin.html
	//WeeklyMin: 'weeklymin' Limit;
	public WeeklyMinElements getWeeklyMinAccess() {
		return pWeeklyMin;
	}
	
	public ParserRule getWeeklyMinRule() {
		return getWeeklyMinAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/width.column.html
	//Width: 'width' width=XFloat;
	public WidthElements getWidthAccess() {
		return pWidth;
	}
	
	public ParserRule getWidthRule() {
		return getWidthAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/work.html
	//Work:  'work' value=XFloat unit = WorkQuantityUnit;
	public WorkElements getWorkAccess() {
		return pWork;
	}
	
	public ParserRule getWorkRule() {
		return getWorkAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
	//WorkingHours: 'workinghours'
	//    (weekdays+=Weekdays (',' weekdays+=Weekdays)*) ((off?='off') | (hours+=WorkHours (',' hours+=WorkHours)*));
	public WorkingHoursElements getWorkingHoursAccess() {
		return pWorkingHours;
	}
	
	public ParserRule getWorkingHoursRule() {
		return getWorkingHoursAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/yearlyworkingdays.html
	//YearlyWorkingDays: 'yearlyworkingdays' yearlyWorkingDays=INT;
	public YearlyWorkingDaysElements getYearlyWorkingDaysAccess() {
		return pYearlyWorkingDays;
	}
	
	public ParserRule getYearlyWorkingDaysRule() {
		return getYearlyWorkingDaysAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/chargeset.html
	//AccountShare: account=[Account] (share=XFloat)?;
	public AccountShareElements getAccountShareAccess() {
		return pAccountShare;
	}
	
	public ParserRule getAccountShareRule() {
		return getAccountShareAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/columns.html
	//ColumnAttribute: CellColor
	//    | CellText
	//    | End
	//    | FontColor
	//    | HAlign
	//    | ListItem
	//    | ListType
	//    | Period
	//    | Scale
	//    | Start
	//    | Title
	//    | ToolTip
	//    | Width
	//    | MacroCall
	//    | ExtendedResourceAttributeColumn
	//;
	public ColumnAttributeElements getColumnAttributeAccess() {
		return pColumnAttribute;
	}
	
	public ParserRule getColumnAttributeRule() {
		return getColumnAttributeAccess().getRule();
	}
	
	//ExtendedResourceAttributeColumn : extension = [Extend];
	public ExtendedResourceAttributeColumnElements getExtendedResourceAttributeColumnAccess() {
		return pExtendedResourceAttributeColumn;
	}
	
	public ParserRule getExtendedResourceAttributeColumnRule() {
		return getExtendedResourceAttributeColumnAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/columns.html
	//// TODO: extend column id to user defined column ids.
	//Column: (id=ColumnId | ext=ExtendedResourceAttributeColumn) ('{' (attributes+=ColumnAttribute)+ '}')?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//Criterion: (scenario=[Scenario]'.')? columnId=ColumnId '.' direction=CriterionDirection;
	public CriterionElements getCriterionAccess() {
		return pCriterion;
	}
	
	public ParserRule getCriterionRule() {
		return getCriterionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/duration.html
	//// http://www.taskjuggler.org/tj3/manual/effort.html
	//// http://www.taskjuggler.org/tj3/manual/gapduration.html
	//// http://www.taskjuggler.org/tj3/manual/gaplength.html
	//// http://www.taskjuggler.org/tj3/manual/interval1.html
	//// http://www.taskjuggler.org/tj3/manual/interval2.html
	//// http://www.taskjuggler.org/tj3/manual/interval3.html
	//// http://www.taskjuggler.org/tj3/manual/interval4.html
	//// http://www.taskjuggler.org/tj3/manual/length.html
	//// http://www.taskjuggler.org/tj3/manual/remaining.html
	//DurationQuantity: value=XFloat unit=TimeUnit;
	public DurationQuantityElements getDurationQuantityAccess() {
		return pDurationQuantity;
	}
	
	public ParserRule getDurationQuantityRule() {
		return getDurationQuantityAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/limits.task.html
	//// http://www.taskjuggler.org/tj3/manual/limits.resource.html
	//// http://www.taskjuggler.org/tj3/manual/limits.allocate.html
	//// http://www.taskjuggler.org/tj3/manual/limits.html
	//Limit:
	//        duration=DurationQuantity ('{' attributes+=LimitAttribute*    '}')?;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//LimitAttribute:
	//            ('end' end=ISODATE) |
	//            ('period' period=Interval1) |
	//            ('resources' resources+=[Resource] (',' resources+=[Resource])*) |
	//            ('start' start=ISODATE)
	//;
	public LimitAttributeElements getLimitAttributeAccess() {
		return pLimitAttribute;
	}
	
	public ParserRule getLimitAttributeRule() {
		return getLimitAttributeAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/currencyformat.html
	//// http://www.taskjuggler.org/tj3/manual/numberformat.html
	//RealFormat:
	//    negativePrefix=STRING negativeSuffix=STRING thousandsSeparator=STRING fractionSeparator=STRING fractionDigits=INT;
	public RealFormatElements getRealFormatAccess() {
		return pRealFormat;
	}
	
	public ParserRule getRealFormatRule() {
		return getRealFormatAccess().getRule();
	}
	
	//TaskDependency: task=[Task|TaskPath] ('{'
	//        (
	//            (gapDuration = GapDuration)? &
	//            (gapLength = GapLength)? &
	//            (policy=DependsPolicy)?
	//        )
	//    '}')?;
	public TaskDependencyElements getTaskDependencyAccess() {
		return pTaskDependency;
	}
	
	public ParserRule getTaskDependencyRule() {
		return getTaskDependencyAccess().getRule();
	}
	
	//TaskPath: '!'* QualifiedName;
	public TaskPathElements getTaskPathAccess() {
		return pTaskPath;
	}
	
	public ParserRule getTaskPathRule() {
		return getTaskPathAccess().getRule();
	}
	
	//RichText: text=STRING;
	public RichTextElements getRichTextAccess() {
		return pRichText;
	}
	
	public ParserRule getRichTextRule() {
		return getRichTextAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/workinghours.shift.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.resource.html
	//// http://www.taskjuggler.org/tj3/manual/workinghours.project.html
	//WorkHours:
	//    (start=TIME '-' stop=TIME);
	public WorkHoursElements getWorkHoursAccess() {
		return pWorkHours;
	}
	
	public ParserRule getWorkHoursRule() {
		return getWorkHoursAccess().getRule();
	}
	
	//Weekdays:
	//    (first=Weekday ('-' last=Weekday)?);
	public WeekdaysElements getWeekdaysAccess() {
		return pWeekdays;
	}
	
	public ParserRule getWeekdaysRule() {
		return getWeekdaysAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/charge.html
	//enum ChargeApplies:
	//    ONSTART = 'onstart' | ONEND = 'onend' | PERHOUR = 'perhour' | PERDAY = 'perday' | PERWEEK = 'perweek';
	public ChargeAppliesElements getChargeAppliesAccess() {
		return eChargeApplies;
	}
	
	public EnumRule getChargeAppliesRule() {
		return getChargeAppliesAccess().getRule();
	}
	
	//enum Justification:
	//    LEFT = 'left' |
	//    CENTER = 'center' |
	//    RIGHT = 'right'
	//;
	public JustificationElements getJustificationAccess() {
		return eJustification;
	}
	
	public EnumRule getJustificationRule() {
		return getJustificationAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/journalmode.html
	//enum JournalModeValue:
	//    JOURNAL = 'journal'
	//    | JOURNAL_SUB = 'journal_sub'
	//    | STATUS_DOWN = 'status_down'
	//    | STATUS_UP = 'status_up'
	//    | ALERTS_DOWN = 'alerts_down'
	//;
	public JournalModeValueElements getJournalModeValueAccess() {
		return eJournalModeValue;
	}
	
	public EnumRule getJournalModeValueRule() {
		return getJournalModeValueAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/sortjournalentries.html
	//enum JournalEntrySortCriterion:
	//    DATE_DOWN = 'date.down'
	//    | DATE_UP = 'date.up'
	//    | ALERT_DOWN = 'alert.down'
	//    | ALERT_UP = 'alert.up'
	//    | PROPERTY_UP = 'property.up'
	//;
	public JournalEntrySortCriterionElements getJournalEntrySortCriterionAccess() {
		return eJournalEntrySortCriterion;
	}
	
	public EnumRule getJournalEntrySortCriterionRule() {
		return getJournalEntrySortCriterionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/listtype.column.html
	//enum ListTypeValues:
	//    BULLETS = 'bullets'
	//    | COMMA = 'comma'
	//    | NUMBERED = 'numbered'
	//;
	public ListTypeValuesElements getListTypeValuesAccess() {
		return eListTypeValues;
	}
	
	public EnumRule getListTypeValuesRule() {
		return getListTypeValuesAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/sorttasks.html
	//// http://www.taskjuggler.org/tj3/manual/sortresources.html
	//enum CriterionDirection:
	//    UP = 'up' | DOWN = 'down';
	public CriterionDirectionElements getCriterionDirectionAccess() {
		return eCriterionDirection;
	}
	
	public EnumRule getCriterionDirectionRule() {
		return getCriterionDirectionAccess().getRule();
	}
	
	//enum YesNo:
	//    YES = 'yes' | NO = 'no';
	public YesNoElements getYesNoAccess() {
		return eYesNo;
	}
	
	public EnumRule getYesNoRule() {
		return getYesNoAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/formats.html
	//enum ReportFormat:
	//    CSV = 'csv' | HTML = 'html' | NIKU = 'niku';
	public ReportFormatElements getReportFormatAccess() {
		return eReportFormat;
	}
	
	public EnumRule getReportFormatRule() {
		return getReportFormatAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/loadunit.html
	//enum LoadDisplayUnit:
	//    DAYS = 'days' |
	//    HOURS = 'hours' |
	//    LONGAUTO = 'longauto' |
	//    MINUTES = 'minutes' |
	//    MONTHS = 'months' |
	//    SHORTAUTO = 'shortauto' |
	//    WEEKS = 'weeks' |
	//    YEARS = 'years';
	public LoadDisplayUnitElements getLoadDisplayUnitAccess() {
		return eLoadDisplayUnit;
	}
	
	public EnumRule getLoadDisplayUnitRule() {
		return getLoadDisplayUnitAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/scale.column.html
	//enum ScaleResolution:
	//    HOUR = 'hour' |
	//    DAY = 'day' |
	//    WEEK = 'week' |
	//    MONTH = 'month' |
	//    QUARTER = 'quarter' |
	//    YEAR = 'year';
	public ScaleResolutionElements getScaleResolutionAccess() {
		return eScaleResolution;
	}
	
	public EnumRule getScaleResolutionRule() {
		return getScaleResolutionAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/select.html
	//enum SelectArgument:
	//    MAXLOADED = 'maxloaded' |
	//    MINLOADED = 'minloaded' |
	//    MINALLOCATED = 'minallocated' |
	//    ORDER = 'order' |
	//    RANDOM = 'random'
	//;
	public SelectArgumentElements getSelectArgumentAccess() {
		return eSelectArgument;
	}
	
	public EnumRule getSelectArgumentRule() {
		return getSelectArgumentAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/columnid.html
	//enum ColumnId:
	//        activetasks | annualleave | annualleavebalance | alert | alertmessages | alertsummaries | alerttrend | balance | bsi | chart | children
	//    |     closedtasks | competitorcount | competitors | complete | completed | criticalness | cost | daily | directreports | duration | duties
	//    |     efficiency | effort | effortdone | effortleft | email | end | flags | followers | freetime | freework | fte | gauge | headcount
	//    |     hierarchindex | hourly | id | index | inputs | journal | journal_sub | journalmessages | journalsummaries | line | managers
	//    |     maxend | maxstart | minend | minstart | monthly | no | name | note | opentasks | pathcriticalness | precursors | priority
	//    |     quarterly | rate | reports | resources | responsible | revenue | scenario | scheduling | seqno | sickleave | specialleave
	//    |     start | status | targets | turnover | wbs | unpaidleave | weekly | yearly
	//;
	public ColumnIdElements getColumnIdAccess() {
		return eColumnId;
	}
	
	public EnumRule getColumnIdRule() {
		return getColumnIdAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/alert.html
	//enum AlertLevel:
	//    RED='red' |
	//    YELLOW='yellow' |
	//    GREEN='green';
	public AlertLevelElements getAlertLevelAccess() {
		return eAlertLevel;
	}
	
	public EnumRule getAlertLevelRule() {
		return getAlertLevelAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/onend.html
	//// http://www.taskjuggler.org/tj3/manual/onstart.html
	//enum DependsPolicy:
	//  ONEND = 'onend' |
	//  ONSTART = 'onstart';
	public DependsPolicyElements getDependsPolicyAccess() {
		return eDependsPolicy;
	}
	
	public EnumRule getDependsPolicyRule() {
		return getDependsPolicyAccess().getRule();
	}
	
	//enum SchedulingPolicy:
	//    ALAP = 'alap' |
	//    ASAP = 'asap';
	public SchedulingPolicyElements getSchedulingPolicyAccess() {
		return eSchedulingPolicy;
	}
	
	public EnumRule getSchedulingPolicyRule() {
		return getSchedulingPolicyAccess().getRule();
	}
	
	//enum TimeUnit:
	//    MINUTE='min'|
	//    HOUR='h'|
	//    DAY='d'|
	//    WEEK='w'|
	//    MONTH='m'|
	//    YEAR='y';
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//enum Weekday:
	//  MON = 'mon' |
	//  TUE = 'tue' |
	//  WED = 'wed' |
	//  THR = 'thu' |
	//  FRI = 'fri' |
	//  SAT = 'sat' |
	//  SUN = 'sun'
	//;
	public WeekdayElements getWeekdayAccess() {
		return eWeekday;
	}
	
	public EnumRule getWeekdayRule() {
		return getWeekdayAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/work.html
	//enum WorkQuantityUnit:
	//    PERCENT = '%'
	//    | MINUTES = 'min'
	//    | HOURS = 'h'
	//    | DAYS = 'd'
	//;
	public WorkQuantityUnitElements getWorkQuantityUnitAccess() {
		return eWorkQuantityUnit;
	}
	
	public EnumRule getWorkQuantityUnitRule() {
		return getWorkQuantityUnitAccess().getRule();
	}
	
	//// http://www.taskjuggler.org/tj3/manual/depends.html
	//// http://www.taskjuggler.org/tj3/manual/The_TaskJuggler_Syntax.html#ABSOLUTEID
	//terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//QualifiedName : ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//// XFloat is permitting either an int or a float: eg: 4 and 4.0 are parsed as intended.
	//// this technique avoids a FLOAT terminal definition that would hide INT:
	//// eg: avoiding 4 would only be INT and 4.0 would only be FLOAT.
	//XFloat returns ecore::EFloat:
	//    FLOAT | INT;
	public XFloatElements getXFloatAccess() {
		return pXFloat;
	}
	
	public ParserRule getXFloatRule() {
		return getXFloatAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat: (('0'..'9')+ '.' ('0'..'9')+);
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//EString returns ecore::EString :
	//    QualifiedName | STRING
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal SL_COMMENT 	: '#' !('\n'|'\r')* ('\r'? '\n')? ;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal STRING    :
	//            '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//            "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'" |
	//            '-8<-' -> '->8-'
	//        ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal TIME : ((('0'? | '1') '0'..'9') | ('2' '0'..'4')) ':' '0'..'5' '0'..'9';
	public TerminalRule getTIMERule() {
		return tTIME;
	}
	
	//ISODATE : ( date = ExtDate | '%' '{' date = ExtDate ('+'|'-') duration=DurationQuantity '}');
	public ISODATEElements getISODATEAccess() {
		return pISODATE;
	}
	
	public ParserRule getISODATERule() {
		return getISODATEAccess().getRule();
	}
	
	//ExtDate : DATE | MacroCall;
	public ExtDateElements getExtDateAccess() {
		return pExtDate;
	}
	
	public ParserRule getExtDateRule() {
		return getExtDateAccess().getRule();
	}
	
	//terminal DATE : // YYYY-MM-DD-HH:mm[:ss][xNNNN]  (x being + or -, NNNN being utc timezone offset
	//  '20' '0'..'9' '0'..'9' '-' (('0' '1'..'9') | ('1' '0'..'2')) '-' (('0' '1'..'9') | (('1' | '2') '0'..'9') | ('3' ('0' | '1')))
	//    ('-' ((('0'? | '1') '0'..'9') | ('2' '0'..'4')) ':' '0'..'5' '0'..'9' (':' '0'..'5' '0'..'9')? ('-'('+' | '-') '0'..'5' '0'..'9' '0'..'5' '0'..'9')?)?;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
