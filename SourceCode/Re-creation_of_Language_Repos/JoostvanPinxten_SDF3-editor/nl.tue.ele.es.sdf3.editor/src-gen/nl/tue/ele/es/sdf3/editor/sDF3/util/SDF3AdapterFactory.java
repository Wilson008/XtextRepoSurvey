/**
 * generated by Xtext 2.35.0
 */
package nl.tue.ele.es.sdf3.editor.sDF3.util;

import nl.tue.ele.es.sdf3.editor.sDF3.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see nl.tue.ele.es.sdf3.editor.sDF3.SDF3Package
 * @generated
 */
public class SDF3AdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SDF3Package modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SDF3AdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SDF3Package.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SDF3Switch<Adapter> modelSwitch =
    new SDF3Switch<Adapter>()
    {
      @Override
      public Adapter caseSDF3(SDF3 object)
      {
        return createSDF3Adapter();
      }
      @Override
      public Adapter caseApplicationGraph(ApplicationGraph object)
      {
        return createApplicationGraphAdapter();
      }
      @Override
      public Adapter caseActor(Actor object)
      {
        return createActorAdapter();
      }
      @Override
      public Adapter casePort(Port object)
      {
        return createPortAdapter();
      }
      @Override
      public Adapter caseChannel(Channel object)
      {
        return createChannelAdapter();
      }
      @Override
      public Adapter caseProperty(Property object)
      {
        return createPropertyAdapter();
      }
      @Override
      public Adapter caseGraphProperty(GraphProperty object)
      {
        return createGraphPropertyAdapter();
      }
      @Override
      public Adapter caseChannelProperty(ChannelProperty object)
      {
        return createChannelPropertyAdapter();
      }
      @Override
      public Adapter caseActorProperty(ActorProperty object)
      {
        return createActorPropertyAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.SDF3 <em>SDF3</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.SDF3
   * @generated
   */
  public Adapter createSDF3Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.ApplicationGraph <em>Application Graph</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.ApplicationGraph
   * @generated
   */
  public Adapter createApplicationGraphAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.Actor <em>Actor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.Actor
   * @generated
   */
  public Adapter createActorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.Port <em>Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.Port
   * @generated
   */
  public Adapter createPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.Channel <em>Channel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.Channel
   * @generated
   */
  public Adapter createChannelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.Property <em>Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.Property
   * @generated
   */
  public Adapter createPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.GraphProperty <em>Graph Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.GraphProperty
   * @generated
   */
  public Adapter createGraphPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.ChannelProperty <em>Channel Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.ChannelProperty
   * @generated
   */
  public Adapter createChannelPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link nl.tue.ele.es.sdf3.editor.sDF3.ActorProperty <em>Actor Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see nl.tue.ele.es.sdf3.editor.sDF3.ActorProperty
   * @generated
   */
  public Adapter createActorPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SDF3AdapterFactory
