/**
 * generated by Xtext 2.35.0
 */
package nl.tue.ele.es.sdf3.editor.sDF3.impl;

import nl.tue.ele.es.sdf3.editor.sDF3.Port;
import nl.tue.ele.es.sdf3.editor.sDF3.PortType;
import nl.tue.ele.es.sdf3.editor.sDF3.SDF3Package;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Port</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tue.ele.es.sdf3.editor.sDF3.impl.PortImpl#getPortType <em>Port Type</em>}</li>
 *   <li>{@link nl.tue.ele.es.sdf3.editor.sDF3.impl.PortImpl#getName <em>Name</em>}</li>
 *   <li>{@link nl.tue.ele.es.sdf3.editor.sDF3.impl.PortImpl#getRate <em>Rate</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PortImpl extends MinimalEObjectImpl.Container implements Port
{
  /**
   * The default value of the '{@link #getPortType() <em>Port Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPortType()
   * @generated
   * @ordered
   */
  protected static final PortType PORT_TYPE_EDEFAULT = PortType.IN;

  /**
   * The cached value of the '{@link #getPortType() <em>Port Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPortType()
   * @generated
   * @ordered
   */
  protected PortType portType = PORT_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getRate() <em>Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRate()
   * @generated
   * @ordered
   */
  protected static final int RATE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRate() <em>Rate</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRate()
   * @generated
   * @ordered
   */
  protected int rate = RATE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PortImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SDF3Package.Literals.PORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortType getPortType()
  {
    return portType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPortType(PortType newPortType)
  {
    PortType oldPortType = portType;
    portType = newPortType == null ? PORT_TYPE_EDEFAULT : newPortType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SDF3Package.PORT__PORT_TYPE, oldPortType, portType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SDF3Package.PORT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getRate()
  {
    return rate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRate(int newRate)
  {
    int oldRate = rate;
    rate = newRate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SDF3Package.PORT__RATE, oldRate, rate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SDF3Package.PORT__PORT_TYPE:
        return getPortType();
      case SDF3Package.PORT__NAME:
        return getName();
      case SDF3Package.PORT__RATE:
        return getRate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SDF3Package.PORT__PORT_TYPE:
        setPortType((PortType)newValue);
        return;
      case SDF3Package.PORT__NAME:
        setName((String)newValue);
        return;
      case SDF3Package.PORT__RATE:
        setRate((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SDF3Package.PORT__PORT_TYPE:
        setPortType(PORT_TYPE_EDEFAULT);
        return;
      case SDF3Package.PORT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case SDF3Package.PORT__RATE:
        setRate(RATE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SDF3Package.PORT__PORT_TYPE:
        return portType != PORT_TYPE_EDEFAULT;
      case SDF3Package.PORT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case SDF3Package.PORT__RATE:
        return rate != RATE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (portType: ");
    result.append(portType);
    result.append(", name: ");
    result.append(name);
    result.append(", rate: ");
    result.append(rate);
    result.append(')');
    return result.toString();
  }

} //PortImpl
