/*
 * generated by Xtext 2.35.0
 */
package nl.tue.ele.es.sdf3.editor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SDF3GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SDF3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.SDF3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSDF_TYPEParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cApplicationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cApplicationApplicationGraphParserRuleCall_3_0 = (RuleCall)cApplicationAssignment_3.eContents().get(0);
		private final Keyword cPropertiesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SDF3:
		//    'type' SDF_TYPE ';'
		//    application=ApplicationGraph
		//    'properties' '{' properties+=Property* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' SDF_TYPE ';'
		//application=ApplicationGraph
		//'properties' '{' properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//SDF_TYPE
		public RuleCall getSDF_TYPEParserRuleCall_1() { return cSDF_TYPEParserRuleCall_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//application=ApplicationGraph
		public Assignment getApplicationAssignment_3() { return cApplicationAssignment_3; }
		
		//ApplicationGraph
		public RuleCall getApplicationApplicationGraphParserRuleCall_3_0() { return cApplicationApplicationGraphParserRuleCall_3_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_4() { return cPropertiesKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ApplicationGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.ApplicationGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGraphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActorsActorParserRuleCall_4_0 = (RuleCall)cActorsAssignment_4.eContents().get(0);
		private final Assignment cChannelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChannelsChannelParserRuleCall_5_0 = (RuleCall)cChannelsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ApplicationGraph:
		//    'application' 'graph' name=ID '{' actors+=Actor+ channels+=Channel+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'application' 'graph' name=ID '{' actors+=Actor+ channels+=Channel+ '}'
		public Group getGroup() { return cGroup; }
		
		//'application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//'graph'
		public Keyword getGraphKeyword_1() { return cGraphKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//actors+=Actor+
		public Assignment getActorsAssignment_4() { return cActorsAssignment_4; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_4_0() { return cActorsActorParserRuleCall_4_0; }
		
		//channels+=Channel+
		public Assignment getChannelsAssignment_5() { return cChannelsAssignment_5; }
		
		//Channel
		public RuleCall getChannelsChannelParserRuleCall_5_0() { return cChannelsChannelParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortsPortParserRuleCall_5_0 = (RuleCall)cPortsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPortsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_6_1_0 = (RuleCall)cPortsAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Actor:
		//    'actor' name=ID '[' type=ID ']'
		//    ports += Port
		//    (',' ports += Port)*
		//    ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID '[' type=ID ']'
		//ports += Port
		//(',' ports += Port)*
		//';'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//ports += Port
		public Assignment getPortsAssignment_5() { return cPortsAssignment_5; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_5_0() { return cPortsPortParserRuleCall_5_0; }
		
		//(',' ports += Port)*
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//ports += Port
		public Assignment getPortsAssignment_6_1() { return cPortsAssignment_6_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_6_1_0() { return cPortsPortParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPortTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPortTypePortTypeEnumRuleCall_0_0 = (RuleCall)cPortTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRateINTTerminalRuleCall_2_0 = (RuleCall)cRateAssignment_2.eContents().get(0);
		
		//Port:
		//    portType=PortType name=ID rate=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//portType=PortType name=ID rate=INT
		public Group getGroup() { return cGroup; }
		
		//portType=PortType
		public Assignment getPortTypeAssignment_0() { return cPortTypeAssignment_0; }
		
		//PortType
		public RuleCall getPortTypePortTypeEnumRuleCall_0_0() { return cPortTypePortTypeEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//rate=INT
		public Assignment getRateAssignment_2() { return cRateAssignment_2; }
		
		//INT
		public RuleCall getRateINTTerminalRuleCall_2_0() { return cRateINTTerminalRuleCall_2_0; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.Channel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChannelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourcePortCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourcePortFQNParserRuleCall_2_0_1 = (RuleCall)cSourcePortCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDestinationPortCrossReference_4_0 = (CrossReference)cDestinationAssignment_4.eContents().get(0);
		private final RuleCall cDestinationPortFQNParserRuleCall_4_0_1 = (RuleCall)cDestinationPortCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInitiallyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitialTokensAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitialTokensINTTerminalRuleCall_5_1_0 = (RuleCall)cInitialTokensAssignment_5_1.eContents().get(0);
		
		//Channel:
		//    'channel' name=ID source=[Port|FQN] 'to' destination=[Port|FQN] ('initially' initialTokens=INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'channel' name=ID source=[Port|FQN] 'to' destination=[Port|FQN] ('initially' initialTokens=INT)?
		public Group getGroup() { return cGroup; }
		
		//'channel'
		public Keyword getChannelKeyword_0() { return cChannelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//source=[Port|FQN]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Port|FQN]
		public CrossReference getSourcePortCrossReference_2_0() { return cSourcePortCrossReference_2_0; }
		
		//FQN
		public RuleCall getSourcePortFQNParserRuleCall_2_0_1() { return cSourcePortFQNParserRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//destination=[Port|FQN]
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }
		
		//[Port|FQN]
		public CrossReference getDestinationPortCrossReference_4_0() { return cDestinationPortCrossReference_4_0; }
		
		//FQN
		public RuleCall getDestinationPortFQNParserRuleCall_4_0_1() { return cDestinationPortFQNParserRuleCall_4_0_1; }
		
		//('initially' initialTokens=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'initially'
		public Keyword getInitiallyKeyword_5_0() { return cInitiallyKeyword_5_0; }
		
		//initialTokens=INT
		public Assignment getInitialTokensAssignment_5_1() { return cInitialTokensAssignment_5_1; }
		
		//INT
		public RuleCall getInitialTokensINTTerminalRuleCall_5_1_0() { return cInitialTokensINTTerminalRuleCall_5_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActorPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChannelPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGraphPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Property:
		//    ActorProperty | ChannelProperty | GraphProperty
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ActorProperty | ChannelProperty | GraphProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActorProperty
		public RuleCall getActorPropertyParserRuleCall_0() { return cActorPropertyParserRuleCall_0; }
		
		//ChannelProperty
		public RuleCall getChannelPropertyParserRuleCall_1() { return cChannelPropertyParserRuleCall_1; }
		
		//GraphProperty
		public RuleCall getGraphPropertyParserRuleCall_2() { return cGraphPropertyParserRuleCall_2; }
	}
	public class GraphPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.GraphProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThroughputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThroughputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThroughputDECIMALTerminalRuleCall_1_0 = (RuleCall)cThroughputAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GraphProperty:
		//    'throughput' throughput=DECIMAL ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'throughput' throughput=DECIMAL ';'
		public Group getGroup() { return cGroup; }
		
		//'throughput'
		public Keyword getThroughputKeyword_0() { return cThroughputKeyword_0; }
		
		//throughput=DECIMAL
		public Assignment getThroughputAssignment_1() { return cThroughputAssignment_1; }
		
		//DECIMAL
		public RuleCall getThroughputDECIMALTerminalRuleCall_1_0() { return cThroughputDECIMALTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ChannelPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.ChannelProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cChannelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChannelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cChannelChannelCrossReference_2_0 = (CrossReference)cChannelAssignment_2.eContents().get(0);
		private final RuleCall cChannelChannelIDTerminalRuleCall_2_0_1 = (RuleCall)cChannelChannelCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChannelProperty:
		//    'for' 'channel' channel=[Channel] '{' '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' 'channel' channel=[Channel] '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'channel'
		public Keyword getChannelKeyword_1() { return cChannelKeyword_1; }
		
		//channel=[Channel]
		public Assignment getChannelAssignment_2() { return cChannelAssignment_2; }
		
		//[Channel]
		public CrossReference getChannelChannelCrossReference_2_0() { return cChannelChannelCrossReference_2_0; }
		
		//ID
		public RuleCall getChannelChannelIDTerminalRuleCall_2_0_1() { return cChannelChannelIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ActorPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.ActorProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cActorActorCrossReference_2_0 = (CrossReference)cActorAssignment_2.eContents().get(0);
		private final RuleCall cActorActorFQNParserRuleCall_2_0_1 = (RuleCall)cActorActorCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActorProperty:
		//    'for' 'actor' actor=[Actor|FQN] '{' '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' 'actor' actor=[Actor|FQN] '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//actor=[Actor|FQN]
		public Assignment getActorAssignment_2() { return cActorAssignment_2; }
		
		//[Actor|FQN]
		public CrossReference getActorActorCrossReference_2_0() { return cActorActorCrossReference_2_0; }
		
		//FQN
		public RuleCall getActorActorFQNParserRuleCall_2_0_1() { return cActorActorFQNParserRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SDF_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.SDF_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSDFKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSADFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SDF_TYPE:
		//    'SDF' | 'SADF'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'SDF' | 'SADF'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'SDF'
		public Keyword getSDFKeyword_0() { return cSDFKeyword_0; }
		
		//'SADF'
		public Keyword getSADFKeyword_1() { return cSADFKeyword_1; }
	}
	
	public class PortTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.PortType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PortType :
		//    IN='in' | OUT='out'
		//;
		public EnumRule getRule() { return rule; }
		
		//IN='in' | OUT='out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN='in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }
		
		//OUT='out'
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
	}
	
	private final SDF3Elements pSDF3;
	private final ApplicationGraphElements pApplicationGraph;
	private final ActorElements pActor;
	private final PortElements pPort;
	private final PortTypeElements ePortType;
	private final ChannelElements pChannel;
	private final FQNElements pFQN;
	private final PropertyElements pProperty;
	private final GraphPropertyElements pGraphProperty;
	private final TerminalRule tDECIMAL;
	private final ChannelPropertyElements pChannelProperty;
	private final ActorPropertyElements pActorProperty;
	private final SDF_TYPEElements pSDF_TYPE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SDF3GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSDF3 = new SDF3Elements();
		this.pApplicationGraph = new ApplicationGraphElements();
		this.pActor = new ActorElements();
		this.pPort = new PortElements();
		this.ePortType = new PortTypeElements();
		this.pChannel = new ChannelElements();
		this.pFQN = new FQNElements();
		this.pProperty = new PropertyElements();
		this.pGraphProperty = new GraphPropertyElements();
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "nl.tue.ele.es.sdf3.editor.SDF3.DECIMAL");
		this.pChannelProperty = new ChannelPropertyElements();
		this.pActorProperty = new ActorPropertyElements();
		this.pSDF_TYPE = new SDF_TYPEElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.tue.ele.es.sdf3.editor.SDF3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SDF3:
	//    'type' SDF_TYPE ';'
	//    application=ApplicationGraph
	//    'properties' '{' properties+=Property* '}';
	public SDF3Elements getSDF3Access() {
		return pSDF3;
	}
	
	public ParserRule getSDF3Rule() {
		return getSDF3Access().getRule();
	}
	
	//ApplicationGraph:
	//    'application' 'graph' name=ID '{' actors+=Actor+ channels+=Channel+ '}'
	//;
	public ApplicationGraphElements getApplicationGraphAccess() {
		return pApplicationGraph;
	}
	
	public ParserRule getApplicationGraphRule() {
		return getApplicationGraphAccess().getRule();
	}
	
	//Actor:
	//    'actor' name=ID '[' type=ID ']'
	//    ports += Port
	//    (',' ports += Port)*
	//    ';'
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Port:
	//    portType=PortType name=ID rate=INT
	//;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//enum PortType :
	//    IN='in' | OUT='out'
	//;
	public PortTypeElements getPortTypeAccess() {
		return ePortType;
	}
	
	public EnumRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}
	
	//Channel:
	//    'channel' name=ID source=[Port|FQN] 'to' destination=[Port|FQN] ('initially' initialTokens=INT)?
	//;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//FQN:
	//    ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//Property:
	//    ActorProperty | ChannelProperty | GraphProperty
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//GraphProperty:
	//    'throughput' throughput=DECIMAL ';'
	//;
	public GraphPropertyElements getGraphPropertyAccess() {
		return pGraphProperty;
	}
	
	public ParserRule getGraphPropertyRule() {
		return getGraphPropertyAccess().getRule();
	}
	
	//terminal DECIMAL returns ecore::EDouble  :
	//    ('0'..'9')* '.' ('0'..'9')+
	//;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//ChannelProperty:
	//    'for' 'channel' channel=[Channel] '{' '}'
	//;
	public ChannelPropertyElements getChannelPropertyAccess() {
		return pChannelProperty;
	}
	
	public ParserRule getChannelPropertyRule() {
		return getChannelPropertyAccess().getRule();
	}
	
	//ActorProperty:
	//    'for' 'actor' actor=[Actor|FQN] '{' '}'
	//;
	public ActorPropertyElements getActorPropertyAccess() {
		return pActorProperty;
	}
	
	public ParserRule getActorPropertyRule() {
		return getActorPropertyAccess().getRule();
	}
	
	//SDF_TYPE:
	//    'SDF' | 'SADF'
	//;
	public SDF_TYPEElements getSDF_TYPEAccess() {
		return pSDF_TYPE;
	}
	
	public ParserRule getSDF_TYPERule() {
		return getSDF_TYPEAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
