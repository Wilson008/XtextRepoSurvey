/**
 * generated by Xtext 2.35.0
 */
package nl.tue.ele.es.sdf3.editor.sDF3.impl;

import nl.tue.ele.es.sdf3.editor.sDF3.GraphProperty;
import nl.tue.ele.es.sdf3.editor.sDF3.SDF3Package;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Graph Property</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nl.tue.ele.es.sdf3.editor.sDF3.impl.GraphPropertyImpl#getThroughput <em>Throughput</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GraphPropertyImpl extends PropertyImpl implements GraphProperty
{
  /**
   * The default value of the '{@link #getThroughput() <em>Throughput</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThroughput()
   * @generated
   * @ordered
   */
  protected static final double THROUGHPUT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getThroughput() <em>Throughput</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThroughput()
   * @generated
   * @ordered
   */
  protected double throughput = THROUGHPUT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GraphPropertyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SDF3Package.Literals.GRAPH_PROPERTY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getThroughput()
  {
    return throughput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThroughput(double newThroughput)
  {
    double oldThroughput = throughput;
    throughput = newThroughput;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SDF3Package.GRAPH_PROPERTY__THROUGHPUT, oldThroughput, throughput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SDF3Package.GRAPH_PROPERTY__THROUGHPUT:
        return getThroughput();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SDF3Package.GRAPH_PROPERTY__THROUGHPUT:
        setThroughput((Double)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SDF3Package.GRAPH_PROPERTY__THROUGHPUT:
        setThroughput(THROUGHPUT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SDF3Package.GRAPH_PROPERTY__THROUGHPUT:
        return throughput != THROUGHPUT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (throughput: ");
    result.append(throughput);
    result.append(')');
    return result.toString();
  }

} //GraphPropertyImpl
