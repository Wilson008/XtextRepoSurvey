/*
 * generated by Xtext 2.35.0
 */
package nl.tue.ele.es.sdf3.editor.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import nl.tue.ele.es.sdf3.editor.ide.contentassist.antlr.internal.InternalSDF3Parser;
import nl.tue.ele.es.sdf3.editor.services.SDF3GrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SDF3Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SDF3GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SDF3GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
			builder.put(grammarAccess.getSDF_TYPEAccess().getAlternatives(), "rule__SDF_TYPE__Alternatives");
			builder.put(grammarAccess.getPortTypeAccess().getAlternatives(), "rule__PortType__Alternatives");
			builder.put(grammarAccess.getSDF3Access().getGroup(), "rule__SDF3__Group__0");
			builder.put(grammarAccess.getApplicationGraphAccess().getGroup(), "rule__ApplicationGraph__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup_6(), "rule__Actor__Group_6__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getChannelAccess().getGroup(), "rule__Channel__Group__0");
			builder.put(grammarAccess.getChannelAccess().getGroup_5(), "rule__Channel__Group_5__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getGraphPropertyAccess().getGroup(), "rule__GraphProperty__Group__0");
			builder.put(grammarAccess.getChannelPropertyAccess().getGroup(), "rule__ChannelProperty__Group__0");
			builder.put(grammarAccess.getActorPropertyAccess().getGroup(), "rule__ActorProperty__Group__0");
			builder.put(grammarAccess.getSDF3Access().getApplicationAssignment_3(), "rule__SDF3__ApplicationAssignment_3");
			builder.put(grammarAccess.getSDF3Access().getPropertiesAssignment_6(), "rule__SDF3__PropertiesAssignment_6");
			builder.put(grammarAccess.getApplicationGraphAccess().getNameAssignment_2(), "rule__ApplicationGraph__NameAssignment_2");
			builder.put(grammarAccess.getApplicationGraphAccess().getActorsAssignment_4(), "rule__ApplicationGraph__ActorsAssignment_4");
			builder.put(grammarAccess.getApplicationGraphAccess().getChannelsAssignment_5(), "rule__ApplicationGraph__ChannelsAssignment_5");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getTypeAssignment_3(), "rule__Actor__TypeAssignment_3");
			builder.put(grammarAccess.getActorAccess().getPortsAssignment_5(), "rule__Actor__PortsAssignment_5");
			builder.put(grammarAccess.getActorAccess().getPortsAssignment_6_1(), "rule__Actor__PortsAssignment_6_1");
			builder.put(grammarAccess.getPortAccess().getPortTypeAssignment_0(), "rule__Port__PortTypeAssignment_0");
			builder.put(grammarAccess.getPortAccess().getNameAssignment_1(), "rule__Port__NameAssignment_1");
			builder.put(grammarAccess.getPortAccess().getRateAssignment_2(), "rule__Port__RateAssignment_2");
			builder.put(grammarAccess.getChannelAccess().getNameAssignment_1(), "rule__Channel__NameAssignment_1");
			builder.put(grammarAccess.getChannelAccess().getSourceAssignment_2(), "rule__Channel__SourceAssignment_2");
			builder.put(grammarAccess.getChannelAccess().getDestinationAssignment_4(), "rule__Channel__DestinationAssignment_4");
			builder.put(grammarAccess.getChannelAccess().getInitialTokensAssignment_5_1(), "rule__Channel__InitialTokensAssignment_5_1");
			builder.put(grammarAccess.getGraphPropertyAccess().getThroughputAssignment_1(), "rule__GraphProperty__ThroughputAssignment_1");
			builder.put(grammarAccess.getChannelPropertyAccess().getChannelAssignment_2(), "rule__ChannelProperty__ChannelAssignment_2");
			builder.put(grammarAccess.getActorPropertyAccess().getActorAssignment_2(), "rule__ActorProperty__ActorAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SDF3GrammarAccess grammarAccess;

	@Override
	protected InternalSDF3Parser createParser() {
		InternalSDF3Parser result = new InternalSDF3Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SDF3GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SDF3GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
