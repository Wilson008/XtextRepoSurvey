/*
 * generated by Xtext 2.35.0
 */
package org.eclipse.scout.saml.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.scout.saml.services.SamlGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SamlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SamlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BigDecimalElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_ButtonElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_CheckboxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_CodeElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_CustomFieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_DateElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_FileChooserElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_FormElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_GroupBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_ListBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_LongElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_MenuElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_SequenceBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_SmartfieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_StringElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_TabBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_TableElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_XBlockExpression_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SamlGrammarAccess) access;
		match_BigDecimalElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getBigDecimalElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getBigDecimalElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_ButtonElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getButtonElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getButtonElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_CheckboxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCheckboxElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getCheckboxElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_CodeElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCodeElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getCodeElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_CustomFieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCustomFieldElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getCustomFieldElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_DateElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDateElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getDateElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_FileChooserElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFileChooserElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getFileChooserElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_FormElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getFormElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getFormElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_GroupBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getGroupBoxElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getGroupBoxElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_ListBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getListBoxElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getListBoxElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_LongElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getLongElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getLongElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_MenuElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMenuElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getMenuElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_SequenceBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSequenceBoxElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getSequenceBoxElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_SmartfieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSmartfieldElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getSmartfieldElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_StringElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStringElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getStringElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_TabBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTabBoxElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getTabBoxElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_TableElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTableElementAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getTableElementAccess().getRightCurlyBracketKeyword_3_2()));
		match_XBlockExpression_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArrayBracketsRule())
			return getArrayBracketsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArrayBrackets :
	 * 	'[' ']'
	 * ;
	 */
	protected String getArrayBracketsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[ ]";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BigDecimalElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_BigDecimalElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ButtonElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_ButtonElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CheckboxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_CheckboxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CodeElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_CodeElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CustomFieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_CustomFieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DateElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_DateElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FileChooserElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_FileChooserElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FormElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_FormElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GroupBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_GroupBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ListBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_ListBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LongElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_LongElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MenuElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_MenuElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SequenceBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_SequenceBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SmartfieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_SmartfieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StringElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_StringElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TabBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_TabBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TableElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_TableElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XBlockExpression_SemicolonKeyword_2_1_q.equals(syntax))
				emit_XBlockExpression_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImportDeclaration_SemicolonKeyword_2_q.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     fractionDigits=INT (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     grouping=BooleanType (ambiguity) (rule end)
	 *     horizontalAlign=HorizontalAlignmentType (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     max=Number (ambiguity) (rule end)
	 *     min=Number (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     percent=BooleanType (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_BigDecimalElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     processButton=BooleanType (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     type='cancel' (ambiguity) (rule end)
	 *     type='close' (ambiguity) (rule end)
	 *     type='normal' (ambiguity) (rule end)
	 *     type='ok' (ambiguity) (rule end)
	 *     type='reset' (ambiguity) (rule end)
	 *     type='save' (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ButtonElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_CheckboxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=STRING (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     valueType=STRING (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_CodeElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_CustomFieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_DateElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     defaultDirectory=STRING (ambiguity) (rule end)
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     extensions=STRING (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     maxlen=INT (ambiguity) (rule end)
	 *     mode='directory' (ambiguity) (rule end)
	 *     mode='file' (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     showDirectory=BooleanType (ambiguity) (rule end)
	 *     showFileExtension=BooleanType (ambiguity) (rule end)
	 *     showFileName=BooleanType (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     type='load' (ambiguity) (rule end)
	 *     type='store' (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_FileChooserElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     columns=INT (ambiguity) (rule end)
	 *     modal=BooleanType (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     subtitle=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     svcSuperType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     title=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_FormElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     borderDecoration='auto' (ambiguity) (rule end)
	 *     borderDecoration='empty' (ambiguity) (rule end)
	 *     borderDecoration='line' (ambiguity) (rule end)
	 *     borderDecoration='section' (ambiguity) (rule end)
	 *     borderVisible=BooleanType (ambiguity) (rule end)
	 *     columns=INT (ambiguity) (rule end)
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridHeight=INT (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_GroupBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     code=[CodeElement|ID] (ambiguity) (rule end)
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridHeight=INT (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     lookup=[LookupElement|ID] (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     valueType=STRING (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ListBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     horizontalAlign=HorizontalAlignmentType (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     max=INT (ambiguity) (rule end)
	 *     min=INT (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_LongElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     emptySelect=BooleanType (ambiguity) (rule end)
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     multiSelect=BooleanType (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     singleSelect=BooleanType (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     type='cancel' (ambiguity) (rule end)
	 *     type='normal' (ambiguity) (rule end)
	 *     type='separator' (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MenuElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_SequenceBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     code=[CodeElement|ID] (ambiguity) (rule end)
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     lookup=[LookupElement|ID] (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     valueType=STRING (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_SmartfieldElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridHeight=INT (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     horizontalAlign=HorizontalAlignmentType (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     mandatory=BooleanType (ambiguity) (rule end)
	 *     master=[ValueFieldElement|ID] (ambiguity) (rule end)
	 *     maxlen=INT (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StringElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TabBoxElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     enabled=BooleanType (ambiguity) (rule end)
	 *     gridHeight=INT (ambiguity) (rule end)
	 *     gridWidth=INT (ambiguity) (rule end)
	 *     labelVisible=BooleanType (ambiguity) (rule end)
	 *     name=ID (ambiguity) (rule end)
	 *     superType=[TemplateElement|ID] (ambiguity) (rule end)
	 *     text=[TranslationElement|QualifiedName] (ambiguity) (rule end)
	 *     visible=BooleanType (ambiguity) (rule end)
	 *     widthInPixels=INT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TableElement___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' ')' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 
	 * </pre>
	 */
	protected void emit_XBlockExpression_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 
	 * </pre>
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=&gt;' returnType=JvmTypeReference
	 
	 * </pre>
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '&lt;' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'return' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 
	 * </pre>
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '&lt;' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 
	 * </pre>
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
