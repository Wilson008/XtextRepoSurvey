/**
 * generated by Xtext 2.35.0
 */
package uniandes.academia.generator.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uniandes.academia.generator.AbstractElement;
import uniandes.academia.generator.Application;
import uniandes.academia.generator.Attribute;
import uniandes.academia.generator.Child;
import uniandes.academia.generator.Children;
import uniandes.academia.generator.Component;
import uniandes.academia.generator.ComponentBasic;
import uniandes.academia.generator.ComponentContainer;
import uniandes.academia.generator.Components;
import uniandes.academia.generator.Configuration;
import uniandes.academia.generator.ContainerModule;
import uniandes.academia.generator.Crud;
import uniandes.academia.generator.EnumLanguage;
import uniandes.academia.generator.EnumLayout;
import uniandes.academia.generator.EnumMethodType;
import uniandes.academia.generator.EnumRealtionshipType;
import uniandes.academia.generator.EnumType;
import uniandes.academia.generator.GeneratorFactory;
import uniandes.academia.generator.GeneratorPackage;
import uniandes.academia.generator.Import;
import uniandes.academia.generator.Model;
import uniandes.academia.generator.Models;
import uniandes.academia.generator.Modules;
import uniandes.academia.generator.PackageDeclaration;
import uniandes.academia.generator.Root;
import uniandes.academia.generator.SearchComboBox;
import uniandes.academia.generator.Service;
import uniandes.academia.generator.Services;
import uniandes.academia.generator.VisualModule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GeneratorFactoryImpl extends EFactoryImpl implements GeneratorFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GeneratorFactory init()
  {
    try
    {
      GeneratorFactory theGeneratorFactory = (GeneratorFactory)EPackage.Registry.INSTANCE.getEFactory(GeneratorPackage.eNS_URI);
      if (theGeneratorFactory != null)
      {
        return theGeneratorFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GeneratorFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GeneratorFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GeneratorPackage.ROOT: return createRoot();
      case GeneratorPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case GeneratorPackage.PACKAGE_DECLARATION: return createPackageDeclaration();
      case GeneratorPackage.APPLICATION: return createApplication();
      case GeneratorPackage.IMPORT: return createImport();
      case GeneratorPackage.MODULES: return createModules();
      case GeneratorPackage.SERVICES: return createServices();
      case GeneratorPackage.COMPONENTS: return createComponents();
      case GeneratorPackage.MODELS: return createModels();
      case GeneratorPackage.CHILDREN: return createChildren();
      case GeneratorPackage.CONFIGURATION: return createConfiguration();
      case GeneratorPackage.MODULE: return createModule();
      case GeneratorPackage.MODEL: return createModel();
      case GeneratorPackage.ATTRIBUTE: return createAttribute();
      case GeneratorPackage.CHILD: return createChild();
      case GeneratorPackage.VISUAL_MODULE: return createVisualModule();
      case GeneratorPackage.CONTAINER_MODULE: return createContainerModule();
      case GeneratorPackage.COMPONENT: return createComponent();
      case GeneratorPackage.COMPONENT_CONTAINER: return createComponentContainer();
      case GeneratorPackage.COMPONENT_BASIC: return createComponentBasic();
      case GeneratorPackage.CRUD: return createCrud();
      case GeneratorPackage.SEARCH_COMBO_BOX: return createSearchComboBox();
      case GeneratorPackage.SERVICE: return createService();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GeneratorPackage.ENUM_TYPE:
        return createEnumTypeFromString(eDataType, initialValue);
      case GeneratorPackage.ENUM_METHOD_TYPE:
        return createEnumMethodTypeFromString(eDataType, initialValue);
      case GeneratorPackage.ENUM_LAYOUT:
        return createEnumLayoutFromString(eDataType, initialValue);
      case GeneratorPackage.ENUM_LANGUAGE:
        return createEnumLanguageFromString(eDataType, initialValue);
      case GeneratorPackage.ENUM_REALTIONSHIP_TYPE:
        return createEnumRealtionshipTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GeneratorPackage.ENUM_TYPE:
        return convertEnumTypeToString(eDataType, instanceValue);
      case GeneratorPackage.ENUM_METHOD_TYPE:
        return convertEnumMethodTypeToString(eDataType, instanceValue);
      case GeneratorPackage.ENUM_LAYOUT:
        return convertEnumLayoutToString(eDataType, instanceValue);
      case GeneratorPackage.ENUM_LANGUAGE:
        return convertEnumLanguageToString(eDataType, instanceValue);
      case GeneratorPackage.ENUM_REALTIONSHIP_TYPE:
        return convertEnumRealtionshipTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Root createRoot()
  {
    RootImpl root = new RootImpl();
    return root;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDeclaration createPackageDeclaration()
  {
    PackageDeclarationImpl packageDeclaration = new PackageDeclarationImpl();
    return packageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Application createApplication()
  {
    ApplicationImpl application = new ApplicationImpl();
    return application;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modules createModules()
  {
    ModulesImpl modules = new ModulesImpl();
    return modules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Services createServices()
  {
    ServicesImpl services = new ServicesImpl();
    return services;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Components createComponents()
  {
    ComponentsImpl components = new ComponentsImpl();
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Models createModels()
  {
    ModelsImpl models = new ModelsImpl();
    return models;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Children createChildren()
  {
    ChildrenImpl children = new ChildrenImpl();
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configuration createConfiguration()
  {
    ConfigurationImpl configuration = new ConfigurationImpl();
    return configuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public uniandes.academia.generator.Module createModule()
  {
    ModuleImpl module = new ModuleImpl();
    return module;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Child createChild()
  {
    ChildImpl child = new ChildImpl();
    return child;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VisualModule createVisualModule()
  {
    VisualModuleImpl visualModule = new VisualModuleImpl();
    return visualModule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContainerModule createContainerModule()
  {
    ContainerModuleImpl containerModule = new ContainerModuleImpl();
    return containerModule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentContainer createComponentContainer()
  {
    ComponentContainerImpl componentContainer = new ComponentContainerImpl();
    return componentContainer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentBasic createComponentBasic()
  {
    ComponentBasicImpl componentBasic = new ComponentBasicImpl();
    return componentBasic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Crud createCrud()
  {
    CrudImpl crud = new CrudImpl();
    return crud;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SearchComboBox createSearchComboBox()
  {
    SearchComboBoxImpl searchComboBox = new SearchComboBoxImpl();
    return searchComboBox;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Service createService()
  {
    ServiceImpl service = new ServiceImpl();
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumType createEnumTypeFromString(EDataType eDataType, String initialValue)
  {
    EnumType result = EnumType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumMethodType createEnumMethodTypeFromString(EDataType eDataType, String initialValue)
  {
    EnumMethodType result = EnumMethodType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumMethodTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumLayout createEnumLayoutFromString(EDataType eDataType, String initialValue)
  {
    EnumLayout result = EnumLayout.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumLayoutToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumLanguage createEnumLanguageFromString(EDataType eDataType, String initialValue)
  {
    EnumLanguage result = EnumLanguage.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumLanguageToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumRealtionshipType createEnumRealtionshipTypeFromString(EDataType eDataType, String initialValue)
  {
    EnumRealtionshipType result = EnumRealtionshipType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumRealtionshipTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneratorPackage getGeneratorPackage()
  {
    return (GeneratorPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GeneratorPackage getPackage()
  {
    return GeneratorPackage.eINSTANCE;
  }

} //GeneratorFactoryImpl
