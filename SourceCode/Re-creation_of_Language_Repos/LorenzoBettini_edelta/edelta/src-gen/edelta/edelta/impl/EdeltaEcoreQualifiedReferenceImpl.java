/**
 * generated by Xtext 2.35.0
 */
package edelta.edelta.impl;

import edelta.edelta.EdeltaEcoreQualifiedReference;
import edelta.edelta.EdeltaEcoreReference;
import edelta.edelta.EdeltaPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ecore Qualified Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edelta.edelta.impl.EdeltaEcoreQualifiedReferenceImpl#getQualification <em>Qualification</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EdeltaEcoreQualifiedReferenceImpl extends EdeltaEcoreReferenceImpl implements EdeltaEcoreQualifiedReference
{
  /**
   * The cached value of the '{@link #getQualification() <em>Qualification</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualification()
   * @generated
   * @ordered
   */
  protected EdeltaEcoreReference qualification;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EdeltaEcoreQualifiedReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdeltaPackage.Literals.EDELTA_ECORE_QUALIFIED_REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EdeltaEcoreReference getQualification()
  {
    return qualification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQualification(EdeltaEcoreReference newQualification, NotificationChain msgs)
  {
    EdeltaEcoreReference oldQualification = qualification;
    qualification = newQualification;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION, oldQualification, newQualification);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQualification(EdeltaEcoreReference newQualification)
  {
    if (newQualification != qualification)
    {
      NotificationChain msgs = null;
      if (qualification != null)
        msgs = ((InternalEObject)qualification).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION, null, msgs);
      if (newQualification != null)
        msgs = ((InternalEObject)newQualification).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION, null, msgs);
      msgs = basicSetQualification(newQualification, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION, newQualification, newQualification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION:
        return basicSetQualification(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION:
        return getQualification();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION:
        setQualification((EdeltaEcoreReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION:
        setQualification((EdeltaEcoreReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_ECORE_QUALIFIED_REFERENCE__QUALIFICATION:
        return qualification != null;
    }
    return super.eIsSet(featureID);
  }

} //EdeltaEcoreQualifiedReferenceImpl
