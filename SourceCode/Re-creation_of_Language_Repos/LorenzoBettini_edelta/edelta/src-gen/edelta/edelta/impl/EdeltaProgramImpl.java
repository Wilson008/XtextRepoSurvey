/**
 * generated by Xtext 2.35.0
 */
package edelta.edelta.impl;

import edelta.edelta.EdeltaModifyEcoreOperation;
import edelta.edelta.EdeltaOperation;
import edelta.edelta.EdeltaPackage;
import edelta.edelta.EdeltaProgram;
import edelta.edelta.EdeltaUseAs;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.xtype.XImportSection;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edelta.edelta.impl.EdeltaProgramImpl#getImportSection <em>Import Section</em>}</li>
 *   <li>{@link edelta.edelta.impl.EdeltaProgramImpl#getName <em>Name</em>}</li>
 *   <li>{@link edelta.edelta.impl.EdeltaProgramImpl#getMetamodels <em>Metamodels</em>}</li>
 *   <li>{@link edelta.edelta.impl.EdeltaProgramImpl#getUseAsClauses <em>Use As Clauses</em>}</li>
 *   <li>{@link edelta.edelta.impl.EdeltaProgramImpl#getOperations <em>Operations</em>}</li>
 *   <li>{@link edelta.edelta.impl.EdeltaProgramImpl#getModifyEcoreOperations <em>Modify Ecore Operations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EdeltaProgramImpl extends MinimalEObjectImpl.Container implements EdeltaProgram
{
  /**
   * The cached value of the '{@link #getImportSection() <em>Import Section</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportSection()
   * @generated
   * @ordered
   */
  protected XImportSection importSection;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getMetamodels() <em>Metamodels</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMetamodels()
   * @generated
   * @ordered
   */
  protected EList<EPackage> metamodels;

  /**
   * The cached value of the '{@link #getUseAsClauses() <em>Use As Clauses</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseAsClauses()
   * @generated
   * @ordered
   */
  protected EList<EdeltaUseAs> useAsClauses;

  /**
   * The cached value of the '{@link #getOperations() <em>Operations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperations()
   * @generated
   * @ordered
   */
  protected EList<EdeltaOperation> operations;

  /**
   * The cached value of the '{@link #getModifyEcoreOperations() <em>Modify Ecore Operations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModifyEcoreOperations()
   * @generated
   * @ordered
   */
  protected EList<EdeltaModifyEcoreOperation> modifyEcoreOperations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EdeltaProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EdeltaPackage.Literals.EDELTA_PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XImportSection getImportSection()
  {
    return importSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImportSection(XImportSection newImportSection, NotificationChain msgs)
  {
    XImportSection oldImportSection = importSection;
    importSection = newImportSection;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION, oldImportSection, newImportSection);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setImportSection(XImportSection newImportSection)
  {
    if (newImportSection != importSection)
    {
      NotificationChain msgs = null;
      if (importSection != null)
        msgs = ((InternalEObject)importSection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION, null, msgs);
      if (newImportSection != null)
        msgs = ((InternalEObject)newImportSection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION, null, msgs);
      msgs = basicSetImportSection(newImportSection, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION, newImportSection, newImportSection));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EdeltaPackage.EDELTA_PROGRAM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EPackage> getMetamodels()
  {
    if (metamodels == null)
    {
      metamodels = new EObjectResolvingEList<EPackage>(EPackage.class, this, EdeltaPackage.EDELTA_PROGRAM__METAMODELS);
    }
    return metamodels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EdeltaUseAs> getUseAsClauses()
  {
    if (useAsClauses == null)
    {
      useAsClauses = new EObjectContainmentEList<EdeltaUseAs>(EdeltaUseAs.class, this, EdeltaPackage.EDELTA_PROGRAM__USE_AS_CLAUSES);
    }
    return useAsClauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EdeltaOperation> getOperations()
  {
    if (operations == null)
    {
      operations = new EObjectContainmentEList<EdeltaOperation>(EdeltaOperation.class, this, EdeltaPackage.EDELTA_PROGRAM__OPERATIONS);
    }
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EdeltaModifyEcoreOperation> getModifyEcoreOperations()
  {
    if (modifyEcoreOperations == null)
    {
      modifyEcoreOperations = new EObjectContainmentEList<EdeltaModifyEcoreOperation>(EdeltaModifyEcoreOperation.class, this, EdeltaPackage.EDELTA_PROGRAM__MODIFY_ECORE_OPERATIONS);
    }
    return modifyEcoreOperations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION:
        return basicSetImportSection(null, msgs);
      case EdeltaPackage.EDELTA_PROGRAM__USE_AS_CLAUSES:
        return ((InternalEList<?>)getUseAsClauses()).basicRemove(otherEnd, msgs);
      case EdeltaPackage.EDELTA_PROGRAM__OPERATIONS:
        return ((InternalEList<?>)getOperations()).basicRemove(otherEnd, msgs);
      case EdeltaPackage.EDELTA_PROGRAM__MODIFY_ECORE_OPERATIONS:
        return ((InternalEList<?>)getModifyEcoreOperations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION:
        return getImportSection();
      case EdeltaPackage.EDELTA_PROGRAM__NAME:
        return getName();
      case EdeltaPackage.EDELTA_PROGRAM__METAMODELS:
        return getMetamodels();
      case EdeltaPackage.EDELTA_PROGRAM__USE_AS_CLAUSES:
        return getUseAsClauses();
      case EdeltaPackage.EDELTA_PROGRAM__OPERATIONS:
        return getOperations();
      case EdeltaPackage.EDELTA_PROGRAM__MODIFY_ECORE_OPERATIONS:
        return getModifyEcoreOperations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION:
        setImportSection((XImportSection)newValue);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__NAME:
        setName((String)newValue);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__METAMODELS:
        getMetamodels().clear();
        getMetamodels().addAll((Collection<? extends EPackage>)newValue);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__USE_AS_CLAUSES:
        getUseAsClauses().clear();
        getUseAsClauses().addAll((Collection<? extends EdeltaUseAs>)newValue);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__OPERATIONS:
        getOperations().clear();
        getOperations().addAll((Collection<? extends EdeltaOperation>)newValue);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__MODIFY_ECORE_OPERATIONS:
        getModifyEcoreOperations().clear();
        getModifyEcoreOperations().addAll((Collection<? extends EdeltaModifyEcoreOperation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION:
        setImportSection((XImportSection)null);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case EdeltaPackage.EDELTA_PROGRAM__METAMODELS:
        getMetamodels().clear();
        return;
      case EdeltaPackage.EDELTA_PROGRAM__USE_AS_CLAUSES:
        getUseAsClauses().clear();
        return;
      case EdeltaPackage.EDELTA_PROGRAM__OPERATIONS:
        getOperations().clear();
        return;
      case EdeltaPackage.EDELTA_PROGRAM__MODIFY_ECORE_OPERATIONS:
        getModifyEcoreOperations().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EdeltaPackage.EDELTA_PROGRAM__IMPORT_SECTION:
        return importSection != null;
      case EdeltaPackage.EDELTA_PROGRAM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case EdeltaPackage.EDELTA_PROGRAM__METAMODELS:
        return metamodels != null && !metamodels.isEmpty();
      case EdeltaPackage.EDELTA_PROGRAM__USE_AS_CLAUSES:
        return useAsClauses != null && !useAsClauses.isEmpty();
      case EdeltaPackage.EDELTA_PROGRAM__OPERATIONS:
        return operations != null && !operations.isEmpty();
      case EdeltaPackage.EDELTA_PROGRAM__MODIFY_ECORE_OPERATIONS:
        return modifyEcoreOperations != null && !modifyEcoreOperations.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //EdeltaProgramImpl
