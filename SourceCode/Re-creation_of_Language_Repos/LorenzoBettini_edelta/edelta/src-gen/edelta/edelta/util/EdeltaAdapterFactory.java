/**
 * generated by Xtext 2.35.0
 */
package edelta.edelta.util;

import edelta.edelta.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.xtext.xbase.XExpression;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edelta.edelta.EdeltaPackage
 * @generated
 */
public class EdeltaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static EdeltaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EdeltaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = EdeltaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EdeltaSwitch<Adapter> modelSwitch =
    new EdeltaSwitch<Adapter>()
    {
      @Override
      public Adapter caseEdeltaProgram(EdeltaProgram object)
      {
        return createEdeltaProgramAdapter();
      }
      @Override
      public Adapter caseEdeltaUseAs(EdeltaUseAs object)
      {
        return createEdeltaUseAsAdapter();
      }
      @Override
      public Adapter caseEdeltaModifyEcoreOperation(EdeltaModifyEcoreOperation object)
      {
        return createEdeltaModifyEcoreOperationAdapter();
      }
      @Override
      public Adapter caseEdeltaOperation(EdeltaOperation object)
      {
        return createEdeltaOperationAdapter();
      }
      @Override
      public Adapter caseEdeltaEcoreReference(EdeltaEcoreReference object)
      {
        return createEdeltaEcoreReferenceAdapter();
      }
      @Override
      public Adapter caseEdeltaEcoreReferenceExpression(EdeltaEcoreReferenceExpression object)
      {
        return createEdeltaEcoreReferenceExpressionAdapter();
      }
      @Override
      public Adapter caseEdeltaEcoreQualifiedReference(EdeltaEcoreQualifiedReference object)
      {
        return createEdeltaEcoreQualifiedReferenceAdapter();
      }
      @Override
      public Adapter caseEdeltaEcoreDirectReference(EdeltaEcoreDirectReference object)
      {
        return createEdeltaEcoreDirectReferenceAdapter();
      }
      @Override
      public Adapter caseXExpression(XExpression object)
      {
        return createXExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaProgram <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaProgram
   * @generated
   */
  public Adapter createEdeltaProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaUseAs <em>Use As</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaUseAs
   * @generated
   */
  public Adapter createEdeltaUseAsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaModifyEcoreOperation <em>Modify Ecore Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaModifyEcoreOperation
   * @generated
   */
  public Adapter createEdeltaModifyEcoreOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaOperation <em>Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaOperation
   * @generated
   */
  public Adapter createEdeltaOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaEcoreReference <em>Ecore Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaEcoreReference
   * @generated
   */
  public Adapter createEdeltaEcoreReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaEcoreReferenceExpression <em>Ecore Reference Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaEcoreReferenceExpression
   * @generated
   */
  public Adapter createEdeltaEcoreReferenceExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaEcoreQualifiedReference <em>Ecore Qualified Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaEcoreQualifiedReference
   * @generated
   */
  public Adapter createEdeltaEcoreQualifiedReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edelta.edelta.EdeltaEcoreDirectReference <em>Ecore Direct Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edelta.edelta.EdeltaEcoreDirectReference
   * @generated
   */
  public Adapter createEdeltaEcoreDirectReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.xtext.xbase.XExpression <em>XExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.xtext.xbase.XExpression
   * @since 2.7
   * @generated
   */
  public Adapter createXExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //EdeltaAdapterFactory
