/**
 * generated by Xtext 2.35.0
 */
package ch.vobos.typescript.impl;

import ch.vobos.typescript.InterfaceDeclaration;
import ch.vobos.typescript.InterfaceExtendsClause;
import ch.vobos.typescript.TypescriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Interface Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ch.vobos.typescript.impl.InterfaceDeclarationImpl#getExtendClause <em>Extend Clause</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InterfaceDeclarationImpl extends InterfaceOrClassDeclarationImpl implements InterfaceDeclaration
{
  /**
   * The cached value of the '{@link #getExtendClause() <em>Extend Clause</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendClause()
   * @generated
   * @ordered
   */
  protected InterfaceExtendsClause extendClause;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InterfaceDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TypescriptPackage.Literals.INTERFACE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceExtendsClause getExtendClause()
  {
    return extendClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExtendClause(InterfaceExtendsClause newExtendClause, NotificationChain msgs)
  {
    InterfaceExtendsClause oldExtendClause = extendClause;
    extendClause = newExtendClause;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE, oldExtendClause, newExtendClause);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtendClause(InterfaceExtendsClause newExtendClause)
  {
    if (newExtendClause != extendClause)
    {
      NotificationChain msgs = null;
      if (extendClause != null)
        msgs = ((InternalEObject)extendClause).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE, null, msgs);
      if (newExtendClause != null)
        msgs = ((InternalEObject)newExtendClause).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE, null, msgs);
      msgs = basicSetExtendClause(newExtendClause, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE, newExtendClause, newExtendClause));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE:
        return basicSetExtendClause(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE:
        return getExtendClause();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE:
        setExtendClause((InterfaceExtendsClause)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE:
        setExtendClause((InterfaceExtendsClause)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TypescriptPackage.INTERFACE_DECLARATION__EXTEND_CLAUSE:
        return extendClause != null;
    }
    return super.eIsSet(featureID);
  }

} //InterfaceDeclarationImpl
