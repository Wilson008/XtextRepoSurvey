/**
 * generated by Xtext 2.35.0
 */
package ch.vobos.typescript.impl;

import ch.vobos.typescript.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TypescriptFactoryImpl extends EFactoryImpl implements TypescriptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TypescriptFactory init()
  {
    try
    {
      TypescriptFactory theTypescriptFactory = (TypescriptFactory)EPackage.Registry.INSTANCE.getEFactory(TypescriptPackage.eNS_URI);
      if (theTypescriptFactory != null)
      {
        return theTypescriptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TypescriptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypescriptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TypescriptPackage.TYPESCRIPT: return createTypescript();
      case TypescriptPackage.INTERFACES_AND_CLASSES: return createInterfacesAndClasses();
      case TypescriptPackage.IMPORT_DECLARATION: return createImportDeclaration();
      case TypescriptPackage.MODULE_DECLARATION: return createModuleDeclaration();
      case TypescriptPackage.MODULE_BODY: return createModuleBody();
      case TypescriptPackage.MODULE_ELEMENT: return createModuleElement();
      case TypescriptPackage.DECLARATION: return createDeclaration();
      case TypescriptPackage.INTERFACE_OR_CLASS_DECLARATION: return createInterfaceOrClassDeclaration();
      case TypescriptPackage.INTERFACE_DECLARATION: return createInterfaceDeclaration();
      case TypescriptPackage.CLASS_DECLARATION: return createClassDeclaration();
      case TypescriptPackage.INTERFACE_EXTENDS_CLAUSE: return createInterfaceExtendsClause();
      case TypescriptPackage.CLASS_OR_INTERFACE_TYPE_LIST: return createClassOrInterfaceTypeList();
      case TypescriptPackage.OBJECT_TYPE: return createObjectType();
      case TypescriptPackage.TYPE_MEMBER: return createTypeMember();
      case TypescriptPackage.PROPERTY_SIGNATURE: return createPropertySignature();
      case TypescriptPackage.TYPE: return createType();
      case TypescriptPackage.PREDEFINED_TYPE: return createPredefinedType();
      case TypescriptPackage.TYPE_LITERAL: return createTypeLiteral();
      case TypescriptPackage.ARRAY_TYPE: return createArrayType();
      case TypescriptPackage.TYPE_REFERENCE: return createTypeReference();
      case TypescriptPackage.DOC_COMMENT: return createDocComment();
      case TypescriptPackage.ANNOTATION_LINE: return createAnnotationLine();
      case TypescriptPackage.INDEX_SIGNATURE: return createIndexSignature();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TypescriptPackage.PREDEFINED_TYPE_ENUM:
        return createPredefinedTypeEnumFromString(eDataType, initialValue);
      case TypescriptPackage.INDEX_TYPE:
        return createIndexTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TypescriptPackage.PREDEFINED_TYPE_ENUM:
        return convertPredefinedTypeEnumToString(eDataType, instanceValue);
      case TypescriptPackage.INDEX_TYPE:
        return convertIndexTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Typescript createTypescript()
  {
    TypescriptImpl typescript = new TypescriptImpl();
    return typescript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfacesAndClasses createInterfacesAndClasses()
  {
    InterfacesAndClassesImpl interfacesAndClasses = new InterfacesAndClassesImpl();
    return interfacesAndClasses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ImportDeclaration createImportDeclaration()
  {
    ImportDeclarationImpl importDeclaration = new ImportDeclarationImpl();
    return importDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleDeclaration createModuleDeclaration()
  {
    ModuleDeclarationImpl moduleDeclaration = new ModuleDeclarationImpl();
    return moduleDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleBody createModuleBody()
  {
    ModuleBodyImpl moduleBody = new ModuleBodyImpl();
    return moduleBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModuleElement createModuleElement()
  {
    ModuleElementImpl moduleElement = new ModuleElementImpl();
    return moduleElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceOrClassDeclaration createInterfaceOrClassDeclaration()
  {
    InterfaceOrClassDeclarationImpl interfaceOrClassDeclaration = new InterfaceOrClassDeclarationImpl();
    return interfaceOrClassDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceDeclaration createInterfaceDeclaration()
  {
    InterfaceDeclarationImpl interfaceDeclaration = new InterfaceDeclarationImpl();
    return interfaceDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassDeclaration createClassDeclaration()
  {
    ClassDeclarationImpl classDeclaration = new ClassDeclarationImpl();
    return classDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceExtendsClause createInterfaceExtendsClause()
  {
    InterfaceExtendsClauseImpl interfaceExtendsClause = new InterfaceExtendsClauseImpl();
    return interfaceExtendsClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClassOrInterfaceTypeList createClassOrInterfaceTypeList()
  {
    ClassOrInterfaceTypeListImpl classOrInterfaceTypeList = new ClassOrInterfaceTypeListImpl();
    return classOrInterfaceTypeList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectType createObjectType()
  {
    ObjectTypeImpl objectType = new ObjectTypeImpl();
    return objectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeMember createTypeMember()
  {
    TypeMemberImpl typeMember = new TypeMemberImpl();
    return typeMember;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertySignature createPropertySignature()
  {
    PropertySignatureImpl propertySignature = new PropertySignatureImpl();
    return propertySignature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredefinedType createPredefinedType()
  {
    PredefinedTypeImpl predefinedType = new PredefinedTypeImpl();
    return predefinedType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeLiteral createTypeLiteral()
  {
    TypeLiteralImpl typeLiteral = new TypeLiteralImpl();
    return typeLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayType createArrayType()
  {
    ArrayTypeImpl arrayType = new ArrayTypeImpl();
    return arrayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeReference createTypeReference()
  {
    TypeReferenceImpl typeReference = new TypeReferenceImpl();
    return typeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DocComment createDocComment()
  {
    DocCommentImpl docComment = new DocCommentImpl();
    return docComment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnnotationLine createAnnotationLine()
  {
    AnnotationLineImpl annotationLine = new AnnotationLineImpl();
    return annotationLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexSignature createIndexSignature()
  {
    IndexSignatureImpl indexSignature = new IndexSignatureImpl();
    return indexSignature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PredefinedTypeEnum createPredefinedTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    PredefinedTypeEnum result = PredefinedTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPredefinedTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexType createIndexTypeFromString(EDataType eDataType, String initialValue)
  {
    IndexType result = IndexType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIndexTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypescriptPackage getTypescriptPackage()
  {
    return (TypescriptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TypescriptPackage getPackage()
  {
    return TypescriptPackage.eINSTANCE;
  }

} //TypescriptFactoryImpl
