/**
 * generated by Xtext 2.35.0
 */
package ch.vobos.typescript.impl;

import ch.vobos.typescript.IndexSignature;
import ch.vobos.typescript.IndexType;
import ch.vobos.typescript.Type;
import ch.vobos.typescript.TypescriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index Signature</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ch.vobos.typescript.impl.IndexSignatureImpl#getIndexType <em>Index Type</em>}</li>
 *   <li>{@link ch.vobos.typescript.impl.IndexSignatureImpl#getValueType <em>Value Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexSignatureImpl extends MinimalEObjectImpl.Container implements IndexSignature
{
  /**
   * The default value of the '{@link #getIndexType() <em>Index Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexType()
   * @generated
   * @ordered
   */
  protected static final IndexType INDEX_TYPE_EDEFAULT = IndexType.NUMBER;

  /**
   * The cached value of the '{@link #getIndexType() <em>Index Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexType()
   * @generated
   * @ordered
   */
  protected IndexType indexType = INDEX_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getValueType() <em>Value Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueType()
   * @generated
   * @ordered
   */
  protected Type valueType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexSignatureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TypescriptPackage.Literals.INDEX_SIGNATURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexType getIndexType()
  {
    return indexType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIndexType(IndexType newIndexType)
  {
    IndexType oldIndexType = indexType;
    indexType = newIndexType == null ? INDEX_TYPE_EDEFAULT : newIndexType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TypescriptPackage.INDEX_SIGNATURE__INDEX_TYPE, oldIndexType, indexType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type getValueType()
  {
    return valueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueType(Type newValueType, NotificationChain msgs)
  {
    Type oldValueType = valueType;
    valueType = newValueType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE, oldValueType, newValueType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValueType(Type newValueType)
  {
    if (newValueType != valueType)
    {
      NotificationChain msgs = null;
      if (valueType != null)
        msgs = ((InternalEObject)valueType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE, null, msgs);
      if (newValueType != null)
        msgs = ((InternalEObject)newValueType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE, null, msgs);
      msgs = basicSetValueType(newValueType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE, newValueType, newValueType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE:
        return basicSetValueType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TypescriptPackage.INDEX_SIGNATURE__INDEX_TYPE:
        return getIndexType();
      case TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE:
        return getValueType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TypescriptPackage.INDEX_SIGNATURE__INDEX_TYPE:
        setIndexType((IndexType)newValue);
        return;
      case TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE:
        setValueType((Type)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TypescriptPackage.INDEX_SIGNATURE__INDEX_TYPE:
        setIndexType(INDEX_TYPE_EDEFAULT);
        return;
      case TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE:
        setValueType((Type)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TypescriptPackage.INDEX_SIGNATURE__INDEX_TYPE:
        return indexType != INDEX_TYPE_EDEFAULT;
      case TypescriptPackage.INDEX_SIGNATURE__VALUE_TYPE:
        return valueType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (indexType: ");
    result.append(indexType);
    result.append(')');
    return result.toString();
  }

} //IndexSignatureImpl
