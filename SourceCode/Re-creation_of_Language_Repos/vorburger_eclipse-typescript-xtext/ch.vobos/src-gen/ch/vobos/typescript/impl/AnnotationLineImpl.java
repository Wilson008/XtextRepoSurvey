/**
 * generated by Xtext 2.35.0
 */
package ch.vobos.typescript.impl;

import ch.vobos.typescript.AnnotationLine;
import ch.vobos.typescript.TypescriptPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Annotation Line</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ch.vobos.typescript.impl.AnnotationLineImpl#getAnnotationName <em>Annotation Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AnnotationLineImpl extends MinimalEObjectImpl.Container implements AnnotationLine
{
  /**
   * The default value of the '{@link #getAnnotationName() <em>Annotation Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotationName()
   * @generated
   * @ordered
   */
  protected static final String ANNOTATION_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAnnotationName() <em>Annotation Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnotationName()
   * @generated
   * @ordered
   */
  protected String annotationName = ANNOTATION_NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AnnotationLineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TypescriptPackage.Literals.ANNOTATION_LINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAnnotationName()
  {
    return annotationName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnnotationName(String newAnnotationName)
  {
    String oldAnnotationName = annotationName;
    annotationName = newAnnotationName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TypescriptPackage.ANNOTATION_LINE__ANNOTATION_NAME, oldAnnotationName, annotationName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TypescriptPackage.ANNOTATION_LINE__ANNOTATION_NAME:
        return getAnnotationName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TypescriptPackage.ANNOTATION_LINE__ANNOTATION_NAME:
        setAnnotationName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TypescriptPackage.ANNOTATION_LINE__ANNOTATION_NAME:
        setAnnotationName(ANNOTATION_NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TypescriptPackage.ANNOTATION_LINE__ANNOTATION_NAME:
        return ANNOTATION_NAME_EDEFAULT == null ? annotationName != null : !ANNOTATION_NAME_EDEFAULT.equals(annotationName);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (annotationName: ");
    result.append(annotationName);
    result.append(')');
    return result.toString();
  }

} //AnnotationLineImpl
