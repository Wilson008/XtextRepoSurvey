/*
 * generated by Xtext 2.35.0
 */
package ch.vobos.serializer;

import ch.vobos.services.TypescriptGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TypescriptSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TypescriptGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ModuleDeclaration___FullStopKeyword_3_0_IdentifierParserRuleCall_3_1__a;
	protected AbstractElementAlias match_ModuleElement_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_ObjectType_SemicolonKeyword_2_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TypescriptGrammarAccess) access;
		match_ModuleDeclaration___FullStopKeyword_3_0_IdentifierParserRuleCall_3_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getModuleDeclarationAccess().getFullStopKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getModuleDeclarationAccess().getIdentifierParserRuleCall_3_1()));
		match_ModuleElement_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getModuleElementAccess().getSemicolonKeyword_2());
		match_ObjectType_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getObjectTypeAccess().getSemicolonKeyword_2_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDOC_ANNOTATION_PREFIXRule())
			return getDOC_ANNOTATION_PREFIXToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOC_COMMENT_ENDRule())
			return getDOC_COMMENT_ENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIdentifierRule())
			return getIdentifierToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal DOC_ANNOTATION_PREFIX: (' '|'\t')* '* @';
	 */
	protected String getDOC_ANNOTATION_PREFIXToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "* @";
	}
	
	/**
	 * terminal DOC_COMMENT_END: (' '|'\t')* '*' '/';
	 */
	protected String getDOC_COMMENT_ENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*/";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Identifier:
	 * 	ID;
	 */
	protected String getIdentifierToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ModuleDeclaration___FullStopKeyword_3_0_IdentifierParserRuleCall_3_1__a.equals(syntax))
				emit_ModuleDeclaration___FullStopKeyword_3_0_IdentifierParserRuleCall_3_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ModuleElement_SemicolonKeyword_2_q.equals(syntax))
				emit_ModuleElement_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectType_SemicolonKeyword_2_1_q.equals(syntax))
				emit_ObjectType_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('.' Identifier)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Identifier (ambiguity) '{' body=ModuleBody
	 
	 * </pre>
	 */
	protected void emit_ModuleDeclaration___FullStopKeyword_3_0_IdentifierParserRuleCall_3_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     moduleContent=Declaration (ambiguity) (rule end)
	 *     moduleContent=ImportDeclaration (ambiguity) (rule end)
	 *     moduleContent=ModuleDeclaration (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ModuleElement_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     members+=TypeMember (ambiguity) '}' (rule end)
	 *     members+=TypeMember (ambiguity) members+=TypeMember
	 
	 * </pre>
	 */
	protected void emit_ObjectType_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
