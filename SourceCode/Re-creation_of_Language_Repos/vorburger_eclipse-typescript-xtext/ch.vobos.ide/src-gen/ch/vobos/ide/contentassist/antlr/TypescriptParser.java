/*
 * generated by Xtext 2.35.0
 */
package ch.vobos.ide.contentassist.antlr;

import ch.vobos.ide.contentassist.antlr.internal.InternalTypescriptParser;
import ch.vobos.services.TypescriptGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TypescriptParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TypescriptGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TypescriptGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInterfacesAndClassesAccess().getAlternatives_1(), "rule__InterfacesAndClasses__Alternatives_1");
			builder.put(grammarAccess.getModuleElementAccess().getModuleContentAlternatives_1_0(), "rule__ModuleElement__ModuleContentAlternatives_1_0");
			builder.put(grammarAccess.getInterfaceOrClassDeclarationAccess().getAlternatives_0(), "rule__InterfaceOrClassDeclaration__Alternatives_0");
			builder.put(grammarAccess.getTypeMemberAccess().getSignatureAlternatives_1_0(), "rule__TypeMember__SignatureAlternatives_1_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getTypeLiteralAccess().getAlternatives(), "rule__TypeLiteral__Alternatives");
			builder.put(grammarAccess.getArrayTypeAccess().getAlternatives(), "rule__ArrayType__Alternatives");
			builder.put(grammarAccess.getPredefinedTypeEnumAccess().getAlternatives(), "rule__PredefinedTypeEnum__Alternatives");
			builder.put(grammarAccess.getIndexTypeAccess().getAlternatives(), "rule__IndexType__Alternatives");
			builder.put(grammarAccess.getTypescriptAccess().getGroup(), "rule__Typescript__Group__0");
			builder.put(grammarAccess.getInterfacesAndClassesAccess().getGroup(), "rule__InterfacesAndClasses__Group__0");
			builder.put(grammarAccess.getImportDeclarationAccess().getGroup(), "rule__ImportDeclaration__Group__0");
			builder.put(grammarAccess.getModuleDeclarationAccess().getGroup(), "rule__ModuleDeclaration__Group__0");
			builder.put(grammarAccess.getModuleDeclarationAccess().getGroup_3(), "rule__ModuleDeclaration__Group_3__0");
			builder.put(grammarAccess.getModuleBodyAccess().getGroup(), "rule__ModuleBody__Group__0");
			builder.put(grammarAccess.getModuleElementAccess().getGroup(), "rule__ModuleElement__Group__0");
			builder.put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
			builder.put(grammarAccess.getInterfaceOrClassDeclarationAccess().getGroup(), "rule__InterfaceOrClassDeclaration__Group__0");
			builder.put(grammarAccess.getInterfaceDeclarationAccess().getGroup(), "rule__InterfaceDeclaration__Group__0");
			builder.put(grammarAccess.getClassDeclarationAccess().getGroup(), "rule__ClassDeclaration__Group__0");
			builder.put(grammarAccess.getInterfaceExtendsClauseAccess().getGroup(), "rule__InterfaceExtendsClause__Group__0");
			builder.put(grammarAccess.getClassOrInterfaceTypeListAccess().getGroup(), "rule__ClassOrInterfaceTypeList__Group__0");
			builder.put(grammarAccess.getClassOrInterfaceTypeListAccess().getGroup_2(), "rule__ClassOrInterfaceTypeList__Group_2__0");
			builder.put(grammarAccess.getObjectTypeAccess().getGroup(), "rule__ObjectType__Group__0");
			builder.put(grammarAccess.getObjectTypeAccess().getGroup_2(), "rule__ObjectType__Group_2__0");
			builder.put(grammarAccess.getTypeMemberAccess().getGroup(), "rule__TypeMember__Group__0");
			builder.put(grammarAccess.getPropertySignatureAccess().getGroup(), "rule__PropertySignature__Group__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup_0(), "rule__ArrayType__Group_0__0");
			builder.put(grammarAccess.getArrayTypeAccess().getGroup_1(), "rule__ArrayType__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getDocCommentAccess().getGroup(), "rule__DocComment__Group__0");
			builder.put(grammarAccess.getAnnotationLineAccess().getGroup(), "rule__AnnotationLine__Group__0");
			builder.put(grammarAccess.getIndexSignatureAccess().getGroup(), "rule__IndexSignature__Group__0");
			builder.put(grammarAccess.getTypescriptAccess().getImportsAssignment_0(), "rule__Typescript__ImportsAssignment_0");
			builder.put(grammarAccess.getTypescriptAccess().getInterfacesAndClassesAssignment_1(), "rule__Typescript__InterfacesAndClassesAssignment_1");
			builder.put(grammarAccess.getInterfacesAndClassesAccess().getModulesAssignment_1_0(), "rule__InterfacesAndClasses__ModulesAssignment_1_0");
			builder.put(grammarAccess.getInterfacesAndClassesAccess().getTypesAssignment_1_1(), "rule__InterfacesAndClasses__TypesAssignment_1_1");
			builder.put(grammarAccess.getImportDeclarationAccess().getAliasAssignment_1(), "rule__ImportDeclaration__AliasAssignment_1");
			builder.put(grammarAccess.getImportDeclarationAccess().getNameAssignment_3(), "rule__ImportDeclaration__NameAssignment_3");
			builder.put(grammarAccess.getModuleDeclarationAccess().getDocCommentAssignment_0(), "rule__ModuleDeclaration__DocCommentAssignment_0");
			builder.put(grammarAccess.getModuleDeclarationAccess().getNameAssignment_2(), "rule__ModuleDeclaration__NameAssignment_2");
			builder.put(grammarAccess.getModuleDeclarationAccess().getBodyAssignment_5(), "rule__ModuleDeclaration__BodyAssignment_5");
			builder.put(grammarAccess.getModuleBodyAccess().getElementsAssignment_1(), "rule__ModuleBody__ElementsAssignment_1");
			builder.put(grammarAccess.getModuleElementAccess().getExportedAssignment_0(), "rule__ModuleElement__ExportedAssignment_0");
			builder.put(grammarAccess.getModuleElementAccess().getModuleContentAssignment_1(), "rule__ModuleElement__ModuleContentAssignment_1");
			builder.put(grammarAccess.getDeclarationAccess().getDocCommentAssignment_0(), "rule__Declaration__DocCommentAssignment_0");
			builder.put(grammarAccess.getDeclarationAccess().getDeclarationAssignment_1(), "rule__Declaration__DeclarationAssignment_1");
			builder.put(grammarAccess.getInterfaceOrClassDeclarationAccess().getObjectTypeAssignment_1(), "rule__InterfaceOrClassDeclaration__ObjectTypeAssignment_1");
			builder.put(grammarAccess.getInterfaceDeclarationAccess().getNameAssignment_1(), "rule__InterfaceDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getInterfaceDeclarationAccess().getExtendClauseAssignment_2(), "rule__InterfaceDeclaration__ExtendClauseAssignment_2");
			builder.put(grammarAccess.getClassDeclarationAccess().getNameAssignment_1(), "rule__ClassDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getClassOrInterfaceTypeListAccess().getParentsAssignment_1(), "rule__ClassOrInterfaceTypeList__ParentsAssignment_1");
			builder.put(grammarAccess.getClassOrInterfaceTypeListAccess().getParentsAssignment_2_1(), "rule__ClassOrInterfaceTypeList__ParentsAssignment_2_1");
			builder.put(grammarAccess.getObjectTypeAccess().getMembersAssignment_2_0(), "rule__ObjectType__MembersAssignment_2_0");
			builder.put(grammarAccess.getTypeMemberAccess().getDocCommentAssignment_0(), "rule__TypeMember__DocCommentAssignment_0");
			builder.put(grammarAccess.getTypeMemberAccess().getSignatureAssignment_1(), "rule__TypeMember__SignatureAssignment_1");
			builder.put(grammarAccess.getPropertySignatureAccess().getNameAssignment_0(), "rule__PropertySignature__NameAssignment_0");
			builder.put(grammarAccess.getPropertySignatureAccess().getOptionalAssignment_1(), "rule__PropertySignature__OptionalAssignment_1");
			builder.put(grammarAccess.getPropertySignatureAccess().getTypeAssignment_3(), "rule__PropertySignature__TypeAssignment_3");
			builder.put(grammarAccess.getPredefinedTypeAccess().getPredefinedTypeAssignment(), "rule__PredefinedType__PredefinedTypeAssignment");
			builder.put(grammarAccess.getArrayTypeAccess().getArrayAssignment_0_1(), "rule__ArrayType__ArrayAssignment_0_1");
			builder.put(grammarAccess.getTypeReferenceAccess().getReferenceAssignment(), "rule__TypeReference__ReferenceAssignment");
			builder.put(grammarAccess.getDocCommentAccess().getLinesAssignment_2(), "rule__DocComment__LinesAssignment_2");
			builder.put(grammarAccess.getDocCommentAccess().getAnnotationsAssignment_3(), "rule__DocComment__AnnotationsAssignment_3");
			builder.put(grammarAccess.getAnnotationLineAccess().getAnnotationNameAssignment_1(), "rule__AnnotationLine__AnnotationNameAssignment_1");
			builder.put(grammarAccess.getIndexSignatureAccess().getIndexTypeAssignment_3(), "rule__IndexSignature__IndexTypeAssignment_3");
			builder.put(grammarAccess.getIndexSignatureAccess().getValueTypeAssignment_5(), "rule__IndexSignature__ValueTypeAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TypescriptGrammarAccess grammarAccess;

	@Override
	protected InternalTypescriptParser createParser() {
		InternalTypescriptParser result = new InternalTypescriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TypescriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TypescriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
