/*
 * generated by Xtext 2.35.0
 */
package edu.tadp.firewall.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.tadp.firewall.ide.contentassist.antlr.internal.InternalFirewalllParser;
import edu.tadp.firewall.services.FirewalllGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FirewalllParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FirewalllGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FirewalllGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAccionAccess().getAlternatives(), "rule__Accion__Alternatives");
			builder.put(grammarAccess.getCondicionAccess().getAlternatives(), "rule__Condicion__Alternatives");
			builder.put(grammarAccess.getReglaEtiquetadaAccess().getGroup(), "rule__ReglaEtiquetada__Group__0");
			builder.put(grammarAccess.getReglaEtiquetadaAccess().getGroup_0(), "rule__ReglaEtiquetada__Group_0__0");
			builder.put(grammarAccess.getReglaAccess().getGroup(), "rule__Regla__Group__0");
			builder.put(grammarAccess.getForwardearAccionAccess().getGroup(), "rule__ForwardearAccion__Group__0");
			builder.put(grammarAccess.getAceptarAccionAccess().getGroup(), "rule__AceptarAccion__Group__0");
			builder.put(grammarAccess.getBloquearAccionAccess().getGroup(), "rule__BloquearAccion__Group__0");
			builder.put(grammarAccess.getCondicionPuertoAccess().getGroup(), "rule__CondicionPuerto__Group__0");
			builder.put(grammarAccess.getCondicionIPAccess().getGroup(), "rule__CondicionIP__Group__0");
			builder.put(grammarAccess.getIPAccess().getGroup(), "rule__IP__Group__0");
			builder.put(grammarAccess.getFirewallAccess().getReglasAssignment(), "rule__Firewall__ReglasAssignment");
			builder.put(grammarAccess.getReglaEtiquetadaAccess().getLanAssignment_0_0(), "rule__ReglaEtiquetada__LanAssignment_0_0");
			builder.put(grammarAccess.getReglaEtiquetadaAccess().getReglaAssignment_1(), "rule__ReglaEtiquetada__ReglaAssignment_1");
			builder.put(grammarAccess.getReglaAccess().getCondicionAssignment_1(), "rule__Regla__CondicionAssignment_1");
			builder.put(grammarAccess.getReglaAccess().getAccionAssignment_4(), "rule__Regla__AccionAssignment_4");
			builder.put(grammarAccess.getForwardearAccionAccess().getIpAssignment_2(), "rule__ForwardearAccion__IpAssignment_2");
			builder.put(grammarAccess.getForwardearAccionAccess().getPuertoAssignment_4(), "rule__ForwardearAccion__PuertoAssignment_4");
			builder.put(grammarAccess.getCondicionPuertoAccess().getPuertoAssignment_1(), "rule__CondicionPuerto__PuertoAssignment_1");
			builder.put(grammarAccess.getCondicionIPAccess().getIpAssignment_1(), "rule__CondicionIP__IpAssignment_1");
			builder.put(grammarAccess.getIPAccess().getPrimeroAssignment_0(), "rule__IP__PrimeroAssignment_0");
			builder.put(grammarAccess.getIPAccess().getSegundoAssignment_2(), "rule__IP__SegundoAssignment_2");
			builder.put(grammarAccess.getIPAccess().getTerceroAssignment_4(), "rule__IP__TerceroAssignment_4");
			builder.put(grammarAccess.getIPAccess().getCuartoAssignment_6(), "rule__IP__CuartoAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FirewalllGrammarAccess grammarAccess;

	@Override
	protected InternalFirewalllParser createParser() {
		InternalFirewalllParser result = new InternalFirewalllParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FirewalllGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FirewalllGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
