/*
 * generated by Xtext 2.35.0
 */
package edu.tadp.firewall.serializer;

import com.google.inject.Inject;
import edu.tadp.firewall.firewalll.AceptarAccion;
import edu.tadp.firewall.firewalll.BloquearAccion;
import edu.tadp.firewall.firewalll.CondicionIP;
import edu.tadp.firewall.firewalll.CondicionPuerto;
import edu.tadp.firewall.firewalll.Firewall;
import edu.tadp.firewall.firewalll.FirewalllPackage;
import edu.tadp.firewall.firewalll.ForwardearAccion;
import edu.tadp.firewall.firewalll.IP;
import edu.tadp.firewall.firewalll.Regla;
import edu.tadp.firewall.firewalll.ReglaEtiquetada;
import edu.tadp.firewall.services.FirewalllGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FirewalllSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FirewalllGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FirewalllPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FirewalllPackage.ACEPTAR_ACCION:
				sequence_AceptarAccion(context, (AceptarAccion) semanticObject); 
				return; 
			case FirewalllPackage.BLOQUEAR_ACCION:
				sequence_BloquearAccion(context, (BloquearAccion) semanticObject); 
				return; 
			case FirewalllPackage.CONDICION_IP:
				sequence_CondicionIP(context, (CondicionIP) semanticObject); 
				return; 
			case FirewalllPackage.CONDICION_PUERTO:
				sequence_CondicionPuerto(context, (CondicionPuerto) semanticObject); 
				return; 
			case FirewalllPackage.FIREWALL:
				sequence_Firewall(context, (Firewall) semanticObject); 
				return; 
			case FirewalllPackage.FORWARDEAR_ACCION:
				sequence_ForwardearAccion(context, (ForwardearAccion) semanticObject); 
				return; 
			case FirewalllPackage.IP:
				sequence_IP(context, (IP) semanticObject); 
				return; 
			case FirewalllPackage.REGLA:
				sequence_Regla(context, (Regla) semanticObject); 
				return; 
			case FirewalllPackage.REGLA_ETIQUETADA:
				sequence_ReglaEtiquetada(context, (ReglaEtiquetada) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Accion returns AceptarAccion
	 *     AceptarAccion returns AceptarAccion
	 *
	 * Constraint:
	 *     {AceptarAccion}
	 * </pre>
	 */
	protected void sequence_AceptarAccion(ISerializationContext context, AceptarAccion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Accion returns BloquearAccion
	 *     BloquearAccion returns BloquearAccion
	 *
	 * Constraint:
	 *     {BloquearAccion}
	 * </pre>
	 */
	protected void sequence_BloquearAccion(ISerializationContext context, BloquearAccion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condicion returns CondicionIP
	 *     CondicionIP returns CondicionIP
	 *
	 * Constraint:
	 *     ip=IP
	 * </pre>
	 */
	protected void sequence_CondicionIP(ISerializationContext context, CondicionIP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.CONDICION_IP__IP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.CONDICION_IP__IP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCondicionIPAccess().getIpIPParserRuleCall_1_0(), semanticObject.getIp());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condicion returns CondicionPuerto
	 *     CondicionPuerto returns CondicionPuerto
	 *
	 * Constraint:
	 *     puerto=INT
	 * </pre>
	 */
	protected void sequence_CondicionPuerto(ISerializationContext context, CondicionPuerto semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.CONDICION_PUERTO__PUERTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.CONDICION_PUERTO__PUERTO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCondicionPuertoAccess().getPuertoINTTerminalRuleCall_1_0(), semanticObject.getPuerto());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Firewall returns Firewall
	 *
	 * Constraint:
	 *     reglas+=ReglaEtiquetada+
	 * </pre>
	 */
	protected void sequence_Firewall(ISerializationContext context, Firewall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Accion returns ForwardearAccion
	 *     ForwardearAccion returns ForwardearAccion
	 *
	 * Constraint:
	 *     (ip=IP puerto=INT)
	 * </pre>
	 */
	protected void sequence_ForwardearAccion(ISerializationContext context, ForwardearAccion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.FORWARDEAR_ACCION__IP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.FORWARDEAR_ACCION__IP));
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.FORWARDEAR_ACCION__PUERTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.FORWARDEAR_ACCION__PUERTO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardearAccionAccess().getIpIPParserRuleCall_2_0(), semanticObject.getIp());
		feeder.accept(grammarAccess.getForwardearAccionAccess().getPuertoINTTerminalRuleCall_4_0(), semanticObject.getPuerto());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IP returns IP
	 *
	 * Constraint:
	 *     (primero=INT segundo=INT tercero=INT cuarto=INT)
	 * </pre>
	 */
	protected void sequence_IP(ISerializationContext context, IP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.IP__PRIMERO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.IP__PRIMERO));
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.IP__SEGUNDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.IP__SEGUNDO));
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.IP__TERCERO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.IP__TERCERO));
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.IP__CUARTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.IP__CUARTO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIPAccess().getPrimeroINTTerminalRuleCall_0_0(), semanticObject.getPrimero());
		feeder.accept(grammarAccess.getIPAccess().getSegundoINTTerminalRuleCall_2_0(), semanticObject.getSegundo());
		feeder.accept(grammarAccess.getIPAccess().getTerceroINTTerminalRuleCall_4_0(), semanticObject.getTercero());
		feeder.accept(grammarAccess.getIPAccess().getCuartoINTTerminalRuleCall_6_0(), semanticObject.getCuarto());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReglaEtiquetada returns ReglaEtiquetada
	 *
	 * Constraint:
	 *     (lan=ID? regla=Regla)
	 * </pre>
	 */
	protected void sequence_ReglaEtiquetada(ISerializationContext context, ReglaEtiquetada semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Regla returns Regla
	 *
	 * Constraint:
	 *     (condicion=Condicion accion=Accion)
	 * </pre>
	 */
	protected void sequence_Regla(ISerializationContext context, Regla semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.REGLA__CONDICION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.REGLA__CONDICION));
			if (transientValues.isValueTransient(semanticObject, FirewalllPackage.Literals.REGLA__ACCION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FirewalllPackage.Literals.REGLA__ACCION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReglaAccess().getCondicionCondicionParserRuleCall_1_0(), semanticObject.getCondicion());
		feeder.accept(grammarAccess.getReglaAccess().getAccionAccionParserRuleCall_4_0(), semanticObject.getAccion());
		feeder.finish();
	}
	
	
}
