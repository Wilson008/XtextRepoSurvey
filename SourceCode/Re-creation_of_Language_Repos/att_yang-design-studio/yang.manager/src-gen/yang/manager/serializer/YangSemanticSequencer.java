/*
 * generated by Xtext 2.35.0
 */
package yang.manager.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import yang.manager.services.YangGrammarAccess;
import yang.manager.yang.AnyxmlStatement;
import yang.manager.yang.ArgumentStatement;
import yang.manager.yang.AugmentStatement;
import yang.manager.yang.AugmentUsesStatement;
import yang.manager.yang.BaseStatement;
import yang.manager.yang.BelongsToStatement;
import yang.manager.yang.BitStatement;
import yang.manager.yang.BuiltInType;
import yang.manager.yang.CaseStatement;
import yang.manager.yang.ChoiceStatement;
import yang.manager.yang.ConfigStatement;
import yang.manager.yang.ContactStatement;
import yang.manager.yang.ContainerStatement;
import yang.manager.yang.DefaultStatement;
import yang.manager.yang.DescriptionStatement;
import yang.manager.yang.DeviateStatement;
import yang.manager.yang.DeviationStatement;
import yang.manager.yang.EnumStatement;
import yang.manager.yang.ErrorAppTagStatement;
import yang.manager.yang.ErrorMessageStatement;
import yang.manager.yang.ExtensionStatement;
import yang.manager.yang.FeatureStatement;
import yang.manager.yang.FractionDigitsStatement;
import yang.manager.yang.GroupingStatement;
import yang.manager.yang.IdentityStatement;
import yang.manager.yang.IfFeatureStatement;
import yang.manager.yang.ImportStatement;
import yang.manager.yang.IncludeStatement;
import yang.manager.yang.InputStatement;
import yang.manager.yang.KeyStatement;
import yang.manager.yang.LeafListStatement;
import yang.manager.yang.LeafStatement;
import yang.manager.yang.LengthStatement;
import yang.manager.yang.ListStatement;
import yang.manager.yang.MandatoryStatement;
import yang.manager.yang.MaxElementsStatement;
import yang.manager.yang.MinElementsStatement;
import yang.manager.yang.MustStatement;
import yang.manager.yang.NamespaceStatement;
import yang.manager.yang.NotificationStatement;
import yang.manager.yang.OrderedbyStatement;
import yang.manager.yang.OrganizationStatement;
import yang.manager.yang.OutputStatement;
import yang.manager.yang.PathStatement;
import yang.manager.yang.PatternStatement;
import yang.manager.yang.PositionStatement;
import yang.manager.yang.PrefixStatement;
import yang.manager.yang.PresenceStatement;
import yang.manager.yang.RangeStatement;
import yang.manager.yang.ReferenceStatement;
import yang.manager.yang.RefineStatement;
import yang.manager.yang.RequireInstanceStatement;
import yang.manager.yang.RevisionDateStatement;
import yang.manager.yang.RevisionStatement;
import yang.manager.yang.RpcStatement;
import yang.manager.yang.StatusStatement;
import yang.manager.yang.SubModule;
import yang.manager.yang.TypeStatement;
import yang.manager.yang.TypedefStatement;
import yang.manager.yang.UniqueStatement;
import yang.manager.yang.UnitsStatement;
import yang.manager.yang.UnknownStatement;
import yang.manager.yang.UnknownSubstatements;
import yang.manager.yang.UsesStatement;
import yang.manager.yang.ValueStatement;
import yang.manager.yang.WhenStatement;
import yang.manager.yang.YangPackage;
import yang.manager.yang.YangVersionStatement;
import yang.manager.yang.YinElementStatement;

@SuppressWarnings("all")
public class YangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private YangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == YangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case YangPackage.ANYXML_STATEMENT:
				sequence_AnyxmlStatement(context, (AnyxmlStatement) semanticObject); 
				return; 
			case YangPackage.ARGUMENT_STATEMENT:
				sequence_ArgumentStatement(context, (ArgumentStatement) semanticObject); 
				return; 
			case YangPackage.AUGMENT_STATEMENT:
				sequence_AugmentStatement(context, (AugmentStatement) semanticObject); 
				return; 
			case YangPackage.AUGMENT_USES_STATEMENT:
				sequence_AugmentUsesStatement(context, (AugmentUsesStatement) semanticObject); 
				return; 
			case YangPackage.BASE_STATEMENT:
				sequence_BaseStatement(context, (BaseStatement) semanticObject); 
				return; 
			case YangPackage.BELONGS_TO_STATEMENT:
				sequence_BelongsToStatement(context, (BelongsToStatement) semanticObject); 
				return; 
			case YangPackage.BIT_STATEMENT:
				sequence_BitStatement(context, (BitStatement) semanticObject); 
				return; 
			case YangPackage.BUILT_IN_TYPE:
				sequence_BuiltInType(context, (BuiltInType) semanticObject); 
				return; 
			case YangPackage.CASE_STATEMENT:
				sequence_CaseStatement(context, (CaseStatement) semanticObject); 
				return; 
			case YangPackage.CHOICE_STATEMENT:
				sequence_ChoiceStatement(context, (ChoiceStatement) semanticObject); 
				return; 
			case YangPackage.CONFIG_STATEMENT:
				sequence_ConfigStatement(context, (ConfigStatement) semanticObject); 
				return; 
			case YangPackage.CONTACT_STATEMENT:
				sequence_ContactStatement(context, (ContactStatement) semanticObject); 
				return; 
			case YangPackage.CONTAINER_STATEMENT:
				sequence_ContainerStatement(context, (ContainerStatement) semanticObject); 
				return; 
			case YangPackage.DEFAULT_STATEMENT:
				sequence_DefaultStatement(context, (DefaultStatement) semanticObject); 
				return; 
			case YangPackage.DESCRIPTION_STATEMENT:
				sequence_DescriptionStatement(context, (DescriptionStatement) semanticObject); 
				return; 
			case YangPackage.DEVIATE_STATEMENT:
				sequence_DeviateStatement(context, (DeviateStatement) semanticObject); 
				return; 
			case YangPackage.DEVIATION_STATEMENT:
				sequence_DeviationStatement(context, (DeviationStatement) semanticObject); 
				return; 
			case YangPackage.ENUM_STATEMENT:
				sequence_EnumStatement(context, (EnumStatement) semanticObject); 
				return; 
			case YangPackage.ERROR_APP_TAG_STATEMENT:
				sequence_ErrorAppTagStatement(context, (ErrorAppTagStatement) semanticObject); 
				return; 
			case YangPackage.ERROR_MESSAGE_STATEMENT:
				sequence_ErrorMessageStatement(context, (ErrorMessageStatement) semanticObject); 
				return; 
			case YangPackage.EXTENSION_STATEMENT:
				sequence_ExtensionStatement(context, (ExtensionStatement) semanticObject); 
				return; 
			case YangPackage.FEATURE_STATEMENT:
				sequence_FeatureStatement(context, (FeatureStatement) semanticObject); 
				return; 
			case YangPackage.FRACTION_DIGITS_STATEMENT:
				sequence_FractionDigitsStatement(context, (FractionDigitsStatement) semanticObject); 
				return; 
			case YangPackage.GROUPING_STATEMENT:
				sequence_GroupingStatement(context, (GroupingStatement) semanticObject); 
				return; 
			case YangPackage.IDENTITY_STATEMENT:
				sequence_IdentityStatement(context, (IdentityStatement) semanticObject); 
				return; 
			case YangPackage.IF_FEATURE_STATEMENT:
				sequence_IfFeatureStatement(context, (IfFeatureStatement) semanticObject); 
				return; 
			case YangPackage.IMPORT_STATEMENT:
				sequence_ImportStatement(context, (ImportStatement) semanticObject); 
				return; 
			case YangPackage.INCLUDE_STATEMENT:
				sequence_IncludeStatement(context, (IncludeStatement) semanticObject); 
				return; 
			case YangPackage.INPUT_STATEMENT:
				sequence_InputStatement(context, (InputStatement) semanticObject); 
				return; 
			case YangPackage.KEY_STATEMENT:
				sequence_KeyStatement(context, (KeyStatement) semanticObject); 
				return; 
			case YangPackage.LEAF_LIST_STATEMENT:
				sequence_LeafListStatement(context, (LeafListStatement) semanticObject); 
				return; 
			case YangPackage.LEAF_STATEMENT:
				sequence_LeafStatement(context, (LeafStatement) semanticObject); 
				return; 
			case YangPackage.LENGTH_STATEMENT:
				sequence_LengthStatement(context, (LengthStatement) semanticObject); 
				return; 
			case YangPackage.LIST_STATEMENT:
				sequence_ListStatement(context, (ListStatement) semanticObject); 
				return; 
			case YangPackage.MANDATORY_STATEMENT:
				sequence_MandatoryStatement(context, (MandatoryStatement) semanticObject); 
				return; 
			case YangPackage.MAX_ELEMENTS_STATEMENT:
				sequence_MaxElementsStatement(context, (MaxElementsStatement) semanticObject); 
				return; 
			case YangPackage.MIN_ELEMENTS_STATEMENT:
				sequence_MinElementsStatement(context, (MinElementsStatement) semanticObject); 
				return; 
			case YangPackage.MODULE:
				sequence_Module(context, (yang.manager.yang.Module) semanticObject); 
				return; 
			case YangPackage.MUST_STATEMENT:
				sequence_MustStatement(context, (MustStatement) semanticObject); 
				return; 
			case YangPackage.NAMESPACE_STATEMENT:
				sequence_NamespaceStatement(context, (NamespaceStatement) semanticObject); 
				return; 
			case YangPackage.NOTIFICATION_STATEMENT:
				sequence_NotificationStatement(context, (NotificationStatement) semanticObject); 
				return; 
			case YangPackage.ORDEREDBY_STATEMENT:
				sequence_OrderedbyStatement(context, (OrderedbyStatement) semanticObject); 
				return; 
			case YangPackage.ORGANIZATION_STATEMENT:
				sequence_OrganizationStatement(context, (OrganizationStatement) semanticObject); 
				return; 
			case YangPackage.OUTPUT_STATEMENT:
				sequence_OutputStatement(context, (OutputStatement) semanticObject); 
				return; 
			case YangPackage.PATH_STATEMENT:
				sequence_PathStatement(context, (PathStatement) semanticObject); 
				return; 
			case YangPackage.PATTERN_STATEMENT:
				sequence_PatternStatement(context, (PatternStatement) semanticObject); 
				return; 
			case YangPackage.POSITION_STATEMENT:
				sequence_PositionStatement(context, (PositionStatement) semanticObject); 
				return; 
			case YangPackage.PREFIX_STATEMENT:
				sequence_PrefixStatement(context, (PrefixStatement) semanticObject); 
				return; 
			case YangPackage.PRESENCE_STATEMENT:
				sequence_PresenceStatement(context, (PresenceStatement) semanticObject); 
				return; 
			case YangPackage.RANGE_STATEMENT:
				sequence_RangeStatement(context, (RangeStatement) semanticObject); 
				return; 
			case YangPackage.REFERENCE_STATEMENT:
				sequence_ReferenceStatement(context, (ReferenceStatement) semanticObject); 
				return; 
			case YangPackage.REFINE_STATEMENT:
				sequence_RefineStatement(context, (RefineStatement) semanticObject); 
				return; 
			case YangPackage.REQUIRE_INSTANCE_STATEMENT:
				sequence_RequireInstanceStatement(context, (RequireInstanceStatement) semanticObject); 
				return; 
			case YangPackage.REVISION_DATE_STATEMENT:
				sequence_RevisionDateStatement(context, (RevisionDateStatement) semanticObject); 
				return; 
			case YangPackage.REVISION_STATEMENT:
				sequence_RevisionStatement(context, (RevisionStatement) semanticObject); 
				return; 
			case YangPackage.RPC_STATEMENT:
				sequence_RpcStatement(context, (RpcStatement) semanticObject); 
				return; 
			case YangPackage.STATUS_STATEMENT:
				sequence_StatusStatement(context, (StatusStatement) semanticObject); 
				return; 
			case YangPackage.SUB_MODULE:
				sequence_SubModule(context, (SubModule) semanticObject); 
				return; 
			case YangPackage.TYPE_STATEMENT:
				sequence_TypeStatement(context, (TypeStatement) semanticObject); 
				return; 
			case YangPackage.TYPEDEF_STATEMENT:
				sequence_TypedefStatement(context, (TypedefStatement) semanticObject); 
				return; 
			case YangPackage.UNIQUE_STATEMENT:
				sequence_UniqueStatement(context, (UniqueStatement) semanticObject); 
				return; 
			case YangPackage.UNITS_STATEMENT:
				sequence_UnitsStatement(context, (UnitsStatement) semanticObject); 
				return; 
			case YangPackage.UNKNOWN_STATEMENT:
				sequence_UnknownStatement(context, (UnknownStatement) semanticObject); 
				return; 
			case YangPackage.UNKNOWN_SUBSTATEMENTS:
				sequence_UnknownSubstatements(context, (UnknownSubstatements) semanticObject); 
				return; 
			case YangPackage.USES_STATEMENT:
				sequence_UsesStatement(context, (UsesStatement) semanticObject); 
				return; 
			case YangPackage.VALUE_STATEMENT:
				sequence_ValueStatement(context, (ValueStatement) semanticObject); 
				return; 
			case YangPackage.WHEN_STATEMENT:
				sequence_WhenStatement(context, (WhenStatement) semanticObject); 
				return; 
			case YangPackage.YANG_VERSION_STATEMENT:
				sequence_YangVersionStatement(context, (YangVersionStatement) semanticObject); 
				return; 
			case YangPackage.YIN_ELEMENT_STATEMENT:
				sequence_YinElementStatement(context, (YinElementStatement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns AnyxmlStatement
	 *     SubmoduleStatement returns AnyxmlStatement
	 *     DatadefStatement returns AnyxmlStatement
	 *     InputSubstatement returns AnyxmlStatement
	 *     OutputSubstatement returns AnyxmlStatement
	 *     NotificationSubstatement returns AnyxmlStatement
	 *     ContainerSubstatement returns AnyxmlStatement
	 *     ListSubstatement returns AnyxmlStatement
	 *     GroupingSubstatement returns AnyxmlStatement
	 *     ChoiceSubstatement returns AnyxmlStatement
	 *     CaseSubstatement returns AnyxmlStatement
	 *     AnyxmlStatement returns AnyxmlStatement
	 *     AugmentSubstatement returns AnyxmlStatement
	 *
	 * Constraint:
	 *     ((arg=STRINGARG | arg=KEY_IDENTIFIER) anyxmlsubstatements+=AnyxmlSubstatement*)
	 * </pre>
	 */
	protected void sequence_AnyxmlStatement(ISerializationContext context, AnyxmlStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExtensionSubstatement returns ArgumentStatement
	 *     ArgumentStatement returns ArgumentStatement
	 *
	 * Constraint:
	 *     ((arg=STRINGARG | arg=KEY_IDENTIFIER) argumentsubstatements+=ArgumentSubstatement*)
	 * </pre>
	 */
	protected void sequence_ArgumentStatement(ISerializationContext context, ArgumentStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns AugmentStatement
	 *     SubmoduleStatement returns AugmentStatement
	 *     AugmentStatement returns AugmentStatement
	 *
	 * Constraint:
	 *     ((arg=STRINGARG | arg=STRINGARG4) augmentsubstatements+=AugmentSubstatement*)
	 * </pre>
	 */
	protected void sequence_AugmentStatement(ISerializationContext context, AugmentStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UsesSubstatement returns AugmentUsesStatement
	 *     AugmentUsesStatement returns AugmentUsesStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG augmentsubstatements+=AugmentSubstatement*)
	 * </pre>
	 */
	protected void sequence_AugmentUsesStatement(ISerializationContext context, AugmentUsesStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BaseStatement returns BaseStatement
	 *     IdentitySubstatement returns BaseStatement
	 *     TypeSubStatement returns BaseStatement
	 *
	 * Constraint:
	 *     ((base=STRINGARG | base=STRINGARG2) baseunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_BaseStatement(ISerializationContext context, BaseStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SubmoduleStatement returns BelongsToStatement
	 *     BelongsToStatement returns BelongsToStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG belongstosubstatement+=BelongsToSubstatement*)
	 * </pre>
	 */
	protected void sequence_BelongsToStatement(ISerializationContext context, BelongsToStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypeSubStatement returns BitStatement
	 *     BitStatement returns BitStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG bitsubstatements+=BitSubstatement*)
	 * </pre>
	 */
	protected void sequence_BitStatement(ISerializationContext context, BitStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     BuiltInType returns BuiltInType
	 *
	 * Constraint:
	 *     (
	 *         btype='binary' | 
	 *         btype='bits' | 
	 *         btype='boolean' | 
	 *         btype='decimal64' | 
	 *         btype='empty' | 
	 *         btype='enumeration' | 
	 *         btype='identityref' | 
	 *         btype='instance-identifier' | 
	 *         btype='int8' | 
	 *         btype='int16' | 
	 *         btype='int32' | 
	 *         btype='int64' | 
	 *         btype='leafref' | 
	 *         btype='string' | 
	 *         btype='uint8' | 
	 *         btype='uint16' | 
	 *         btype='uint32' | 
	 *         btype='uint64' | 
	 *         btype='union'
	 *     )
	 * </pre>
	 */
	protected void sequence_BuiltInType(ISerializationContext context, BuiltInType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ChoiceSubstatement returns CaseStatement
	 *     CaseStatement returns CaseStatement
	 *     AugmentSubstatement returns CaseStatement
	 *
	 * Constraint:
	 *     ((name=STRINGARG | name=KEY_IDENTIFIER) casesubstatements+=CaseSubstatement*)
	 * </pre>
	 */
	protected void sequence_CaseStatement(ISerializationContext context, CaseStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns ChoiceStatement
	 *     SubmoduleStatement returns ChoiceStatement
	 *     DatadefStatement returns ChoiceStatement
	 *     InputSubstatement returns ChoiceStatement
	 *     OutputSubstatement returns ChoiceStatement
	 *     NotificationSubstatement returns ChoiceStatement
	 *     ContainerSubstatement returns ChoiceStatement
	 *     ListSubstatement returns ChoiceStatement
	 *     GroupingSubstatement returns ChoiceStatement
	 *     ChoiceStatement returns ChoiceStatement
	 *     CaseSubstatement returns ChoiceStatement
	 *     AugmentSubstatement returns ChoiceStatement
	 *
	 * Constraint:
	 *     ((name=STRINGARG | name=KEY_IDENTIFIER) choicesubstatements+=ChoiceSubstatement*)
	 * </pre>
	 */
	protected void sequence_ChoiceStatement(ISerializationContext context, ChoiceStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConfigStatement returns ConfigStatement
	 *     ContainerSubstatement returns ConfigStatement
	 *     ListSubstatement returns ConfigStatement
	 *     LeafSubstatement returns ConfigStatement
	 *     LeafListSubstatement returns ConfigStatement
	 *     ChoiceSubstatement returns ConfigStatement
	 *     AnyxmlSubstatement returns ConfigStatement
	 *     RefineSubstatement returns ConfigStatement
	 *     DeviateSubstatement returns ConfigStatement
	 *
	 * Constraint:
	 *     (boolarg=STRINGARG configunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_ConfigStatement(ISerializationContext context, ConfigStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns ContactStatement
	 *     SubmoduleStatement returns ContactStatement
	 *     ContactStatement returns ContactStatement
	 *
	 * Constraint:
	 *     (contact=STRINGARG contactunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_ContactStatement(ISerializationContext context, ContactStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns ContainerStatement
	 *     SubmoduleStatement returns ContainerStatement
	 *     DatadefStatement returns ContainerStatement
	 *     InputSubstatement returns ContainerStatement
	 *     OutputSubstatement returns ContainerStatement
	 *     NotificationSubstatement returns ContainerStatement
	 *     ContainerStatement returns ContainerStatement
	 *     ContainerSubstatement returns ContainerStatement
	 *     ListSubstatement returns ContainerStatement
	 *     GroupingSubstatement returns ContainerStatement
	 *     ChoiceSubstatement returns ContainerStatement
	 *     CaseSubstatement returns ContainerStatement
	 *     AugmentSubstatement returns ContainerStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG containersubstatements+=ContainerSubstatement*)
	 * </pre>
	 */
	protected void sequence_ContainerStatement(ISerializationContext context, ContainerStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DefaultStatement returns DefaultStatement
	 *     LeafSubstatement returns DefaultStatement
	 *     LeafListSubstatement returns DefaultStatement
	 *     ChoiceSubstatement returns DefaultStatement
	 *     RefineSubstatement returns DefaultStatement
	 *     DeviateSubstatement returns DefaultStatement
	 *     TypedefSubstatement returns DefaultStatement
	 *     TypeSubStatement returns DefaultStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG defaultunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_DefaultStatement(ISerializationContext context, DefaultStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns DescriptionStatement
	 *     SubmoduleStatement returns DescriptionStatement
	 *     DescriptionStatement returns DescriptionStatement
	 *     MultipleSubstatement returns DescriptionStatement
	 *     RpcSubstatement returns DescriptionStatement
	 *     NotificationSubstatement returns DescriptionStatement
	 *     ContainerSubstatement returns DescriptionStatement
	 *     ListSubstatement returns DescriptionStatement
	 *     GroupingSubstatement returns DescriptionStatement
	 *     LeafSubstatement returns DescriptionStatement
	 *     LeafListSubstatement returns DescriptionStatement
	 *     ChoiceSubstatement returns DescriptionStatement
	 *     CaseSubstatement returns DescriptionStatement
	 *     AnyxmlSubstatement returns DescriptionStatement
	 *     UsesSubstatement returns DescriptionStatement
	 *     AugmentSubstatement returns DescriptionStatement
	 *     RefineSubstatement returns DescriptionStatement
	 *     DeviationSubstatement returns DescriptionStatement
	 *     ExtensionSubstatement returns DescriptionStatement
	 *     IdentitySubstatement returns DescriptionStatement
	 *     FeatureSubstatement returns DescriptionStatement
	 *     TypedefSubstatement returns DescriptionStatement
	 *     BitSubstatement returns DescriptionStatement
	 *     EnumSubstatement returns DescriptionStatement
	 *     WhenSubstatements returns DescriptionStatement
	 *     RevisionSubstatements returns DescriptionStatement
	 *
	 * Constraint:
	 *     (description=STRINGARG descriptionunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_DescriptionStatement(ISerializationContext context, DescriptionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviationSubstatement returns DeviateStatement
	 *     DeviateStatement returns DeviateStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG deviatesubstatements+=DeviateSubstatement*)
	 * </pre>
	 */
	protected void sequence_DeviateStatement(ISerializationContext context, DeviateStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns DeviationStatement
	 *     SubmoduleStatement returns DeviationStatement
	 *     DeviationStatement returns DeviationStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG deviationsubstatements+=DeviationSubstatement*)
	 * </pre>
	 */
	protected void sequence_DeviationStatement(ISerializationContext context, DeviationStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TypeSubStatement returns EnumStatement
	 *     EnumStatement returns EnumStatement
	 *
	 * Constraint:
	 *     ((name=STRINGARG | name=KEY_IDENTIFIER) enumsubstatements+=EnumSubstatement*)
	 * </pre>
	 */
	protected void sequence_EnumStatement(ISerializationContext context, EnumStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ErrorAppTagStatement returns ErrorAppTagStatement
	 *     MultipleSubstatement returns ErrorAppTagStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG erroraunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_ErrorAppTagStatement(ISerializationContext context, ErrorAppTagStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ErrorMessageStatement returns ErrorMessageStatement
	 *     MultipleSubstatement returns ErrorMessageStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG errormunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_ErrorMessageStatement(ISerializationContext context, ErrorMessageStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns ExtensionStatement
	 *     SubmoduleStatement returns ExtensionStatement
	 *     ExtensionStatement returns ExtensionStatement
	 *
	 * Constraint:
	 *     ((arg=STRINGARG | arg=KEY_IDENTIFIER) extensionsubstatements+=ExtensionSubstatement*)
	 * </pre>
	 */
	protected void sequence_ExtensionStatement(ISerializationContext context, ExtensionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns FeatureStatement
	 *     SubmoduleStatement returns FeatureStatement
	 *     FeatureStatement returns FeatureStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG featuresubstatements+=FeatureSubstatement*)
	 * </pre>
	 */
	protected void sequence_FeatureStatement(ISerializationContext context, FeatureStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FractionDigitsStatement returns FractionDigitsStatement
	 *     TypeSubStatement returns FractionDigitsStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG fractiondigitsunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_FractionDigitsStatement(ISerializationContext context, FractionDigitsStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns GroupingStatement
	 *     SubmoduleStatement returns GroupingStatement
	 *     RpcSubstatement returns GroupingStatement
	 *     InputSubstatement returns GroupingStatement
	 *     OutputSubstatement returns GroupingStatement
	 *     NotificationSubstatement returns GroupingStatement
	 *     ContainerSubstatement returns GroupingStatement
	 *     ListSubstatement returns GroupingStatement
	 *     GroupingStatement returns GroupingStatement
	 *     GroupingSubstatement returns GroupingStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG groupingsubstatements+=GroupingSubstatement*)
	 * </pre>
	 */
	protected void sequence_GroupingStatement(ISerializationContext context, GroupingStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns IdentityStatement
	 *     SubmoduleStatement returns IdentityStatement
	 *     IdentityStatement returns IdentityStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG identitysubstatements+=IdentitySubstatement*)
	 * </pre>
	 */
	protected void sequence_IdentityStatement(ISerializationContext context, IdentityStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IfFeatureStatement returns IfFeatureStatement
	 *     RpcSubstatement returns IfFeatureStatement
	 *     NotificationSubstatement returns IfFeatureStatement
	 *     ContainerSubstatement returns IfFeatureStatement
	 *     ListSubstatement returns IfFeatureStatement
	 *     LeafSubstatement returns IfFeatureStatement
	 *     LeafListSubstatement returns IfFeatureStatement
	 *     ChoiceSubstatement returns IfFeatureStatement
	 *     CaseSubstatement returns IfFeatureStatement
	 *     AnyxmlSubstatement returns IfFeatureStatement
	 *     UsesSubstatement returns IfFeatureStatement
	 *     AugmentSubstatement returns IfFeatureStatement
	 *     FeatureSubstatement returns IfFeatureStatement
	 *
	 * Constraint:
	 *     (pref=STRINGARG? ident=[FeatureStatement|ID] iffeatureunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_IfFeatureStatement(ISerializationContext context, IfFeatureStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns ImportStatement
	 *     SubmoduleStatement returns ImportStatement
	 *     ImportStatement returns ImportStatement
	 *
	 * Constraint:
	 *     (importURI=STRINGARG importsubstatements+=ImportSubstatements*)
	 * </pre>
	 */
	protected void sequence_ImportStatement(ISerializationContext context, ImportStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns IncludeStatement
	 *     SubmoduleStatement returns IncludeStatement
	 *     IncludeStatement returns IncludeStatement
	 *
	 * Constraint:
	 *     (importURI=STRINGARG includesubstatements+=IncludeSubstatements*)
	 * </pre>
	 */
	protected void sequence_IncludeStatement(ISerializationContext context, IncludeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RpcSubstatement returns InputStatement
	 *     InputStatement returns InputStatement
	 *
	 * Constraint:
	 *     inputsubstatements+=InputSubstatement+
	 * </pre>
	 */
	protected void sequence_InputStatement(ISerializationContext context, InputStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     KeyStatement returns KeyStatement
	 *     ListSubstatement returns KeyStatement
	 *
	 * Constraint:
	 *     ((arg=STRINGARG | arg=STRINGARG2) keyunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_KeyStatement(ISerializationContext context, KeyStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns LeafListStatement
	 *     SubmoduleStatement returns LeafListStatement
	 *     DatadefStatement returns LeafListStatement
	 *     InputSubstatement returns LeafListStatement
	 *     OutputSubstatement returns LeafListStatement
	 *     NotificationSubstatement returns LeafListStatement
	 *     ContainerSubstatement returns LeafListStatement
	 *     ListSubstatement returns LeafListStatement
	 *     GroupingSubstatement returns LeafListStatement
	 *     LeafListStatement returns LeafListStatement
	 *     ChoiceSubstatement returns LeafListStatement
	 *     CaseSubstatement returns LeafListStatement
	 *     AugmentSubstatement returns LeafListStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG leaflistsubstatements+=LeafListSubstatement*)
	 * </pre>
	 */
	protected void sequence_LeafListStatement(ISerializationContext context, LeafListStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns LeafStatement
	 *     SubmoduleStatement returns LeafStatement
	 *     DatadefStatement returns LeafStatement
	 *     InputSubstatement returns LeafStatement
	 *     OutputSubstatement returns LeafStatement
	 *     NotificationSubstatement returns LeafStatement
	 *     ContainerSubstatement returns LeafStatement
	 *     ListSubstatement returns LeafStatement
	 *     GroupingSubstatement returns LeafStatement
	 *     LeafStatement returns LeafStatement
	 *     ChoiceSubstatement returns LeafStatement
	 *     CaseSubstatement returns LeafStatement
	 *     AugmentSubstatement returns LeafStatement
	 *
	 * Constraint:
	 *     ((name=STRINGARG | name=KEY_IDENTIFIER) leafsubstatements+=LeafSubstatement*)
	 * </pre>
	 */
	protected void sequence_LeafStatement(ISerializationContext context, LeafStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LengthStatement returns LengthStatement
	 *     TypeSubStatement returns LengthStatement
	 *
	 * Constraint:
	 *     (length=STRINGARG lengthsubstatements+=MultipleSubstatement*)
	 * </pre>
	 */
	protected void sequence_LengthStatement(ISerializationContext context, LengthStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns ListStatement
	 *     SubmoduleStatement returns ListStatement
	 *     DatadefStatement returns ListStatement
	 *     InputSubstatement returns ListStatement
	 *     OutputSubstatement returns ListStatement
	 *     NotificationSubstatement returns ListStatement
	 *     ContainerSubstatement returns ListStatement
	 *     ListStatement returns ListStatement
	 *     ListSubstatement returns ListStatement
	 *     GroupingSubstatement returns ListStatement
	 *     ChoiceSubstatement returns ListStatement
	 *     CaseSubstatement returns ListStatement
	 *     AugmentSubstatement returns ListStatement
	 *
	 * Constraint:
	 *     ((name=STRINGARG | name=KEY_IDENTIFIER) listsubstatements+=ListSubstatement*)
	 * </pre>
	 */
	protected void sequence_ListStatement(ISerializationContext context, ListStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MandatoryStatement returns MandatoryStatement
	 *     LeafSubstatement returns MandatoryStatement
	 *     ChoiceSubstatement returns MandatoryStatement
	 *     AnyxmlSubstatement returns MandatoryStatement
	 *     RefineSubstatement returns MandatoryStatement
	 *     DeviateSubstatement returns MandatoryStatement
	 *
	 * Constraint:
	 *     (boolarg=STRINGARG mandatoryunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_MandatoryStatement(ISerializationContext context, MandatoryStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MaxElementsStatement returns MaxElementsStatement
	 *     ListSubstatement returns MaxElementsStatement
	 *     LeafListSubstatement returns MaxElementsStatement
	 *     RefineSubstatement returns MaxElementsStatement
	 *     DeviateSubstatement returns MaxElementsStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG maxelementsunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_MaxElementsStatement(ISerializationContext context, MaxElementsStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MinElementsStatement returns MinElementsStatement
	 *     ListSubstatement returns MinElementsStatement
	 *     LeafListSubstatement returns MinElementsStatement
	 *     RefineSubstatement returns MinElementsStatement
	 *     DeviateSubstatement returns MinElementsStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG minelementsunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_MinElementsStatement(ISerializationContext context, MinElementsStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     YangFile returns Module
	 *     Module returns Module
	 *
	 * Constraint:
	 *     (name=STRINGARG statements+=ModuleStatement*)
	 * </pre>
	 */
	protected void sequence_Module(ISerializationContext context, yang.manager.yang.Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MustStatement returns MustStatement
	 *     ContainerSubstatement returns MustStatement
	 *     ListSubstatement returns MustStatement
	 *     LeafSubstatement returns MustStatement
	 *     LeafListSubstatement returns MustStatement
	 *     AnyxmlSubstatement returns MustStatement
	 *     RefineSubstatement returns MustStatement
	 *     DeviateSubstatement returns MustStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG mustsubstatements+=MultipleSubstatement*)
	 * </pre>
	 */
	protected void sequence_MustStatement(ISerializationContext context, MustStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns NamespaceStatement
	 *     NamespaceStatement returns NamespaceStatement
	 *
	 * Constraint:
	 *     ((uri=STRINGARG | uri=STRINGARG4) namespaceunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_NamespaceStatement(ISerializationContext context, NamespaceStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns NotificationStatement
	 *     SubmoduleStatement returns NotificationStatement
	 *     NotificationStatement returns NotificationStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG notificationsubstatements+=NotificationSubstatement*)
	 * </pre>
	 */
	protected void sequence_NotificationStatement(ISerializationContext context, NotificationStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     OrderedbyStatement returns OrderedbyStatement
	 *     ListSubstatement returns OrderedbyStatement
	 *     LeafListSubstatement returns OrderedbyStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG orderedbyunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_OrderedbyStatement(ISerializationContext context, OrderedbyStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns OrganizationStatement
	 *     SubmoduleStatement returns OrganizationStatement
	 *     OrganizationStatement returns OrganizationStatement
	 *
	 * Constraint:
	 *     (organization=STRINGARG organizationunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_OrganizationStatement(ISerializationContext context, OrganizationStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RpcSubstatement returns OutputStatement
	 *     OutputStatement returns OutputStatement
	 *
	 * Constraint:
	 *     outputsubstatements+=OutputSubstatement+
	 * </pre>
	 */
	protected void sequence_OutputStatement(ISerializationContext context, OutputStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PathStatement returns PathStatement
	 *     TypeSubStatement returns PathStatement
	 *
	 * Constraint:
	 *     (path=STRINGARG pathunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_PathStatement(ISerializationContext context, PathStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PatternStatement returns PatternStatement
	 *     TypeSubStatement returns PatternStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG patternsubstatements+=MultipleSubstatement*)
	 * </pre>
	 */
	protected void sequence_PatternStatement(ISerializationContext context, PatternStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PositionStatement returns PositionStatement
	 *     BitSubstatement returns PositionStatement
	 *
	 * Constraint:
	 *     (intarg=STRINGARG positionunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_PositionStatement(ISerializationContext context, PositionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns PrefixStatement
	 *     PrefixStatement returns PrefixStatement
	 *     BelongsToSubstatement returns PrefixStatement
	 *     ImportSubstatements returns PrefixStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG prefixunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_PrefixStatement(ISerializationContext context, PrefixStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PresenceStatement returns PresenceStatement
	 *     ContainerSubstatement returns PresenceStatement
	 *     RefineSubstatement returns PresenceStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG presenceunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_PresenceStatement(ISerializationContext context, PresenceStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RangeStatement returns RangeStatement
	 *     TypeSubStatement returns RangeStatement
	 *
	 * Constraint:
	 *     ((range=STRINGARG | range=STRINGARG3) rangesubstatements+=MultipleSubstatement*)
	 * </pre>
	 */
	protected void sequence_RangeStatement(ISerializationContext context, RangeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ReferenceStatement returns ReferenceStatement
	 *     MultipleSubstatement returns ReferenceStatement
	 *     RpcSubstatement returns ReferenceStatement
	 *     NotificationSubstatement returns ReferenceStatement
	 *     ContainerSubstatement returns ReferenceStatement
	 *     ListSubstatement returns ReferenceStatement
	 *     GroupingSubstatement returns ReferenceStatement
	 *     LeafSubstatement returns ReferenceStatement
	 *     LeafListSubstatement returns ReferenceStatement
	 *     ChoiceSubstatement returns ReferenceStatement
	 *     CaseSubstatement returns ReferenceStatement
	 *     AnyxmlSubstatement returns ReferenceStatement
	 *     UsesSubstatement returns ReferenceStatement
	 *     AugmentSubstatement returns ReferenceStatement
	 *     RefineSubstatement returns ReferenceStatement
	 *     DeviationSubstatement returns ReferenceStatement
	 *     ExtensionSubstatement returns ReferenceStatement
	 *     IdentitySubstatement returns ReferenceStatement
	 *     FeatureSubstatement returns ReferenceStatement
	 *     TypedefSubstatement returns ReferenceStatement
	 *     BitSubstatement returns ReferenceStatement
	 *     EnumSubstatement returns ReferenceStatement
	 *     WhenSubstatements returns ReferenceStatement
	 *     RevisionSubstatements returns ReferenceStatement
	 *
	 * Constraint:
	 *     (reference=STRINGARG referenceunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_ReferenceStatement(ISerializationContext context, ReferenceStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UsesSubstatement returns RefineStatement
	 *     RefineStatement returns RefineStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG refinesubstatements+=RefineSubstatement*)
	 * </pre>
	 */
	protected void sequence_RefineStatement(ISerializationContext context, RefineStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RequireInstanceStatement returns RequireInstanceStatement
	 *     TypeSubStatement returns RequireInstanceStatement
	 *
	 * Constraint:
	 *     (require=STRINGARG requireunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_RequireInstanceStatement(ISerializationContext context, RequireInstanceStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RevisionDateStatement returns RevisionDateStatement
	 *     ImportSubstatements returns RevisionDateStatement
	 *     IncludeSubstatements returns RevisionDateStatement
	 *
	 * Constraint:
	 *     (date=STRINGARG revisiondateunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_RevisionDateStatement(ISerializationContext context, RevisionDateStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns RevisionStatement
	 *     SubmoduleStatement returns RevisionStatement
	 *     RevisionStatement returns RevisionStatement
	 *
	 * Constraint:
	 *     (date=STRINGARG revisionsubstatements+=RevisionSubstatements*)
	 * </pre>
	 */
	protected void sequence_RevisionStatement(ISerializationContext context, RevisionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns RpcStatement
	 *     SubmoduleStatement returns RpcStatement
	 *     RpcStatement returns RpcStatement
	 *
	 * Constraint:
	 *     (name=STRINGARG rpcsubstatements+=RpcSubstatement*)
	 * </pre>
	 */
	protected void sequence_RpcStatement(ISerializationContext context, RpcStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StatusStatement returns StatusStatement
	 *     RpcSubstatement returns StatusStatement
	 *     NotificationSubstatement returns StatusStatement
	 *     ContainerSubstatement returns StatusStatement
	 *     ListSubstatement returns StatusStatement
	 *     GroupingSubstatement returns StatusStatement
	 *     LeafSubstatement returns StatusStatement
	 *     LeafListSubstatement returns StatusStatement
	 *     ChoiceSubstatement returns StatusStatement
	 *     CaseSubstatement returns StatusStatement
	 *     AnyxmlSubstatement returns StatusStatement
	 *     UsesSubstatement returns StatusStatement
	 *     AugmentSubstatement returns StatusStatement
	 *     ExtensionSubstatement returns StatusStatement
	 *     IdentitySubstatement returns StatusStatement
	 *     FeatureSubstatement returns StatusStatement
	 *     TypedefSubstatement returns StatusStatement
	 *     BitSubstatement returns StatusStatement
	 *     EnumSubstatement returns StatusStatement
	 *
	 * Constraint:
	 *     (status=STRINGARG statusunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_StatusStatement(ISerializationContext context, StatusStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     YangFile returns SubModule
	 *     SubModule returns SubModule
	 *
	 * Constraint:
	 *     (name=STRINGARG statements+=SubmoduleStatement*)
	 * </pre>
	 */
	protected void sequence_SubModule(ISerializationContext context, SubModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LeafSubstatement returns TypeStatement
	 *     LeafListSubstatement returns TypeStatement
	 *     TypedefSubstatement returns TypeStatement
	 *     TypeStatement returns TypeStatement
	 *     TypeSubStatement returns TypeStatement
	 *     ImportSubstatements returns TypeStatement
	 *     IncludeSubstatements returns TypeStatement
	 *
	 * Constraint:
	 *     ((type=BuiltInType | (pre=STRINGARG? importtype=[TypedefStatement|ID])) typesubstatements+=TypeSubStatement*)
	 * </pre>
	 */
	protected void sequence_TypeStatement(ISerializationContext context, TypeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns TypedefStatement
	 *     SubmoduleStatement returns TypedefStatement
	 *     RpcSubstatement returns TypedefStatement
	 *     InputSubstatement returns TypedefStatement
	 *     OutputSubstatement returns TypedefStatement
	 *     NotificationSubstatement returns TypedefStatement
	 *     ContainerSubstatement returns TypedefStatement
	 *     ListSubstatement returns TypedefStatement
	 *     GroupingSubstatement returns TypedefStatement
	 *     TypedefStatement returns TypedefStatement
	 *
	 * Constraint:
	 *     ((name=STRINGARG | name=KEY_IDENTIFIER) typedefsubstatemnet+=TypedefSubstatement*)
	 * </pre>
	 */
	protected void sequence_TypedefStatement(ISerializationContext context, TypedefStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UniqueStatement returns UniqueStatement
	 *     ListSubstatement returns UniqueStatement
	 *     DeviateSubstatement returns UniqueStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG uniqueunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_UniqueStatement(ISerializationContext context, UniqueStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UnitsStatement returns UnitsStatement
	 *     LeafSubstatement returns UnitsStatement
	 *     LeafListSubstatement returns UnitsStatement
	 *     DeviateSubstatement returns UnitsStatement
	 *     TypedefSubstatement returns UnitsStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG unitsunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_UnitsStatement(ISerializationContext context, UnitsStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns UnknownStatement
	 *     SubmoduleStatement returns UnknownStatement
	 *     UnknownStatement returns UnknownStatement
	 *     MultipleSubstatement returns UnknownStatement
	 *     RpcSubstatement returns UnknownStatement
	 *     InputSubstatement returns UnknownStatement
	 *     OutputSubstatement returns UnknownStatement
	 *     NotificationSubstatement returns UnknownStatement
	 *     ContainerSubstatement returns UnknownStatement
	 *     ListSubstatement returns UnknownStatement
	 *     GroupingSubstatement returns UnknownStatement
	 *     LeafSubstatement returns UnknownStatement
	 *     LeafListSubstatement returns UnknownStatement
	 *     ChoiceSubstatement returns UnknownStatement
	 *     CaseSubstatement returns UnknownStatement
	 *     AnyxmlSubstatement returns UnknownStatement
	 *     UsesSubstatement returns UnknownStatement
	 *     AugmentSubstatement returns UnknownStatement
	 *     RefineSubstatement returns UnknownStatement
	 *     DeviationSubstatement returns UnknownStatement
	 *     DeviateSubstatement returns UnknownStatement
	 *     ExtensionSubstatement returns UnknownStatement
	 *     ArgumentSubstatement returns UnknownStatement
	 *     IdentitySubstatement returns UnknownStatement
	 *     FeatureSubstatement returns UnknownStatement
	 *     BelongsToSubstatement returns UnknownStatement
	 *     TypedefSubstatement returns UnknownStatement
	 *     TypeSubStatement returns UnknownStatement
	 *     BitSubstatement returns UnknownStatement
	 *     EnumSubstatement returns UnknownStatement
	 *     ImportSubstatements returns UnknownStatement
	 *     IncludeSubstatements returns UnknownStatement
	 *     WhenSubstatements returns UnknownStatement
	 *     RevisionSubstatements returns UnknownStatement
	 *
	 * Constraint:
	 *     (pref=STRINGARG namestat=STRINGARG argument=STRINGARG? unknownsubstatements+=UnknownSubstatements*)
	 * </pre>
	 */
	protected void sequence_UnknownStatement(ISerializationContext context, UnknownStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UnknownSubstatements returns UnknownSubstatements
	 *
	 * Constraint:
	 *     (pref=STRINGARG? namestat=STRINGARG argument=STRINGARG? unknownsubstatements+=UnknownSubstatements*)
	 * </pre>
	 */
	protected void sequence_UnknownSubstatements(ISerializationContext context, UnknownSubstatements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns UsesStatement
	 *     SubmoduleStatement returns UsesStatement
	 *     DatadefStatement returns UsesStatement
	 *     InputSubstatement returns UsesStatement
	 *     OutputSubstatement returns UsesStatement
	 *     NotificationSubstatement returns UsesStatement
	 *     ContainerSubstatement returns UsesStatement
	 *     ListSubstatement returns UsesStatement
	 *     GroupingSubstatement returns UsesStatement
	 *     CaseSubstatement returns UsesStatement
	 *     UsesStatement returns UsesStatement
	 *     AugmentSubstatement returns UsesStatement
	 *
	 * Constraint:
	 *     (pre=STRINGARG? arg=[GroupingStatement|ID] usessubstatements+=UsesSubstatement*)
	 * </pre>
	 */
	protected void sequence_UsesStatement(ISerializationContext context, UsesStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ValueStatement returns ValueStatement
	 *     EnumSubstatement returns ValueStatement
	 *
	 * Constraint:
	 *     (intarg=STRINGARG valueunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_ValueStatement(ISerializationContext context, ValueStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ContainerSubstatement returns WhenStatement
	 *     ListSubstatement returns WhenStatement
	 *     LeafSubstatement returns WhenStatement
	 *     LeafListSubstatement returns WhenStatement
	 *     ChoiceSubstatement returns WhenStatement
	 *     CaseSubstatement returns WhenStatement
	 *     AnyxmlSubstatement returns WhenStatement
	 *     UsesSubstatement returns WhenStatement
	 *     AugmentSubstatement returns WhenStatement
	 *     WhenStatement returns WhenStatement
	 *
	 * Constraint:
	 *     (arg=STRINGARG whensubstatements+=WhenSubstatements*)
	 * </pre>
	 */
	protected void sequence_WhenStatement(ISerializationContext context, WhenStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModuleStatement returns YangVersionStatement
	 *     SubmoduleStatement returns YangVersionStatement
	 *     YangVersionStatement returns YangVersionStatement
	 *
	 * Constraint:
	 *     (version=STRINGARG yangversionunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_YangVersionStatement(ISerializationContext context, YangVersionStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     YinElementStatement returns YinElementStatement
	 *     ArgumentSubstatement returns YinElementStatement
	 *
	 * Constraint:
	 *     (boolarg=STRINGARG yinelementunknownstatements+=UnknownStatement*)
	 * </pre>
	 */
	protected void sequence_YinElementStatement(ISerializationContext context, YinElementStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
