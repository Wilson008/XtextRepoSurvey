/*
 * generated by Xtext 2.35.0
 */
package yang.manager.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class YangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class YangFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.YangFile");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubModuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//YangFile:
		//    Module | SubModule;
		@Override public ParserRule getRule() { return rule; }
		
		//Module | SubModule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Module
		public RuleCall getModuleParserRuleCall_0() { return cModuleParserRuleCall_0; }
		
		//SubModule
		public RuleCall getSubModuleParserRuleCall_1() { return cSubModuleParserRuleCall_1; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsModuleStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Module:
		//    'module' name=STRINGARG
		//    '{'
		//        (statements+=ModuleStatement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=STRINGARG
		//'{'
		//    (statements+=ModuleStatement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statements+=ModuleStatement)*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//ModuleStatement
		public RuleCall getStatementsModuleStatementParserRuleCall_3_0() { return cStatementsModuleStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ModuleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ModuleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamespaceStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrefixStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cYangVersionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrganizationStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cContactStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDescriptionStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cImportStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIncludeStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRevisionStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExtensionStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFeatureStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIdentityStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTypedefStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cGroupingStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDatadefStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cAugmentStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cRpcStatementParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cNotificationStatementParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cDeviationStatementParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cUnknownStatementParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		
		//ModuleStatement:
		//    (NamespaceStatement
		//    |PrefixStatement
		//    |YangVersionStatement
		//    |OrganizationStatement
		//    |ContactStatement
		//    |DescriptionStatement
		//    |ImportStatement
		//    |IncludeStatement
		//    |RevisionStatement
		//    |ExtensionStatement
		//    |FeatureStatement
		//    |IdentityStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |AugmentStatement
		//    |RpcStatement
		//    |NotificationStatement
		//    |DeviationStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(NamespaceStatement
		//|PrefixStatement
		//|YangVersionStatement
		//|OrganizationStatement
		//|ContactStatement
		//|DescriptionStatement
		//|ImportStatement
		//|IncludeStatement
		//|RevisionStatement
		//|ExtensionStatement
		//|FeatureStatement
		//|IdentityStatement
		//|TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|AugmentStatement
		//|RpcStatement
		//|NotificationStatement
		//|DeviationStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamespaceStatement
		public RuleCall getNamespaceStatementParserRuleCall_0() { return cNamespaceStatementParserRuleCall_0; }
		
		//PrefixStatement
		public RuleCall getPrefixStatementParserRuleCall_1() { return cPrefixStatementParserRuleCall_1; }
		
		//YangVersionStatement
		public RuleCall getYangVersionStatementParserRuleCall_2() { return cYangVersionStatementParserRuleCall_2; }
		
		//OrganizationStatement
		public RuleCall getOrganizationStatementParserRuleCall_3() { return cOrganizationStatementParserRuleCall_3; }
		
		//ContactStatement
		public RuleCall getContactStatementParserRuleCall_4() { return cContactStatementParserRuleCall_4; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_5() { return cDescriptionStatementParserRuleCall_5; }
		
		//ImportStatement
		public RuleCall getImportStatementParserRuleCall_6() { return cImportStatementParserRuleCall_6; }
		
		//IncludeStatement
		public RuleCall getIncludeStatementParserRuleCall_7() { return cIncludeStatementParserRuleCall_7; }
		
		//RevisionStatement
		public RuleCall getRevisionStatementParserRuleCall_8() { return cRevisionStatementParserRuleCall_8; }
		
		//ExtensionStatement
		public RuleCall getExtensionStatementParserRuleCall_9() { return cExtensionStatementParserRuleCall_9; }
		
		//FeatureStatement
		public RuleCall getFeatureStatementParserRuleCall_10() { return cFeatureStatementParserRuleCall_10; }
		
		//IdentityStatement
		public RuleCall getIdentityStatementParserRuleCall_11() { return cIdentityStatementParserRuleCall_11; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_12() { return cTypedefStatementParserRuleCall_12; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_13() { return cGroupingStatementParserRuleCall_13; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_14() { return cDatadefStatementParserRuleCall_14; }
		
		//AugmentStatement
		public RuleCall getAugmentStatementParserRuleCall_15() { return cAugmentStatementParserRuleCall_15; }
		
		//RpcStatement
		public RuleCall getRpcStatementParserRuleCall_16() { return cRpcStatementParserRuleCall_16; }
		
		//NotificationStatement
		public RuleCall getNotificationStatementParserRuleCall_17() { return cNotificationStatementParserRuleCall_17; }
		
		//DeviationStatement
		public RuleCall getDeviationStatementParserRuleCall_18() { return cDeviationStatementParserRuleCall_18; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_19() { return cUnknownStatementParserRuleCall_19; }
	}
	public class SubModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.SubModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubmoduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsSubmoduleStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubModule:
		//    'submodule' name=STRINGARG
		//    '{'
		//        (statements+=SubmoduleStatement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'submodule' name=STRINGARG
		//'{'
		//    (statements+=SubmoduleStatement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'submodule'
		public Keyword getSubmoduleKeyword_0() { return cSubmoduleKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statements+=SubmoduleStatement)*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//SubmoduleStatement
		public RuleCall getStatementsSubmoduleStatementParserRuleCall_3_0() { return cStatementsSubmoduleStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SubmoduleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.SubmoduleStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYangVersionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrganizationStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cContactStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescriptionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImportStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIncludeStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRevisionStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBelongsToStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExtensionStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFeatureStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIdentityStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTypedefStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cGroupingStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDatadefStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAugmentStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRpcStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cNotificationStatementParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cDeviationStatementParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cUnknownStatementParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		
		//SubmoduleStatement:
		//    (YangVersionStatement
		//    |OrganizationStatement
		//    |ContactStatement
		//    |DescriptionStatement
		//    |ImportStatement
		//    |IncludeStatement
		//    |RevisionStatement
		//    |BelongsToStatement
		//    |ExtensionStatement
		//    |FeatureStatement
		//    |IdentityStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |AugmentStatement
		//    |RpcStatement
		//    |NotificationStatement
		//    |DeviationStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(YangVersionStatement
		//|OrganizationStatement
		//|ContactStatement
		//|DescriptionStatement
		//|ImportStatement
		//|IncludeStatement
		//|RevisionStatement
		//|BelongsToStatement
		//|ExtensionStatement
		//|FeatureStatement
		//|IdentityStatement
		//|TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|AugmentStatement
		//|RpcStatement
		//|NotificationStatement
		//|DeviationStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YangVersionStatement
		public RuleCall getYangVersionStatementParserRuleCall_0() { return cYangVersionStatementParserRuleCall_0; }
		
		//OrganizationStatement
		public RuleCall getOrganizationStatementParserRuleCall_1() { return cOrganizationStatementParserRuleCall_1; }
		
		//ContactStatement
		public RuleCall getContactStatementParserRuleCall_2() { return cContactStatementParserRuleCall_2; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_3() { return cDescriptionStatementParserRuleCall_3; }
		
		//ImportStatement
		public RuleCall getImportStatementParserRuleCall_4() { return cImportStatementParserRuleCall_4; }
		
		//IncludeStatement
		public RuleCall getIncludeStatementParserRuleCall_5() { return cIncludeStatementParserRuleCall_5; }
		
		//RevisionStatement
		public RuleCall getRevisionStatementParserRuleCall_6() { return cRevisionStatementParserRuleCall_6; }
		
		//BelongsToStatement
		public RuleCall getBelongsToStatementParserRuleCall_7() { return cBelongsToStatementParserRuleCall_7; }
		
		//ExtensionStatement
		public RuleCall getExtensionStatementParserRuleCall_8() { return cExtensionStatementParserRuleCall_8; }
		
		//FeatureStatement
		public RuleCall getFeatureStatementParserRuleCall_9() { return cFeatureStatementParserRuleCall_9; }
		
		//IdentityStatement
		public RuleCall getIdentityStatementParserRuleCall_10() { return cIdentityStatementParserRuleCall_10; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_11() { return cTypedefStatementParserRuleCall_11; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_12() { return cGroupingStatementParserRuleCall_12; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_13() { return cDatadefStatementParserRuleCall_13; }
		
		//AugmentStatement
		public RuleCall getAugmentStatementParserRuleCall_14() { return cAugmentStatementParserRuleCall_14; }
		
		//RpcStatement
		public RuleCall getRpcStatementParserRuleCall_15() { return cRpcStatementParserRuleCall_15; }
		
		//NotificationStatement
		public RuleCall getNotificationStatementParserRuleCall_16() { return cNotificationStatementParserRuleCall_16; }
		
		//DeviationStatement
		public RuleCall getDeviationStatementParserRuleCall_17() { return cDeviationStatementParserRuleCall_17; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_18() { return cUnknownStatementParserRuleCall_18; }
	}
	public class DatadefStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DatadefStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLeafStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeafListStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cChoiceStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAnyxmlStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUsesStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//DatadefStatement:
		//    (ContainerStatement
		//    |LeafStatement
		//    |LeafListStatement
		//    |ListStatement
		//    |ChoiceStatement
		//    |AnyxmlStatement
		//    |UsesStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(ContainerStatement
		//|LeafStatement
		//|LeafListStatement
		//|ListStatement
		//|ChoiceStatement
		//|AnyxmlStatement
		//|UsesStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ContainerStatement
		public RuleCall getContainerStatementParserRuleCall_0() { return cContainerStatementParserRuleCall_0; }
		
		//LeafStatement
		public RuleCall getLeafStatementParserRuleCall_1() { return cLeafStatementParserRuleCall_1; }
		
		//LeafListStatement
		public RuleCall getLeafListStatementParserRuleCall_2() { return cLeafListStatementParserRuleCall_2; }
		
		//ListStatement
		public RuleCall getListStatementParserRuleCall_3() { return cListStatementParserRuleCall_3; }
		
		//ChoiceStatement
		public RuleCall getChoiceStatementParserRuleCall_4() { return cChoiceStatementParserRuleCall_4; }
		
		//AnyxmlStatement
		public RuleCall getAnyxmlStatementParserRuleCall_5() { return cAnyxmlStatementParserRuleCall_5; }
		
		//UsesStatement
		public RuleCall getUsesStatementParserRuleCall_6() { return cUsesStatementParserRuleCall_6; }
	}
	public class YangVersionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.YangVersionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYangVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionSTRINGARGParserRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cYangversionunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cYangversionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cYangversionunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////WITHOUT SUBSTATEMENS
		////yang-version-arg    = "1"
		//YangVersionStatement:
		//    'yang-version' version=STRINGARG
		//    (';'
		//    |'{' (yangversionunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'yang-version' version=STRINGARG
		//(';'
		//|'{' (yangversionunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'yang-version'
		public Keyword getYangVersionKeyword_0() { return cYangVersionKeyword_0; }
		
		//version=STRINGARG
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }
		
		//STRINGARG
		public RuleCall getVersionSTRINGARGParserRuleCall_1_0() { return cVersionSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (yangversionunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (yangversionunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(yangversionunknownstatements+=UnknownStatement)*
		public Assignment getYangversionunknownstatementsAssignment_2_1_1() { return cYangversionunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getYangversionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cYangversionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class OrganizationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.OrganizationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrganizationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrganizationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrganizationSTRINGARGParserRuleCall_1_0 = (RuleCall)cOrganizationAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOrganizationunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOrganizationunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cOrganizationunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//OrganizationStatement:
		//    'organization' organization=STRINGARG
		//    (';'
		//    |'{' (organizationunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'organization' organization=STRINGARG
		//(';'
		//|'{' (organizationunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'organization'
		public Keyword getOrganizationKeyword_0() { return cOrganizationKeyword_0; }
		
		//organization=STRINGARG
		public Assignment getOrganizationAssignment_1() { return cOrganizationAssignment_1; }
		
		//STRINGARG
		public RuleCall getOrganizationSTRINGARGParserRuleCall_1_0() { return cOrganizationSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (organizationunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (organizationunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(organizationunknownstatements+=UnknownStatement)*
		public Assignment getOrganizationunknownstatementsAssignment_2_1_1() { return cOrganizationunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getOrganizationunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cOrganizationunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ContactStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ContactStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContactSTRINGARGParserRuleCall_1_0 = (RuleCall)cContactAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cContactunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cContactunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cContactunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//ContactStatement:
		//    'contact' contact=STRINGARG
		//    (';'
		//    |'{' (contactunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'contact' contact=STRINGARG
		//(';'
		//|'{' (contactunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'contact'
		public Keyword getContactKeyword_0() { return cContactKeyword_0; }
		
		//contact=STRINGARG
		public Assignment getContactAssignment_1() { return cContactAssignment_1; }
		
		//STRINGARG
		public RuleCall getContactSTRINGARGParserRuleCall_1_0() { return cContactSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (contactunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (contactunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(contactunknownstatements+=UnknownStatement)*
		public Assignment getContactunknownstatementsAssignment_2_1_1() { return cContactunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getContactunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cContactunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class DescriptionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DescriptionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGARGParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDescriptionunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDescriptionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cDescriptionunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//DescriptionStatement:
		//    'description' description=STRINGARG
		//    (';'
		//    |'{' (descriptionunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'description' description=STRINGARG
		//(';'
		//|'{' (descriptionunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'description'
		public Keyword getDescriptionKeyword_0() { return cDescriptionKeyword_0; }
		
		//description=STRINGARG
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRINGARG
		public RuleCall getDescriptionSTRINGARGParserRuleCall_1_0() { return cDescriptionSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (descriptionunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (descriptionunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(descriptionunknownstatements+=UnknownStatement)*
		public Assignment getDescriptionunknownstatementsAssignment_2_1_1() { return cDescriptionunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getDescriptionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cDescriptionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ReferenceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ReferenceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceSTRINGARGParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cReferenceunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cReferenceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cReferenceunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//ReferenceStatement:
		//    'reference' reference=STRINGARG
		//    (';'
		//    |'{' (referenceunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'reference' reference=STRINGARG
		//(';'
		//|'{' (referenceunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'reference'
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }
		
		//reference=STRINGARG
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }
		
		//STRINGARG
		public RuleCall getReferenceSTRINGARGParserRuleCall_1_0() { return cReferenceSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (referenceunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (referenceunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(referenceunknownstatements+=UnknownStatement)*
		public Assignment getReferenceunknownstatementsAssignment_2_1_1() { return cReferenceunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getReferenceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cReferenceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class NamespaceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.NamespaceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cUriAlternatives_1_0 = (Alternatives)cUriAssignment_1.eContents().get(0);
		private final RuleCall cUriSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cUriAlternatives_1_0.eContents().get(0);
		private final RuleCall cUriSTRINGARG4ParserRuleCall_1_0_1 = (RuleCall)cUriAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNamespaceunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNamespaceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cNamespaceunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////uri-str
		//NamespaceStatement:
		//    'namespace' uri=(STRINGARG | STRINGARG4)
		//    (';'
		//    |'{' (namespaceunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' uri=(STRINGARG | STRINGARG4)
		//(';'
		//|'{' (namespaceunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//uri=(STRINGARG | STRINGARG4)
		public Assignment getUriAssignment_1() { return cUriAssignment_1; }
		
		//(STRINGARG | STRINGARG4)
		public Alternatives getUriAlternatives_1_0() { return cUriAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getUriSTRINGARGParserRuleCall_1_0_0() { return cUriSTRINGARGParserRuleCall_1_0_0; }
		
		//STRINGARG4
		public RuleCall getUriSTRINGARG4ParserRuleCall_1_0_1() { return cUriSTRINGARG4ParserRuleCall_1_0_1; }
		
		//(';'
		//|'{' (namespaceunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (namespaceunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(namespaceunknownstatements+=UnknownStatement)*
		public Assignment getNamespaceunknownstatementsAssignment_2_1_1() { return cNamespaceunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getNamespaceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cNamespaceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PrefixStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.PrefixStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrefixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPrefixunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPrefixunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cPrefixunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//PrefixStatement:
		//    'prefix' name=STRINGARG
		//    (';'
		//    |'{' (prefixunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'prefix' name=STRINGARG
		//(';'
		//|'{' (prefixunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'prefix'
		public Keyword getPrefixKeyword_0() { return cPrefixKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (prefixunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (prefixunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(prefixunknownstatements+=UnknownStatement)*
		public Assignment getPrefixunknownstatementsAssignment_2_1_1() { return cPrefixunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getPrefixunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cPrefixunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class RequireInstanceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RequireInstanceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequireAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRequireSTRINGARGParserRuleCall_1_0 = (RuleCall)cRequireAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRequireunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRequireunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cRequireunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////true or false
		//RequireInstanceStatement:
		//    'require-instance' require=STRINGARG
		//    (';'
		//    |'{' (requireunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'require-instance' require=STRINGARG
		//(';'
		//|'{' (requireunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'require-instance'
		public Keyword getRequireInstanceKeyword_0() { return cRequireInstanceKeyword_0; }
		
		//require=STRINGARG
		public Assignment getRequireAssignment_1() { return cRequireAssignment_1; }
		
		//STRINGARG
		public RuleCall getRequireSTRINGARGParserRuleCall_1_0() { return cRequireSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (requireunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (requireunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(requireunknownstatements+=UnknownStatement)*
		public Assignment getRequireunknownstatementsAssignment_2_1_1() { return cRequireunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getRequireunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cRequireunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PathStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.PathStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPathKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGARGParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPathunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPathunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cPathunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// MUST be present if the type is "leafref"
		//// path-arg=absolute-path / relative-path
		//PathStatement:
		//    'path' path=STRINGARG
		//    (';'
		//    |'{' (pathunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'path' path=STRINGARG
		//(';'
		//|'{' (pathunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'path'
		public Keyword getPathKeyword_0() { return cPathKeyword_0; }
		
		//path=STRINGARG
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//STRINGARG
		public RuleCall getPathSTRINGARGParserRuleCall_1_0() { return cPathSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (pathunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (pathunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(pathunknownstatements+=UnknownStatement)*
		public Assignment getPathunknownstatementsAssignment_2_1_1() { return cPathunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getPathunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cPathunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PositionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.PositionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIntargAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntargSTRINGARGParserRuleCall_1_0 = (RuleCall)cIntargAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPositionunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPositionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cPositionunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////arg MUST BE non-negative-integer-value
		//PositionStatement:
		//    'position' intarg=STRINGARG
		//    (';'
		//    |'{' (positionunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'position' intarg=STRINGARG
		//(';'
		//|'{' (positionunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'position'
		public Keyword getPositionKeyword_0() { return cPositionKeyword_0; }
		
		//intarg=STRINGARG
		public Assignment getIntargAssignment_1() { return cIntargAssignment_1; }
		
		//STRINGARG
		public RuleCall getIntargSTRINGARGParserRuleCall_1_0() { return cIntargSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (positionunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (positionunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(positionunknownstatements+=UnknownStatement)*
		public Assignment getPositionunknownstatementsAssignment_2_1_1() { return cPositionunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getPositionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cPositionunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ValueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ValueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIntargAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntargSTRINGARGParserRuleCall_1_0 = (RuleCall)cIntargAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cValueunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////arg is integer and This integer value MUST be unique within the enumeration type.
		//ValueStatement:
		//    'value' intarg=STRINGARG
		//    (';'
		//    |'{' (valueunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'value' intarg=STRINGARG
		//(';'
		//|'{' (valueunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//intarg=STRINGARG
		public Assignment getIntargAssignment_1() { return cIntargAssignment_1; }
		
		//STRINGARG
		public RuleCall getIntargSTRINGARGParserRuleCall_1_0() { return cIntargSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (valueunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (valueunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(valueunknownstatements+=UnknownStatement)*
		public Assignment getValueunknownstatementsAssignment_2_1_1() { return cValueunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getValueunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cValueunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ErrorAppTagStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ErrorAppTagStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorAppTagKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cErroraunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cErroraunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cErroraunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//ErrorAppTagStatement:
		//    'error-app-tag' arg=STRINGARG
		//    (';'
		//    |'{' (erroraunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'error-app-tag' arg=STRINGARG
		//(';'
		//|'{' (erroraunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'error-app-tag'
		public Keyword getErrorAppTagKeyword_0() { return cErrorAppTagKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (erroraunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (erroraunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(erroraunknownstatements+=UnknownStatement)*
		public Assignment getErroraunknownstatementsAssignment_2_1_1() { return cErroraunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getErroraunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cErroraunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ErrorMessageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ErrorMessageStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cErrormunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cErrormunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cErrormunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//ErrorMessageStatement:
		//    'error-message' arg=STRINGARG
		//    (';'
		//    |'{' (errormunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'error-message' arg=STRINGARG
		//(';'
		//|'{' (errormunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'error-message'
		public Keyword getErrorMessageKeyword_0() { return cErrorMessageKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (errormunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (errormunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(errormunknownstatements+=UnknownStatement)*
		public Assignment getErrormunknownstatementsAssignment_2_1_1() { return cErrormunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getErrormunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cErrormunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class UnitsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.UnitsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cUnitsunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cUnitsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cUnitsunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//UnitsStatement:
		//    'units' arg=STRINGARG
		//    (';'
		//    |'{' (unitsunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'units' arg=STRINGARG
		//(';'
		//|'{' (unitsunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'units'
		public Keyword getUnitsKeyword_0() { return cUnitsKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (unitsunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (unitsunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(unitsunknownstatements+=UnknownStatement)*
		public Assignment getUnitsunknownstatementsAssignment_2_1_1() { return cUnitsunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getUnitsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cUnitsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class DefaultStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DefaultStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDefaultunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDefaultunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cDefaultunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////Could have crossrefence to a type name
		////string
		//DefaultStatement:
		//    'default' (arg=STRINGARG)
		//    (';'
		//    |'{' (defaultunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'default' (arg=STRINGARG)
		//(';'
		//|'{' (defaultunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//(arg=STRINGARG)
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (defaultunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (defaultunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(defaultunknownstatements+=UnknownStatement)*
		public Assignment getDefaultunknownstatementsAssignment_2_1_1() { return cDefaultunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getDefaultunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cDefaultunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class StatusStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.StatusStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatusSTRINGARGParserRuleCall_1_0 = (RuleCall)cStatusAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStatusunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStatusunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cStatusunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////If a definition is "current", it MUST NOT reference a "deprecated" or "obsolete" definition within the same module.
		////If a definition is "deprecated", it MUST NOT reference an "obsolete" definition within the same module.
		//StatusStatement:
		//    'status' status=STRINGARG
		//    (';'
		//    |'{' (statusunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'status' status=STRINGARG
		//(';'
		//|'{' (statusunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'status'
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }
		
		//status=STRINGARG
		public Assignment getStatusAssignment_1() { return cStatusAssignment_1; }
		
		//STRINGARG
		public RuleCall getStatusSTRINGARGParserRuleCall_1_0() { return cStatusSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (statusunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (statusunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(statusunknownstatements+=UnknownStatement)*
		public Assignment getStatusunknownstatementsAssignment_2_1_1() { return cStatusunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getStatusunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cStatusunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class RevisionDateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RevisionDateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRevisionDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateSTRINGARGParserRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRevisiondateunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRevisiondateunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cRevisiondateunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//RevisionDateStatement:
		//    'revision-date' date=STRINGARG
		//    (';'
		//    |'{' (revisiondateunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'revision-date' date=STRINGARG
		//(';'
		//|'{' (revisiondateunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'revision-date'
		public Keyword getRevisionDateKeyword_0() { return cRevisionDateKeyword_0; }
		
		//date=STRINGARG
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//STRINGARG
		public RuleCall getDateSTRINGARGParserRuleCall_1_0() { return cDateSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (revisiondateunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (revisiondateunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(revisiondateunknownstatements+=UnknownStatement)*
		public Assignment getRevisiondateunknownstatementsAssignment_2_1_1() { return cRevisiondateunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getRevisiondateunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cRevisiondateunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class UniqueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.UniqueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUniqueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cUniqueunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cUniqueunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cUniqueunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// unique-arg = descendant-schema-nodeid *(sep descendant-schema-nodeid)
		//UniqueStatement:
		//    'unique' arg=STRINGARG
		//    (';'
		//    |'{' (uniqueunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'unique' arg=STRINGARG
		//(';'
		//|'{' (uniqueunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'unique'
		public Keyword getUniqueKeyword_0() { return cUniqueKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (uniqueunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (uniqueunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(uniqueunknownstatements+=UnknownStatement)*
		public Assignment getUniqueunknownstatementsAssignment_2_1_1() { return cUniqueunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getUniqueunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cUniqueunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class KeyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.KeyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgAlternatives_1_0 = (Alternatives)cArgAssignment_1.eContents().get(0);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cArgAlternatives_1_0.eContents().get(0);
		private final RuleCall cArgSTRINGARG2ParserRuleCall_1_0_1 = (RuleCall)cArgAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cKeyunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cKeyunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cKeyunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// key-arg = node-identifier *(sep node-identifier)
		//KeyStatement:
		//    'key' arg=(STRINGARG|STRINGARG2)
		//    (';'
		//    |'{' (keyunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'key' arg=(STRINGARG|STRINGARG2)
		//(';'
		//|'{' (keyunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'key'
		public Keyword getKeyKeyword_0() { return cKeyKeyword_0; }
		
		//arg=(STRINGARG|STRINGARG2)
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//(STRINGARG|STRINGARG2)
		public Alternatives getArgAlternatives_1_0() { return cArgAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0_0() { return cArgSTRINGARGParserRuleCall_1_0_0; }
		
		//STRINGARG2
		public RuleCall getArgSTRINGARG2ParserRuleCall_1_0_1() { return cArgSTRINGARG2ParserRuleCall_1_0_1; }
		
		//(';'
		//|'{' (keyunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (keyunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(keyunknownstatements+=UnknownStatement)*
		public Assignment getKeyunknownstatementsAssignment_2_1_1() { return cKeyunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getKeyunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cKeyunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class OrderedbyStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.OrderedbyStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOrderedbyunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOrderedbyunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cOrderedbyunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//OrderedbyStatement:
		//    'ordered-by' arg=STRINGARG
		//    (';'
		//    |'{' (orderedbyunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ordered-by' arg=STRINGARG
		//(';'
		//|'{' (orderedbyunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'ordered-by'
		public Keyword getOrderedByKeyword_0() { return cOrderedByKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (orderedbyunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (orderedbyunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(orderedbyunknownstatements+=UnknownStatement)*
		public Assignment getOrderedbyunknownstatementsAssignment_2_1_1() { return cOrderedbyunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getOrderedbyunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cOrderedbyunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PresenceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.PresenceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPresenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPresenceunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPresenceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cPresenceunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//PresenceStatement:
		//    'presence' arg=STRINGARG
		//    (';'
		//    |'{' (presenceunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'presence' arg=STRINGARG
		//(';'
		//|'{' (presenceunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'presence'
		public Keyword getPresenceKeyword_0() { return cPresenceKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (presenceunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (presenceunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(presenceunknownstatements+=UnknownStatement)*
		public Assignment getPresenceunknownstatementsAssignment_2_1_1() { return cPresenceunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getPresenceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cPresenceunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MandatoryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.MandatoryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolargAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolargSTRINGARGParserRuleCall_1_0 = (RuleCall)cBoolargAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMandatoryunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMandatoryunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cMandatoryunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//MandatoryStatement:
		//    'mandatory' boolarg=STRINGARG
		//    (';'
		//    |'{' (mandatoryunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'mandatory' boolarg=STRINGARG
		//(';'
		//|'{' (mandatoryunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }
		
		//boolarg=STRINGARG
		public Assignment getBoolargAssignment_1() { return cBoolargAssignment_1; }
		
		//STRINGARG
		public RuleCall getBoolargSTRINGARGParserRuleCall_1_0() { return cBoolargSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (mandatoryunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (mandatoryunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(mandatoryunknownstatements+=UnknownStatement)*
		public Assignment getMandatoryunknownstatementsAssignment_2_1_1() { return cMandatoryunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getMandatoryunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cMandatoryunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ConfigStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ConfigStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolargAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolargSTRINGARGParserRuleCall_1_0 = (RuleCall)cBoolargAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cConfigunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConfigunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cConfigunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ConfigStatement:
		//    'config' boolarg=STRINGARG
		//    (';'
		//    |'{' (configunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'config' boolarg=STRINGARG
		//(';'
		//|'{' (configunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'config'
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }
		
		//boolarg=STRINGARG
		public Assignment getBoolargAssignment_1() { return cBoolargAssignment_1; }
		
		//STRINGARG
		public RuleCall getBoolargSTRINGARGParserRuleCall_1_0() { return cBoolargSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (configunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (configunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(configunknownstatements+=UnknownStatement)*
		public Assignment getConfigunknownstatementsAssignment_2_1_1() { return cConfigunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getConfigunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cConfigunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class FractionDigitsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.FractionDigitsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFractionDigitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFractiondigitsunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFractiondigitsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cFractiondigitsunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////MUST be present if the type is "decimal64". It takes as an argument an integer between 1 and 18, inclusively.
		//FractionDigitsStatement:
		//    'fraction-digits' arg=STRINGARG
		//    (';'
		//    |'{' (fractiondigitsunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'fraction-digits' arg=STRINGARG
		//(';'
		//|'{' (fractiondigitsunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'fraction-digits'
		public Keyword getFractionDigitsKeyword_0() { return cFractionDigitsKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (fractiondigitsunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (fractiondigitsunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(fractiondigitsunknownstatements+=UnknownStatement)*
		public Assignment getFractiondigitsunknownstatementsAssignment_2_1_1() { return cFractiondigitsunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getFractiondigitsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cFractiondigitsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class IfFeatureStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.IfFeatureStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPrefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrefSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cPrefAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIdentFeatureStatementCrossReference_2_0 = (CrossReference)cIdentAssignment_2.eContents().get(0);
		private final RuleCall cIdentFeatureStatementIDTerminalRuleCall_2_0_1 = (RuleCall)cIdentFeatureStatementCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cIffeatureunknownstatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cIffeatureunknownstatementsUnknownStatementParserRuleCall_3_1_1_0 = (RuleCall)cIffeatureunknownstatementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		////The argument is the name of a feature, as defined by a "feature" statement
		////identifier-ref-arg-str
		//IfFeatureStatement:
		//    'if-feature' (pref=STRINGARG ':')? ident=[FeatureStatement]
		//    (';'
		//    |'{' (iffeatureunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if-feature' (pref=STRINGARG ':')? ident=[FeatureStatement]
		//(';'
		//|'{' (iffeatureunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'if-feature'
		public Keyword getIfFeatureKeyword_0() { return cIfFeatureKeyword_0; }
		
		//(pref=STRINGARG ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//pref=STRINGARG
		public Assignment getPrefAssignment_1_0() { return cPrefAssignment_1_0; }
		
		//STRINGARG
		public RuleCall getPrefSTRINGARGParserRuleCall_1_0_0() { return cPrefSTRINGARGParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//ident=[FeatureStatement]
		public Assignment getIdentAssignment_2() { return cIdentAssignment_2; }
		
		//[FeatureStatement]
		public CrossReference getIdentFeatureStatementCrossReference_2_0() { return cIdentFeatureStatementCrossReference_2_0; }
		
		//ID
		public RuleCall getIdentFeatureStatementIDTerminalRuleCall_2_0_1() { return cIdentFeatureStatementIDTerminalRuleCall_2_0_1; }
		
		//(';'
		//|'{' (iffeatureunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//'{' (iffeatureunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//(iffeatureunknownstatements+=UnknownStatement)*
		public Assignment getIffeatureunknownstatementsAssignment_3_1_1() { return cIffeatureunknownstatementsAssignment_3_1_1; }
		
		//UnknownStatement
		public RuleCall getIffeatureunknownstatementsUnknownStatementParserRuleCall_3_1_1_0() { return cIffeatureunknownstatementsUnknownStatementParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class BaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.BaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cBaseAlternatives_1_0 = (Alternatives)cBaseAssignment_1.eContents().get(0);
		private final RuleCall cBaseSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cBaseAlternatives_1_0.eContents().get(0);
		private final RuleCall cBaseSTRINGARG2ParserRuleCall_1_0_1 = (RuleCall)cBaseAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cBaseunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBaseunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cBaseunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// The "base" statement MUST be present if the type is "identityref".
		//// The argument is the name of an identity, as defined by an "identity" statement.
		////identifier-ref-arg-str
		//BaseStatement:
		//    'base' base=(STRINGARG |STRINGARG2) //(pref=STRINGARG':')?//ident=[IdentityStatement]
		//    (';'
		//    |'{' (baseunknownstatements+=UnknownStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'base' base=(STRINGARG |STRINGARG2) //(pref=STRINGARG':')?//ident=[IdentityStatement]
		//(';'
		//|'{' (baseunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'base'
		public Keyword getBaseKeyword_0() { return cBaseKeyword_0; }
		
		//base=(STRINGARG |STRINGARG2)
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }
		
		//(STRINGARG |STRINGARG2)
		public Alternatives getBaseAlternatives_1_0() { return cBaseAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getBaseSTRINGARGParserRuleCall_1_0_0() { return cBaseSTRINGARGParserRuleCall_1_0_0; }
		
		//STRINGARG2
		public RuleCall getBaseSTRINGARG2ParserRuleCall_1_0_1() { return cBaseSTRINGARG2ParserRuleCall_1_0_1; }
		
		////(pref=STRINGARG':')?//ident=[IdentityStatement]
		//   (';'
		//   |'{' (baseunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (baseunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(baseunknownstatements+=UnknownStatement)*
		public Assignment getBaseunknownstatementsAssignment_2_1_1() { return cBaseunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getBaseunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cBaseunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class YinElementStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.YinElementStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYinElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolargAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolargSTRINGARGParserRuleCall_1_0 = (RuleCall)cBoolargAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cYinelementunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cYinelementunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cYinelementunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//YinElementStatement:
		//    'yin-element' boolarg=STRINGARG
		//    (';'
		//    |'{' (yinelementunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'yin-element' boolarg=STRINGARG
		//(';'
		//|'{' (yinelementunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'yin-element'
		public Keyword getYinElementKeyword_0() { return cYinElementKeyword_0; }
		
		//boolarg=STRINGARG
		public Assignment getBoolargAssignment_1() { return cBoolargAssignment_1; }
		
		//STRINGARG
		public RuleCall getBoolargSTRINGARGParserRuleCall_1_0() { return cBoolargSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (yinelementunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (yinelementunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(yinelementunknownstatements+=UnknownStatement)*
		public Assignment getYinelementunknownstatementsAssignment_2_1_1() { return cYinelementunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getYinelementunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cYinelementunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MinElementsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.MinElementsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMinelementsunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMinelementsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cMinelementsunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////Takes as an argument a non-negative integer
		//MinElementsStatement:
		//    'min-elements' arg=STRINGARG
		//    (';'
		//    |'{' (minelementsunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'min-elements' arg=STRINGARG
		//(';'
		//|'{' (minelementsunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'min-elements'
		public Keyword getMinElementsKeyword_0() { return cMinElementsKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (minelementsunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (minelementsunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(minelementsunknownstatements+=UnknownStatement)*
		public Assignment getMinelementsunknownstatementsAssignment_2_1_1() { return cMinelementsunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getMinelementsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cMinelementsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MaxElementsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.MaxElementsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMaxelementsunknownstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMaxelementsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0 = (RuleCall)cMaxelementsunknownstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////Takes as an argument a positive integer or the string "unbounded"
		//MaxElementsStatement:
		//    'max-elements' arg=STRINGARG
		//    (';'
		//    |'{' (maxelementsunknownstatements+=UnknownStatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'max-elements' arg=STRINGARG
		//(';'
		//|'{' (maxelementsunknownstatements+=UnknownStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'max-elements'
		public Keyword getMaxElementsKeyword_0() { return cMaxElementsKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (maxelementsunknownstatements+=UnknownStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (maxelementsunknownstatements+=UnknownStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(maxelementsunknownstatements+=UnknownStatement)*
		public Assignment getMaxelementsunknownstatementsAssignment_2_1_1() { return cMaxelementsunknownstatementsAssignment_2_1_1; }
		
		//UnknownStatement
		public RuleCall getMaxelementsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0() { return cMaxelementsunknownstatementsUnknownStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class UnknownStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.UnknownStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefSTRINGARGParserRuleCall_0_0 = (RuleCall)cPrefAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamestatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamestatSTRINGARGParserRuleCall_2_0 = (RuleCall)cNamestatAssignment_2.eContents().get(0);
		private final Assignment cArgumentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentSTRINGARGParserRuleCall_3_0 = (RuleCall)cArgumentAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cUnknownsubstatementsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cUnknownsubstatementsUnknownSubstatementsParserRuleCall_4_1_1_0 = (RuleCall)cUnknownsubstatementsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_2 = (Keyword)cGroup_4_1.eContents().get(2);
		
		//UnknownStatement:
		//    pref=STRINGARG':' namestat=STRINGARG (argument=STRINGARG)?
		//    (';'
		//    |'{' (unknownsubstatements+=UnknownSubstatements)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//pref=STRINGARG':' namestat=STRINGARG (argument=STRINGARG)?
		//(';'
		//|'{' (unknownsubstatements+=UnknownSubstatements)* '}')
		public Group getGroup() { return cGroup; }
		
		//pref=STRINGARG
		public Assignment getPrefAssignment_0() { return cPrefAssignment_0; }
		
		//STRINGARG
		public RuleCall getPrefSTRINGARGParserRuleCall_0_0() { return cPrefSTRINGARGParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//namestat=STRINGARG
		public Assignment getNamestatAssignment_2() { return cNamestatAssignment_2; }
		
		//STRINGARG
		public RuleCall getNamestatSTRINGARGParserRuleCall_2_0() { return cNamestatSTRINGARGParserRuleCall_2_0; }
		
		//(argument=STRINGARG)?
		public Assignment getArgumentAssignment_3() { return cArgumentAssignment_3; }
		
		//STRINGARG
		public RuleCall getArgumentSTRINGARGParserRuleCall_3_0() { return cArgumentSTRINGARGParserRuleCall_3_0; }
		
		//(';'
		//|'{' (unknownsubstatements+=UnknownSubstatements)* '}')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//'{' (unknownsubstatements+=UnknownSubstatements)* '}'
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }
		
		//(unknownsubstatements+=UnknownSubstatements)*
		public Assignment getUnknownsubstatementsAssignment_4_1_1() { return cUnknownsubstatementsAssignment_4_1_1; }
		
		//UnknownSubstatements
		public RuleCall getUnknownsubstatementsUnknownSubstatementsParserRuleCall_4_1_1_0() { return cUnknownsubstatementsUnknownSubstatementsParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_1_2() { return cRightCurlyBracketKeyword_4_1_2; }
	}
	public class UnknownSubstatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.UnknownSubstatements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPrefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrefSTRINGARGParserRuleCall_0_0_0 = (RuleCall)cPrefAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNamestatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamestatSTRINGARGParserRuleCall_1_0 = (RuleCall)cNamestatAssignment_1.eContents().get(0);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentSTRINGARGParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUnknownsubstatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUnknownsubstatementsUnknownSubstatementsParserRuleCall_3_1_1_0 = (RuleCall)cUnknownsubstatementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//UnknownSubstatements:
		//    (pref=STRINGARG':')? namestat=STRINGARG (argument=STRINGARG)?
		//    (';'
		//    |'{' (unknownsubstatements+=UnknownSubstatements)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//(pref=STRINGARG':')? namestat=STRINGARG (argument=STRINGARG)?
		//(';'
		//|'{' (unknownsubstatements+=UnknownSubstatements)* '}')
		public Group getGroup() { return cGroup; }
		
		//(pref=STRINGARG':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//pref=STRINGARG
		public Assignment getPrefAssignment_0_0() { return cPrefAssignment_0_0; }
		
		//STRINGARG
		public RuleCall getPrefSTRINGARGParserRuleCall_0_0_0() { return cPrefSTRINGARGParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//namestat=STRINGARG
		public Assignment getNamestatAssignment_1() { return cNamestatAssignment_1; }
		
		//STRINGARG
		public RuleCall getNamestatSTRINGARGParserRuleCall_1_0() { return cNamestatSTRINGARGParserRuleCall_1_0; }
		
		//(argument=STRINGARG)?
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//STRINGARG
		public RuleCall getArgumentSTRINGARGParserRuleCall_2_0() { return cArgumentSTRINGARGParserRuleCall_2_0; }
		
		//(';'
		//|'{' (unknownsubstatements+=UnknownSubstatements)* '}')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//'{' (unknownsubstatements+=UnknownSubstatements)* '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//(unknownsubstatements+=UnknownSubstatements)*
		public Assignment getUnknownsubstatementsAssignment_3_1_1() { return cUnknownsubstatementsAssignment_3_1_1; }
		
		//UnknownSubstatements
		public RuleCall getUnknownsubstatementsUnknownSubstatementsParserRuleCall_3_1_1_0() { return cUnknownsubstatementsUnknownSubstatementsParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class RangeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RangeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cRangeAlternatives_1_0 = (Alternatives)cRangeAssignment_1.eContents().get(0);
		private final RuleCall cRangeSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cRangeAlternatives_1_0.eContents().get(0);
		private final RuleCall cRangeSTRINGARG3ParserRuleCall_1_0_1 = (RuleCall)cRangeAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRangesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRangesubstatementsMultipleSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cRangesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////WITH SUBSTATEMENTS
		////It is used to restrict integer and decimal built-in types, or types derived from those.
		////The range expression syntax is formally defined by the rule "range-arg".
		//RangeStatement:
		//    'range' range=(STRINGARG | STRINGARG3)
		//    (';'
		//    |'{' (rangesubstatements+=MultipleSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'range' range=(STRINGARG | STRINGARG3)
		//(';'
		//|'{' (rangesubstatements+=MultipleSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'range'
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//range=(STRINGARG | STRINGARG3)
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }
		
		//(STRINGARG | STRINGARG3)
		public Alternatives getRangeAlternatives_1_0() { return cRangeAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getRangeSTRINGARGParserRuleCall_1_0_0() { return cRangeSTRINGARGParserRuleCall_1_0_0; }
		
		//STRINGARG3
		public RuleCall getRangeSTRINGARG3ParserRuleCall_1_0_1() { return cRangeSTRINGARG3ParserRuleCall_1_0_1; }
		
		//(';'
		//|'{' (rangesubstatements+=MultipleSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (rangesubstatements+=MultipleSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(rangesubstatements+=MultipleSubstatement)*
		public Assignment getRangesubstatementsAssignment_2_1_1() { return cRangesubstatementsAssignment_2_1_1; }
		
		//MultipleSubstatement
		public RuleCall getRangesubstatementsMultipleSubstatementParserRuleCall_2_1_1_0() { return cRangesubstatementsMultipleSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class PatternStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.PatternStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPatternsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPatternsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cPatternsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////It is used to restrict the built-in type "string", or types derived from "string", to values that match the pattern.
		////string-arg
		//PatternStatement:
		//    'pattern' name=STRINGARG
		//    (';'
		//    |'{' (patternsubstatements+=MultipleSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' name=STRINGARG
		//(';'
		//|'{' (patternsubstatements+=MultipleSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (patternsubstatements+=MultipleSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (patternsubstatements+=MultipleSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(patternsubstatements+=MultipleSubstatement)*
		public Assignment getPatternsubstatementsAssignment_2_1_1() { return cPatternsubstatementsAssignment_2_1_1; }
		
		//MultipleSubstatement
		public RuleCall getPatternsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0() { return cPatternsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class LengthStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.LengthStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLengthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLengthSTRINGARGParserRuleCall_1_0 = (RuleCall)cLengthAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLengthsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLengthsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cLengthsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////It is used to restrict the built-in type "string", or types derived from "string".
		////The length expression syntax is formally defined by the rule "length-arg".
		//LengthStatement:
		//    'length' length=STRINGARG
		//    (';'
		//    |'{' (lengthsubstatements+=MultipleSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'length' length=STRINGARG
		//(';'
		//|'{' (lengthsubstatements+=MultipleSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'length'
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }
		
		//length=STRINGARG
		public Assignment getLengthAssignment_1() { return cLengthAssignment_1; }
		
		//STRINGARG
		public RuleCall getLengthSTRINGARGParserRuleCall_1_0() { return cLengthSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (lengthsubstatements+=MultipleSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (lengthsubstatements+=MultipleSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(lengthsubstatements+=MultipleSubstatement)*
		public Assignment getLengthsubstatementsAssignment_2_1_1() { return cLengthsubstatementsAssignment_2_1_1; }
		
		//MultipleSubstatement
		public RuleCall getLengthsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0() { return cLengthsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MustStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.MustStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMustKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMustsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMustsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cMustsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//MustStatement:
		//    'must' arg=STRINGARG
		//    (';'
		//    |'{' (mustsubstatements+=MultipleSubstatement)* '}')
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'must' arg=STRINGARG
		//(';'
		//|'{' (mustsubstatements+=MultipleSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'must'
		public Keyword getMustKeyword_0() { return cMustKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (mustsubstatements+=MultipleSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (mustsubstatements+=MultipleSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(mustsubstatements+=MultipleSubstatement)*
		public Assignment getMustsubstatementsAssignment_2_1_1() { return cMustsubstatementsAssignment_2_1_1; }
		
		//MultipleSubstatement
		public RuleCall getMustsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0() { return cMustsubstatementsMultipleSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class MultipleSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.MultipleSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cErrorAppTagStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cErrorMessageStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//MultipleSubstatement:
		//    (DescriptionStatement
		//    |ReferenceStatement
		//    |ErrorAppTagStatement
		//    |ErrorMessageStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(DescriptionStatement
		//|ReferenceStatement
		//|ErrorAppTagStatement
		//|ErrorMessageStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_0() { return cDescriptionStatementParserRuleCall_0; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_1() { return cReferenceStatementParserRuleCall_1; }
		
		//ErrorAppTagStatement
		public RuleCall getErrorAppTagStatementParserRuleCall_2() { return cErrorAppTagStatementParserRuleCall_2; }
		
		//ErrorMessageStatement
		public RuleCall getErrorMessageStatementParserRuleCall_3() { return cErrorMessageStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class RpcStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RpcStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRpcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRpcsubstatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRpcsubstatementsRpcSubstatementParserRuleCall_3_0 = (RuleCall)cRpcsubstatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////identifier-arg-str
		//RpcStatement:
		//    'rpc' name=STRINGARG
		//    '{'(rpcsubstatements+=RpcSubstatement)* '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'rpc' name=STRINGARG
		//'{'(rpcsubstatements+=RpcSubstatement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'rpc'
		public Keyword getRpcKeyword_0() { return cRpcKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(rpcsubstatements+=RpcSubstatement)*
		public Assignment getRpcsubstatementsAssignment_3() { return cRpcsubstatementsAssignment_3; }
		
		//RpcSubstatement
		public RuleCall getRpcsubstatementsRpcSubstatementParserRuleCall_3_0() { return cRpcsubstatementsRpcSubstatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RpcSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RpcSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfFeatureStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypedefStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGroupingStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInputStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOutputStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUnknownStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//RpcSubstatement:
		//    (IfFeatureStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |InputStatement
		//    |OutputStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(IfFeatureStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|TypedefStatement
		//|GroupingStatement
		//|InputStatement
		//|OutputStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_0() { return cIfFeatureStatementParserRuleCall_0; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_1() { return cStatusStatementParserRuleCall_1; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_2() { return cDescriptionStatementParserRuleCall_2; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_3() { return cReferenceStatementParserRuleCall_3; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_4() { return cTypedefStatementParserRuleCall_4; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_5() { return cGroupingStatementParserRuleCall_5; }
		
		//InputStatement
		public RuleCall getInputStatementParserRuleCall_6() { return cInputStatementParserRuleCall_6; }
		
		//OutputStatement
		public RuleCall getOutputStatementParserRuleCall_7() { return cOutputStatementParserRuleCall_7; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_8() { return cUnknownStatementParserRuleCall_8; }
	}
	public class InputStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.InputStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputsubstatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputsubstatementsInputSubstatementParserRuleCall_2_0 = (RuleCall)cInputsubstatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputStatement:
		//    'input'
		//    '{'(inputsubstatements+=InputSubstatement)+ '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'input'
		//'{'(inputsubstatements+=InputSubstatement)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(inputsubstatements+=InputSubstatement)+
		public Assignment getInputsubstatementsAssignment_2() { return cInputsubstatementsAssignment_2; }
		
		//InputSubstatement
		public RuleCall getInputsubstatementsInputSubstatementParserRuleCall_2_0() { return cInputsubstatementsInputSubstatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InputSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.InputSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedefStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupingStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDatadefStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUsesStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//InputSubstatement:
		//    (TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |(=>UsesStatement)
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|(=>UsesStatement)
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_0() { return cTypedefStatementParserRuleCall_0; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_1() { return cGroupingStatementParserRuleCall_1; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_2() { return cDatadefStatementParserRuleCall_2; }
		
		//(=>UsesStatement)
		public RuleCall getUsesStatementParserRuleCall_3() { return cUsesStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class OutputStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.OutputStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputsubstatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputsubstatementsOutputSubstatementParserRuleCall_2_0 = (RuleCall)cOutputsubstatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OutputStatement:
		//    'output'
		//    '{'(outputsubstatements+=OutputSubstatement)+ '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'output'
		//'{'(outputsubstatements+=OutputSubstatement)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(outputsubstatements+=OutputSubstatement)+
		public Assignment getOutputsubstatementsAssignment_2() { return cOutputsubstatementsAssignment_2; }
		
		//OutputSubstatement
		public RuleCall getOutputsubstatementsOutputSubstatementParserRuleCall_2_0() { return cOutputsubstatementsOutputSubstatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OutputSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.OutputSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedefStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupingStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDatadefStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUsesStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//OutputSubstatement:
		//    (TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |(=>UsesStatement)
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|(=>UsesStatement)
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_0() { return cTypedefStatementParserRuleCall_0; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_1() { return cGroupingStatementParserRuleCall_1; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_2() { return cDatadefStatementParserRuleCall_2; }
		
		//(=>UsesStatement)
		public RuleCall getUsesStatementParserRuleCall_3() { return cUsesStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class NotificationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.NotificationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNotificationsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNotificationsubstatementsNotificationSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cNotificationsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//NotificationStatement:
		//    'notification' name=STRINGARG
		//    (';'
		//    |'{'(notificationsubstatements+=NotificationSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'notification' name=STRINGARG
		//(';'
		//|'{'(notificationsubstatements+=NotificationSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{'(notificationsubstatements+=NotificationSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(notificationsubstatements+=NotificationSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(notificationsubstatements+=NotificationSubstatement)*
		public Assignment getNotificationsubstatementsAssignment_2_1_1() { return cNotificationsubstatementsAssignment_2_1_1; }
		
		//NotificationSubstatement
		public RuleCall getNotificationsubstatementsNotificationSubstatementParserRuleCall_2_1_1_0() { return cNotificationsubstatementsNotificationSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class NotificationSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.NotificationSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfFeatureStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypedefStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGroupingStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDatadefStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cUnknownStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//NotificationSubstatement:
		//    (IfFeatureStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(IfFeatureStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_0() { return cIfFeatureStatementParserRuleCall_0; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_1() { return cStatusStatementParserRuleCall_1; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_2() { return cDescriptionStatementParserRuleCall_2; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_3() { return cReferenceStatementParserRuleCall_3; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_4() { return cTypedefStatementParserRuleCall_4; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_5() { return cGroupingStatementParserRuleCall_5; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_6() { return cDatadefStatementParserRuleCall_6; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_7() { return cUnknownStatementParserRuleCall_7; }
	}
	public class ContainerStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ContainerStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cContainersubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cContainersubstatementsContainerSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cContainersubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//ContainerStatement:
		//    'container' name=STRINGARG
		//    (';'
		//    |'{'(containersubstatements+=ContainerSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'container' name=STRINGARG
		//(';'
		//|'{'(containersubstatements+=ContainerSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{'(containersubstatements+=ContainerSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(containersubstatements+=ContainerSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(containersubstatements+=ContainerSubstatement)*
		public Assignment getContainersubstatementsAssignment_2_1_1() { return cContainersubstatementsAssignment_2_1_1; }
		
		//ContainerSubstatement
		public RuleCall getContainersubstatementsContainerSubstatementParserRuleCall_2_1_1_0() { return cContainersubstatementsContainerSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ContainerSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ContainerSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMustStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPresenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConfigStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStatusStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDescriptionStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReferenceStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypedefStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cGroupingStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDatadefStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUnknownStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//ContainerSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |MustStatement
		//    |PresenceStatement
		//    |ConfigStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|MustStatement
		//|PresenceStatement
		//|ConfigStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_2() { return cMustStatementParserRuleCall_2; }
		
		//PresenceStatement
		public RuleCall getPresenceStatementParserRuleCall_3() { return cPresenceStatementParserRuleCall_3; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_4() { return cConfigStatementParserRuleCall_4; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_5() { return cStatusStatementParserRuleCall_5; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_6() { return cDescriptionStatementParserRuleCall_6; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_7() { return cReferenceStatementParserRuleCall_7; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_8() { return cTypedefStatementParserRuleCall_8; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_9() { return cGroupingStatementParserRuleCall_9; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_10() { return cDatadefStatementParserRuleCall_10; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_11() { return cUnknownStatementParserRuleCall_11; }
	}
	public class ListStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ListStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cListsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cListsubstatementsListSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cListsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//ListStatement:
		//    'list' name=(STRINGARG | KEY_IDENTIFIER)
		//    (';'
		//    |'{'(listsubstatements+=ListSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'list' name=(STRINGARG | KEY_IDENTIFIER)
		//(';'
		//|'{'(listsubstatements+=ListSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'list'
		public Keyword getListKeyword_0() { return cListKeyword_0; }
		
		//name=(STRINGARG | KEY_IDENTIFIER)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRINGARG | KEY_IDENTIFIER)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0_0() { return cNameSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getNameKEY_IDENTIFIERParserRuleCall_1_0_1() { return cNameKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{'(listsubstatements+=ListSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(listsubstatements+=ListSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(listsubstatements+=ListSubstatement)*
		public Assignment getListsubstatementsAssignment_2_1_1() { return cListsubstatementsAssignment_2_1_1; }
		
		//ListSubstatement
		public RuleCall getListsubstatementsListSubstatementParserRuleCall_2_1_1_0() { return cListsubstatementsListSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ListSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ListSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMustStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cKeyStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUniqueStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConfigStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMinElementsStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMaxElementsStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOrderedbyStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStatusStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDescriptionStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cReferenceStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cTypedefStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cGroupingStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDatadefStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cUnknownStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		
		//ListSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |MustStatement
		//    |KeyStatement
		//    |UniqueStatement
		//    |ConfigStatement
		//    |MinElementsStatement
		//    |MaxElementsStatement
		//    |OrderedbyStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|MustStatement
		//|KeyStatement
		//|UniqueStatement
		//|ConfigStatement
		//|MinElementsStatement
		//|MaxElementsStatement
		//|OrderedbyStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_2() { return cMustStatementParserRuleCall_2; }
		
		//KeyStatement
		public RuleCall getKeyStatementParserRuleCall_3() { return cKeyStatementParserRuleCall_3; }
		
		//UniqueStatement
		public RuleCall getUniqueStatementParserRuleCall_4() { return cUniqueStatementParserRuleCall_4; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_5() { return cConfigStatementParserRuleCall_5; }
		
		//MinElementsStatement
		public RuleCall getMinElementsStatementParserRuleCall_6() { return cMinElementsStatementParserRuleCall_6; }
		
		//MaxElementsStatement
		public RuleCall getMaxElementsStatementParserRuleCall_7() { return cMaxElementsStatementParserRuleCall_7; }
		
		//OrderedbyStatement
		public RuleCall getOrderedbyStatementParserRuleCall_8() { return cOrderedbyStatementParserRuleCall_8; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_9() { return cStatusStatementParserRuleCall_9; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_10() { return cDescriptionStatementParserRuleCall_10; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_11() { return cReferenceStatementParserRuleCall_11; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_12() { return cTypedefStatementParserRuleCall_12; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_13() { return cGroupingStatementParserRuleCall_13; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_14() { return cDatadefStatementParserRuleCall_14; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_15() { return cUnknownStatementParserRuleCall_15; }
	}
	public class GroupingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.GroupingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cGroupingsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cGroupingsubstatementsGroupingSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cGroupingsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//GroupingStatement:
		//    'grouping' name=STRINGARG
		//    (';'
		//    |'{'(groupingsubstatements+=GroupingSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'grouping' name=STRINGARG
		//(';'
		//|'{'(groupingsubstatements+=GroupingSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'grouping'
		public Keyword getGroupingKeyword_0() { return cGroupingKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{'(groupingsubstatements+=GroupingSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(groupingsubstatements+=GroupingSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(groupingsubstatements+=GroupingSubstatement)*
		public Assignment getGroupingsubstatementsAssignment_2_1_1() { return cGroupingsubstatementsAssignment_2_1_1; }
		
		//GroupingSubstatement
		public RuleCall getGroupingsubstatementsGroupingSubstatementParserRuleCall_2_1_1_0() { return cGroupingsubstatementsGroupingSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class GroupingSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.GroupingSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatusStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypedefStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGroupingStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDatadefStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnknownStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//GroupingSubstatement:
		//    (StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |TypedefStatement
		//    |GroupingStatement
		//    |DatadefStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|TypedefStatement
		//|GroupingStatement
		//|DatadefStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_0() { return cStatusStatementParserRuleCall_0; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_1() { return cDescriptionStatementParserRuleCall_1; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_2() { return cReferenceStatementParserRuleCall_2; }
		
		//TypedefStatement
		public RuleCall getTypedefStatementParserRuleCall_3() { return cTypedefStatementParserRuleCall_3; }
		
		//GroupingStatement
		public RuleCall getGroupingStatementParserRuleCall_4() { return cGroupingStatementParserRuleCall_4; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_5() { return cDatadefStatementParserRuleCall_5; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_6() { return cUnknownStatementParserRuleCall_6; }
	}
	public class LeafStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.LeafStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeafKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLeafsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLeafsubstatementsLeafSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cLeafsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//LeafStatement:
		//    'leaf' name=(STRINGARG | KEY_IDENTIFIER)
		//    (';'
		//    |'{'(leafsubstatements+=LeafSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'leaf' name=(STRINGARG | KEY_IDENTIFIER)
		//(';'
		//|'{'(leafsubstatements+=LeafSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'leaf'
		public Keyword getLeafKeyword_0() { return cLeafKeyword_0; }
		
		//name=(STRINGARG | KEY_IDENTIFIER)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRINGARG | KEY_IDENTIFIER)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0_0() { return cNameSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getNameKEY_IDENTIFIERParserRuleCall_1_0_1() { return cNameKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{'(leafsubstatements+=LeafSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(leafsubstatements+=LeafSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(leafsubstatements+=LeafSubstatement)*
		public Assignment getLeafsubstatementsAssignment_2_1_1() { return cLeafsubstatementsAssignment_2_1_1; }
		
		//LeafSubstatement
		public RuleCall getLeafsubstatementsLeafSubstatementParserRuleCall_2_1_1_0() { return cLeafsubstatementsLeafSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class LeafSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.LeafSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnitsStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMustStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDefaultStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConfigStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMandatoryStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStatusStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDescriptionStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cReferenceStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUnknownStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//LeafSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |TypeStatement
		//    |UnitsStatement
		//    |MustStatement
		//    |DefaultStatement
		//    |ConfigStatement
		//    |MandatoryStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|TypeStatement
		//|UnitsStatement
		//|MustStatement
		//|DefaultStatement
		//|ConfigStatement
		//|MandatoryStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//TypeStatement
		public RuleCall getTypeStatementParserRuleCall_2() { return cTypeStatementParserRuleCall_2; }
		
		//UnitsStatement
		public RuleCall getUnitsStatementParserRuleCall_3() { return cUnitsStatementParserRuleCall_3; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_4() { return cMustStatementParserRuleCall_4; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_5() { return cDefaultStatementParserRuleCall_5; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_6() { return cConfigStatementParserRuleCall_6; }
		
		//MandatoryStatement
		public RuleCall getMandatoryStatementParserRuleCall_7() { return cMandatoryStatementParserRuleCall_7; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_8() { return cStatusStatementParserRuleCall_8; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_9() { return cDescriptionStatementParserRuleCall_9; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_10() { return cReferenceStatementParserRuleCall_10; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_11() { return cUnknownStatementParserRuleCall_11; }
	}
	public class LeafListStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.LeafListStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeafListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLeaflistsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLeaflistsubstatementsLeafListSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cLeaflistsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// The values in a leaf-list MUST be unique.
		////identifier-arg-str
		//LeafListStatement:
		//    'leaf-list' arg=STRINGARG
		//    (';'
		//    |'{'(leaflistsubstatements+=LeafListSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'leaf-list' arg=STRINGARG
		//(';'
		//|'{'(leaflistsubstatements+=LeafListSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'leaf-list'
		public Keyword getLeafListKeyword_0() { return cLeafListKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{'(leaflistsubstatements+=LeafListSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(leaflistsubstatements+=LeafListSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(leaflistsubstatements+=LeafListSubstatement)*
		public Assignment getLeaflistsubstatementsAssignment_2_1_1() { return cLeaflistsubstatementsAssignment_2_1_1; }
		
		//LeafListSubstatement
		public RuleCall getLeaflistsubstatementsLeafListSubstatementParserRuleCall_2_1_1_0() { return cLeaflistsubstatementsLeafListSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class LeafListSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.LeafListSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnitsStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMustStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDefaultStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConfigStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMinElementsStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cMaxElementsStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOrderedbyStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cStatusStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDescriptionStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cReferenceStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cUnknownStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//LeafListSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |TypeStatement
		//    |UnitsStatement
		//    |MustStatement
		//    |DefaultStatement
		//    |ConfigStatement
		//    |MinElementsStatement
		//    |MaxElementsStatement
		//    |OrderedbyStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|TypeStatement
		//|UnitsStatement
		//|MustStatement
		//|DefaultStatement
		//|ConfigStatement
		//|MinElementsStatement
		//|MaxElementsStatement
		//|OrderedbyStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//TypeStatement
		public RuleCall getTypeStatementParserRuleCall_2() { return cTypeStatementParserRuleCall_2; }
		
		//UnitsStatement
		public RuleCall getUnitsStatementParserRuleCall_3() { return cUnitsStatementParserRuleCall_3; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_4() { return cMustStatementParserRuleCall_4; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_5() { return cDefaultStatementParserRuleCall_5; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_6() { return cConfigStatementParserRuleCall_6; }
		
		//MinElementsStatement
		public RuleCall getMinElementsStatementParserRuleCall_7() { return cMinElementsStatementParserRuleCall_7; }
		
		//MaxElementsStatement
		public RuleCall getMaxElementsStatementParserRuleCall_8() { return cMaxElementsStatementParserRuleCall_8; }
		
		//OrderedbyStatement
		public RuleCall getOrderedbyStatementParserRuleCall_9() { return cOrderedbyStatementParserRuleCall_9; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_10() { return cStatusStatementParserRuleCall_10; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_11() { return cDescriptionStatementParserRuleCall_11; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_12() { return cReferenceStatementParserRuleCall_12; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_13() { return cUnknownStatementParserRuleCall_13; }
	}
	public class ChoiceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ChoiceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cChoicesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cChoicesubstatementsChoiceSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cChoicesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//ChoiceStatement:
		//    'choice' name=(STRINGARG | KEY_IDENTIFIER)
		//    (';'
		//    |'{'(choicesubstatements+=ChoiceSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'choice' name=(STRINGARG | KEY_IDENTIFIER)
		//(';'
		//|'{'(choicesubstatements+=ChoiceSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'choice'
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }
		
		//name=(STRINGARG | KEY_IDENTIFIER)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRINGARG | KEY_IDENTIFIER)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0_0() { return cNameSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getNameKEY_IDENTIFIERParserRuleCall_1_0_1() { return cNameKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{'(choicesubstatements+=ChoiceSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(choicesubstatements+=ChoiceSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(choicesubstatements+=ChoiceSubstatement)*
		public Assignment getChoicesubstatementsAssignment_2_1_1() { return cChoicesubstatementsAssignment_2_1_1; }
		
		//ChoiceSubstatement
		public RuleCall getChoicesubstatementsChoiceSubstatementParserRuleCall_2_1_1_0() { return cChoicesubstatementsChoiceSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ChoiceSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ChoiceSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefaultStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConfigStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMandatoryStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStatusStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDescriptionStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReferenceStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCaseStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cContainerStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLeafStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLeafListStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cListStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAnyxmlStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cUnknownStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//ChoiceSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |DefaultStatement
		//    |ConfigStatement
		//    |MandatoryStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |CaseStatement
		//    |ContainerStatement
		//    |LeafStatement
		//    |LeafListStatement
		//    |ListStatement
		//    |AnyxmlStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|DefaultStatement
		//|ConfigStatement
		//|MandatoryStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|CaseStatement
		//|ContainerStatement
		//|LeafStatement
		//|LeafListStatement
		//|ListStatement
		//|AnyxmlStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_2() { return cDefaultStatementParserRuleCall_2; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_3() { return cConfigStatementParserRuleCall_3; }
		
		//MandatoryStatement
		public RuleCall getMandatoryStatementParserRuleCall_4() { return cMandatoryStatementParserRuleCall_4; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_5() { return cStatusStatementParserRuleCall_5; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_6() { return cDescriptionStatementParserRuleCall_6; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_7() { return cReferenceStatementParserRuleCall_7; }
		
		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_8() { return cCaseStatementParserRuleCall_8; }
		
		//ContainerStatement
		public RuleCall getContainerStatementParserRuleCall_9() { return cContainerStatementParserRuleCall_9; }
		
		//LeafStatement
		public RuleCall getLeafStatementParserRuleCall_10() { return cLeafStatementParserRuleCall_10; }
		
		//LeafListStatement
		public RuleCall getLeafListStatementParserRuleCall_11() { return cLeafListStatementParserRuleCall_11; }
		
		//ListStatement
		public RuleCall getListStatementParserRuleCall_12() { return cListStatementParserRuleCall_12; }
		
		//AnyxmlStatement
		public RuleCall getAnyxmlStatementParserRuleCall_13() { return cAnyxmlStatementParserRuleCall_13; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_14() { return cUnknownStatementParserRuleCall_14; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCasesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCasesubstatementsCaseSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cCasesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////The case identifier MUST be unique within a choice.
		////identifier-arg-str
		//CaseStatement:
		//    'case' name=(STRINGARG | KEY_IDENTIFIER)
		//    (';'
		//    |'{'(casesubstatements+=CaseSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'case' name=(STRINGARG | KEY_IDENTIFIER)
		//(';'
		//|'{'(casesubstatements+=CaseSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//name=(STRINGARG | KEY_IDENTIFIER)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRINGARG | KEY_IDENTIFIER)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0_0() { return cNameSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getNameKEY_IDENTIFIERParserRuleCall_1_0_1() { return cNameKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{'(casesubstatements+=CaseSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(casesubstatements+=CaseSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(casesubstatements+=CaseSubstatement)*
		public Assignment getCasesubstatementsAssignment_2_1_1() { return cCasesubstatementsAssignment_2_1_1; }
		
		//CaseSubstatement
		public RuleCall getCasesubstatementsCaseSubstatementParserRuleCall_2_1_1_0() { return cCasesubstatementsCaseSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class CaseSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.CaseSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatusStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescriptionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReferenceStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDatadefStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnknownStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//CaseSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |DatadefStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|DatadefStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_2() { return cStatusStatementParserRuleCall_2; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_3() { return cDescriptionStatementParserRuleCall_3; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_4() { return cReferenceStatementParserRuleCall_4; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_5() { return cDatadefStatementParserRuleCall_5; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_6() { return cUnknownStatementParserRuleCall_6; }
	}
	public class AnyxmlStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.AnyxmlStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnyxmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgAlternatives_1_0 = (Alternatives)cArgAssignment_1.eContents().get(0);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cArgAlternatives_1_0.eContents().get(0);
		private final RuleCall cArgKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cArgAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAnyxmlsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAnyxmlsubstatementsAnyxmlSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cAnyxmlsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//AnyxmlStatement:
		//    'anyxml' arg=(STRINGARG    | KEY_IDENTIFIER)
		//    (';'
		//    |'{'(anyxmlsubstatements+=AnyxmlSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'anyxml' arg=(STRINGARG    | KEY_IDENTIFIER)
		//(';'
		//|'{'(anyxmlsubstatements+=AnyxmlSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'anyxml'
		public Keyword getAnyxmlKeyword_0() { return cAnyxmlKeyword_0; }
		
		//arg=(STRINGARG	| KEY_IDENTIFIER)
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//(STRINGARG	| KEY_IDENTIFIER)
		public Alternatives getArgAlternatives_1_0() { return cArgAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0_0() { return cArgSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getArgKEY_IDENTIFIERParserRuleCall_1_0_1() { return cArgKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{'(anyxmlsubstatements+=AnyxmlSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(anyxmlsubstatements+=AnyxmlSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(anyxmlsubstatements+=AnyxmlSubstatement)*
		public Assignment getAnyxmlsubstatementsAssignment_2_1_1() { return cAnyxmlsubstatementsAssignment_2_1_1; }
		
		//AnyxmlSubstatement
		public RuleCall getAnyxmlsubstatementsAnyxmlSubstatementParserRuleCall_2_1_1_0() { return cAnyxmlsubstatementsAnyxmlSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class AnyxmlSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.AnyxmlSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMustStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConfigStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMandatoryStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStatusStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDescriptionStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReferenceStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUnknownStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AnyxmlSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |MustStatement
		//    |ConfigStatement
		//    |MandatoryStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|MustStatement
		//|ConfigStatement
		//|MandatoryStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_2() { return cMustStatementParserRuleCall_2; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_3() { return cConfigStatementParserRuleCall_3; }
		
		//MandatoryStatement
		public RuleCall getMandatoryStatementParserRuleCall_4() { return cMandatoryStatementParserRuleCall_4; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_5() { return cStatusStatementParserRuleCall_5; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_6() { return cDescriptionStatementParserRuleCall_6; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_7() { return cReferenceStatementParserRuleCall_7; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_8() { return cUnknownStatementParserRuleCall_8; }
	}
	public class UsesStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.UsesStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPreAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPreSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cPreAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArgGroupingStatementCrossReference_2_0 = (CrossReference)cArgAssignment_2.eContents().get(0);
		private final RuleCall cArgGroupingStatementIDTerminalRuleCall_2_0_1 = (RuleCall)cArgGroupingStatementCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cUsessubstatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cUsessubstatementsUsesSubstatementParserRuleCall_3_1_1_0 = (RuleCall)cUsessubstatementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		////It takes one argument, which is the name of the grouping.
		////identifier-arg-str
		//UsesStatement:
		//    'uses' (pre=STRINGARG':')? arg=[GroupingStatement]
		//    (';'
		//    |'{'(usessubstatements+=UsesSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'uses' (pre=STRINGARG':')? arg=[GroupingStatement]
		//(';'
		//|'{'(usessubstatements+=UsesSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'uses'
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }
		
		//(pre=STRINGARG':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//pre=STRINGARG
		public Assignment getPreAssignment_1_0() { return cPreAssignment_1_0; }
		
		//STRINGARG
		public RuleCall getPreSTRINGARGParserRuleCall_1_0_0() { return cPreSTRINGARGParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//arg=[GroupingStatement]
		public Assignment getArgAssignment_2() { return cArgAssignment_2; }
		
		//[GroupingStatement]
		public CrossReference getArgGroupingStatementCrossReference_2_0() { return cArgGroupingStatementCrossReference_2_0; }
		
		//ID
		public RuleCall getArgGroupingStatementIDTerminalRuleCall_2_0_1() { return cArgGroupingStatementIDTerminalRuleCall_2_0_1; }
		
		//(';'
		//|'{'(usessubstatements+=UsesSubstatement)* '}')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0() { return cSemicolonKeyword_3_0; }
		
		//'{'(usessubstatements+=UsesSubstatement)* '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_0() { return cLeftCurlyBracketKeyword_3_1_0; }
		
		//(usessubstatements+=UsesSubstatement)*
		public Assignment getUsessubstatementsAssignment_3_1_1() { return cUsessubstatementsAssignment_3_1_1; }
		
		//UsesSubstatement
		public RuleCall getUsessubstatementsUsesSubstatementParserRuleCall_3_1_1_0() { return cUsessubstatementsUsesSubstatementParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_2() { return cRightCurlyBracketKeyword_3_1_2; }
	}
	public class UsesSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.UsesSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatusStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescriptionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReferenceStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRefineStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAugmentUsesStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cUnknownStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//UsesSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |RefineStatement
		//    |AugmentUsesStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|RefineStatement
		//|AugmentUsesStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_2() { return cStatusStatementParserRuleCall_2; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_3() { return cDescriptionStatementParserRuleCall_3; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_4() { return cReferenceStatementParserRuleCall_4; }
		
		//RefineStatement
		public RuleCall getRefineStatementParserRuleCall_5() { return cRefineStatementParserRuleCall_5; }
		
		//AugmentUsesStatement
		public RuleCall getAugmentUsesStatementParserRuleCall_6() { return cAugmentUsesStatementParserRuleCall_6; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_7() { return cUnknownStatementParserRuleCall_7; }
	}
	public class AugmentUsesStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.AugmentUsesStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAugmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAugmentsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAugmentsubstatementsAugmentSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cAugmentsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// uses-augment-arg = descendant-schema-nodeid
		//AugmentUsesStatement:
		//    'augment' arg=STRINGARG
		//    (';'
		//    |'{'(augmentsubstatements+=AugmentSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'augment' arg=STRINGARG
		//(';'
		//|'{'(augmentsubstatements+=AugmentSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'augment'
		public Keyword getAugmentKeyword_0() { return cAugmentKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{'(augmentsubstatements+=AugmentSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(augmentsubstatements+=AugmentSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(augmentsubstatements+=AugmentSubstatement)*
		public Assignment getAugmentsubstatementsAssignment_2_1_1() { return cAugmentsubstatementsAssignment_2_1_1; }
		
		//AugmentSubstatement
		public RuleCall getAugmentsubstatementsAugmentSubstatementParserRuleCall_2_1_1_0() { return cAugmentsubstatementsAugmentSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class AugmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.AugmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAugmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgAlternatives_1_0 = (Alternatives)cArgAssignment_1.eContents().get(0);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cArgAlternatives_1_0.eContents().get(0);
		private final RuleCall cArgSTRINGARG4ParserRuleCall_1_0_1 = (RuleCall)cArgAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAugmentsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAugmentsubstatementsAugmentSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cAugmentsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// augment-arg      = absolute-schema-nodeid
		//// The target node MUST be either a container, list, choice, case, input, output, or notification node.
		//AugmentStatement:
		//    'augment' arg=(STRINGARG |STRINGARG4)
		//    (';'
		//    |'{'(augmentsubstatements+=AugmentSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'augment' arg=(STRINGARG |STRINGARG4)
		//(';'
		//|'{'(augmentsubstatements+=AugmentSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'augment'
		public Keyword getAugmentKeyword_0() { return cAugmentKeyword_0; }
		
		//arg=(STRINGARG |STRINGARG4)
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//(STRINGARG |STRINGARG4)
		public Alternatives getArgAlternatives_1_0() { return cArgAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0_0() { return cArgSTRINGARGParserRuleCall_1_0_0; }
		
		//STRINGARG4
		public RuleCall getArgSTRINGARG4ParserRuleCall_1_0_1() { return cArgSTRINGARG4ParserRuleCall_1_0_1; }
		
		//(';'
		//|'{'(augmentsubstatements+=AugmentSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(augmentsubstatements+=AugmentSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(augmentsubstatements+=AugmentSubstatement)*
		public Assignment getAugmentsubstatementsAssignment_2_1_1() { return cAugmentsubstatementsAssignment_2_1_1; }
		
		//AugmentSubstatement
		public RuleCall getAugmentsubstatementsAugmentSubstatementParserRuleCall_2_1_1_0() { return cAugmentsubstatementsAugmentSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class AugmentSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.AugmentSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhenStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfFeatureStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatusStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDescriptionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReferenceStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDatadefStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCaseStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cUnknownStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//AugmentSubstatement:
		//    (WhenStatement
		//    |IfFeatureStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |DatadefStatement
		//    |CaseStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(WhenStatement
		//|IfFeatureStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|DatadefStatement
		//|CaseStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhenStatement
		public RuleCall getWhenStatementParserRuleCall_0() { return cWhenStatementParserRuleCall_0; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_1() { return cIfFeatureStatementParserRuleCall_1; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_2() { return cStatusStatementParserRuleCall_2; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_3() { return cDescriptionStatementParserRuleCall_3; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_4() { return cReferenceStatementParserRuleCall_4; }
		
		//DatadefStatement
		public RuleCall getDatadefStatementParserRuleCall_5() { return cDatadefStatementParserRuleCall_5; }
		
		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_6() { return cCaseStatementParserRuleCall_6; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_7() { return cUnknownStatementParserRuleCall_7; }
	}
	public class RefineStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RefineStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRefinesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRefinesubstatementsRefineSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cRefinesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// refine-arg = descendant-schema-nodeid
		//RefineStatement:
		//    'refine' arg=STRINGARG
		//    (';'
		//    |'{'(refinesubstatements+=RefineSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'refine' arg=STRINGARG
		//(';'
		//|'{'(refinesubstatements+=RefineSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'refine'
		public Keyword getRefineKeyword_0() { return cRefineKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{'(refinesubstatements+=RefineSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{'(refinesubstatements+=RefineSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(refinesubstatements+=RefineSubstatement)*
		public Assignment getRefinesubstatementsAssignment_2_1_1() { return cRefinesubstatementsAssignment_2_1_1; }
		
		//RefineSubstatement
		public RuleCall getRefinesubstatementsRefineSubstatementParserRuleCall_2_1_1_0() { return cRefinesubstatementsRefineSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class RefineSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RefineSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMustStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefaultStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPresenceStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConfigStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMandatoryStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMinElementsStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMaxElementsStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDescriptionStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cReferenceStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cUnknownStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//RefineSubstatement:
		//    (MustStatement
		//    |DefaultStatement
		//    |PresenceStatement
		//    |ConfigStatement
		//    |MandatoryStatement
		//    |MinElementsStatement
		//    |MaxElementsStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(MustStatement
		//|DefaultStatement
		//|PresenceStatement
		//|ConfigStatement
		//|MandatoryStatement
		//|MinElementsStatement
		//|MaxElementsStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_0() { return cMustStatementParserRuleCall_0; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_1() { return cDefaultStatementParserRuleCall_1; }
		
		//PresenceStatement
		public RuleCall getPresenceStatementParserRuleCall_2() { return cPresenceStatementParserRuleCall_2; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_3() { return cConfigStatementParserRuleCall_3; }
		
		//MandatoryStatement
		public RuleCall getMandatoryStatementParserRuleCall_4() { return cMandatoryStatementParserRuleCall_4; }
		
		//MinElementsStatement
		public RuleCall getMinElementsStatementParserRuleCall_5() { return cMinElementsStatementParserRuleCall_5; }
		
		//MaxElementsStatement
		public RuleCall getMaxElementsStatementParserRuleCall_6() { return cMaxElementsStatementParserRuleCall_6; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_7() { return cDescriptionStatementParserRuleCall_7; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_8() { return cReferenceStatementParserRuleCall_8; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_9() { return cUnknownStatementParserRuleCall_9; }
	}
	public class DeviationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DeviationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDeviationsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDeviationsubstatementsDeviationSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cDeviationsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////The argument is a string that identifies the node in the schema tree where a deviation from the module occurs.
		////deviation-arg = absolute-schema-nodeid
		//DeviationStatement:
		//    'deviation' arg=STRINGARG
		//    (';'
		//    |'{' (deviationsubstatements+=DeviationSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'deviation' arg=STRINGARG
		//(';'
		//|'{' (deviationsubstatements+=DeviationSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'deviation'
		public Keyword getDeviationKeyword_0() { return cDeviationKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (deviationsubstatements+=DeviationSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (deviationsubstatements+=DeviationSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(deviationsubstatements+=DeviationSubstatement)*
		public Assignment getDeviationsubstatementsAssignment_2_1_1() { return cDeviationsubstatementsAssignment_2_1_1; }
		
		//DeviationSubstatement
		public RuleCall getDeviationsubstatementsDeviationSubstatementParserRuleCall_2_1_1_0() { return cDeviationsubstatementsDeviationSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class DeviationSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DeviationSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeviateStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnknownStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DeviationSubstatement:
		//    (DeviateStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(DeviateStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeviateStatement
		public RuleCall getDeviateStatementParserRuleCall_0() { return cDeviateStatementParserRuleCall_0; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_1() { return cDescriptionStatementParserRuleCall_1; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_2() { return cReferenceStatementParserRuleCall_2; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_3() { return cUnknownStatementParserRuleCall_3; }
	}
	public class DeviateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DeviateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cDeviatesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDeviatesubstatementsDeviateSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cDeviatesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//DeviateStatement:
		//    'deviate' arg=STRINGARG
		//    (';'
		//    |'{' (deviatesubstatements+=DeviateSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'deviate' arg=STRINGARG
		//(';'
		//|'{' (deviatesubstatements+=DeviateSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'deviate'
		public Keyword getDeviateKeyword_0() { return cDeviateKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (deviatesubstatements+=DeviateSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (deviatesubstatements+=DeviateSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(deviatesubstatements+=DeviateSubstatement)*
		public Assignment getDeviatesubstatementsAssignment_2_1_1() { return cDeviatesubstatementsAssignment_2_1_1; }
		
		//DeviateSubstatement
		public RuleCall getDeviatesubstatementsDeviateSubstatementParserRuleCall_2_1_1_0() { return cDeviatesubstatementsDeviateSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class DeviateSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.DeviateSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUniqueStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMustStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitsStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefaultStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConfigStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMandatoryStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMinElementsStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMaxElementsStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUnknownStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//DeviateSubstatement:
		//    (UniqueStatement
		//    |MustStatement
		//    |UnitsStatement
		//    |DefaultStatement
		//    |ConfigStatement
		//    |MandatoryStatement
		//    |MinElementsStatement
		//    |MaxElementsStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(UniqueStatement
		//|MustStatement
		//|UnitsStatement
		//|DefaultStatement
		//|ConfigStatement
		//|MandatoryStatement
		//|MinElementsStatement
		//|MaxElementsStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UniqueStatement
		public RuleCall getUniqueStatementParserRuleCall_0() { return cUniqueStatementParserRuleCall_0; }
		
		//MustStatement
		public RuleCall getMustStatementParserRuleCall_1() { return cMustStatementParserRuleCall_1; }
		
		//UnitsStatement
		public RuleCall getUnitsStatementParserRuleCall_2() { return cUnitsStatementParserRuleCall_2; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_3() { return cDefaultStatementParserRuleCall_3; }
		
		//ConfigStatement
		public RuleCall getConfigStatementParserRuleCall_4() { return cConfigStatementParserRuleCall_4; }
		
		//MandatoryStatement
		public RuleCall getMandatoryStatementParserRuleCall_5() { return cMandatoryStatementParserRuleCall_5; }
		
		//MinElementsStatement
		public RuleCall getMinElementsStatementParserRuleCall_6() { return cMinElementsStatementParserRuleCall_6; }
		
		//MaxElementsStatement
		public RuleCall getMaxElementsStatementParserRuleCall_7() { return cMaxElementsStatementParserRuleCall_7; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_8() { return cUnknownStatementParserRuleCall_8; }
	}
	public class ExtensionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ExtensionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgAlternatives_1_0 = (Alternatives)cArgAssignment_1.eContents().get(0);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cArgAlternatives_1_0.eContents().get(0);
		private final RuleCall cArgKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cArgAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExtensionsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExtensionsubstatementsExtensionSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cExtensionsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//ExtensionStatement:
		//    'extension' arg=(STRINGARG | KEY_IDENTIFIER)
		//    (';'
		//    |'{' (extensionsubstatements+=ExtensionSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'extension' arg=(STRINGARG | KEY_IDENTIFIER)
		//(';'
		//|'{' (extensionsubstatements+=ExtensionSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }
		
		//arg=(STRINGARG | KEY_IDENTIFIER)
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//(STRINGARG | KEY_IDENTIFIER)
		public Alternatives getArgAlternatives_1_0() { return cArgAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0_0() { return cArgSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getArgKEY_IDENTIFIERParserRuleCall_1_0_1() { return cArgKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{' (extensionsubstatements+=ExtensionSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (extensionsubstatements+=ExtensionSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(extensionsubstatements+=ExtensionSubstatement)*
		public Assignment getExtensionsubstatementsAssignment_2_1_1() { return cExtensionsubstatementsAssignment_2_1_1; }
		
		//ExtensionSubstatement
		public RuleCall getExtensionsubstatementsExtensionSubstatementParserRuleCall_2_1_1_0() { return cExtensionsubstatementsExtensionSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ExtensionSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ExtensionSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgumentStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ExtensionSubstatement:
		//    (ArgumentStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(ArgumentStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArgumentStatement
		public RuleCall getArgumentStatementParserRuleCall_0() { return cArgumentStatementParserRuleCall_0; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_1() { return cStatusStatementParserRuleCall_1; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_2() { return cDescriptionStatementParserRuleCall_2; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_3() { return cReferenceStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class ArgumentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ArgumentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArgumentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cArgAlternatives_1_0 = (Alternatives)cArgAssignment_1.eContents().get(0);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cArgAlternatives_1_0.eContents().get(0);
		private final RuleCall cArgKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cArgAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsubstatementsArgumentSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//ArgumentStatement:
		//    'argument' arg=(STRINGARG|KEY_IDENTIFIER)
		//    (';'
		//    |'{' (argumentsubstatements+=ArgumentSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'argument' arg=(STRINGARG|KEY_IDENTIFIER)
		//(';'
		//|'{' (argumentsubstatements+=ArgumentSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'argument'
		public Keyword getArgumentKeyword_0() { return cArgumentKeyword_0; }
		
		//arg=(STRINGARG|KEY_IDENTIFIER)
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//(STRINGARG|KEY_IDENTIFIER)
		public Alternatives getArgAlternatives_1_0() { return cArgAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0_0() { return cArgSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getArgKEY_IDENTIFIERParserRuleCall_1_0_1() { return cArgKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{' (argumentsubstatements+=ArgumentSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (argumentsubstatements+=ArgumentSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(argumentsubstatements+=ArgumentSubstatement)*
		public Assignment getArgumentsubstatementsAssignment_2_1_1() { return cArgumentsubstatementsAssignment_2_1_1; }
		
		//ArgumentSubstatement
		public RuleCall getArgumentsubstatementsArgumentSubstatementParserRuleCall_2_1_1_0() { return cArgumentsubstatementsArgumentSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ArgumentSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ArgumentSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cYinElementStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnknownStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArgumentSubstatement:
		//    (YinElementStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(YinElementStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//YinElementStatement
		public RuleCall getYinElementStatementParserRuleCall_0() { return cYinElementStatementParserRuleCall_0; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_1() { return cUnknownStatementParserRuleCall_1; }
	}
	public class IdentityStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.IdentityStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdentitysubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdentitysubstatementsIdentitySubstatementParserRuleCall_2_1_1_0 = (RuleCall)cIdentitysubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//IdentityStatement:
		//    'identity' name=STRINGARG
		//    (';'
		//    |'{' (identitysubstatements+=IdentitySubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'identity' name=STRINGARG
		//(';'
		//|'{' (identitysubstatements+=IdentitySubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'identity'
		public Keyword getIdentityKeyword_0() { return cIdentityKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (identitysubstatements+=IdentitySubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (identitysubstatements+=IdentitySubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(identitysubstatements+=IdentitySubstatement)*
		public Assignment getIdentitysubstatementsAssignment_2_1_1() { return cIdentitysubstatementsAssignment_2_1_1; }
		
		//IdentitySubstatement
		public RuleCall getIdentitysubstatementsIdentitySubstatementParserRuleCall_2_1_1_0() { return cIdentitysubstatementsIdentitySubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class IdentitySubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.IdentitySubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBaseStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//IdentitySubstatement:
		//    (BaseStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(BaseStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BaseStatement
		public RuleCall getBaseStatementParserRuleCall_0() { return cBaseStatementParserRuleCall_0; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_1() { return cStatusStatementParserRuleCall_1; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_2() { return cDescriptionStatementParserRuleCall_2; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_3() { return cReferenceStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class FeatureStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.FeatureStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFeaturesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFeaturesubstatementsFeatureSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cFeaturesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//FeatureStatement:
		//    'feature' name=STRINGARG
		//    (';'
		//    |'{' (featuresubstatements+=FeatureSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'feature' name=STRINGARG
		//(';'
		//|'{' (featuresubstatements+=FeatureSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (featuresubstatements+=FeatureSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (featuresubstatements+=FeatureSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(featuresubstatements+=FeatureSubstatement)*
		public Assignment getFeaturesubstatementsAssignment_2_1_1() { return cFeaturesubstatementsAssignment_2_1_1; }
		
		//FeatureSubstatement
		public RuleCall getFeaturesubstatementsFeatureSubstatementParserRuleCall_2_1_1_0() { return cFeaturesubstatementsFeatureSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class FeatureSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.FeatureSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfFeatureStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatusStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReferenceStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FeatureSubstatement:
		//    (IfFeatureStatement
		//    |StatusStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(IfFeatureStatement
		//|StatusStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfFeatureStatement
		public RuleCall getIfFeatureStatementParserRuleCall_0() { return cIfFeatureStatementParserRuleCall_0; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_1() { return cStatusStatementParserRuleCall_1; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_2() { return cDescriptionStatementParserRuleCall_2; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_3() { return cReferenceStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class BelongsToStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.BelongsToStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBelongsToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBelongstosubstatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBelongstosubstatementBelongsToSubstatementParserRuleCall_3_0 = (RuleCall)cBelongstosubstatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////identifier-arg-str
		//BelongsToStatement:
		//    'belongs-to' name=STRINGARG
		//    '{' (belongstosubstatement+=BelongsToSubstatement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'belongs-to' name=STRINGARG
		//'{' (belongstosubstatement+=BelongsToSubstatement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'belongs-to'
		public Keyword getBelongsToKeyword_0() { return cBelongsToKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(belongstosubstatement+=BelongsToSubstatement)*
		public Assignment getBelongstosubstatementAssignment_3() { return cBelongstosubstatementAssignment_3; }
		
		//BelongsToSubstatement
		public RuleCall getBelongstosubstatementBelongsToSubstatementParserRuleCall_3_0() { return cBelongstosubstatementBelongsToSubstatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BelongsToSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.BelongsToSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnknownStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BelongsToSubstatement:
		//    (PrefixStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(PrefixStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrefixStatement
		public RuleCall getPrefixStatementParserRuleCall_0() { return cPrefixStatementParserRuleCall_0; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_1() { return cUnknownStatementParserRuleCall_1; }
	}
	public class TypedefStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.TypedefStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypedefsubstatemnetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypedefsubstatemnetTypedefSubstatementParserRuleCall_3_0 = (RuleCall)cTypedefsubstatemnetAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////identifier-ref-arg-str
		//TypedefStatement:
		//    'typedef' name=(STRINGARG|KEY_IDENTIFIER)
		//    '{' (typedefsubstatemnet+=TypedefSubstatement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef' name=(STRINGARG|KEY_IDENTIFIER)
		//'{' (typedefsubstatemnet+=TypedefSubstatement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//name=(STRINGARG|KEY_IDENTIFIER)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRINGARG|KEY_IDENTIFIER)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0_0() { return cNameSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getNameKEY_IDENTIFIERParserRuleCall_1_0_1() { return cNameKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(typedefsubstatemnet+=TypedefSubstatement)*
		public Assignment getTypedefsubstatemnetAssignment_3() { return cTypedefsubstatemnetAssignment_3; }
		
		//TypedefSubstatement
		public RuleCall getTypedefsubstatemnetTypedefSubstatementParserRuleCall_3_0() { return cTypedefsubstatemnetTypedefSubstatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TypedefSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.TypedefSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDescriptionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefaultStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStatusStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnitsStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnknownStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//TypedefSubstatement:
		//    (TypeStatement
		//    |DescriptionStatement
		//    |ReferenceStatement
		//    |DefaultStatement
		//    |StatusStatement
		//    |UnitsStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(TypeStatement
		//|DescriptionStatement
		//|ReferenceStatement
		//|DefaultStatement
		//|StatusStatement
		//|UnitsStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeStatement
		public RuleCall getTypeStatementParserRuleCall_0() { return cTypeStatementParserRuleCall_0; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_1() { return cDescriptionStatementParserRuleCall_1; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_2() { return cReferenceStatementParserRuleCall_2; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_3() { return cDefaultStatementParserRuleCall_3; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_4() { return cStatusStatementParserRuleCall_4; }
		
		//UnitsStatement
		public RuleCall getUnitsStatementParserRuleCall_5() { return cUnitsStatementParserRuleCall_5; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_6() { return cUnknownStatementParserRuleCall_6; }
	}
	public class TypeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.TypeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeBuiltInTypeParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Assignment cPreAssignment_1_1_0_0 = (Assignment)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cPreSTRINGARGParserRuleCall_1_1_0_0_0 = (RuleCall)cPreAssignment_1_1_0_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cImporttypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cImporttypeTypedefStatementCrossReference_1_1_1_0 = (CrossReference)cImporttypeAssignment_1_1_1.eContents().get(0);
		private final RuleCall cImporttypeTypedefStatementIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cImporttypeTypedefStatementCrossReference_1_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypesubstatementsTypeSubStatementParserRuleCall_2_1_1_0 = (RuleCall)cTypesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////The crossreference must be done in diferent blocks
		////identifier-ref-arg-str
		////[TypedefStatement]
		//TypeStatement:
		//    'type' (type=BuiltInType | (pre=STRINGARG':') ? importtype=[TypedefStatement])
		//    (';'
		//    |'{' (typesubstatements+=TypeSubStatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'type' (type=BuiltInType | (pre=STRINGARG':') ? importtype=[TypedefStatement])
		//(';'
		//|'{' (typesubstatements+=TypeSubStatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//(type=BuiltInType | (pre=STRINGARG':') ? importtype=[TypedefStatement])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//type=BuiltInType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//BuiltInType
		public RuleCall getTypeBuiltInTypeParserRuleCall_1_0_0() { return cTypeBuiltInTypeParserRuleCall_1_0_0; }
		
		//(pre=STRINGARG':') ? importtype=[TypedefStatement]
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(pre=STRINGARG':') ?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//pre=STRINGARG
		public Assignment getPreAssignment_1_1_0_0() { return cPreAssignment_1_1_0_0; }
		
		//STRINGARG
		public RuleCall getPreSTRINGARGParserRuleCall_1_1_0_0_0() { return cPreSTRINGARGParserRuleCall_1_1_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_0_1() { return cColonKeyword_1_1_0_1; }
		
		//importtype=[TypedefStatement]
		public Assignment getImporttypeAssignment_1_1_1() { return cImporttypeAssignment_1_1_1; }
		
		//[TypedefStatement]
		public CrossReference getImporttypeTypedefStatementCrossReference_1_1_1_0() { return cImporttypeTypedefStatementCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getImporttypeTypedefStatementIDTerminalRuleCall_1_1_1_0_1() { return cImporttypeTypedefStatementIDTerminalRuleCall_1_1_1_0_1; }
		
		//(';'
		//|'{' (typesubstatements+=TypeSubStatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (typesubstatements+=TypeSubStatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(typesubstatements+=TypeSubStatement)*
		public Assignment getTypesubstatementsAssignment_2_1_1() { return cTypesubstatementsAssignment_2_1_1; }
		
		//TypeSubStatement
		public RuleCall getTypesubstatementsTypeSubStatementParserRuleCall_2_1_1_0() { return cTypesubstatementsTypeSubStatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class TypeSubStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.TypeSubStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBitStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFractionDigitsStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefaultStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBaseStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLengthStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPathStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPatternStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRangeStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRequireInstanceStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTypeStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUnknownStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//TypeSubStatement:
		//    (BitStatement
		//    |FractionDigitsStatement
		//    |DefaultStatement
		//    |BaseStatement
		//    |EnumStatement
		//    |LengthStatement
		//    |PathStatement
		//    |PatternStatement
		//    |RangeStatement
		//    |RequireInstanceStatement
		//    |TypeStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(BitStatement
		//|FractionDigitsStatement
		//|DefaultStatement
		//|BaseStatement
		//|EnumStatement
		//|LengthStatement
		//|PathStatement
		//|PatternStatement
		//|RangeStatement
		//|RequireInstanceStatement
		//|TypeStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BitStatement
		public RuleCall getBitStatementParserRuleCall_0() { return cBitStatementParserRuleCall_0; }
		
		//FractionDigitsStatement
		public RuleCall getFractionDigitsStatementParserRuleCall_1() { return cFractionDigitsStatementParserRuleCall_1; }
		
		//DefaultStatement
		public RuleCall getDefaultStatementParserRuleCall_2() { return cDefaultStatementParserRuleCall_2; }
		
		//BaseStatement
		public RuleCall getBaseStatementParserRuleCall_3() { return cBaseStatementParserRuleCall_3; }
		
		//EnumStatement
		public RuleCall getEnumStatementParserRuleCall_4() { return cEnumStatementParserRuleCall_4; }
		
		//LengthStatement
		public RuleCall getLengthStatementParserRuleCall_5() { return cLengthStatementParserRuleCall_5; }
		
		//PathStatement
		public RuleCall getPathStatementParserRuleCall_6() { return cPathStatementParserRuleCall_6; }
		
		//PatternStatement
		public RuleCall getPatternStatementParserRuleCall_7() { return cPatternStatementParserRuleCall_7; }
		
		//RangeStatement
		public RuleCall getRangeStatementParserRuleCall_8() { return cRangeStatementParserRuleCall_8; }
		
		//RequireInstanceStatement
		public RuleCall getRequireInstanceStatementParserRuleCall_9() { return cRequireInstanceStatementParserRuleCall_9; }
		
		//TypeStatement
		public RuleCall getTypeStatementParserRuleCall_10() { return cTypeStatementParserRuleCall_10; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_11() { return cUnknownStatementParserRuleCall_11; }
	}
	public class BitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.BitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cBitsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBitsubstatementsBitSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cBitsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////The "bit" statement, which is a substatement to the "type" statement,MUST be present if the type is "bits".
		////All assigned names in a bits type MUST be unique.
		//BitStatement:
		//    'bit' name=STRINGARG
		//    (';'
		//    |'{' (bitsubstatements+=BitSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'bit' name=STRINGARG
		//(';'
		//|'{' (bitsubstatements+=BitSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'bit'
		public Keyword getBitKeyword_0() { return cBitKeyword_0; }
		
		//name=STRINGARG
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0() { return cNameSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (bitsubstatements+=BitSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (bitsubstatements+=BitSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(bitsubstatements+=BitSubstatement)*
		public Assignment getBitsubstatementsAssignment_2_1_1() { return cBitsubstatementsAssignment_2_1_1; }
		
		//BitSubstatement
		public RuleCall getBitsubstatementsBitSubstatementParserRuleCall_2_1_1_0() { return cBitsubstatementsBitSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class BitSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.BitSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatusStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPositionStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BitSubstatement:
		//    (DescriptionStatement
		//    |ReferenceStatement
		//    |StatusStatement
		//    |PositionStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(DescriptionStatement
		//|ReferenceStatement
		//|StatusStatement
		//|PositionStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_0() { return cDescriptionStatementParserRuleCall_0; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_1() { return cReferenceStatementParserRuleCall_1; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_2() { return cStatusStatementParserRuleCall_2; }
		
		//PositionStatement
		public RuleCall getPositionStatementParserRuleCall_3() { return cPositionStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class EnumStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.EnumStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameSTRINGARGParserRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameKEY_IDENTIFIERParserRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEnumsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEnumsubstatementsEnumSubstatementParserRuleCall_2_1_1_0 = (RuleCall)cEnumsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////The "enum" statement, which is a substatement to the "type" statement, MUST be present if the type is "enumeration".
		////The string MUST NOT be empty and MUST NOT have any leading or trailing whitespace characters.
		////All assigned names in an enumeration MUST be unique.
		////string
		//EnumStatement:
		//    'enum' name=(STRINGARG | KEY_IDENTIFIER)
		//    (';'
		//    |'{' (enumsubstatements+=EnumSubstatement)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=(STRINGARG | KEY_IDENTIFIER)
		//(';'
		//|'{' (enumsubstatements+=EnumSubstatement)* '}')
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=(STRINGARG | KEY_IDENTIFIER)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(STRINGARG | KEY_IDENTIFIER)
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//STRINGARG
		public RuleCall getNameSTRINGARGParserRuleCall_1_0_0() { return cNameSTRINGARGParserRuleCall_1_0_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getNameKEY_IDENTIFIERParserRuleCall_1_0_1() { return cNameKEY_IDENTIFIERParserRuleCall_1_0_1; }
		
		//(';'
		//|'{' (enumsubstatements+=EnumSubstatement)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (enumsubstatements+=EnumSubstatement)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(enumsubstatements+=EnumSubstatement)*
		public Assignment getEnumsubstatementsAssignment_2_1_1() { return cEnumsubstatementsAssignment_2_1_1; }
		
		//EnumSubstatement
		public RuleCall getEnumsubstatementsEnumSubstatementParserRuleCall_2_1_1_0() { return cEnumsubstatementsEnumSubstatementParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class EnumSubstatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.EnumSubstatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatusStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValueStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnknownStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//EnumSubstatement:
		//    (DescriptionStatement
		//    |ReferenceStatement
		//    |StatusStatement
		//    |ValueStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(DescriptionStatement
		//|ReferenceStatement
		//|StatusStatement
		//|ValueStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_0() { return cDescriptionStatementParserRuleCall_0; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_1() { return cReferenceStatementParserRuleCall_1; }
		
		//StatusStatement
		public RuleCall getStatusStatementParserRuleCall_2() { return cStatusStatementParserRuleCall_2; }
		
		//ValueStatement
		public RuleCall getValueStatementParserRuleCall_3() { return cValueStatementParserRuleCall_3; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_4() { return cUnknownStatementParserRuleCall_4; }
	}
	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGARGParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cImportsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cImportsubstatementsImportSubstatementsParserRuleCall_2_1_1_0 = (RuleCall)cImportsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//ImportStatement:
		//    'import' importURI=STRINGARG
		//    (';'
		//    |'{' (importsubstatements+=ImportSubstatements)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRINGARG
		//(';'
		//|'{' (importsubstatements+=ImportSubstatements)* '}')
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRINGARG
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRINGARG
		public RuleCall getImportURISTRINGARGParserRuleCall_1_0() { return cImportURISTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (importsubstatements+=ImportSubstatements)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (importsubstatements+=ImportSubstatements)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(importsubstatements+=ImportSubstatements)*
		public Assignment getImportsubstatementsAssignment_2_1_1() { return cImportsubstatementsAssignment_2_1_1; }
		
		//ImportSubstatements
		public RuleCall getImportsubstatementsImportSubstatementsParserRuleCall_2_1_1_0() { return cImportsubstatementsImportSubstatementsParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class ImportSubstatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ImportSubstatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrefixStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRevisionDateStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnknownStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ImportSubstatements:
		//    (PrefixStatement
		//    |RevisionDateStatement
		//    |TypeStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(PrefixStatement
		//|RevisionDateStatement
		//|TypeStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrefixStatement
		public RuleCall getPrefixStatementParserRuleCall_0() { return cPrefixStatementParserRuleCall_0; }
		
		//RevisionDateStatement
		public RuleCall getRevisionDateStatementParserRuleCall_1() { return cRevisionDateStatementParserRuleCall_1; }
		
		//TypeStatement
		public RuleCall getTypeStatementParserRuleCall_2() { return cTypeStatementParserRuleCall_2; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_3() { return cUnknownStatementParserRuleCall_3; }
	}
	public class IncludeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.IncludeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGARGParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIncludesubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIncludesubstatementsIncludeSubstatementsParserRuleCall_2_1_1_0 = (RuleCall)cIncludesubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////identifier-arg-str
		//IncludeStatement:
		//    'include' importURI=STRINGARG
		//    (';'
		//    |'{' (includesubstatements+=IncludeSubstatements)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'include' importURI=STRINGARG
		//(';'
		//|'{' (includesubstatements+=IncludeSubstatements)* '}')
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//importURI=STRINGARG
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRINGARG
		public RuleCall getImportURISTRINGARGParserRuleCall_1_0() { return cImportURISTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (includesubstatements+=IncludeSubstatements)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (includesubstatements+=IncludeSubstatements)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(includesubstatements+=IncludeSubstatements)*
		public Assignment getIncludesubstatementsAssignment_2_1_1() { return cIncludesubstatementsAssignment_2_1_1; }
		
		//IncludeSubstatements
		public RuleCall getIncludesubstatementsIncludeSubstatementsParserRuleCall_2_1_1_0() { return cIncludesubstatementsIncludeSubstatementsParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class IncludeSubstatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.IncludeSubstatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRevisionDateStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnknownStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IncludeSubstatements:
		//    (RevisionDateStatement
		//    |TypeStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(RevisionDateStatement
		//|TypeStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RevisionDateStatement
		public RuleCall getRevisionDateStatementParserRuleCall_0() { return cRevisionDateStatementParserRuleCall_0; }
		
		//TypeStatement
		public RuleCall getTypeStatementParserRuleCall_1() { return cTypeStatementParserRuleCall_1; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_2() { return cUnknownStatementParserRuleCall_2; }
	}
	public class WhenStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.WhenStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgSTRINGARGParserRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cWhensubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cWhensubstatementsWhenSubstatementsParserRuleCall_2_1_1_0 = (RuleCall)cWhensubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		////string
		//WhenStatement:
		//    'when' arg=STRINGARG
		//    (';'
		//    |'{' (whensubstatements+=WhenSubstatements)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'when' arg=STRINGARG
		//(';'
		//|'{' (whensubstatements+=WhenSubstatements)* '}')
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//arg=STRINGARG
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }
		
		//STRINGARG
		public RuleCall getArgSTRINGARGParserRuleCall_1_0() { return cArgSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (whensubstatements+=WhenSubstatements)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (whensubstatements+=WhenSubstatements)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(whensubstatements+=WhenSubstatements)*
		public Assignment getWhensubstatementsAssignment_2_1_1() { return cWhensubstatementsAssignment_2_1_1; }
		
		//WhenSubstatements
		public RuleCall getWhensubstatementsWhenSubstatementsParserRuleCall_2_1_1_0() { return cWhensubstatementsWhenSubstatementsParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class WhenSubstatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.WhenSubstatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnknownStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WhenSubstatements:
		//    (DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_0() { return cDescriptionStatementParserRuleCall_0; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_1() { return cReferenceStatementParserRuleCall_1; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_2() { return cUnknownStatementParserRuleCall_2; }
	}
	public class RevisionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RevisionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRevisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateSTRINGARGParserRuleCall_1_0 = (RuleCall)cDateAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cRevisionsubstatementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cRevisionsubstatementsRevisionSubstatementsParserRuleCall_2_1_1_0 = (RuleCall)cRevisionsubstatementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//RevisionStatement:
		//    'revision' date=STRINGARG
		//    (';'
		//    |'{' (revisionsubstatements+=RevisionSubstatements)* '}');
		@Override public ParserRule getRule() { return rule; }
		
		//'revision' date=STRINGARG
		//(';'
		//|'{' (revisionsubstatements+=RevisionSubstatements)* '}')
		public Group getGroup() { return cGroup; }
		
		//'revision'
		public Keyword getRevisionKeyword_0() { return cRevisionKeyword_0; }
		
		//date=STRINGARG
		public Assignment getDateAssignment_1() { return cDateAssignment_1; }
		
		//STRINGARG
		public RuleCall getDateSTRINGARGParserRuleCall_1_0() { return cDateSTRINGARGParserRuleCall_1_0; }
		
		//(';'
		//|'{' (revisionsubstatements+=RevisionSubstatements)* '}')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//'{' (revisionsubstatements+=RevisionSubstatements)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(revisionsubstatements+=RevisionSubstatements)*
		public Assignment getRevisionsubstatementsAssignment_2_1_1() { return cRevisionsubstatementsAssignment_2_1_1; }
		
		//RevisionSubstatements
		public RuleCall getRevisionsubstatementsRevisionSubstatementsParserRuleCall_2_1_1_0() { return cRevisionsubstatementsRevisionSubstatementsParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class RevisionSubstatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.RevisionSubstatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDescriptionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnknownStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RevisionSubstatements:
		//    (DescriptionStatement
		//    |ReferenceStatement
		//    |UnknownStatement)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(DescriptionStatement
		//|ReferenceStatement
		//|UnknownStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DescriptionStatement
		public RuleCall getDescriptionStatementParserRuleCall_0() { return cDescriptionStatementParserRuleCall_0; }
		
		//ReferenceStatement
		public RuleCall getReferenceStatementParserRuleCall_1() { return cReferenceStatementParserRuleCall_1; }
		
		//UnknownStatement
		public RuleCall getUnknownStatementParserRuleCall_2() { return cUnknownStatementParserRuleCall_2; }
	}
	public class BuiltInTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.BuiltInType");
		private final Assignment cBtypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBtypeAlternatives_0 = (Alternatives)cBtypeAssignment.eContents().get(0);
		private final Keyword cBtypeBinaryKeyword_0_0 = (Keyword)cBtypeAlternatives_0.eContents().get(0);
		private final Keyword cBtypeBitsKeyword_0_1 = (Keyword)cBtypeAlternatives_0.eContents().get(1);
		private final Keyword cBtypeBooleanKeyword_0_2 = (Keyword)cBtypeAlternatives_0.eContents().get(2);
		private final Keyword cBtypeDecimal64Keyword_0_3 = (Keyword)cBtypeAlternatives_0.eContents().get(3);
		private final Keyword cBtypeEmptyKeyword_0_4 = (Keyword)cBtypeAlternatives_0.eContents().get(4);
		private final Keyword cBtypeEnumerationKeyword_0_5 = (Keyword)cBtypeAlternatives_0.eContents().get(5);
		private final Keyword cBtypeIdentityrefKeyword_0_6 = (Keyword)cBtypeAlternatives_0.eContents().get(6);
		private final Keyword cBtypeInstanceIdentifierKeyword_0_7 = (Keyword)cBtypeAlternatives_0.eContents().get(7);
		private final Keyword cBtypeInt8Keyword_0_8 = (Keyword)cBtypeAlternatives_0.eContents().get(8);
		private final Keyword cBtypeInt16Keyword_0_9 = (Keyword)cBtypeAlternatives_0.eContents().get(9);
		private final Keyword cBtypeInt32Keyword_0_10 = (Keyword)cBtypeAlternatives_0.eContents().get(10);
		private final Keyword cBtypeInt64Keyword_0_11 = (Keyword)cBtypeAlternatives_0.eContents().get(11);
		private final Keyword cBtypeLeafrefKeyword_0_12 = (Keyword)cBtypeAlternatives_0.eContents().get(12);
		private final Keyword cBtypeStringKeyword_0_13 = (Keyword)cBtypeAlternatives_0.eContents().get(13);
		private final Keyword cBtypeUint8Keyword_0_14 = (Keyword)cBtypeAlternatives_0.eContents().get(14);
		private final Keyword cBtypeUint16Keyword_0_15 = (Keyword)cBtypeAlternatives_0.eContents().get(15);
		private final Keyword cBtypeUint32Keyword_0_16 = (Keyword)cBtypeAlternatives_0.eContents().get(16);
		private final Keyword cBtypeUint64Keyword_0_17 = (Keyword)cBtypeAlternatives_0.eContents().get(17);
		private final Keyword cBtypeUnionKeyword_0_18 = (Keyword)cBtypeAlternatives_0.eContents().get(18);
		
		//BuiltInType:
		//    (btype = (
		//      'binary'
		//    | 'bits'
		//    | 'boolean'
		//    | 'decimal64'
		//    | 'empty'
		//    | 'enumeration'
		//    | 'identityref'
		//    | 'instance-identifier'
		//    | 'int8'
		//    | 'int16'
		//    | 'int32'
		//    | 'int64'
		//    | 'leafref'
		//    | 'string'
		//    | 'uint8'
		//    | 'uint16'
		//    | 'uint32'
		//    | 'uint64'
		//    | 'union'))
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(btype = (
		//  'binary'
		//| 'bits'
		//| 'boolean'
		//| 'decimal64'
		//| 'empty'
		//| 'enumeration'
		//| 'identityref'
		//| 'instance-identifier'
		//| 'int8'
		//| 'int16'
		//| 'int32'
		//| 'int64'
		//| 'leafref'
		//| 'string'
		//| 'uint8'
		//| 'uint16'
		//| 'uint32'
		//| 'uint64'
		//| 'union'))
		public Assignment getBtypeAssignment() { return cBtypeAssignment; }
		
		//(
		//     'binary'
		//   | 'bits'
		//   | 'boolean'
		//   | 'decimal64'
		//   | 'empty'
		//   | 'enumeration'
		//   | 'identityref'
		//   | 'instance-identifier'
		//   | 'int8'
		//   | 'int16'
		//   | 'int32'
		//   | 'int64'
		//   | 'leafref'
		//   | 'string'
		//   | 'uint8'
		//   | 'uint16'
		//   | 'uint32'
		//   | 'uint64'
		//   | 'union')
		public Alternatives getBtypeAlternatives_0() { return cBtypeAlternatives_0; }
		
		//'binary'
		public Keyword getBtypeBinaryKeyword_0_0() { return cBtypeBinaryKeyword_0_0; }
		
		//'bits'
		public Keyword getBtypeBitsKeyword_0_1() { return cBtypeBitsKeyword_0_1; }
		
		//'boolean'
		public Keyword getBtypeBooleanKeyword_0_2() { return cBtypeBooleanKeyword_0_2; }
		
		//'decimal64'
		public Keyword getBtypeDecimal64Keyword_0_3() { return cBtypeDecimal64Keyword_0_3; }
		
		//'empty'
		public Keyword getBtypeEmptyKeyword_0_4() { return cBtypeEmptyKeyword_0_4; }
		
		//'enumeration'
		public Keyword getBtypeEnumerationKeyword_0_5() { return cBtypeEnumerationKeyword_0_5; }
		
		//'identityref'
		public Keyword getBtypeIdentityrefKeyword_0_6() { return cBtypeIdentityrefKeyword_0_6; }
		
		//'instance-identifier'
		public Keyword getBtypeInstanceIdentifierKeyword_0_7() { return cBtypeInstanceIdentifierKeyword_0_7; }
		
		//'int8'
		public Keyword getBtypeInt8Keyword_0_8() { return cBtypeInt8Keyword_0_8; }
		
		//'int16'
		public Keyword getBtypeInt16Keyword_0_9() { return cBtypeInt16Keyword_0_9; }
		
		//'int32'
		public Keyword getBtypeInt32Keyword_0_10() { return cBtypeInt32Keyword_0_10; }
		
		//'int64'
		public Keyword getBtypeInt64Keyword_0_11() { return cBtypeInt64Keyword_0_11; }
		
		//'leafref'
		public Keyword getBtypeLeafrefKeyword_0_12() { return cBtypeLeafrefKeyword_0_12; }
		
		//'string'
		public Keyword getBtypeStringKeyword_0_13() { return cBtypeStringKeyword_0_13; }
		
		//'uint8'
		public Keyword getBtypeUint8Keyword_0_14() { return cBtypeUint8Keyword_0_14; }
		
		//'uint16'
		public Keyword getBtypeUint16Keyword_0_15() { return cBtypeUint16Keyword_0_15; }
		
		//'uint32'
		public Keyword getBtypeUint32Keyword_0_16() { return cBtypeUint32Keyword_0_16; }
		
		//'uint64'
		public Keyword getBtypeUint64Keyword_0_17() { return cBtypeUint64Keyword_0_17; }
		
		//'union'
		public Keyword getBtypeUnionKeyword_0_18() { return cBtypeUnionKeyword_0_18; }
	}
	public class CUSTOMSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.CUSTOMSTRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//CUSTOMSTRING:
		//    (STRING ('+' STRING)*);
		@Override public ParserRule getRule() { return rule; }
		
		//(STRING ('+' STRING)*)
		public Group getGroup() { return cGroup; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//('+' STRING)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}
	public class STRINGARGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.STRINGARG");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCUSTOMSTRINGParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cDefaultKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//STRINGARG:
		//    ID | CUSTOMSTRING | 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | CUSTOMSTRING | 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//CUSTOMSTRING
		public RuleCall getCUSTOMSTRINGParserRuleCall_1() { return cCUSTOMSTRINGParserRuleCall_1; }
		
		//'default'
		public Keyword getDefaultKeyword_2() { return cDefaultKeyword_2; }
	}
	public class STRINGARG2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.STRINGARG2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//STRINGARG2:
		//    ID':'ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID':'ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class STRINGARG3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.STRINGARG3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//STRINGARG3:
		//    ((ID + '|')*) + ID;
		@Override public ParserRule getRule() { return rule; }
		
		//((ID + '|')*) + ID
		public Group getGroup() { return cGroup; }
		
		//((ID + '|')*) +
		public Group getGroup_0() { return cGroup_0; }
		
		//ID +
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_1() { return cVerticalLineKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class STRINGARG4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.STRINGARG4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cKEY_IDENTIFIERParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//STRINGARG4:
		//    ((ID+':'+ID)+(':'+ID)*|(':'+KEY_IDENTIFIER)*)    ;
		@Override public ParserRule getRule() { return rule; }
		
		//((ID+':'+ID)+(':'+ID)*|(':'+KEY_IDENTIFIER)*)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(ID+':'+ID)+(':'+ID)*
		public Group getGroup_0() { return cGroup_0; }
		
		//(ID+':'+ID)+
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ID+
		public RuleCall getIDTerminalRuleCall_0_0_0() { return cIDTerminalRuleCall_0_0_0; }
		
		//':'+
		public Keyword getColonKeyword_0_0_1() { return cColonKeyword_0_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0_2() { return cIDTerminalRuleCall_0_0_2; }
		
		//(':'+ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//':'+
		public Keyword getColonKeyword_0_1_0() { return cColonKeyword_0_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }
		
		//(':'+KEY_IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//':'+
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//KEY_IDENTIFIER
		public RuleCall getKEY_IDENTIFIERParserRuleCall_1_1() { return cKEY_IDENTIFIERParserRuleCall_1_1; }
	}
	public class KEY_IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.KEY_IDENTIFIER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStatusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNamespaceKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNotificationKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPathKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDescriptionKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cStringKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cErrorMessageKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cConfigKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRangeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRevisionKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTypeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cBooleanKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPrefixKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cRangeKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cKeyKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cFractionDigitsKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		
		//KEY_IDENTIFIER:
		//    =>'value' | =>'status' | =>'namespace' | =>'notification' |=> 'path' |=> 'description' |=> 'string' | =>'error-message' |
		//     =>'config' |=>'range' | =>'revision' | =>'type' | =>'boolean' | =>'prefix' | =>'range' | => 'key' | =>'fraction-digits';
		@Override public ParserRule getRule() { return rule; }
		
		//=>'value' | =>'status' | =>'namespace' | =>'notification' |=> 'path' |=> 'description' |=> 'string' | =>'error-message' |
		// =>'config' |=>'range' | =>'revision' | =>'type' | =>'boolean' | =>'prefix' | =>'range' | => 'key' | =>'fraction-digits'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=>'value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//=>'status'
		public Keyword getStatusKeyword_1() { return cStatusKeyword_1; }
		
		//=>'namespace'
		public Keyword getNamespaceKeyword_2() { return cNamespaceKeyword_2; }
		
		//=>'notification'
		public Keyword getNotificationKeyword_3() { return cNotificationKeyword_3; }
		
		//=> 'path'
		public Keyword getPathKeyword_4() { return cPathKeyword_4; }
		
		//=> 'description'
		public Keyword getDescriptionKeyword_5() { return cDescriptionKeyword_5; }
		
		//=> 'string'
		public Keyword getStringKeyword_6() { return cStringKeyword_6; }
		
		//=>'error-message'
		public Keyword getErrorMessageKeyword_7() { return cErrorMessageKeyword_7; }
		
		//=>'config'
		public Keyword getConfigKeyword_8() { return cConfigKeyword_8; }
		
		//=>'range'
		public Keyword getRangeKeyword_9() { return cRangeKeyword_9; }
		
		//=>'revision'
		public Keyword getRevisionKeyword_10() { return cRevisionKeyword_10; }
		
		//=>'type'
		public Keyword getTypeKeyword_11() { return cTypeKeyword_11; }
		
		//=>'boolean'
		public Keyword getBooleanKeyword_12() { return cBooleanKeyword_12; }
		
		//=>'prefix'
		public Keyword getPrefixKeyword_13() { return cPrefixKeyword_13; }
		
		//=>'range'
		public Keyword getRangeKeyword_14() { return cRangeKeyword_14; }
		
		//=> 'key'
		public Keyword getKeyKeyword_15() { return cKeyKeyword_15; }
		
		//=>'fraction-digits'
		public Keyword getFractionDigitsKeyword_16() { return cFractionDigitsKeyword_16; }
	}
	
	
	private final YangFileElements pYangFile;
	private final ModuleElements pModule;
	private final ModuleStatementElements pModuleStatement;
	private final SubModuleElements pSubModule;
	private final SubmoduleStatementElements pSubmoduleStatement;
	private final DatadefStatementElements pDatadefStatement;
	private final YangVersionStatementElements pYangVersionStatement;
	private final OrganizationStatementElements pOrganizationStatement;
	private final ContactStatementElements pContactStatement;
	private final DescriptionStatementElements pDescriptionStatement;
	private final ReferenceStatementElements pReferenceStatement;
	private final NamespaceStatementElements pNamespaceStatement;
	private final PrefixStatementElements pPrefixStatement;
	private final RequireInstanceStatementElements pRequireInstanceStatement;
	private final PathStatementElements pPathStatement;
	private final PositionStatementElements pPositionStatement;
	private final ValueStatementElements pValueStatement;
	private final ErrorAppTagStatementElements pErrorAppTagStatement;
	private final ErrorMessageStatementElements pErrorMessageStatement;
	private final UnitsStatementElements pUnitsStatement;
	private final DefaultStatementElements pDefaultStatement;
	private final StatusStatementElements pStatusStatement;
	private final RevisionDateStatementElements pRevisionDateStatement;
	private final UniqueStatementElements pUniqueStatement;
	private final KeyStatementElements pKeyStatement;
	private final OrderedbyStatementElements pOrderedbyStatement;
	private final PresenceStatementElements pPresenceStatement;
	private final MandatoryStatementElements pMandatoryStatement;
	private final ConfigStatementElements pConfigStatement;
	private final FractionDigitsStatementElements pFractionDigitsStatement;
	private final IfFeatureStatementElements pIfFeatureStatement;
	private final BaseStatementElements pBaseStatement;
	private final YinElementStatementElements pYinElementStatement;
	private final MinElementsStatementElements pMinElementsStatement;
	private final MaxElementsStatementElements pMaxElementsStatement;
	private final UnknownStatementElements pUnknownStatement;
	private final UnknownSubstatementsElements pUnknownSubstatements;
	private final RangeStatementElements pRangeStatement;
	private final PatternStatementElements pPatternStatement;
	private final LengthStatementElements pLengthStatement;
	private final MustStatementElements pMustStatement;
	private final MultipleSubstatementElements pMultipleSubstatement;
	private final RpcStatementElements pRpcStatement;
	private final RpcSubstatementElements pRpcSubstatement;
	private final InputStatementElements pInputStatement;
	private final InputSubstatementElements pInputSubstatement;
	private final OutputStatementElements pOutputStatement;
	private final OutputSubstatementElements pOutputSubstatement;
	private final NotificationStatementElements pNotificationStatement;
	private final NotificationSubstatementElements pNotificationSubstatement;
	private final ContainerStatementElements pContainerStatement;
	private final ContainerSubstatementElements pContainerSubstatement;
	private final ListStatementElements pListStatement;
	private final ListSubstatementElements pListSubstatement;
	private final GroupingStatementElements pGroupingStatement;
	private final GroupingSubstatementElements pGroupingSubstatement;
	private final LeafStatementElements pLeafStatement;
	private final LeafSubstatementElements pLeafSubstatement;
	private final LeafListStatementElements pLeafListStatement;
	private final LeafListSubstatementElements pLeafListSubstatement;
	private final ChoiceStatementElements pChoiceStatement;
	private final ChoiceSubstatementElements pChoiceSubstatement;
	private final CaseStatementElements pCaseStatement;
	private final CaseSubstatementElements pCaseSubstatement;
	private final AnyxmlStatementElements pAnyxmlStatement;
	private final AnyxmlSubstatementElements pAnyxmlSubstatement;
	private final UsesStatementElements pUsesStatement;
	private final UsesSubstatementElements pUsesSubstatement;
	private final AugmentUsesStatementElements pAugmentUsesStatement;
	private final AugmentStatementElements pAugmentStatement;
	private final AugmentSubstatementElements pAugmentSubstatement;
	private final RefineStatementElements pRefineStatement;
	private final RefineSubstatementElements pRefineSubstatement;
	private final DeviationStatementElements pDeviationStatement;
	private final DeviationSubstatementElements pDeviationSubstatement;
	private final DeviateStatementElements pDeviateStatement;
	private final DeviateSubstatementElements pDeviateSubstatement;
	private final ExtensionStatementElements pExtensionStatement;
	private final ExtensionSubstatementElements pExtensionSubstatement;
	private final ArgumentStatementElements pArgumentStatement;
	private final ArgumentSubstatementElements pArgumentSubstatement;
	private final IdentityStatementElements pIdentityStatement;
	private final IdentitySubstatementElements pIdentitySubstatement;
	private final FeatureStatementElements pFeatureStatement;
	private final FeatureSubstatementElements pFeatureSubstatement;
	private final BelongsToStatementElements pBelongsToStatement;
	private final BelongsToSubstatementElements pBelongsToSubstatement;
	private final TypedefStatementElements pTypedefStatement;
	private final TypedefSubstatementElements pTypedefSubstatement;
	private final TypeStatementElements pTypeStatement;
	private final TypeSubStatementElements pTypeSubStatement;
	private final BitStatementElements pBitStatement;
	private final BitSubstatementElements pBitSubstatement;
	private final EnumStatementElements pEnumStatement;
	private final EnumSubstatementElements pEnumSubstatement;
	private final ImportStatementElements pImportStatement;
	private final ImportSubstatementsElements pImportSubstatements;
	private final IncludeStatementElements pIncludeStatement;
	private final IncludeSubstatementsElements pIncludeSubstatements;
	private final WhenStatementElements pWhenStatement;
	private final WhenSubstatementsElements pWhenSubstatements;
	private final RevisionStatementElements pRevisionStatement;
	private final RevisionSubstatementsElements pRevisionSubstatements;
	private final BuiltInTypeElements pBuiltInType;
	private final CUSTOMSTRINGElements pCUSTOMSTRING;
	private final STRINGARGElements pSTRINGARG;
	private final STRINGARG2Elements pSTRINGARG2;
	private final STRINGARG3Elements pSTRINGARG3;
	private final STRINGARG4Elements pSTRINGARG4;
	private final KEY_IDENTIFIERElements pKEY_IDENTIFIER;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public YangGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pYangFile = new YangFileElements();
		this.pModule = new ModuleElements();
		this.pModuleStatement = new ModuleStatementElements();
		this.pSubModule = new SubModuleElements();
		this.pSubmoduleStatement = new SubmoduleStatementElements();
		this.pDatadefStatement = new DatadefStatementElements();
		this.pYangVersionStatement = new YangVersionStatementElements();
		this.pOrganizationStatement = new OrganizationStatementElements();
		this.pContactStatement = new ContactStatementElements();
		this.pDescriptionStatement = new DescriptionStatementElements();
		this.pReferenceStatement = new ReferenceStatementElements();
		this.pNamespaceStatement = new NamespaceStatementElements();
		this.pPrefixStatement = new PrefixStatementElements();
		this.pRequireInstanceStatement = new RequireInstanceStatementElements();
		this.pPathStatement = new PathStatementElements();
		this.pPositionStatement = new PositionStatementElements();
		this.pValueStatement = new ValueStatementElements();
		this.pErrorAppTagStatement = new ErrorAppTagStatementElements();
		this.pErrorMessageStatement = new ErrorMessageStatementElements();
		this.pUnitsStatement = new UnitsStatementElements();
		this.pDefaultStatement = new DefaultStatementElements();
		this.pStatusStatement = new StatusStatementElements();
		this.pRevisionDateStatement = new RevisionDateStatementElements();
		this.pUniqueStatement = new UniqueStatementElements();
		this.pKeyStatement = new KeyStatementElements();
		this.pOrderedbyStatement = new OrderedbyStatementElements();
		this.pPresenceStatement = new PresenceStatementElements();
		this.pMandatoryStatement = new MandatoryStatementElements();
		this.pConfigStatement = new ConfigStatementElements();
		this.pFractionDigitsStatement = new FractionDigitsStatementElements();
		this.pIfFeatureStatement = new IfFeatureStatementElements();
		this.pBaseStatement = new BaseStatementElements();
		this.pYinElementStatement = new YinElementStatementElements();
		this.pMinElementsStatement = new MinElementsStatementElements();
		this.pMaxElementsStatement = new MaxElementsStatementElements();
		this.pUnknownStatement = new UnknownStatementElements();
		this.pUnknownSubstatements = new UnknownSubstatementsElements();
		this.pRangeStatement = new RangeStatementElements();
		this.pPatternStatement = new PatternStatementElements();
		this.pLengthStatement = new LengthStatementElements();
		this.pMustStatement = new MustStatementElements();
		this.pMultipleSubstatement = new MultipleSubstatementElements();
		this.pRpcStatement = new RpcStatementElements();
		this.pRpcSubstatement = new RpcSubstatementElements();
		this.pInputStatement = new InputStatementElements();
		this.pInputSubstatement = new InputSubstatementElements();
		this.pOutputStatement = new OutputStatementElements();
		this.pOutputSubstatement = new OutputSubstatementElements();
		this.pNotificationStatement = new NotificationStatementElements();
		this.pNotificationSubstatement = new NotificationSubstatementElements();
		this.pContainerStatement = new ContainerStatementElements();
		this.pContainerSubstatement = new ContainerSubstatementElements();
		this.pListStatement = new ListStatementElements();
		this.pListSubstatement = new ListSubstatementElements();
		this.pGroupingStatement = new GroupingStatementElements();
		this.pGroupingSubstatement = new GroupingSubstatementElements();
		this.pLeafStatement = new LeafStatementElements();
		this.pLeafSubstatement = new LeafSubstatementElements();
		this.pLeafListStatement = new LeafListStatementElements();
		this.pLeafListSubstatement = new LeafListSubstatementElements();
		this.pChoiceStatement = new ChoiceStatementElements();
		this.pChoiceSubstatement = new ChoiceSubstatementElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseSubstatement = new CaseSubstatementElements();
		this.pAnyxmlStatement = new AnyxmlStatementElements();
		this.pAnyxmlSubstatement = new AnyxmlSubstatementElements();
		this.pUsesStatement = new UsesStatementElements();
		this.pUsesSubstatement = new UsesSubstatementElements();
		this.pAugmentUsesStatement = new AugmentUsesStatementElements();
		this.pAugmentStatement = new AugmentStatementElements();
		this.pAugmentSubstatement = new AugmentSubstatementElements();
		this.pRefineStatement = new RefineStatementElements();
		this.pRefineSubstatement = new RefineSubstatementElements();
		this.pDeviationStatement = new DeviationStatementElements();
		this.pDeviationSubstatement = new DeviationSubstatementElements();
		this.pDeviateStatement = new DeviateStatementElements();
		this.pDeviateSubstatement = new DeviateSubstatementElements();
		this.pExtensionStatement = new ExtensionStatementElements();
		this.pExtensionSubstatement = new ExtensionSubstatementElements();
		this.pArgumentStatement = new ArgumentStatementElements();
		this.pArgumentSubstatement = new ArgumentSubstatementElements();
		this.pIdentityStatement = new IdentityStatementElements();
		this.pIdentitySubstatement = new IdentitySubstatementElements();
		this.pFeatureStatement = new FeatureStatementElements();
		this.pFeatureSubstatement = new FeatureSubstatementElements();
		this.pBelongsToStatement = new BelongsToStatementElements();
		this.pBelongsToSubstatement = new BelongsToSubstatementElements();
		this.pTypedefStatement = new TypedefStatementElements();
		this.pTypedefSubstatement = new TypedefSubstatementElements();
		this.pTypeStatement = new TypeStatementElements();
		this.pTypeSubStatement = new TypeSubStatementElements();
		this.pBitStatement = new BitStatementElements();
		this.pBitSubstatement = new BitSubstatementElements();
		this.pEnumStatement = new EnumStatementElements();
		this.pEnumSubstatement = new EnumSubstatementElements();
		this.pImportStatement = new ImportStatementElements();
		this.pImportSubstatements = new ImportSubstatementsElements();
		this.pIncludeStatement = new IncludeStatementElements();
		this.pIncludeSubstatements = new IncludeSubstatementsElements();
		this.pWhenStatement = new WhenStatementElements();
		this.pWhenSubstatements = new WhenSubstatementsElements();
		this.pRevisionStatement = new RevisionStatementElements();
		this.pRevisionSubstatements = new RevisionSubstatementsElements();
		this.pBuiltInType = new BuiltInTypeElements();
		this.pCUSTOMSTRING = new CUSTOMSTRINGElements();
		this.pSTRINGARG = new STRINGARGElements();
		this.pSTRINGARG2 = new STRINGARG2Elements();
		this.pSTRINGARG3 = new STRINGARG3Elements();
		this.pSTRINGARG4 = new STRINGARG4Elements();
		this.pKEY_IDENTIFIER = new KEY_IDENTIFIERElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "yang.manager.Yang.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("yang.manager.Yang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//YangFile:
	//    Module | SubModule;
	public YangFileElements getYangFileAccess() {
		return pYangFile;
	}
	
	public ParserRule getYangFileRule() {
		return getYangFileAccess().getRule();
	}
	
	//Module:
	//    'module' name=STRINGARG
	//    '{'
	//        (statements+=ModuleStatement)*
	//    '}';
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//ModuleStatement:
	//    (NamespaceStatement
	//    |PrefixStatement
	//    |YangVersionStatement
	//    |OrganizationStatement
	//    |ContactStatement
	//    |DescriptionStatement
	//    |ImportStatement
	//    |IncludeStatement
	//    |RevisionStatement
	//    |ExtensionStatement
	//    |FeatureStatement
	//    |IdentityStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |AugmentStatement
	//    |RpcStatement
	//    |NotificationStatement
	//    |DeviationStatement
	//    |UnknownStatement)
	//    ;
	public ModuleStatementElements getModuleStatementAccess() {
		return pModuleStatement;
	}
	
	public ParserRule getModuleStatementRule() {
		return getModuleStatementAccess().getRule();
	}
	
	//SubModule:
	//    'submodule' name=STRINGARG
	//    '{'
	//        (statements+=SubmoduleStatement)*
	//    '}';
	public SubModuleElements getSubModuleAccess() {
		return pSubModule;
	}
	
	public ParserRule getSubModuleRule() {
		return getSubModuleAccess().getRule();
	}
	
	//SubmoduleStatement:
	//    (YangVersionStatement
	//    |OrganizationStatement
	//    |ContactStatement
	//    |DescriptionStatement
	//    |ImportStatement
	//    |IncludeStatement
	//    |RevisionStatement
	//    |BelongsToStatement
	//    |ExtensionStatement
	//    |FeatureStatement
	//    |IdentityStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |AugmentStatement
	//    |RpcStatement
	//    |NotificationStatement
	//    |DeviationStatement
	//    |UnknownStatement)
	//    ;
	public SubmoduleStatementElements getSubmoduleStatementAccess() {
		return pSubmoduleStatement;
	}
	
	public ParserRule getSubmoduleStatementRule() {
		return getSubmoduleStatementAccess().getRule();
	}
	
	//DatadefStatement:
	//    (ContainerStatement
	//    |LeafStatement
	//    |LeafListStatement
	//    |ListStatement
	//    |ChoiceStatement
	//    |AnyxmlStatement
	//    |UsesStatement)
	//    ;
	public DatadefStatementElements getDatadefStatementAccess() {
		return pDatadefStatement;
	}
	
	public ParserRule getDatadefStatementRule() {
		return getDatadefStatementAccess().getRule();
	}
	
	////WITHOUT SUBSTATEMENS
	////yang-version-arg    = "1"
	//YangVersionStatement:
	//    'yang-version' version=STRINGARG
	//    (';'
	//    |'{' (yangversionunknownstatements+=UnknownStatement)* '}');
	public YangVersionStatementElements getYangVersionStatementAccess() {
		return pYangVersionStatement;
	}
	
	public ParserRule getYangVersionStatementRule() {
		return getYangVersionStatementAccess().getRule();
	}
	
	////string
	//OrganizationStatement:
	//    'organization' organization=STRINGARG
	//    (';'
	//    |'{' (organizationunknownstatements+=UnknownStatement)* '}');
	public OrganizationStatementElements getOrganizationStatementAccess() {
		return pOrganizationStatement;
	}
	
	public ParserRule getOrganizationStatementRule() {
		return getOrganizationStatementAccess().getRule();
	}
	
	////string
	//ContactStatement:
	//    'contact' contact=STRINGARG
	//    (';'
	//    |'{' (contactunknownstatements+=UnknownStatement)* '}');
	public ContactStatementElements getContactStatementAccess() {
		return pContactStatement;
	}
	
	public ParserRule getContactStatementRule() {
		return getContactStatementAccess().getRule();
	}
	
	////string
	//DescriptionStatement:
	//    'description' description=STRINGARG
	//    (';'
	//    |'{' (descriptionunknownstatements+=UnknownStatement)* '}');
	public DescriptionStatementElements getDescriptionStatementAccess() {
		return pDescriptionStatement;
	}
	
	public ParserRule getDescriptionStatementRule() {
		return getDescriptionStatementAccess().getRule();
	}
	
	////string
	//ReferenceStatement:
	//    'reference' reference=STRINGARG
	//    (';'
	//    |'{' (referenceunknownstatements+=UnknownStatement)* '}');
	public ReferenceStatementElements getReferenceStatementAccess() {
		return pReferenceStatement;
	}
	
	public ParserRule getReferenceStatementRule() {
		return getReferenceStatementAccess().getRule();
	}
	
	////uri-str
	//NamespaceStatement:
	//    'namespace' uri=(STRINGARG | STRINGARG4)
	//    (';'
	//    |'{' (namespaceunknownstatements+=UnknownStatement)* '}');
	public NamespaceStatementElements getNamespaceStatementAccess() {
		return pNamespaceStatement;
	}
	
	public ParserRule getNamespaceStatementRule() {
		return getNamespaceStatementAccess().getRule();
	}
	
	////identifier-arg-str
	//PrefixStatement:
	//    'prefix' name=STRINGARG
	//    (';'
	//    |'{' (prefixunknownstatements+=UnknownStatement)* '}');
	public PrefixStatementElements getPrefixStatementAccess() {
		return pPrefixStatement;
	}
	
	public ParserRule getPrefixStatementRule() {
		return getPrefixStatementAccess().getRule();
	}
	
	////true or false
	//RequireInstanceStatement:
	//    'require-instance' require=STRINGARG
	//    (';'
	//    |'{' (requireunknownstatements+=UnknownStatement)* '}');
	public RequireInstanceStatementElements getRequireInstanceStatementAccess() {
		return pRequireInstanceStatement;
	}
	
	public ParserRule getRequireInstanceStatementRule() {
		return getRequireInstanceStatementAccess().getRule();
	}
	
	//// MUST be present if the type is "leafref"
	//// path-arg=absolute-path / relative-path
	//PathStatement:
	//    'path' path=STRINGARG
	//    (';'
	//    |'{' (pathunknownstatements+=UnknownStatement)* '}');
	public PathStatementElements getPathStatementAccess() {
		return pPathStatement;
	}
	
	public ParserRule getPathStatementRule() {
		return getPathStatementAccess().getRule();
	}
	
	////arg MUST BE non-negative-integer-value
	//PositionStatement:
	//    'position' intarg=STRINGARG
	//    (';'
	//    |'{' (positionunknownstatements+=UnknownStatement)* '}');
	public PositionStatementElements getPositionStatementAccess() {
		return pPositionStatement;
	}
	
	public ParserRule getPositionStatementRule() {
		return getPositionStatementAccess().getRule();
	}
	
	////arg is integer and This integer value MUST be unique within the enumeration type.
	//ValueStatement:
	//    'value' intarg=STRINGARG
	//    (';'
	//    |'{' (valueunknownstatements+=UnknownStatement)* '}');
	public ValueStatementElements getValueStatementAccess() {
		return pValueStatement;
	}
	
	public ParserRule getValueStatementRule() {
		return getValueStatementAccess().getRule();
	}
	
	////string
	//ErrorAppTagStatement:
	//    'error-app-tag' arg=STRINGARG
	//    (';'
	//    |'{' (erroraunknownstatements+=UnknownStatement)* '}');
	public ErrorAppTagStatementElements getErrorAppTagStatementAccess() {
		return pErrorAppTagStatement;
	}
	
	public ParserRule getErrorAppTagStatementRule() {
		return getErrorAppTagStatementAccess().getRule();
	}
	
	////string
	//ErrorMessageStatement:
	//    'error-message' arg=STRINGARG
	//    (';'
	//    |'{' (errormunknownstatements+=UnknownStatement)* '}');
	public ErrorMessageStatementElements getErrorMessageStatementAccess() {
		return pErrorMessageStatement;
	}
	
	public ParserRule getErrorMessageStatementRule() {
		return getErrorMessageStatementAccess().getRule();
	}
	
	////string
	//UnitsStatement:
	//    'units' arg=STRINGARG
	//    (';'
	//    |'{' (unitsunknownstatements+=UnknownStatement)* '}');
	public UnitsStatementElements getUnitsStatementAccess() {
		return pUnitsStatement;
	}
	
	public ParserRule getUnitsStatementRule() {
		return getUnitsStatementAccess().getRule();
	}
	
	////Could have crossrefence to a type name
	////string
	//DefaultStatement:
	//    'default' (arg=STRINGARG)
	//    (';'
	//    |'{' (defaultunknownstatements+=UnknownStatement)* '}');
	public DefaultStatementElements getDefaultStatementAccess() {
		return pDefaultStatement;
	}
	
	public ParserRule getDefaultStatementRule() {
		return getDefaultStatementAccess().getRule();
	}
	
	////If a definition is "current", it MUST NOT reference a "deprecated" or "obsolete" definition within the same module.
	////If a definition is "deprecated", it MUST NOT reference an "obsolete" definition within the same module.
	//StatusStatement:
	//    'status' status=STRINGARG
	//    (';'
	//    |'{' (statusunknownstatements+=UnknownStatement)* '}');
	public StatusStatementElements getStatusStatementAccess() {
		return pStatusStatement;
	}
	
	public ParserRule getStatusStatementRule() {
		return getStatusStatementAccess().getRule();
	}
	
	//RevisionDateStatement:
	//    'revision-date' date=STRINGARG
	//    (';'
	//    |'{' (revisiondateunknownstatements+=UnknownStatement)* '}')
	//    ;
	public RevisionDateStatementElements getRevisionDateStatementAccess() {
		return pRevisionDateStatement;
	}
	
	public ParserRule getRevisionDateStatementRule() {
		return getRevisionDateStatementAccess().getRule();
	}
	
	//// unique-arg = descendant-schema-nodeid *(sep descendant-schema-nodeid)
	//UniqueStatement:
	//    'unique' arg=STRINGARG
	//    (';'
	//    |'{' (uniqueunknownstatements+=UnknownStatement)* '}')
	//    ;
	public UniqueStatementElements getUniqueStatementAccess() {
		return pUniqueStatement;
	}
	
	public ParserRule getUniqueStatementRule() {
		return getUniqueStatementAccess().getRule();
	}
	
	//// key-arg = node-identifier *(sep node-identifier)
	//KeyStatement:
	//    'key' arg=(STRINGARG|STRINGARG2)
	//    (';'
	//    |'{' (keyunknownstatements+=UnknownStatement)* '}')
	//    ;
	public KeyStatementElements getKeyStatementAccess() {
		return pKeyStatement;
	}
	
	public ParserRule getKeyStatementRule() {
		return getKeyStatementAccess().getRule();
	}
	
	//OrderedbyStatement:
	//    'ordered-by' arg=STRINGARG
	//    (';'
	//    |'{' (orderedbyunknownstatements+=UnknownStatement)* '}')
	//    ;
	public OrderedbyStatementElements getOrderedbyStatementAccess() {
		return pOrderedbyStatement;
	}
	
	public ParserRule getOrderedbyStatementRule() {
		return getOrderedbyStatementAccess().getRule();
	}
	
	////string
	//PresenceStatement:
	//    'presence' arg=STRINGARG
	//    (';'
	//    |'{' (presenceunknownstatements+=UnknownStatement)* '}')
	//    ;
	public PresenceStatementElements getPresenceStatementAccess() {
		return pPresenceStatement;
	}
	
	public ParserRule getPresenceStatementRule() {
		return getPresenceStatementAccess().getRule();
	}
	
	//MandatoryStatement:
	//    'mandatory' boolarg=STRINGARG
	//    (';'
	//    |'{' (mandatoryunknownstatements+=UnknownStatement)* '}')
	//    ;
	public MandatoryStatementElements getMandatoryStatementAccess() {
		return pMandatoryStatement;
	}
	
	public ParserRule getMandatoryStatementRule() {
		return getMandatoryStatementAccess().getRule();
	}
	
	//ConfigStatement:
	//    'config' boolarg=STRINGARG
	//    (';'
	//    |'{' (configunknownstatements+=UnknownStatement)* '}')
	//    ;
	public ConfigStatementElements getConfigStatementAccess() {
		return pConfigStatement;
	}
	
	public ParserRule getConfigStatementRule() {
		return getConfigStatementAccess().getRule();
	}
	
	////MUST be present if the type is "decimal64". It takes as an argument an integer between 1 and 18, inclusively.
	//FractionDigitsStatement:
	//    'fraction-digits' arg=STRINGARG
	//    (';'
	//    |'{' (fractiondigitsunknownstatements+=UnknownStatement)* '}')
	//    ;
	public FractionDigitsStatementElements getFractionDigitsStatementAccess() {
		return pFractionDigitsStatement;
	}
	
	public ParserRule getFractionDigitsStatementRule() {
		return getFractionDigitsStatementAccess().getRule();
	}
	
	////The argument is the name of a feature, as defined by a "feature" statement
	////identifier-ref-arg-str
	//IfFeatureStatement:
	//    'if-feature' (pref=STRINGARG ':')? ident=[FeatureStatement]
	//    (';'
	//    |'{' (iffeatureunknownstatements+=UnknownStatement)* '}')
	//    ;
	public IfFeatureStatementElements getIfFeatureStatementAccess() {
		return pIfFeatureStatement;
	}
	
	public ParserRule getIfFeatureStatementRule() {
		return getIfFeatureStatementAccess().getRule();
	}
	
	//// The "base" statement MUST be present if the type is "identityref".
	//// The argument is the name of an identity, as defined by an "identity" statement.
	////identifier-ref-arg-str
	//BaseStatement:
	//    'base' base=(STRINGARG |STRINGARG2) //(pref=STRINGARG':')?//ident=[IdentityStatement]
	//    (';'
	//    |'{' (baseunknownstatements+=UnknownStatement)* '}');
	public BaseStatementElements getBaseStatementAccess() {
		return pBaseStatement;
	}
	
	public ParserRule getBaseStatementRule() {
		return getBaseStatementAccess().getRule();
	}
	
	//YinElementStatement:
	//    'yin-element' boolarg=STRINGARG
	//    (';'
	//    |'{' (yinelementunknownstatements+=UnknownStatement)* '}')
	//    ;
	public YinElementStatementElements getYinElementStatementAccess() {
		return pYinElementStatement;
	}
	
	public ParserRule getYinElementStatementRule() {
		return getYinElementStatementAccess().getRule();
	}
	
	////Takes as an argument a non-negative integer
	//MinElementsStatement:
	//    'min-elements' arg=STRINGARG
	//    (';'
	//    |'{' (minelementsunknownstatements+=UnknownStatement)* '}')
	//    ;
	public MinElementsStatementElements getMinElementsStatementAccess() {
		return pMinElementsStatement;
	}
	
	public ParserRule getMinElementsStatementRule() {
		return getMinElementsStatementAccess().getRule();
	}
	
	////Takes as an argument a positive integer or the string "unbounded"
	//MaxElementsStatement:
	//    'max-elements' arg=STRINGARG
	//    (';'
	//    |'{' (maxelementsunknownstatements+=UnknownStatement)* '}')
	//    ;
	public MaxElementsStatementElements getMaxElementsStatementAccess() {
		return pMaxElementsStatement;
	}
	
	public ParserRule getMaxElementsStatementRule() {
		return getMaxElementsStatementAccess().getRule();
	}
	
	//UnknownStatement:
	//    pref=STRINGARG':' namestat=STRINGARG (argument=STRINGARG)?
	//    (';'
	//    |'{' (unknownsubstatements+=UnknownSubstatements)* '}');
	public UnknownStatementElements getUnknownStatementAccess() {
		return pUnknownStatement;
	}
	
	public ParserRule getUnknownStatementRule() {
		return getUnknownStatementAccess().getRule();
	}
	
	//UnknownSubstatements:
	//    (pref=STRINGARG':')? namestat=STRINGARG (argument=STRINGARG)?
	//    (';'
	//    |'{' (unknownsubstatements+=UnknownSubstatements)* '}');
	public UnknownSubstatementsElements getUnknownSubstatementsAccess() {
		return pUnknownSubstatements;
	}
	
	public ParserRule getUnknownSubstatementsRule() {
		return getUnknownSubstatementsAccess().getRule();
	}
	
	////WITH SUBSTATEMENTS
	////It is used to restrict integer and decimal built-in types, or types derived from those.
	////The range expression syntax is formally defined by the rule "range-arg".
	//RangeStatement:
	//    'range' range=(STRINGARG | STRINGARG3)
	//    (';'
	//    |'{' (rangesubstatements+=MultipleSubstatement)* '}');
	public RangeStatementElements getRangeStatementAccess() {
		return pRangeStatement;
	}
	
	public ParserRule getRangeStatementRule() {
		return getRangeStatementAccess().getRule();
	}
	
	////It is used to restrict the built-in type "string", or types derived from "string", to values that match the pattern.
	////string-arg
	//PatternStatement:
	//    'pattern' name=STRINGARG
	//    (';'
	//    |'{' (patternsubstatements+=MultipleSubstatement)* '}');
	public PatternStatementElements getPatternStatementAccess() {
		return pPatternStatement;
	}
	
	public ParserRule getPatternStatementRule() {
		return getPatternStatementAccess().getRule();
	}
	
	////It is used to restrict the built-in type "string", or types derived from "string".
	////The length expression syntax is formally defined by the rule "length-arg".
	//LengthStatement:
	//    'length' length=STRINGARG
	//    (';'
	//    |'{' (lengthsubstatements+=MultipleSubstatement)* '}');
	public LengthStatementElements getLengthStatementAccess() {
		return pLengthStatement;
	}
	
	public ParserRule getLengthStatementRule() {
		return getLengthStatementAccess().getRule();
	}
	
	////string
	//MustStatement:
	//    'must' arg=STRINGARG
	//    (';'
	//    |'{' (mustsubstatements+=MultipleSubstatement)* '}')
	//    ;
	public MustStatementElements getMustStatementAccess() {
		return pMustStatement;
	}
	
	public ParserRule getMustStatementRule() {
		return getMustStatementAccess().getRule();
	}
	
	//MultipleSubstatement:
	//    (DescriptionStatement
	//    |ReferenceStatement
	//    |ErrorAppTagStatement
	//    |ErrorMessageStatement
	//    |UnknownStatement)
	//    ;
	public MultipleSubstatementElements getMultipleSubstatementAccess() {
		return pMultipleSubstatement;
	}
	
	public ParserRule getMultipleSubstatementRule() {
		return getMultipleSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//RpcStatement:
	//    'rpc' name=STRINGARG
	//    '{'(rpcsubstatements+=RpcSubstatement)* '}'
	//    ;
	public RpcStatementElements getRpcStatementAccess() {
		return pRpcStatement;
	}
	
	public ParserRule getRpcStatementRule() {
		return getRpcStatementAccess().getRule();
	}
	
	//RpcSubstatement:
	//    (IfFeatureStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |InputStatement
	//    |OutputStatement
	//    |UnknownStatement)
	//    ;
	public RpcSubstatementElements getRpcSubstatementAccess() {
		return pRpcSubstatement;
	}
	
	public ParserRule getRpcSubstatementRule() {
		return getRpcSubstatementAccess().getRule();
	}
	
	//InputStatement:
	//    'input'
	//    '{'(inputsubstatements+=InputSubstatement)+ '}'
	//    ;
	public InputStatementElements getInputStatementAccess() {
		return pInputStatement;
	}
	
	public ParserRule getInputStatementRule() {
		return getInputStatementAccess().getRule();
	}
	
	//InputSubstatement:
	//    (TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |(=>UsesStatement)
	//    |UnknownStatement)
	//    ;
	public InputSubstatementElements getInputSubstatementAccess() {
		return pInputSubstatement;
	}
	
	public ParserRule getInputSubstatementRule() {
		return getInputSubstatementAccess().getRule();
	}
	
	//OutputStatement:
	//    'output'
	//    '{'(outputsubstatements+=OutputSubstatement)+ '}'
	//    ;
	public OutputStatementElements getOutputStatementAccess() {
		return pOutputStatement;
	}
	
	public ParserRule getOutputStatementRule() {
		return getOutputStatementAccess().getRule();
	}
	
	//OutputSubstatement:
	//    (TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |(=>UsesStatement)
	//    |UnknownStatement)
	//    ;
	public OutputSubstatementElements getOutputSubstatementAccess() {
		return pOutputSubstatement;
	}
	
	public ParserRule getOutputSubstatementRule() {
		return getOutputSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//NotificationStatement:
	//    'notification' name=STRINGARG
	//    (';'
	//    |'{'(notificationsubstatements+=NotificationSubstatement)* '}');
	public NotificationStatementElements getNotificationStatementAccess() {
		return pNotificationStatement;
	}
	
	public ParserRule getNotificationStatementRule() {
		return getNotificationStatementAccess().getRule();
	}
	
	//NotificationSubstatement:
	//    (IfFeatureStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |UnknownStatement)
	//    ;
	public NotificationSubstatementElements getNotificationSubstatementAccess() {
		return pNotificationSubstatement;
	}
	
	public ParserRule getNotificationSubstatementRule() {
		return getNotificationSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//ContainerStatement:
	//    'container' name=STRINGARG
	//    (';'
	//    |'{'(containersubstatements+=ContainerSubstatement)* '}');
	public ContainerStatementElements getContainerStatementAccess() {
		return pContainerStatement;
	}
	
	public ParserRule getContainerStatementRule() {
		return getContainerStatementAccess().getRule();
	}
	
	//ContainerSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |MustStatement
	//    |PresenceStatement
	//    |ConfigStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |UnknownStatement)
	//    ;
	public ContainerSubstatementElements getContainerSubstatementAccess() {
		return pContainerSubstatement;
	}
	
	public ParserRule getContainerSubstatementRule() {
		return getContainerSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//ListStatement:
	//    'list' name=(STRINGARG | KEY_IDENTIFIER)
	//    (';'
	//    |'{'(listsubstatements+=ListSubstatement)* '}');
	public ListStatementElements getListStatementAccess() {
		return pListStatement;
	}
	
	public ParserRule getListStatementRule() {
		return getListStatementAccess().getRule();
	}
	
	//ListSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |MustStatement
	//    |KeyStatement
	//    |UniqueStatement
	//    |ConfigStatement
	//    |MinElementsStatement
	//    |MaxElementsStatement
	//    |OrderedbyStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |UnknownStatement)
	//    ;
	public ListSubstatementElements getListSubstatementAccess() {
		return pListSubstatement;
	}
	
	public ParserRule getListSubstatementRule() {
		return getListSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//GroupingStatement:
	//    'grouping' name=STRINGARG
	//    (';'
	//    |'{'(groupingsubstatements+=GroupingSubstatement)* '}');
	public GroupingStatementElements getGroupingStatementAccess() {
		return pGroupingStatement;
	}
	
	public ParserRule getGroupingStatementRule() {
		return getGroupingStatementAccess().getRule();
	}
	
	//GroupingSubstatement:
	//    (StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |TypedefStatement
	//    |GroupingStatement
	//    |DatadefStatement
	//    |UnknownStatement)
	//    ;
	public GroupingSubstatementElements getGroupingSubstatementAccess() {
		return pGroupingSubstatement;
	}
	
	public ParserRule getGroupingSubstatementRule() {
		return getGroupingSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//LeafStatement:
	//    'leaf' name=(STRINGARG | KEY_IDENTIFIER)
	//    (';'
	//    |'{'(leafsubstatements+=LeafSubstatement)* '}');
	public LeafStatementElements getLeafStatementAccess() {
		return pLeafStatement;
	}
	
	public ParserRule getLeafStatementRule() {
		return getLeafStatementAccess().getRule();
	}
	
	//LeafSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |TypeStatement
	//    |UnitsStatement
	//    |MustStatement
	//    |DefaultStatement
	//    |ConfigStatement
	//    |MandatoryStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public LeafSubstatementElements getLeafSubstatementAccess() {
		return pLeafSubstatement;
	}
	
	public ParserRule getLeafSubstatementRule() {
		return getLeafSubstatementAccess().getRule();
	}
	
	//// The values in a leaf-list MUST be unique.
	////identifier-arg-str
	//LeafListStatement:
	//    'leaf-list' arg=STRINGARG
	//    (';'
	//    |'{'(leaflistsubstatements+=LeafListSubstatement)* '}');
	public LeafListStatementElements getLeafListStatementAccess() {
		return pLeafListStatement;
	}
	
	public ParserRule getLeafListStatementRule() {
		return getLeafListStatementAccess().getRule();
	}
	
	//LeafListSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |TypeStatement
	//    |UnitsStatement
	//    |MustStatement
	//    |DefaultStatement
	//    |ConfigStatement
	//    |MinElementsStatement
	//    |MaxElementsStatement
	//    |OrderedbyStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public LeafListSubstatementElements getLeafListSubstatementAccess() {
		return pLeafListSubstatement;
	}
	
	public ParserRule getLeafListSubstatementRule() {
		return getLeafListSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//ChoiceStatement:
	//    'choice' name=(STRINGARG | KEY_IDENTIFIER)
	//    (';'
	//    |'{'(choicesubstatements+=ChoiceSubstatement)* '}');
	public ChoiceStatementElements getChoiceStatementAccess() {
		return pChoiceStatement;
	}
	
	public ParserRule getChoiceStatementRule() {
		return getChoiceStatementAccess().getRule();
	}
	
	//ChoiceSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |DefaultStatement
	//    |ConfigStatement
	//    |MandatoryStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |CaseStatement
	//    |ContainerStatement
	//    |LeafStatement
	//    |LeafListStatement
	//    |ListStatement
	//    |AnyxmlStatement
	//    |UnknownStatement)
	//    ;
	public ChoiceSubstatementElements getChoiceSubstatementAccess() {
		return pChoiceSubstatement;
	}
	
	public ParserRule getChoiceSubstatementRule() {
		return getChoiceSubstatementAccess().getRule();
	}
	
	////The case identifier MUST be unique within a choice.
	////identifier-arg-str
	//CaseStatement:
	//    'case' name=(STRINGARG | KEY_IDENTIFIER)
	//    (';'
	//    |'{'(casesubstatements+=CaseSubstatement)* '}');
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//CaseSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |DatadefStatement
	//    |UnknownStatement)
	//    ;
	public CaseSubstatementElements getCaseSubstatementAccess() {
		return pCaseSubstatement;
	}
	
	public ParserRule getCaseSubstatementRule() {
		return getCaseSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//AnyxmlStatement:
	//    'anyxml' arg=(STRINGARG    | KEY_IDENTIFIER)
	//    (';'
	//    |'{'(anyxmlsubstatements+=AnyxmlSubstatement)* '}');
	public AnyxmlStatementElements getAnyxmlStatementAccess() {
		return pAnyxmlStatement;
	}
	
	public ParserRule getAnyxmlStatementRule() {
		return getAnyxmlStatementAccess().getRule();
	}
	
	//AnyxmlSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |MustStatement
	//    |ConfigStatement
	//    |MandatoryStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public AnyxmlSubstatementElements getAnyxmlSubstatementAccess() {
		return pAnyxmlSubstatement;
	}
	
	public ParserRule getAnyxmlSubstatementRule() {
		return getAnyxmlSubstatementAccess().getRule();
	}
	
	////It takes one argument, which is the name of the grouping.
	////identifier-arg-str
	//UsesStatement:
	//    'uses' (pre=STRINGARG':')? arg=[GroupingStatement]
	//    (';'
	//    |'{'(usessubstatements+=UsesSubstatement)* '}');
	public UsesStatementElements getUsesStatementAccess() {
		return pUsesStatement;
	}
	
	public ParserRule getUsesStatementRule() {
		return getUsesStatementAccess().getRule();
	}
	
	//UsesSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |RefineStatement
	//    |AugmentUsesStatement
	//    |UnknownStatement)
	//    ;
	public UsesSubstatementElements getUsesSubstatementAccess() {
		return pUsesSubstatement;
	}
	
	public ParserRule getUsesSubstatementRule() {
		return getUsesSubstatementAccess().getRule();
	}
	
	//// uses-augment-arg = descendant-schema-nodeid
	//AugmentUsesStatement:
	//    'augment' arg=STRINGARG
	//    (';'
	//    |'{'(augmentsubstatements+=AugmentSubstatement)* '}');
	public AugmentUsesStatementElements getAugmentUsesStatementAccess() {
		return pAugmentUsesStatement;
	}
	
	public ParserRule getAugmentUsesStatementRule() {
		return getAugmentUsesStatementAccess().getRule();
	}
	
	//// augment-arg      = absolute-schema-nodeid
	//// The target node MUST be either a container, list, choice, case, input, output, or notification node.
	//AugmentStatement:
	//    'augment' arg=(STRINGARG |STRINGARG4)
	//    (';'
	//    |'{'(augmentsubstatements+=AugmentSubstatement)* '}');
	public AugmentStatementElements getAugmentStatementAccess() {
		return pAugmentStatement;
	}
	
	public ParserRule getAugmentStatementRule() {
		return getAugmentStatementAccess().getRule();
	}
	
	//AugmentSubstatement:
	//    (WhenStatement
	//    |IfFeatureStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |DatadefStatement
	//    |CaseStatement
	//    |UnknownStatement)
	//    ;
	public AugmentSubstatementElements getAugmentSubstatementAccess() {
		return pAugmentSubstatement;
	}
	
	public ParserRule getAugmentSubstatementRule() {
		return getAugmentSubstatementAccess().getRule();
	}
	
	//// refine-arg = descendant-schema-nodeid
	//RefineStatement:
	//    'refine' arg=STRINGARG
	//    (';'
	//    |'{'(refinesubstatements+=RefineSubstatement)* '}');
	public RefineStatementElements getRefineStatementAccess() {
		return pRefineStatement;
	}
	
	public ParserRule getRefineStatementRule() {
		return getRefineStatementAccess().getRule();
	}
	
	//RefineSubstatement:
	//    (MustStatement
	//    |DefaultStatement
	//    |PresenceStatement
	//    |ConfigStatement
	//    |MandatoryStatement
	//    |MinElementsStatement
	//    |MaxElementsStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public RefineSubstatementElements getRefineSubstatementAccess() {
		return pRefineSubstatement;
	}
	
	public ParserRule getRefineSubstatementRule() {
		return getRefineSubstatementAccess().getRule();
	}
	
	////The argument is a string that identifies the node in the schema tree where a deviation from the module occurs.
	////deviation-arg = absolute-schema-nodeid
	//DeviationStatement:
	//    'deviation' arg=STRINGARG
	//    (';'
	//    |'{' (deviationsubstatements+=DeviationSubstatement)* '}');
	public DeviationStatementElements getDeviationStatementAccess() {
		return pDeviationStatement;
	}
	
	public ParserRule getDeviationStatementRule() {
		return getDeviationStatementAccess().getRule();
	}
	
	//DeviationSubstatement:
	//    (DeviateStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public DeviationSubstatementElements getDeviationSubstatementAccess() {
		return pDeviationSubstatement;
	}
	
	public ParserRule getDeviationSubstatementRule() {
		return getDeviationSubstatementAccess().getRule();
	}
	
	//DeviateStatement:
	//    'deviate' arg=STRINGARG
	//    (';'
	//    |'{' (deviatesubstatements+=DeviateSubstatement)* '}');
	public DeviateStatementElements getDeviateStatementAccess() {
		return pDeviateStatement;
	}
	
	public ParserRule getDeviateStatementRule() {
		return getDeviateStatementAccess().getRule();
	}
	
	//DeviateSubstatement:
	//    (UniqueStatement
	//    |MustStatement
	//    |UnitsStatement
	//    |DefaultStatement
	//    |ConfigStatement
	//    |MandatoryStatement
	//    |MinElementsStatement
	//    |MaxElementsStatement
	//    |UnknownStatement)
	//    ;
	public DeviateSubstatementElements getDeviateSubstatementAccess() {
		return pDeviateSubstatement;
	}
	
	public ParserRule getDeviateSubstatementRule() {
		return getDeviateSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//ExtensionStatement:
	//    'extension' arg=(STRINGARG | KEY_IDENTIFIER)
	//    (';'
	//    |'{' (extensionsubstatements+=ExtensionSubstatement)* '}');
	public ExtensionStatementElements getExtensionStatementAccess() {
		return pExtensionStatement;
	}
	
	public ParserRule getExtensionStatementRule() {
		return getExtensionStatementAccess().getRule();
	}
	
	//ExtensionSubstatement:
	//    (ArgumentStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public ExtensionSubstatementElements getExtensionSubstatementAccess() {
		return pExtensionSubstatement;
	}
	
	public ParserRule getExtensionSubstatementRule() {
		return getExtensionSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//ArgumentStatement:
	//    'argument' arg=(STRINGARG|KEY_IDENTIFIER)
	//    (';'
	//    |'{' (argumentsubstatements+=ArgumentSubstatement)* '}');
	public ArgumentStatementElements getArgumentStatementAccess() {
		return pArgumentStatement;
	}
	
	public ParserRule getArgumentStatementRule() {
		return getArgumentStatementAccess().getRule();
	}
	
	//ArgumentSubstatement:
	//    (YinElementStatement
	//    |UnknownStatement)
	//    ;
	public ArgumentSubstatementElements getArgumentSubstatementAccess() {
		return pArgumentSubstatement;
	}
	
	public ParserRule getArgumentSubstatementRule() {
		return getArgumentSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//IdentityStatement:
	//    'identity' name=STRINGARG
	//    (';'
	//    |'{' (identitysubstatements+=IdentitySubstatement)* '}');
	public IdentityStatementElements getIdentityStatementAccess() {
		return pIdentityStatement;
	}
	
	public ParserRule getIdentityStatementRule() {
		return getIdentityStatementAccess().getRule();
	}
	
	//IdentitySubstatement:
	//    (BaseStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public IdentitySubstatementElements getIdentitySubstatementAccess() {
		return pIdentitySubstatement;
	}
	
	public ParserRule getIdentitySubstatementRule() {
		return getIdentitySubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//FeatureStatement:
	//    'feature' name=STRINGARG
	//    (';'
	//    |'{' (featuresubstatements+=FeatureSubstatement)* '}');
	public FeatureStatementElements getFeatureStatementAccess() {
		return pFeatureStatement;
	}
	
	public ParserRule getFeatureStatementRule() {
		return getFeatureStatementAccess().getRule();
	}
	
	//FeatureSubstatement:
	//    (IfFeatureStatement
	//    |StatusStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public FeatureSubstatementElements getFeatureSubstatementAccess() {
		return pFeatureSubstatement;
	}
	
	public ParserRule getFeatureSubstatementRule() {
		return getFeatureSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//BelongsToStatement:
	//    'belongs-to' name=STRINGARG
	//    '{' (belongstosubstatement+=BelongsToSubstatement)* '}';
	public BelongsToStatementElements getBelongsToStatementAccess() {
		return pBelongsToStatement;
	}
	
	public ParserRule getBelongsToStatementRule() {
		return getBelongsToStatementAccess().getRule();
	}
	
	//BelongsToSubstatement:
	//    (PrefixStatement
	//    |UnknownStatement)
	//    ;
	public BelongsToSubstatementElements getBelongsToSubstatementAccess() {
		return pBelongsToSubstatement;
	}
	
	public ParserRule getBelongsToSubstatementRule() {
		return getBelongsToSubstatementAccess().getRule();
	}
	
	////identifier-ref-arg-str
	//TypedefStatement:
	//    'typedef' name=(STRINGARG|KEY_IDENTIFIER)
	//    '{' (typedefsubstatemnet+=TypedefSubstatement)* '}';
	public TypedefStatementElements getTypedefStatementAccess() {
		return pTypedefStatement;
	}
	
	public ParserRule getTypedefStatementRule() {
		return getTypedefStatementAccess().getRule();
	}
	
	//TypedefSubstatement:
	//    (TypeStatement
	//    |DescriptionStatement
	//    |ReferenceStatement
	//    |DefaultStatement
	//    |StatusStatement
	//    |UnitsStatement
	//    |UnknownStatement)
	//    ;
	public TypedefSubstatementElements getTypedefSubstatementAccess() {
		return pTypedefSubstatement;
	}
	
	public ParserRule getTypedefSubstatementRule() {
		return getTypedefSubstatementAccess().getRule();
	}
	
	////The crossreference must be done in diferent blocks
	////identifier-ref-arg-str
	////[TypedefStatement]
	//TypeStatement:
	//    'type' (type=BuiltInType | (pre=STRINGARG':') ? importtype=[TypedefStatement])
	//    (';'
	//    |'{' (typesubstatements+=TypeSubStatement)* '}');
	public TypeStatementElements getTypeStatementAccess() {
		return pTypeStatement;
	}
	
	public ParserRule getTypeStatementRule() {
		return getTypeStatementAccess().getRule();
	}
	
	//TypeSubStatement:
	//    (BitStatement
	//    |FractionDigitsStatement
	//    |DefaultStatement
	//    |BaseStatement
	//    |EnumStatement
	//    |LengthStatement
	//    |PathStatement
	//    |PatternStatement
	//    |RangeStatement
	//    |RequireInstanceStatement
	//    |TypeStatement
	//    |UnknownStatement)
	//    ;
	public TypeSubStatementElements getTypeSubStatementAccess() {
		return pTypeSubStatement;
	}
	
	public ParserRule getTypeSubStatementRule() {
		return getTypeSubStatementAccess().getRule();
	}
	
	////The "bit" statement, which is a substatement to the "type" statement,MUST be present if the type is "bits".
	////All assigned names in a bits type MUST be unique.
	//BitStatement:
	//    'bit' name=STRINGARG
	//    (';'
	//    |'{' (bitsubstatements+=BitSubstatement)* '}');
	public BitStatementElements getBitStatementAccess() {
		return pBitStatement;
	}
	
	public ParserRule getBitStatementRule() {
		return getBitStatementAccess().getRule();
	}
	
	//BitSubstatement:
	//    (DescriptionStatement
	//    |ReferenceStatement
	//    |StatusStatement
	//    |PositionStatement
	//    |UnknownStatement)
	//    ;
	public BitSubstatementElements getBitSubstatementAccess() {
		return pBitSubstatement;
	}
	
	public ParserRule getBitSubstatementRule() {
		return getBitSubstatementAccess().getRule();
	}
	
	////The "enum" statement, which is a substatement to the "type" statement, MUST be present if the type is "enumeration".
	////The string MUST NOT be empty and MUST NOT have any leading or trailing whitespace characters.
	////All assigned names in an enumeration MUST be unique.
	////string
	//EnumStatement:
	//    'enum' name=(STRINGARG | KEY_IDENTIFIER)
	//    (';'
	//    |'{' (enumsubstatements+=EnumSubstatement)* '}');
	public EnumStatementElements getEnumStatementAccess() {
		return pEnumStatement;
	}
	
	public ParserRule getEnumStatementRule() {
		return getEnumStatementAccess().getRule();
	}
	
	//EnumSubstatement:
	//    (DescriptionStatement
	//    |ReferenceStatement
	//    |StatusStatement
	//    |ValueStatement
	//    |UnknownStatement)
	//    ;
	public EnumSubstatementElements getEnumSubstatementAccess() {
		return pEnumSubstatement;
	}
	
	public ParserRule getEnumSubstatementRule() {
		return getEnumSubstatementAccess().getRule();
	}
	
	////identifier-arg-str
	//ImportStatement:
	//    'import' importURI=STRINGARG
	//    (';'
	//    |'{' (importsubstatements+=ImportSubstatements)* '}');
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}
	
	//ImportSubstatements:
	//    (PrefixStatement
	//    |RevisionDateStatement
	//    |TypeStatement
	//    |UnknownStatement)
	//    ;
	public ImportSubstatementsElements getImportSubstatementsAccess() {
		return pImportSubstatements;
	}
	
	public ParserRule getImportSubstatementsRule() {
		return getImportSubstatementsAccess().getRule();
	}
	
	////identifier-arg-str
	//IncludeStatement:
	//    'include' importURI=STRINGARG
	//    (';'
	//    |'{' (includesubstatements+=IncludeSubstatements)* '}');
	public IncludeStatementElements getIncludeStatementAccess() {
		return pIncludeStatement;
	}
	
	public ParserRule getIncludeStatementRule() {
		return getIncludeStatementAccess().getRule();
	}
	
	//IncludeSubstatements:
	//    (RevisionDateStatement
	//    |TypeStatement
	//    |UnknownStatement)
	//    ;
	public IncludeSubstatementsElements getIncludeSubstatementsAccess() {
		return pIncludeSubstatements;
	}
	
	public ParserRule getIncludeSubstatementsRule() {
		return getIncludeSubstatementsAccess().getRule();
	}
	
	////string
	//WhenStatement:
	//    'when' arg=STRINGARG
	//    (';'
	//    |'{' (whensubstatements+=WhenSubstatements)* '}');
	public WhenStatementElements getWhenStatementAccess() {
		return pWhenStatement;
	}
	
	public ParserRule getWhenStatementRule() {
		return getWhenStatementAccess().getRule();
	}
	
	//WhenSubstatements:
	//    (DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public WhenSubstatementsElements getWhenSubstatementsAccess() {
		return pWhenSubstatements;
	}
	
	public ParserRule getWhenSubstatementsRule() {
		return getWhenSubstatementsAccess().getRule();
	}
	
	//RevisionStatement:
	//    'revision' date=STRINGARG
	//    (';'
	//    |'{' (revisionsubstatements+=RevisionSubstatements)* '}');
	public RevisionStatementElements getRevisionStatementAccess() {
		return pRevisionStatement;
	}
	
	public ParserRule getRevisionStatementRule() {
		return getRevisionStatementAccess().getRule();
	}
	
	//RevisionSubstatements:
	//    (DescriptionStatement
	//    |ReferenceStatement
	//    |UnknownStatement)
	//    ;
	public RevisionSubstatementsElements getRevisionSubstatementsAccess() {
		return pRevisionSubstatements;
	}
	
	public ParserRule getRevisionSubstatementsRule() {
		return getRevisionSubstatementsAccess().getRule();
	}
	
	//BuiltInType:
	//    (btype = (
	//      'binary'
	//    | 'bits'
	//    | 'boolean'
	//    | 'decimal64'
	//    | 'empty'
	//    | 'enumeration'
	//    | 'identityref'
	//    | 'instance-identifier'
	//    | 'int8'
	//    | 'int16'
	//    | 'int32'
	//    | 'int64'
	//    | 'leafref'
	//    | 'string'
	//    | 'uint8'
	//    | 'uint16'
	//    | 'uint32'
	//    | 'uint64'
	//    | 'union'))
	//    ;
	public BuiltInTypeElements getBuiltInTypeAccess() {
		return pBuiltInType;
	}
	
	public ParserRule getBuiltInTypeRule() {
		return getBuiltInTypeAccess().getRule();
	}
	
	//CUSTOMSTRING:
	//    (STRING ('+' STRING)*);
	public CUSTOMSTRINGElements getCUSTOMSTRINGAccess() {
		return pCUSTOMSTRING;
	}
	
	public ParserRule getCUSTOMSTRINGRule() {
		return getCUSTOMSTRINGAccess().getRule();
	}
	
	//STRINGARG:
	//    ID | CUSTOMSTRING | 'default';
	public STRINGARGElements getSTRINGARGAccess() {
		return pSTRINGARG;
	}
	
	public ParserRule getSTRINGARGRule() {
		return getSTRINGARGAccess().getRule();
	}
	
	//STRINGARG2:
	//    ID':'ID;
	public STRINGARG2Elements getSTRINGARG2Access() {
		return pSTRINGARG2;
	}
	
	public ParserRule getSTRINGARG2Rule() {
		return getSTRINGARG2Access().getRule();
	}
	
	//STRINGARG3:
	//    ((ID + '|')*) + ID;
	public STRINGARG3Elements getSTRINGARG3Access() {
		return pSTRINGARG3;
	}
	
	public ParserRule getSTRINGARG3Rule() {
		return getSTRINGARG3Access().getRule();
	}
	
	//STRINGARG4:
	//    ((ID+':'+ID)+(':'+ID)*|(':'+KEY_IDENTIFIER)*)    ;
	public STRINGARG4Elements getSTRINGARG4Access() {
		return pSTRINGARG4;
	}
	
	public ParserRule getSTRINGARG4Rule() {
		return getSTRINGARG4Access().getRule();
	}
	
	//KEY_IDENTIFIER:
	//    =>'value' | =>'status' | =>'namespace' | =>'notification' |=> 'path' |=> 'description' |=> 'string' | =>'error-message' |
	//     =>'config' |=>'range' | =>'revision' | =>'type' | =>'boolean' | =>'prefix' | =>'range' | => 'key' | =>'fraction-digits';
	public KEY_IDENTIFIERElements getKEY_IDENTIFIERAccess() {
		return pKEY_IDENTIFIER;
	}
	
	public ParserRule getKEY_IDENTIFIERRule() {
		return getKEY_IDENTIFIERAccess().getRule();
	}
	
	//terminal STRING:
	//    '"' -> '"' |
	//    "'" -> "'" ;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//    (('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'/'|'0'..'9'|'\"')+);
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//     '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//     '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//     (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
