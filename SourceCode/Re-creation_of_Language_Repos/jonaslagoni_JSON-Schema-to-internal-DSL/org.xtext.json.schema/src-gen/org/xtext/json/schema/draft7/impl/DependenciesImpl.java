/**
 * generated by Xtext 2.35.0
 */
package org.xtext.json.schema.draft7.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.json.schema.draft7.Dependencies;
import org.xtext.json.schema.draft7.Draft7Package;
import org.xtext.json.schema.draft7.NamedSchema;
import org.xtext.json.schema.draft7.PropertyDependency;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dependencies</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.json.schema.draft7.impl.DependenciesImpl#getPropertyDependency <em>Property Dependency</em>}</li>
 *   <li>{@link org.xtext.json.schema.draft7.impl.DependenciesImpl#getSchemaDependencies <em>Schema Dependencies</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DependenciesImpl extends MinimalEObjectImpl.Container implements Dependencies
{
  /**
   * The cached value of the '{@link #getPropertyDependency() <em>Property Dependency</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropertyDependency()
   * @generated
   * @ordered
   */
  protected PropertyDependency propertyDependency;

  /**
   * The cached value of the '{@link #getSchemaDependencies() <em>Schema Dependencies</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchemaDependencies()
   * @generated
   * @ordered
   */
  protected EList<NamedSchema> schemaDependencies;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DependenciesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Draft7Package.Literals.DEPENDENCIES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyDependency getPropertyDependency()
  {
    return propertyDependency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropertyDependency(PropertyDependency newPropertyDependency, NotificationChain msgs)
  {
    PropertyDependency oldPropertyDependency = propertyDependency;
    propertyDependency = newPropertyDependency;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY, oldPropertyDependency, newPropertyDependency);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropertyDependency(PropertyDependency newPropertyDependency)
  {
    if (newPropertyDependency != propertyDependency)
    {
      NotificationChain msgs = null;
      if (propertyDependency != null)
        msgs = ((InternalEObject)propertyDependency).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY, null, msgs);
      if (newPropertyDependency != null)
        msgs = ((InternalEObject)newPropertyDependency).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY, null, msgs);
      msgs = basicSetPropertyDependency(newPropertyDependency, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY, newPropertyDependency, newPropertyDependency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NamedSchema> getSchemaDependencies()
  {
    if (schemaDependencies == null)
    {
      schemaDependencies = new EObjectContainmentEList<NamedSchema>(NamedSchema.class, this, Draft7Package.DEPENDENCIES__SCHEMA_DEPENDENCIES);
    }
    return schemaDependencies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY:
        return basicSetPropertyDependency(null, msgs);
      case Draft7Package.DEPENDENCIES__SCHEMA_DEPENDENCIES:
        return ((InternalEList<?>)getSchemaDependencies()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY:
        return getPropertyDependency();
      case Draft7Package.DEPENDENCIES__SCHEMA_DEPENDENCIES:
        return getSchemaDependencies();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY:
        setPropertyDependency((PropertyDependency)newValue);
        return;
      case Draft7Package.DEPENDENCIES__SCHEMA_DEPENDENCIES:
        getSchemaDependencies().clear();
        getSchemaDependencies().addAll((Collection<? extends NamedSchema>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY:
        setPropertyDependency((PropertyDependency)null);
        return;
      case Draft7Package.DEPENDENCIES__SCHEMA_DEPENDENCIES:
        getSchemaDependencies().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Draft7Package.DEPENDENCIES__PROPERTY_DEPENDENCY:
        return propertyDependency != null;
      case Draft7Package.DEPENDENCIES__SCHEMA_DEPENDENCIES:
        return schemaDependencies != null && !schemaDependencies.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DependenciesImpl
