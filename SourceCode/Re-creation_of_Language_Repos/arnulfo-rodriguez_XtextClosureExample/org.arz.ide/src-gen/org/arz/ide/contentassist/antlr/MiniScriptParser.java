/*
 * generated by Xtext 2.35.0
 */
package org.arz.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.arz.ide.contentassist.antlr.internal.InternalMiniScriptParser;
import org.arz.services.MiniScriptGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MiniScriptParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MiniScriptGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MiniScriptGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
			builder.put(grammarAccess.getFunctorAccess().getAlternatives(), "rule__Functor__Alternatives");
			builder.put(grammarAccess.getLiteralExpressionAccess().getAlternatives(), "rule__LiteralExpression__Alternatives");
			builder.put(grammarAccess.getAdditionOperatorAccess().getAlternatives(), "rule__AdditionOperator__Alternatives");
			builder.put(grammarAccess.getFactorOperatorAccess().getAlternatives(), "rule__FactorOperator__Alternatives");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getBinaryLogicalOperatorAccess().getAlternatives(), "rule__BinaryLogicalOperator__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getAlternatives(), "rule__BooleanValue__Alternatives");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_2(), "rule__Program__Group_2__0");
			builder.put(grammarAccess.getBlockExpressionAccess().getGroup(), "rule__BlockExpression__Group__0");
			builder.put(grammarAccess.getBlockExpressionAccess().getGroup_1(), "rule__BlockExpression__Group_1__0");
			builder.put(grammarAccess.getLetExpressionAccess().getGroup(), "rule__LetExpression__Group__0");
			builder.put(grammarAccess.getLetExpressionAccess().getGroup_1(), "rule__LetExpression__Group_1__0");
			builder.put(grammarAccess.getTernaryExpressionAccess().getGroup(), "rule__TernaryExpression__Group__0");
			builder.put(grammarAccess.getLogicalBinaryExpressionAccess().getGroup(), "rule__LogicalBinaryExpression__Group__0");
			builder.put(grammarAccess.getLogicalUnaryExpressionAccess().getGroup(), "rule__LogicalUnaryExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
			builder.put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup_2(), "rule__FunctionDeclaration__Group_2__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup_2_1(), "rule__FunctionDeclaration__Group_2_1__0");
			builder.put(grammarAccess.getNumericExpressionAccess().getGroup(), "rule__NumericExpression__Group__0");
			builder.put(grammarAccess.getNumericExpressionAccess().getGroup_1(), "rule__NumericExpression__Group_1__0");
			builder.put(grammarAccess.getFactorAccess().getGroup(), "rule__Factor__Group__0");
			builder.put(grammarAccess.getFactorAccess().getGroup_1(), "rule__Factor__Group_1__0");
			builder.put(grammarAccess.getApplyAccess().getGroup(), "rule__Apply__Group__0");
			builder.put(grammarAccess.getApplyAccess().getGroup_1(), "rule__Apply__Group_1__0");
			builder.put(grammarAccess.getApplyAccess().getGroup_1_2(), "rule__Apply__Group_1_2__0");
			builder.put(grammarAccess.getApplyAccess().getGroup_1_2_1(), "rule__Apply__Group_1_2_1__0");
			builder.put(grammarAccess.getVariableAssignmentAccess().getGroup(), "rule__VariableAssignment__Group__0");
			builder.put(grammarAccess.getParenthesisExpressionAccess().getGroup(), "rule__ParenthesisExpression__Group__0");
			builder.put(grammarAccess.getProgramAccess().getExpressionsAssignment_0(), "rule__Program__ExpressionsAssignment_0");
			builder.put(grammarAccess.getProgramAccess().getExpressionsAssignment_2_0(), "rule__Program__ExpressionsAssignment_2_0");
			builder.put(grammarAccess.getBlockExpressionAccess().getExpressionsAssignment_1_0(), "rule__BlockExpression__ExpressionsAssignment_1_0");
			builder.put(grammarAccess.getLetExpressionAccess().getAssigmentAssignment_1_0(), "rule__LetExpression__AssigmentAssignment_1_0");
			builder.put(grammarAccess.getLetExpressionAccess().getExpressionAssignment_2(), "rule__LetExpression__ExpressionAssignment_2");
			builder.put(grammarAccess.getTernaryExpressionAccess().getOperatorAssignment_0(), "rule__TernaryExpression__OperatorAssignment_0");
			builder.put(grammarAccess.getTernaryExpressionAccess().getFirstExpressionAssignment_2(), "rule__TernaryExpression__FirstExpressionAssignment_2");
			builder.put(grammarAccess.getTernaryExpressionAccess().getSecondExpressionAssignment_4(), "rule__TernaryExpression__SecondExpressionAssignment_4");
			builder.put(grammarAccess.getTernaryExpressionAccess().getThirdExpressionAssignment_6(), "rule__TernaryExpression__ThirdExpressionAssignment_6");
			builder.put(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorAssignment_0(), "rule__LogicalBinaryExpression__OperatorAssignment_0");
			builder.put(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprAssignment_2(), "rule__LogicalBinaryExpression__LeftExprAssignment_2");
			builder.put(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprAssignment_4(), "rule__LogicalBinaryExpression__RightExprAssignment_4");
			builder.put(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorAssignment_0(), "rule__LogicalUnaryExpression__OperatorAssignment_0");
			builder.put(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionAssignment_2(), "rule__LogicalUnaryExpression__ExpressionAssignment_2");
			builder.put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getComparisonExpressionAccess().getRightExprAssignment_1_2(), "rule__ComparisonExpression__RightExprAssignment_1_2");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2_0(), "rule__FunctionDeclaration__ParametersAssignment_2_0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2_1_1(), "rule__FunctionDeclaration__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_4(), "rule__FunctionDeclaration__BodyAssignment_4");
			builder.put(grammarAccess.getSymbolReferenceAccess().getIdAssignment(), "rule__SymbolReference__IdAssignment");
			builder.put(grammarAccess.getNumericExpressionAccess().getOperatorAssignment_1_1(), "rule__NumericExpression__OperatorAssignment_1_1");
			builder.put(grammarAccess.getNumericExpressionAccess().getRightFactorAssignment_1_2(), "rule__NumericExpression__RightFactorAssignment_1_2");
			builder.put(grammarAccess.getFactorAccess().getOperatorAssignment_1_1(), "rule__Factor__OperatorAssignment_1_1");
			builder.put(grammarAccess.getFactorAccess().getRightTermAssignment_1_2(), "rule__Factor__RightTermAssignment_1_2");
			builder.put(grammarAccess.getApplyAccess().getArgumentsAssignment_1_2_0(), "rule__Apply__ArgumentsAssignment_1_2_0");
			builder.put(grammarAccess.getApplyAccess().getArgumentsAssignment_1_2_1_1(), "rule__Apply__ArgumentsAssignment_1_2_1_1");
			builder.put(grammarAccess.getLiteralBooleanAccess().getValueAssignment(), "rule__LiteralBoolean__ValueAssignment");
			builder.put(grammarAccess.getLiteralNumberAccess().getValueAssignment(), "rule__LiteralNumber__ValueAssignment");
			builder.put(grammarAccess.getVariableAssignmentAccess().getIdAssignment_0(), "rule__VariableAssignment__IdAssignment_0");
			builder.put(grammarAccess.getVariableAssignmentAccess().getExpressionAssignment_2(), "rule__VariableAssignment__ExpressionAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MiniScriptGrammarAccess grammarAccess;

	@Override
	protected InternalMiniScriptParser createParser() {
		InternalMiniScriptParser result = new InternalMiniScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MiniScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MiniScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
