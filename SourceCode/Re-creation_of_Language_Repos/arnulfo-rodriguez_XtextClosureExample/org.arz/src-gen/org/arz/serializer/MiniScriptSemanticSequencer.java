/*
 * generated by Xtext 2.35.0
 */
package org.arz.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.arz.miniScript.Apply;
import org.arz.miniScript.BlockExpression;
import org.arz.miniScript.ComparisonExpression;
import org.arz.miniScript.Factor;
import org.arz.miniScript.FunctionDeclaration;
import org.arz.miniScript.LetExpression;
import org.arz.miniScript.LiteralBoolean;
import org.arz.miniScript.LiteralNumber;
import org.arz.miniScript.LogicalBinaryExpression;
import org.arz.miniScript.LogicalUnaryExpression;
import org.arz.miniScript.MiniScriptPackage;
import org.arz.miniScript.NumericExpression;
import org.arz.miniScript.Program;
import org.arz.miniScript.SymbolReference;
import org.arz.miniScript.TernaryExpression;
import org.arz.miniScript.VariableAssignment;
import org.arz.services.MiniScriptGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MiniScriptSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MiniScriptGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MiniScriptPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MiniScriptPackage.APPLY:
				sequence_Apply(context, (Apply) semanticObject); 
				return; 
			case MiniScriptPackage.BLOCK_EXPRESSION:
				sequence_BlockExpression(context, (BlockExpression) semanticObject); 
				return; 
			case MiniScriptPackage.COMPARISON_EXPRESSION:
				sequence_ComparisonExpression(context, (ComparisonExpression) semanticObject); 
				return; 
			case MiniScriptPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case MiniScriptPackage.FUNCTION_DECLARATION:
				sequence_FunctionDeclaration(context, (FunctionDeclaration) semanticObject); 
				return; 
			case MiniScriptPackage.LET_EXPRESSION:
				sequence_LetExpression(context, (LetExpression) semanticObject); 
				return; 
			case MiniScriptPackage.LITERAL_BOOLEAN:
				sequence_LiteralBoolean(context, (LiteralBoolean) semanticObject); 
				return; 
			case MiniScriptPackage.LITERAL_NUMBER:
				sequence_LiteralNumber(context, (LiteralNumber) semanticObject); 
				return; 
			case MiniScriptPackage.LOGICAL_BINARY_EXPRESSION:
				sequence_LogicalBinaryExpression(context, (LogicalBinaryExpression) semanticObject); 
				return; 
			case MiniScriptPackage.LOGICAL_UNARY_EXPRESSION:
				sequence_LogicalUnaryExpression(context, (LogicalUnaryExpression) semanticObject); 
				return; 
			case MiniScriptPackage.NUMERIC_EXPRESSION:
				sequence_NumericExpression(context, (NumericExpression) semanticObject); 
				return; 
			case MiniScriptPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case MiniScriptPackage.SYMBOL_REFERENCE:
				sequence_SymbolReference(context, (SymbolReference) semanticObject); 
				return; 
			case MiniScriptPackage.TERNARY_EXPRESSION:
				sequence_TernaryExpression(context, (TernaryExpression) semanticObject); 
				return; 
			case MiniScriptPackage.VARIABLE_ASSIGNMENT:
				sequence_VariableAssignment(context, (VariableAssignment) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Apply
	 *     ComparisonExpression returns Apply
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Apply
	 *     NumericExpression returns Apply
	 *     NumericExpression.NumericExpression_1_0 returns Apply
	 *     Factor returns Apply
	 *     Factor.Factor_1_0 returns Apply
	 *     Term returns Apply
	 *     Apply returns Apply
	 *     Apply.Apply_1_0 returns Apply
	 *     Functor returns Apply
	 *     ParenthesisExpression returns Apply
	 *
	 * Constraint:
	 *     (functor=Apply_Apply_1_0 (arguments+=Expression arguments+=Expression*)?)
	 * </pre>
	 */
	protected void sequence_Apply(ISerializationContext context, Apply semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns BlockExpression
	 *     BlockExpression returns BlockExpression
	 *     ComparisonExpression returns BlockExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns BlockExpression
	 *     NumericExpression returns BlockExpression
	 *     NumericExpression.NumericExpression_1_0 returns BlockExpression
	 *     Factor returns BlockExpression
	 *     Factor.Factor_1_0 returns BlockExpression
	 *     Term returns BlockExpression
	 *     Apply returns BlockExpression
	 *     Apply.Apply_1_0 returns BlockExpression
	 *     Functor returns BlockExpression
	 *     ParenthesisExpression returns BlockExpression
	 *
	 * Constraint:
	 *     expressions+=Expression+
	 * </pre>
	 */
	protected void sequence_BlockExpression(ISerializationContext context, BlockExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns ComparisonExpression
	 *     ComparisonExpression returns ComparisonExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns ComparisonExpression
	 *     NumericExpression returns ComparisonExpression
	 *     NumericExpression.NumericExpression_1_0 returns ComparisonExpression
	 *     Factor returns ComparisonExpression
	 *     Factor.Factor_1_0 returns ComparisonExpression
	 *     Term returns ComparisonExpression
	 *     Apply returns ComparisonExpression
	 *     Apply.Apply_1_0 returns ComparisonExpression
	 *     Functor returns ComparisonExpression
	 *     ParenthesisExpression returns ComparisonExpression
	 *
	 * Constraint:
	 *     (leftExpr=ComparisonExpression_ComparisonExpression_1_0 operator=ComparisonOperator rightExpr=NumericExpression)
	 * </pre>
	 */
	protected void sequence_ComparisonExpression(ISerializationContext context, ComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.COMPARISON_EXPRESSION__LEFT_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.COMPARISON_EXPRESSION__LEFT_EXPR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.COMPARISON_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.COMPARISON_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.COMPARISON_EXPRESSION__RIGHT_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.COMPARISON_EXPRESSION__RIGHT_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExprAction_1_0(), semanticObject.getLeftExpr());
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getComparisonExpressionAccess().getRightExprNumericExpressionParserRuleCall_1_2_0(), semanticObject.getRightExpr());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Factor
	 *     ComparisonExpression returns Factor
	 *     ComparisonExpression.ComparisonExpression_1_0 returns Factor
	 *     NumericExpression returns Factor
	 *     NumericExpression.NumericExpression_1_0 returns Factor
	 *     Factor returns Factor
	 *     Factor.Factor_1_0 returns Factor
	 *     Term returns Factor
	 *     Apply returns Factor
	 *     Apply.Apply_1_0 returns Factor
	 *     Functor returns Factor
	 *     ParenthesisExpression returns Factor
	 *
	 * Constraint:
	 *     (leftTerm=Factor_Factor_1_0 operator=FactorOperator rightTerm=Term)
	 * </pre>
	 */
	protected void sequence_Factor(ISerializationContext context, Factor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.FACTOR__LEFT_TERM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.FACTOR__LEFT_TERM));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.FACTOR__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.FACTOR__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.FACTOR__RIGHT_TERM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.FACTOR__RIGHT_TERM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFactorAccess().getFactorLeftTermAction_1_0(), semanticObject.getLeftTerm());
		feeder.accept(grammarAccess.getFactorAccess().getOperatorFactorOperatorEnumRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getFactorAccess().getRightTermTermParserRuleCall_1_2_0(), semanticObject.getRightTerm());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns FunctionDeclaration
	 *     ComparisonExpression returns FunctionDeclaration
	 *     ComparisonExpression.ComparisonExpression_1_0 returns FunctionDeclaration
	 *     FunctionDeclaration returns FunctionDeclaration
	 *     NumericExpression returns FunctionDeclaration
	 *     NumericExpression.NumericExpression_1_0 returns FunctionDeclaration
	 *     Factor returns FunctionDeclaration
	 *     Factor.Factor_1_0 returns FunctionDeclaration
	 *     Term returns FunctionDeclaration
	 *     Apply returns FunctionDeclaration
	 *     Apply.Apply_1_0 returns FunctionDeclaration
	 *     Functor returns FunctionDeclaration
	 *     ParenthesisExpression returns FunctionDeclaration
	 *
	 * Constraint:
	 *     ((parameters+=ID parameters+=ID*)? body=Expression)
	 * </pre>
	 */
	protected void sequence_FunctionDeclaration(ISerializationContext context, FunctionDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns LetExpression
	 *     LetExpression returns LetExpression
	 *     ComparisonExpression returns LetExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns LetExpression
	 *     NumericExpression returns LetExpression
	 *     NumericExpression.NumericExpression_1_0 returns LetExpression
	 *     Factor returns LetExpression
	 *     Factor.Factor_1_0 returns LetExpression
	 *     Term returns LetExpression
	 *     Apply returns LetExpression
	 *     Apply.Apply_1_0 returns LetExpression
	 *     Functor returns LetExpression
	 *     ParenthesisExpression returns LetExpression
	 *
	 * Constraint:
	 *     (assigment=VariableAssignment expression=Expression)
	 * </pre>
	 */
	protected void sequence_LetExpression(ISerializationContext context, LetExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LET_EXPRESSION__ASSIGMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LET_EXPRESSION__ASSIGMENT));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LET_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LET_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLetExpressionAccess().getAssigmentVariableAssignmentParserRuleCall_1_0_0(), semanticObject.getAssigment());
		feeder.accept(grammarAccess.getLetExpressionAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns LiteralBoolean
	 *     ComparisonExpression returns LiteralBoolean
	 *     ComparisonExpression.ComparisonExpression_1_0 returns LiteralBoolean
	 *     NumericExpression returns LiteralBoolean
	 *     NumericExpression.NumericExpression_1_0 returns LiteralBoolean
	 *     Factor returns LiteralBoolean
	 *     Factor.Factor_1_0 returns LiteralBoolean
	 *     Term returns LiteralBoolean
	 *     Apply returns LiteralBoolean
	 *     Apply.Apply_1_0 returns LiteralBoolean
	 *     Functor returns LiteralBoolean
	 *     LiteralExpression returns LiteralBoolean
	 *     LiteralBoolean returns LiteralBoolean
	 *     ParenthesisExpression returns LiteralBoolean
	 *
	 * Constraint:
	 *     value=BooleanValue
	 * </pre>
	 */
	protected void sequence_LiteralBoolean(ISerializationContext context, LiteralBoolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LITERAL_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LITERAL_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralBooleanAccess().getValueBooleanValueEnumRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns LiteralNumber
	 *     ComparisonExpression returns LiteralNumber
	 *     ComparisonExpression.ComparisonExpression_1_0 returns LiteralNumber
	 *     NumericExpression returns LiteralNumber
	 *     NumericExpression.NumericExpression_1_0 returns LiteralNumber
	 *     Factor returns LiteralNumber
	 *     Factor.Factor_1_0 returns LiteralNumber
	 *     Term returns LiteralNumber
	 *     Apply returns LiteralNumber
	 *     Apply.Apply_1_0 returns LiteralNumber
	 *     Functor returns LiteralNumber
	 *     LiteralExpression returns LiteralNumber
	 *     LiteralNumber returns LiteralNumber
	 *     ParenthesisExpression returns LiteralNumber
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_LiteralNumber(ISerializationContext context, LiteralNumber semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LITERAL_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LITERAL_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralNumberAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns LogicalBinaryExpression
	 *     LogicalBinaryExpression returns LogicalBinaryExpression
	 *     ComparisonExpression returns LogicalBinaryExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns LogicalBinaryExpression
	 *     NumericExpression returns LogicalBinaryExpression
	 *     NumericExpression.NumericExpression_1_0 returns LogicalBinaryExpression
	 *     Factor returns LogicalBinaryExpression
	 *     Factor.Factor_1_0 returns LogicalBinaryExpression
	 *     Term returns LogicalBinaryExpression
	 *     Apply returns LogicalBinaryExpression
	 *     Apply.Apply_1_0 returns LogicalBinaryExpression
	 *     Functor returns LogicalBinaryExpression
	 *     ParenthesisExpression returns LogicalBinaryExpression
	 *
	 * Constraint:
	 *     (operator=BinaryLogicalOperator leftExpr=Expression rightExpr=Expression)
	 * </pre>
	 */
	protected void sequence_LogicalBinaryExpression(ISerializationContext context, LogicalBinaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LOGICAL_BINARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LOGICAL_BINARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LOGICAL_BINARY_EXPRESSION__LEFT_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LOGICAL_BINARY_EXPRESSION__LEFT_EXPR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LOGICAL_BINARY_EXPRESSION__RIGHT_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LOGICAL_BINARY_EXPRESSION__RIGHT_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalBinaryExpressionAccess().getOperatorBinaryLogicalOperatorEnumRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getLogicalBinaryExpressionAccess().getLeftExprExpressionParserRuleCall_2_0(), semanticObject.getLeftExpr());
		feeder.accept(grammarAccess.getLogicalBinaryExpressionAccess().getRightExprExpressionParserRuleCall_4_0(), semanticObject.getRightExpr());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns LogicalUnaryExpression
	 *     LogicalUnaryExpression returns LogicalUnaryExpression
	 *     ComparisonExpression returns LogicalUnaryExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns LogicalUnaryExpression
	 *     NumericExpression returns LogicalUnaryExpression
	 *     NumericExpression.NumericExpression_1_0 returns LogicalUnaryExpression
	 *     Factor returns LogicalUnaryExpression
	 *     Factor.Factor_1_0 returns LogicalUnaryExpression
	 *     Term returns LogicalUnaryExpression
	 *     Apply returns LogicalUnaryExpression
	 *     Apply.Apply_1_0 returns LogicalUnaryExpression
	 *     Functor returns LogicalUnaryExpression
	 *     ParenthesisExpression returns LogicalUnaryExpression
	 *
	 * Constraint:
	 *     (operator=UnaryLogicalOperator expression=Expression)
	 * </pre>
	 */
	protected void sequence_LogicalUnaryExpression(ISerializationContext context, LogicalUnaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LOGICAL_UNARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LOGICAL_UNARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.LOGICAL_UNARY_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.LOGICAL_UNARY_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogicalUnaryExpressionAccess().getOperatorUnaryLogicalOperatorEnumRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getLogicalUnaryExpressionAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns NumericExpression
	 *     ComparisonExpression returns NumericExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns NumericExpression
	 *     NumericExpression returns NumericExpression
	 *     NumericExpression.NumericExpression_1_0 returns NumericExpression
	 *     Factor returns NumericExpression
	 *     Factor.Factor_1_0 returns NumericExpression
	 *     Term returns NumericExpression
	 *     Apply returns NumericExpression
	 *     Apply.Apply_1_0 returns NumericExpression
	 *     Functor returns NumericExpression
	 *     ParenthesisExpression returns NumericExpression
	 *
	 * Constraint:
	 *     (leftFactor=NumericExpression_NumericExpression_1_0 operator=AdditionOperator rightFactor=Factor)
	 * </pre>
	 */
	protected void sequence_NumericExpression(ISerializationContext context, NumericExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.NUMERIC_EXPRESSION__LEFT_FACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.NUMERIC_EXPRESSION__LEFT_FACTOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.NUMERIC_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.NUMERIC_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.NUMERIC_EXPRESSION__RIGHT_FACTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.NUMERIC_EXPRESSION__RIGHT_FACTOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumericExpressionAccess().getNumericExpressionLeftFactorAction_1_0(), semanticObject.getLeftFactor());
		feeder.accept(grammarAccess.getNumericExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getNumericExpressionAccess().getRightFactorFactorParserRuleCall_1_2_0(), semanticObject.getRightFactor());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Program
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (expressions+=Expression expressions+=Expression*)
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns SymbolReference
	 *     ComparisonExpression returns SymbolReference
	 *     ComparisonExpression.ComparisonExpression_1_0 returns SymbolReference
	 *     SymbolReference returns SymbolReference
	 *     NumericExpression returns SymbolReference
	 *     NumericExpression.NumericExpression_1_0 returns SymbolReference
	 *     Factor returns SymbolReference
	 *     Factor.Factor_1_0 returns SymbolReference
	 *     Term returns SymbolReference
	 *     Apply returns SymbolReference
	 *     Apply.Apply_1_0 returns SymbolReference
	 *     Functor returns SymbolReference
	 *     ParenthesisExpression returns SymbolReference
	 *
	 * Constraint:
	 *     id=ID
	 * </pre>
	 */
	protected void sequence_SymbolReference(ISerializationContext context, SymbolReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.SYMBOL_REFERENCE__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.SYMBOL_REFERENCE__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSymbolReferenceAccess().getIdIDTerminalRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns TernaryExpression
	 *     TernaryExpression returns TernaryExpression
	 *     ComparisonExpression returns TernaryExpression
	 *     ComparisonExpression.ComparisonExpression_1_0 returns TernaryExpression
	 *     NumericExpression returns TernaryExpression
	 *     NumericExpression.NumericExpression_1_0 returns TernaryExpression
	 *     Factor returns TernaryExpression
	 *     Factor.Factor_1_0 returns TernaryExpression
	 *     Term returns TernaryExpression
	 *     Apply returns TernaryExpression
	 *     Apply.Apply_1_0 returns TernaryExpression
	 *     Functor returns TernaryExpression
	 *     ParenthesisExpression returns TernaryExpression
	 *
	 * Constraint:
	 *     (operator=TernaryOperator firstExpression=Expression secondExpression=Expression thirdExpression=Expression)
	 * </pre>
	 */
	protected void sequence_TernaryExpression(ISerializationContext context, TernaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__FIRST_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__FIRST_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__SECOND_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__SECOND_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__THIRD_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.TERNARY_EXPRESSION__THIRD_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTernaryExpressionAccess().getOperatorTernaryOperatorEnumRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getTernaryExpressionAccess().getFirstExpressionExpressionParserRuleCall_2_0(), semanticObject.getFirstExpression());
		feeder.accept(grammarAccess.getTernaryExpressionAccess().getSecondExpressionExpressionParserRuleCall_4_0(), semanticObject.getSecondExpression());
		feeder.accept(grammarAccess.getTernaryExpressionAccess().getThirdExpressionExpressionParserRuleCall_6_0(), semanticObject.getThirdExpression());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns VariableAssignment
	 *     ComparisonExpression returns VariableAssignment
	 *     ComparisonExpression.ComparisonExpression_1_0 returns VariableAssignment
	 *     NumericExpression returns VariableAssignment
	 *     NumericExpression.NumericExpression_1_0 returns VariableAssignment
	 *     Factor returns VariableAssignment
	 *     Factor.Factor_1_0 returns VariableAssignment
	 *     Term returns VariableAssignment
	 *     Apply returns VariableAssignment
	 *     Apply.Apply_1_0 returns VariableAssignment
	 *     Functor returns VariableAssignment
	 *     VariableAssignment returns VariableAssignment
	 *     ParenthesisExpression returns VariableAssignment
	 *
	 * Constraint:
	 *     (id=ID expression=Expression)
	 * </pre>
	 */
	protected void sequence_VariableAssignment(ISerializationContext context, VariableAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.VARIABLE_ASSIGNMENT__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.VARIABLE_ASSIGNMENT__ID));
			if (transientValues.isValueTransient(semanticObject, MiniScriptPackage.Literals.VARIABLE_ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MiniScriptPackage.Literals.VARIABLE_ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAssignmentAccess().getIdIDTerminalRuleCall_0_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getVariableAssignmentAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
