/*
 * generated by Xtext 2.35.0
 */
package de.beyondjava.xtext.jsf.serializer;

import com.google.inject.Inject;
import de.beyondjava.xtext.jsf.componentLanguage.Attribute;
import de.beyondjava.xtext.jsf.componentLanguage.AttributeList;
import de.beyondjava.xtext.jsf.componentLanguage.Component;
import de.beyondjava.xtext.jsf.componentLanguage.ComponentLanguagePackage;
import de.beyondjava.xtext.jsf.componentLanguage.Domainmodel;
import de.beyondjava.xtext.jsf.services.ComponentLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class ComponentLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ComponentLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ComponentLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ComponentLanguagePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case ComponentLanguagePackage.ATTRIBUTE_LIST:
				sequence_AttributeList(context, (AttributeList) semanticObject); 
				return; 
			case ComponentLanguagePackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case ComponentLanguagePackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeList returns AttributeList
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_AttributeList(ISerializationContext context, AttributeList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         name=CSSID 
	 *         type=Attributetype? 
	 *         defaultValue=STRING? 
	 *         required='mandatory'? 
	 *         inherited='inherited'? 
	 *         desc=STRING?
	 *     )
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         implementedBy+=QualifiedName? 
	 *         renderedBy+=QualifiedName? 
	 *         processesInput='processes_input'? 
	 *         extends=QualifiedName? 
	 *         hasChildren='has_children'? 
	 *         hasTooltip='has_tooltip'? 
	 *         isReponsive='is_responsive'? 
	 *         description=STRING? 
	 *         attributes+=Attribute* 
	 *         attributeLists+=ID*
	 *     )
	 * </pre>
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Domainmodel returns Domainmodel
	 *
	 * Constraint:
	 *     ((elements+=AttributeList+ elements+=Component+) | elements+=Component+)?
	 * </pre>
	 */
	protected void sequence_Domainmodel(ISerializationContext context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
