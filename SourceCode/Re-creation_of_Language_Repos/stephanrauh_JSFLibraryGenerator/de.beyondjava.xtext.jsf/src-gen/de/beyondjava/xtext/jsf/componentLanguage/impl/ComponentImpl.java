/**
 * generated by Xtext 2.35.0
 */
package de.beyondjava.xtext.jsf.componentLanguage.impl;

import de.beyondjava.xtext.jsf.componentLanguage.Attribute;
import de.beyondjava.xtext.jsf.componentLanguage.Component;
import de.beyondjava.xtext.jsf.componentLanguage.ComponentLanguagePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getImplementedBy <em>Implemented By</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getRenderedBy <em>Rendered By</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getProcessesInput <em>Processes Input</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getExtends <em>Extends</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getHasChildren <em>Has Children</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getHasTooltip <em>Has Tooltip</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getIsReponsive <em>Is Reponsive</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link de.beyondjava.xtext.jsf.componentLanguage.impl.ComponentImpl#getAttributeLists <em>Attribute Lists</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends MinimalEObjectImpl.Container implements Component
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getImplementedBy() <em>Implemented By</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImplementedBy()
   * @generated
   * @ordered
   */
  protected EList<String> implementedBy;

  /**
   * The cached value of the '{@link #getRenderedBy() <em>Rendered By</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRenderedBy()
   * @generated
   * @ordered
   */
  protected EList<String> renderedBy;

  /**
   * The default value of the '{@link #getProcessesInput() <em>Processes Input</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessesInput()
   * @generated
   * @ordered
   */
  protected static final String PROCESSES_INPUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProcessesInput() <em>Processes Input</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessesInput()
   * @generated
   * @ordered
   */
  protected String processesInput = PROCESSES_INPUT_EDEFAULT;

  /**
   * The default value of the '{@link #getExtends() <em>Extends</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtends()
   * @generated
   * @ordered
   */
  protected static final String EXTENDS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExtends() <em>Extends</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtends()
   * @generated
   * @ordered
   */
  protected String extends_ = EXTENDS_EDEFAULT;

  /**
   * The default value of the '{@link #getHasChildren() <em>Has Children</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHasChildren()
   * @generated
   * @ordered
   */
  protected static final String HAS_CHILDREN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHasChildren() <em>Has Children</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHasChildren()
   * @generated
   * @ordered
   */
  protected String hasChildren = HAS_CHILDREN_EDEFAULT;

  /**
   * The default value of the '{@link #getHasTooltip() <em>Has Tooltip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHasTooltip()
   * @generated
   * @ordered
   */
  protected static final String HAS_TOOLTIP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHasTooltip() <em>Has Tooltip</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHasTooltip()
   * @generated
   * @ordered
   */
  protected String hasTooltip = HAS_TOOLTIP_EDEFAULT;

  /**
   * The default value of the '{@link #getIsReponsive() <em>Is Reponsive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsReponsive()
   * @generated
   * @ordered
   */
  protected static final String IS_REPONSIVE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsReponsive() <em>Is Reponsive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsReponsive()
   * @generated
   * @ordered
   */
  protected String isReponsive = IS_REPONSIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<Attribute> attributes;

  /**
   * The cached value of the '{@link #getAttributeLists() <em>Attribute Lists</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributeLists()
   * @generated
   * @ordered
   */
  protected EList<String> attributeLists;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ComponentLanguagePackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getImplementedBy()
  {
    if (implementedBy == null)
    {
      implementedBy = new EDataTypeEList<String>(String.class, this, ComponentLanguagePackage.COMPONENT__IMPLEMENTED_BY);
    }
    return implementedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getRenderedBy()
  {
    if (renderedBy == null)
    {
      renderedBy = new EDataTypeEList<String>(String.class, this, ComponentLanguagePackage.COMPONENT__RENDERED_BY);
    }
    return renderedBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProcessesInput()
  {
    return processesInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcessesInput(String newProcessesInput)
  {
    String oldProcessesInput = processesInput;
    processesInput = newProcessesInput;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__PROCESSES_INPUT, oldProcessesInput, processesInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExtends()
  {
    return extends_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtends(String newExtends)
  {
    String oldExtends = extends_;
    extends_ = newExtends;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__EXTENDS, oldExtends, extends_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHasChildren()
  {
    return hasChildren;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHasChildren(String newHasChildren)
  {
    String oldHasChildren = hasChildren;
    hasChildren = newHasChildren;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__HAS_CHILDREN, oldHasChildren, hasChildren));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHasTooltip()
  {
    return hasTooltip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHasTooltip(String newHasTooltip)
  {
    String oldHasTooltip = hasTooltip;
    hasTooltip = newHasTooltip;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__HAS_TOOLTIP, oldHasTooltip, hasTooltip));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIsReponsive()
  {
    return isReponsive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsReponsive(String newIsReponsive)
  {
    String oldIsReponsive = isReponsive;
    isReponsive = newIsReponsive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__IS_REPONSIVE, oldIsReponsive, isReponsive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ComponentLanguagePackage.COMPONENT__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Attribute> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, ComponentLanguagePackage.COMPONENT__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getAttributeLists()
  {
    if (attributeLists == null)
    {
      attributeLists = new EDataTypeEList<String>(String.class, this, ComponentLanguagePackage.COMPONENT__ATTRIBUTE_LISTS);
    }
    return attributeLists;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ComponentLanguagePackage.COMPONENT__NAME:
        return getName();
      case ComponentLanguagePackage.COMPONENT__IMPLEMENTED_BY:
        return getImplementedBy();
      case ComponentLanguagePackage.COMPONENT__RENDERED_BY:
        return getRenderedBy();
      case ComponentLanguagePackage.COMPONENT__PROCESSES_INPUT:
        return getProcessesInput();
      case ComponentLanguagePackage.COMPONENT__EXTENDS:
        return getExtends();
      case ComponentLanguagePackage.COMPONENT__HAS_CHILDREN:
        return getHasChildren();
      case ComponentLanguagePackage.COMPONENT__HAS_TOOLTIP:
        return getHasTooltip();
      case ComponentLanguagePackage.COMPONENT__IS_REPONSIVE:
        return getIsReponsive();
      case ComponentLanguagePackage.COMPONENT__DESCRIPTION:
        return getDescription();
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTES:
        return getAttributes();
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTE_LISTS:
        return getAttributeLists();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ComponentLanguagePackage.COMPONENT__NAME:
        setName((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__IMPLEMENTED_BY:
        getImplementedBy().clear();
        getImplementedBy().addAll((Collection<? extends String>)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__RENDERED_BY:
        getRenderedBy().clear();
        getRenderedBy().addAll((Collection<? extends String>)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__PROCESSES_INPUT:
        setProcessesInput((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__EXTENDS:
        setExtends((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__HAS_CHILDREN:
        setHasChildren((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__HAS_TOOLTIP:
        setHasTooltip((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__IS_REPONSIVE:
        setIsReponsive((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends Attribute>)newValue);
        return;
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTE_LISTS:
        getAttributeLists().clear();
        getAttributeLists().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ComponentLanguagePackage.COMPONENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__IMPLEMENTED_BY:
        getImplementedBy().clear();
        return;
      case ComponentLanguagePackage.COMPONENT__RENDERED_BY:
        getRenderedBy().clear();
        return;
      case ComponentLanguagePackage.COMPONENT__PROCESSES_INPUT:
        setProcessesInput(PROCESSES_INPUT_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__EXTENDS:
        setExtends(EXTENDS_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__HAS_CHILDREN:
        setHasChildren(HAS_CHILDREN_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__HAS_TOOLTIP:
        setHasTooltip(HAS_TOOLTIP_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__IS_REPONSIVE:
        setIsReponsive(IS_REPONSIVE_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTES:
        getAttributes().clear();
        return;
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTE_LISTS:
        getAttributeLists().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ComponentLanguagePackage.COMPONENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ComponentLanguagePackage.COMPONENT__IMPLEMENTED_BY:
        return implementedBy != null && !implementedBy.isEmpty();
      case ComponentLanguagePackage.COMPONENT__RENDERED_BY:
        return renderedBy != null && !renderedBy.isEmpty();
      case ComponentLanguagePackage.COMPONENT__PROCESSES_INPUT:
        return PROCESSES_INPUT_EDEFAULT == null ? processesInput != null : !PROCESSES_INPUT_EDEFAULT.equals(processesInput);
      case ComponentLanguagePackage.COMPONENT__EXTENDS:
        return EXTENDS_EDEFAULT == null ? extends_ != null : !EXTENDS_EDEFAULT.equals(extends_);
      case ComponentLanguagePackage.COMPONENT__HAS_CHILDREN:
        return HAS_CHILDREN_EDEFAULT == null ? hasChildren != null : !HAS_CHILDREN_EDEFAULT.equals(hasChildren);
      case ComponentLanguagePackage.COMPONENT__HAS_TOOLTIP:
        return HAS_TOOLTIP_EDEFAULT == null ? hasTooltip != null : !HAS_TOOLTIP_EDEFAULT.equals(hasTooltip);
      case ComponentLanguagePackage.COMPONENT__IS_REPONSIVE:
        return IS_REPONSIVE_EDEFAULT == null ? isReponsive != null : !IS_REPONSIVE_EDEFAULT.equals(isReponsive);
      case ComponentLanguagePackage.COMPONENT__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case ComponentLanguagePackage.COMPONENT__ATTRIBUTE_LISTS:
        return attributeLists != null && !attributeLists.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", implementedBy: ");
    result.append(implementedBy);
    result.append(", renderedBy: ");
    result.append(renderedBy);
    result.append(", processesInput: ");
    result.append(processesInput);
    result.append(", extends: ");
    result.append(extends_);
    result.append(", hasChildren: ");
    result.append(hasChildren);
    result.append(", hasTooltip: ");
    result.append(hasTooltip);
    result.append(", isReponsive: ");
    result.append(isReponsive);
    result.append(", description: ");
    result.append(description);
    result.append(", attributeLists: ");
    result.append(attributeLists);
    result.append(')');
    return result.toString();
  }

} //ComponentImpl
