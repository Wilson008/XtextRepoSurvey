/*
 * generated by Xtext 2.35.0
 */
package de.beyondjava.xtext.jsf.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.beyondjava.xtext.jsf.ide.contentassist.antlr.internal.InternalComponentLanguageParser;
import de.beyondjava.xtext.jsf.services.ComponentLanguageGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ComponentLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ComponentLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ComponentLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAttributetypeAccess().getAlternatives(), "rule__Attributetype__Alternatives");
			builder.put(grammarAccess.getDomainmodelAccess().getGroup(), "rule__Domainmodel__Group__0");
			builder.put(grammarAccess.getAttributeListAccess().getGroup(), "rule__AttributeList__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_2(), "rule__Component__Group_2__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_3(), "rule__Component__Group_3__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_5(), "rule__Component__Group_5__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_9(), "rule__Component__Group_9__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_12(), "rule__Component__Group_12__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup_2(), "rule__Attribute__Group_2__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getCSSIDAccess().getGroup(), "rule__CSSID__Group__0");
			builder.put(grammarAccess.getCSSIDAccess().getGroup_1(), "rule__CSSID__Group_1__0");
			builder.put(grammarAccess.getAttributetypeAccess().getGroup_13(), "rule__Attributetype__Group_13__0");
			builder.put(grammarAccess.getDomainmodelAccess().getElementsAssignment_0(), "rule__Domainmodel__ElementsAssignment_0");
			builder.put(grammarAccess.getDomainmodelAccess().getElementsAssignment_1(), "rule__Domainmodel__ElementsAssignment_1");
			builder.put(grammarAccess.getAttributeListAccess().getNameAssignment_1(), "rule__AttributeList__NameAssignment_1");
			builder.put(grammarAccess.getAttributeListAccess().getAttributesAssignment_3(), "rule__AttributeList__AttributesAssignment_3");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getImplementedByAssignment_2_1(), "rule__Component__ImplementedByAssignment_2_1");
			builder.put(grammarAccess.getComponentAccess().getRenderedByAssignment_3_1(), "rule__Component__RenderedByAssignment_3_1");
			builder.put(grammarAccess.getComponentAccess().getProcessesInputAssignment_4(), "rule__Component__ProcessesInputAssignment_4");
			builder.put(grammarAccess.getComponentAccess().getExtendsAssignment_5_1(), "rule__Component__ExtendsAssignment_5_1");
			builder.put(grammarAccess.getComponentAccess().getHasChildrenAssignment_6(), "rule__Component__HasChildrenAssignment_6");
			builder.put(grammarAccess.getComponentAccess().getHasTooltipAssignment_7(), "rule__Component__HasTooltipAssignment_7");
			builder.put(grammarAccess.getComponentAccess().getIsReponsiveAssignment_8(), "rule__Component__IsReponsiveAssignment_8");
			builder.put(grammarAccess.getComponentAccess().getDescriptionAssignment_9_1(), "rule__Component__DescriptionAssignment_9_1");
			builder.put(grammarAccess.getComponentAccess().getAttributesAssignment_11(), "rule__Component__AttributesAssignment_11");
			builder.put(grammarAccess.getComponentAccess().getAttributeListsAssignment_12_1(), "rule__Component__AttributeListsAssignment_12_1");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_1(), "rule__Attribute__TypeAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getDefaultValueAssignment_2_1(), "rule__Attribute__DefaultValueAssignment_2_1");
			builder.put(grammarAccess.getAttributeAccess().getRequiredAssignment_3(), "rule__Attribute__RequiredAssignment_3");
			builder.put(grammarAccess.getAttributeAccess().getInheritedAssignment_4(), "rule__Attribute__InheritedAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getDescAssignment_5(), "rule__Attribute__DescAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ComponentLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalComponentLanguageParser createParser() {
		InternalComponentLanguageParser result = new InternalComponentLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ComponentLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ComponentLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
