/**
 */
package House2.provider;

import House2.util.House2AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class House2ItemProviderAdapterFactory extends House2AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public House2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.House} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HouseItemProvider houseItemProvider;

	/**
	 * This creates an adapter for a {@link House2.House}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHouseAdapter() {
		if (houseItemProvider == null) {
			houseItemProvider = new HouseItemProvider(this);
		}

		return houseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link House2.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.TemperatureSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemperatureSensorItemProvider temperatureSensorItemProvider;

	/**
	 * This creates an adapter for a {@link House2.TemperatureSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemperatureSensorAdapter() {
		if (temperatureSensorItemProvider == null) {
			temperatureSensorItemProvider = new TemperatureSensorItemProvider(this);
		}

		return temperatureSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.TwilightSwitch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TwilightSwitchItemProvider twilightSwitchItemProvider;

	/**
	 * This creates an adapter for a {@link House2.TwilightSwitch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTwilightSwitchAdapter() {
		if (twilightSwitchItemProvider == null) {
			twilightSwitchItemProvider = new TwilightSwitchItemProvider(this);
		}

		return twilightSwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.Boiler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoilerItemProvider boilerItemProvider;

	/**
	 * This creates an adapter for a {@link House2.Boiler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoilerAdapter() {
		if (boilerItemProvider == null) {
			boilerItemProvider = new BoilerItemProvider(this);
		}

		return boilerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.RollerBlind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RollerBlindItemProvider rollerBlindItemProvider;

	/**
	 * This creates an adapter for a {@link House2.RollerBlind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRollerBlindAdapter() {
		if (rollerBlindItemProvider == null) {
			rollerBlindItemProvider = new RollerBlindItemProvider(this);
		}

		return rollerBlindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.ControlRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlRuleItemProvider controlRuleItemProvider;

	/**
	 * This creates an adapter for a {@link House2.ControlRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlRuleAdapter() {
		if (controlRuleItemProvider == null) {
			controlRuleItemProvider = new ControlRuleItemProvider(this);
		}

		return controlRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.LessThanCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessThanConditionItemProvider lessThanConditionItemProvider;

	/**
	 * This creates an adapter for a {@link House2.LessThanCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessThanConditionAdapter() {
		if (lessThanConditionItemProvider == null) {
			lessThanConditionItemProvider = new LessThanConditionItemProvider(this);
		}

		return lessThanConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.GreaterThanCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterThanConditionItemProvider greaterThanConditionItemProvider;

	/**
	 * This creates an adapter for a {@link House2.GreaterThanCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterThanConditionAdapter() {
		if (greaterThanConditionItemProvider == null) {
			greaterThanConditionItemProvider = new GreaterThanConditionItemProvider(this);
		}

		return greaterThanConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.Lamp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LampItemProvider lampItemProvider;

	/**
	 * This creates an adapter for a {@link House2.Lamp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLampAdapter() {
		if (lampItemProvider == null) {
			lampItemProvider = new LampItemProvider(this);
		}

		return lampItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.EqualCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualConditionItemProvider equalConditionItemProvider;

	/**
	 * This creates an adapter for a {@link House2.EqualCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualConditionAdapter() {
		if (equalConditionItemProvider == null) {
			equalConditionItemProvider = new EqualConditionItemProvider(this);
		}

		return equalConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.RainSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RainSensorItemProvider rainSensorItemProvider;

	/**
	 * This creates an adapter for a {@link House2.RainSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRainSensorAdapter() {
		if (rainSensorItemProvider == null) {
			rainSensorItemProvider = new RainSensorItemProvider(this);
		}

		return rainSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.BooleanAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanActionItemProvider booleanActionItemProvider;

	/**
	 * This creates an adapter for a {@link House2.BooleanAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanActionAdapter() {
		if (booleanActionItemProvider == null) {
			booleanActionItemProvider = new BooleanActionItemProvider(this);
		}

		return booleanActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link House2.ValueAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueActionItemProvider valueActionItemProvider;

	/**
	 * This creates an adapter for a {@link House2.ValueAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueActionAdapter() {
		if (valueActionItemProvider == null) {
			valueActionItemProvider = new ValueActionItemProvider(this);
		}

		return valueActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (houseItemProvider != null) houseItemProvider.dispose();
		if (roomItemProvider != null) roomItemProvider.dispose();
		if (temperatureSensorItemProvider != null) temperatureSensorItemProvider.dispose();
		if (twilightSwitchItemProvider != null) twilightSwitchItemProvider.dispose();
		if (boilerItemProvider != null) boilerItemProvider.dispose();
		if (rollerBlindItemProvider != null) rollerBlindItemProvider.dispose();
		if (controlRuleItemProvider != null) controlRuleItemProvider.dispose();
		if (lessThanConditionItemProvider != null) lessThanConditionItemProvider.dispose();
		if (greaterThanConditionItemProvider != null) greaterThanConditionItemProvider.dispose();
		if (lampItemProvider != null) lampItemProvider.dispose();
		if (equalConditionItemProvider != null) equalConditionItemProvider.dispose();
		if (rainSensorItemProvider != null) rainSensorItemProvider.dispose();
		if (booleanActionItemProvider != null) booleanActionItemProvider.dispose();
		if (valueActionItemProvider != null) valueActionItemProvider.dispose();
	}

}
