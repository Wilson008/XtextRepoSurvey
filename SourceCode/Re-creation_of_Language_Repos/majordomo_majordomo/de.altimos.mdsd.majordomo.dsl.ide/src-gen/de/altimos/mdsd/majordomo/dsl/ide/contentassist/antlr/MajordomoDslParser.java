/*
 * generated by Xtext 2.35.0
 */
package de.altimos.mdsd.majordomo.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.altimos.mdsd.majordomo.dsl.ide.contentassist.antlr.internal.InternalMajordomoDslParser;
import de.altimos.mdsd.majordomo.dsl.services.MajordomoDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MajordomoDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MajordomoDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MajordomoDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProgramAccess().getAlternatives_3(), "rule__Program__Alternatives_3");
			builder.put(grammarAccess.getHouseAccess().getAlternatives_3_0(), "rule__House__Alternatives_3_0");
			builder.put(grammarAccess.getRoomAccess().getAlternatives_4_0(), "rule__Room__Alternatives_4_0");
			builder.put(grammarAccess.getSensorAccess().getAlternatives(), "rule__Sensor__Alternatives");
			builder.put(grammarAccess.getActorAccess().getAlternatives(), "rule__Actor__Alternatives");
			builder.put(grammarAccess.getNotOperationAccess().getAlternatives(), "rule__NotOperation__Alternatives");
			builder.put(grammarAccess.getNotOperationAccess().getAlternatives_1_1(), "rule__NotOperation__Alternatives_1_1");
			builder.put(grammarAccess.getUnaryStatementAccess().getAlternatives(), "rule__UnaryStatement__Alternatives");
			builder.put(grammarAccess.getValueExpressionAccess().getAlternatives(), "rule__ValueExpression__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getBinaryAndOperatorAccess().getAlternatives(), "rule__BinaryAndOperator__Alternatives");
			builder.put(grammarAccess.getBinaryOrOperatorAccess().getAlternatives(), "rule__BinaryOrOperator__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_2_2_0(), "rule__EFloat__Alternatives_2_2_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
			builder.put(grammarAccess.getMajordomoAccess().getGroup(), "rule__Majordomo__Group__0");
			builder.put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_3_0(), "rule__Program__Group_3_0__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_3_1(), "rule__Program__Group_3_1__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_3_2(), "rule__Program__Group_3_2__0");
			builder.put(grammarAccess.getProgramAccess().getGroup_3_3(), "rule__Program__Group_3_3__0");
			builder.put(grammarAccess.getHouseAccess().getGroup(), "rule__House__Group__0");
			builder.put(grammarAccess.getHouseAccess().getGroup_3(), "rule__House__Group_3__0");
			builder.put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup_4(), "rule__Room__Group_4__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_4(), "rule__Rule__Group_4__0");
			builder.put(grammarAccess.getBinaryOrOperationAccess().getGroup(), "rule__BinaryOrOperation__Group__0");
			builder.put(grammarAccess.getBinaryOrOperationAccess().getGroup_1(), "rule__BinaryOrOperation__Group_1__0");
			builder.put(grammarAccess.getBinaryAndOperationAccess().getGroup(), "rule__BinaryAndOperation__Group__0");
			builder.put(grammarAccess.getBinaryAndOperationAccess().getGroup_1(), "rule__BinaryAndOperation__Group_1__0");
			builder.put(grammarAccess.getNotOperationAccess().getGroup_1(), "rule__NotOperation__Group_1__0");
			builder.put(grammarAccess.getUnaryStatementAccess().getGroup_0(), "rule__UnaryStatement__Group_0__0");
			builder.put(grammarAccess.getBooleanSensorStatementAccess().getGroup(), "rule__BooleanSensorStatement__Group__0");
			builder.put(grammarAccess.getCompareOperationAccess().getGroup(), "rule__CompareOperation__Group__0");
			builder.put(grammarAccess.getPreparedStatementAccess().getGroup(), "rule__PreparedStatement__Group__0");
			builder.put(grammarAccess.getPreparedActionSetAccess().getGroup(), "rule__PreparedActionSet__Group__0");
			builder.put(grammarAccess.getPreparedActionSetAccess().getGroup_4(), "rule__PreparedActionSet__Group_4__0");
			builder.put(grammarAccess.getPreparedValueAccess().getGroup(), "rule__PreparedValue__Group__0");
			builder.put(grammarAccess.getBooleanActionAccess().getGroup(), "rule__BooleanAction__Group__0");
			builder.put(grammarAccess.getFloatActionAccess().getGroup(), "rule__FloatAction__Group__0");
			builder.put(grammarAccess.getLightSensorAccess().getGroup(), "rule__LightSensor__Group__0");
			builder.put(grammarAccess.getTemperatureSensorAccess().getGroup(), "rule__TemperatureSensor__Group__0");
			builder.put(grammarAccess.getRainSensorAccess().getGroup(), "rule__RainSensor__Group__0");
			builder.put(grammarAccess.getSwitchSensorAccess().getGroup(), "rule__SwitchSensor__Group__0");
			builder.put(grammarAccess.getNumberSensorAccess().getGroup(), "rule__NumberSensor__Group__0");
			builder.put(grammarAccess.getClockSensorAccess().getGroup(), "rule__ClockSensor__Group__0");
			builder.put(grammarAccess.getLampActorAccess().getGroup(), "rule__LampActor__Group__0");
			builder.put(grammarAccess.getRollerActorAccess().getGroup(), "rule__RollerActor__Group__0");
			builder.put(grammarAccess.getRoofWindowActorAccess().getGroup(), "rule__RoofWindowActor__Group__0");
			builder.put(grammarAccess.getRadiatorActorAccess().getGroup(), "rule__RadiatorActor__Group__0");
			builder.put(grammarAccess.getBoilerActorAccess().getGroup(), "rule__BoilerActor__Group__0");
			builder.put(grammarAccess.getCoffeeActorAccess().getGroup(), "rule__CoffeeActor__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_2(), "rule__EFloat__Group_2__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_2_2(), "rule__EFloat__Group_2_2__0");
			builder.put(grammarAccess.getMajordomoAccess().getHouseAssignment_1(), "rule__Majordomo__HouseAssignment_1");
			builder.put(grammarAccess.getMajordomoAccess().getRoomsAssignment_2(), "rule__Majordomo__RoomsAssignment_2");
			builder.put(grammarAccess.getMajordomoAccess().getProgramAssignment_3(), "rule__Majordomo__ProgramAssignment_3");
			builder.put(grammarAccess.getProgramAccess().getRulesAssignment_3_0_0(), "rule__Program__RulesAssignment_3_0_0");
			builder.put(grammarAccess.getProgramAccess().getPreparedStatementsAssignment_3_1_0(), "rule__Program__PreparedStatementsAssignment_3_1_0");
			builder.put(grammarAccess.getProgramAccess().getPreparedActionSetsAssignment_3_2_0(), "rule__Program__PreparedActionSetsAssignment_3_2_0");
			builder.put(grammarAccess.getProgramAccess().getConstantsAssignment_3_3_0(), "rule__Program__ConstantsAssignment_3_3_0");
			builder.put(grammarAccess.getHouseAccess().getSensorsAssignment_3_0_0(), "rule__House__SensorsAssignment_3_0_0");
			builder.put(grammarAccess.getHouseAccess().getActorsAssignment_3_0_1(), "rule__House__ActorsAssignment_3_0_1");
			builder.put(grammarAccess.getRoomAccess().getNameAssignment_2(), "rule__Room__NameAssignment_2");
			builder.put(grammarAccess.getRoomAccess().getSensorsAssignment_4_0_0(), "rule__Room__SensorsAssignment_4_0_0");
			builder.put(grammarAccess.getRoomAccess().getActorsAssignment_4_0_1(), "rule__Room__ActorsAssignment_4_0_1");
			builder.put(grammarAccess.getRuleAccess().getStatementAssignment_1(), "rule__Rule__StatementAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getActionsAssignment_3(), "rule__Rule__ActionsAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getActionsAssignment_4_1(), "rule__Rule__ActionsAssignment_4_1");
			builder.put(grammarAccess.getBinaryOrOperationAccess().getRightAssignment_1_2(), "rule__BinaryOrOperation__RightAssignment_1_2");
			builder.put(grammarAccess.getBinaryAndOperationAccess().getRightAssignment_1_2(), "rule__BinaryAndOperation__RightAssignment_1_2");
			builder.put(grammarAccess.getNotOperationAccess().getStatementAssignment_1_2(), "rule__NotOperation__StatementAssignment_1_2");
			builder.put(grammarAccess.getBooleanSensorStatementAccess().getSensorAssignment_0(), "rule__BooleanSensorStatement__SensorAssignment_0");
			builder.put(grammarAccess.getCompareOperationAccess().getLeftAssignment_0(), "rule__CompareOperation__LeftAssignment_0");
			builder.put(grammarAccess.getCompareOperationAccess().getComparatorAssignment_1(), "rule__CompareOperation__ComparatorAssignment_1");
			builder.put(grammarAccess.getCompareOperationAccess().getRightAssignment_2(), "rule__CompareOperation__RightAssignment_2");
			builder.put(grammarAccess.getSensorValueAccess().getSensorAssignment(), "rule__SensorValue__SensorAssignment");
			builder.put(grammarAccess.getConstantValueAccess().getValueAssignment(), "rule__ConstantValue__ValueAssignment");
			builder.put(grammarAccess.getValueReferenceAccess().getRefAssignment(), "rule__ValueReference__RefAssignment");
			builder.put(grammarAccess.getPreparedStatementAccess().getNameAssignment_1(), "rule__PreparedStatement__NameAssignment_1");
			builder.put(grammarAccess.getPreparedStatementAccess().getStatementAssignment_3(), "rule__PreparedStatement__StatementAssignment_3");
			builder.put(grammarAccess.getStatementReferenceAccess().getRefAssignment(), "rule__StatementReference__RefAssignment");
			builder.put(grammarAccess.getPreparedActionSetAccess().getNameAssignment_1(), "rule__PreparedActionSet__NameAssignment_1");
			builder.put(grammarAccess.getPreparedActionSetAccess().getActionsAssignment_3(), "rule__PreparedActionSet__ActionsAssignment_3");
			builder.put(grammarAccess.getPreparedActionSetAccess().getActionsAssignment_4_1(), "rule__PreparedActionSet__ActionsAssignment_4_1");
			builder.put(grammarAccess.getActionSetReferenceAccess().getRefAssignment(), "rule__ActionSetReference__RefAssignment");
			builder.put(grammarAccess.getPreparedValueAccess().getNameAssignment_1(), "rule__PreparedValue__NameAssignment_1");
			builder.put(grammarAccess.getPreparedValueAccess().getValueAssignment_3(), "rule__PreparedValue__ValueAssignment_3");
			builder.put(grammarAccess.getBooleanActionAccess().getActorAssignment_0(), "rule__BooleanAction__ActorAssignment_0");
			builder.put(grammarAccess.getBooleanActionAccess().getValueAssignment_2(), "rule__BooleanAction__ValueAssignment_2");
			builder.put(grammarAccess.getFloatActionAccess().getActorAssignment_0(), "rule__FloatAction__ActorAssignment_0");
			builder.put(grammarAccess.getFloatActionAccess().getValueAssignment_2(), "rule__FloatAction__ValueAssignment_2");
			builder.put(grammarAccess.getLightSensorAccess().getNameAssignment_1(), "rule__LightSensor__NameAssignment_1");
			builder.put(grammarAccess.getTemperatureSensorAccess().getNameAssignment_1(), "rule__TemperatureSensor__NameAssignment_1");
			builder.put(grammarAccess.getRainSensorAccess().getNameAssignment_1(), "rule__RainSensor__NameAssignment_1");
			builder.put(grammarAccess.getSwitchSensorAccess().getNameAssignment_1(), "rule__SwitchSensor__NameAssignment_1");
			builder.put(grammarAccess.getNumberSensorAccess().getNameAssignment_1(), "rule__NumberSensor__NameAssignment_1");
			builder.put(grammarAccess.getClockSensorAccess().getNameAssignment_1(), "rule__ClockSensor__NameAssignment_1");
			builder.put(grammarAccess.getLampActorAccess().getNameAssignment_1(), "rule__LampActor__NameAssignment_1");
			builder.put(grammarAccess.getRollerActorAccess().getNameAssignment_1(), "rule__RollerActor__NameAssignment_1");
			builder.put(grammarAccess.getRoofWindowActorAccess().getNameAssignment_1(), "rule__RoofWindowActor__NameAssignment_1");
			builder.put(grammarAccess.getRadiatorActorAccess().getNameAssignment_1(), "rule__RadiatorActor__NameAssignment_1");
			builder.put(grammarAccess.getBoilerActorAccess().getNameAssignment_1(), "rule__BoilerActor__NameAssignment_1");
			builder.put(grammarAccess.getCoffeeActorAccess().getNameAssignment_1(), "rule__CoffeeActor__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MajordomoDslGrammarAccess grammarAccess;

	@Override
	protected InternalMajordomoDslParser createParser() {
		InternalMajordomoDslParser result = new InternalMajordomoDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MajordomoDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MajordomoDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
