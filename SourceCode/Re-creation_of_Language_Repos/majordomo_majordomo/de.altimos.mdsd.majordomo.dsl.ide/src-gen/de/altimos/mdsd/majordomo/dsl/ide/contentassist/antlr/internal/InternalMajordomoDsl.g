/*
 * generated by Xtext 2.35.0
 */
grammar InternalMajordomoDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.altimos.mdsd.majordomo.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.altimos.mdsd.majordomo.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.altimos.mdsd.majordomo.dsl.services.MajordomoDslGrammarAccess;

}
@parser::members {
	private MajordomoDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MajordomoDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMajordomo
entryRuleMajordomo
:
{ before(grammarAccess.getMajordomoRule()); }
	 ruleMajordomo
{ after(grammarAccess.getMajordomoRule()); } 
	 EOF 
;

// Rule Majordomo
ruleMajordomo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMajordomoAccess().getGroup()); }
		(rule__Majordomo__Group__0)
		{ after(grammarAccess.getMajordomoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHouse
entryRuleHouse
:
{ before(grammarAccess.getHouseRule()); }
	 ruleHouse
{ after(grammarAccess.getHouseRule()); } 
	 EOF 
;

// Rule House
ruleHouse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHouseAccess().getGroup()); }
		(rule__House__Group__0)
		{ after(grammarAccess.getHouseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoom
entryRuleRoom
:
{ before(grammarAccess.getRoomRule()); }
	 ruleRoom
{ after(grammarAccess.getRoomRule()); } 
	 EOF 
;

// Rule Room
ruleRoom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoomAccess().getGroup()); }
		(rule__Room__Group__0)
		{ after(grammarAccess.getRoomAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getAlternatives()); }
		(rule__Sensor__Alternatives)
		{ after(grammarAccess.getSensorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActor
entryRuleActor
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActorAccess().getAlternatives()); }
		(rule__Actor__Alternatives)
		{ after(grammarAccess.getActorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getBinaryOrOperationParserRuleCall()); }
		ruleBinaryOrOperation
		{ after(grammarAccess.getStatementAccess().getBinaryOrOperationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryOrOperation
entryRuleBinaryOrOperation
:
{ before(grammarAccess.getBinaryOrOperationRule()); }
	 ruleBinaryOrOperation
{ after(grammarAccess.getBinaryOrOperationRule()); } 
	 EOF 
;

// Rule BinaryOrOperation
ruleBinaryOrOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryOrOperationAccess().getGroup()); }
		(rule__BinaryOrOperation__Group__0)
		{ after(grammarAccess.getBinaryOrOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryAndOperation
entryRuleBinaryAndOperation
:
{ before(grammarAccess.getBinaryAndOperationRule()); }
	 ruleBinaryAndOperation
{ after(grammarAccess.getBinaryAndOperationRule()); } 
	 EOF 
;

// Rule BinaryAndOperation
ruleBinaryAndOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryAndOperationAccess().getGroup()); }
		(rule__BinaryAndOperation__Group__0)
		{ after(grammarAccess.getBinaryAndOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotOperation
entryRuleNotOperation
:
{ before(grammarAccess.getNotOperationRule()); }
	 ruleNotOperation
{ after(grammarAccess.getNotOperationRule()); } 
	 EOF 
;

// Rule NotOperation
ruleNotOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotOperationAccess().getAlternatives()); }
		(rule__NotOperation__Alternatives)
		{ after(grammarAccess.getNotOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryStatement
entryRuleUnaryStatement
:
{ before(grammarAccess.getUnaryStatementRule()); }
	 ruleUnaryStatement
{ after(grammarAccess.getUnaryStatementRule()); } 
	 EOF 
;

// Rule UnaryStatement
ruleUnaryStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryStatementAccess().getAlternatives()); }
		(rule__UnaryStatement__Alternatives)
		{ after(grammarAccess.getUnaryStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanSensorStatement
entryRuleBooleanSensorStatement
:
{ before(grammarAccess.getBooleanSensorStatementRule()); }
	 ruleBooleanSensorStatement
{ after(grammarAccess.getBooleanSensorStatementRule()); } 
	 EOF 
;

// Rule BooleanSensorStatement
ruleBooleanSensorStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanSensorStatementAccess().getGroup()); }
		(rule__BooleanSensorStatement__Group__0)
		{ after(grammarAccess.getBooleanSensorStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompareOperation
entryRuleCompareOperation
:
{ before(grammarAccess.getCompareOperationRule()); }
	 ruleCompareOperation
{ after(grammarAccess.getCompareOperationRule()); } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompareOperationAccess().getGroup()); }
		(rule__CompareOperation__Group__0)
		{ after(grammarAccess.getCompareOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueExpression
entryRuleValueExpression
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
		(rule__ValueExpression__Alternatives)
		{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensorValue
entryRuleSensorValue
:
{ before(grammarAccess.getSensorValueRule()); }
	 ruleSensorValue
{ after(grammarAccess.getSensorValueRule()); } 
	 EOF 
;

// Rule SensorValue
ruleSensorValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorValueAccess().getSensorAssignment()); }
		(rule__SensorValue__SensorAssignment)
		{ after(grammarAccess.getSensorValueAccess().getSensorAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstantValue
entryRuleConstantValue
:
{ before(grammarAccess.getConstantValueRule()); }
	 ruleConstantValue
{ after(grammarAccess.getConstantValueRule()); } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantValueAccess().getValueAssignment()); }
		(rule__ConstantValue__ValueAssignment)
		{ after(grammarAccess.getConstantValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueReference
entryRuleValueReference
:
{ before(grammarAccess.getValueReferenceRule()); }
	 ruleValueReference
{ after(grammarAccess.getValueReferenceRule()); } 
	 EOF 
;

// Rule ValueReference
ruleValueReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueReferenceAccess().getRefAssignment()); }
		(rule__ValueReference__RefAssignment)
		{ after(grammarAccess.getValueReferenceAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreparedStatement
entryRulePreparedStatement
:
{ before(grammarAccess.getPreparedStatementRule()); }
	 rulePreparedStatement
{ after(grammarAccess.getPreparedStatementRule()); } 
	 EOF 
;

// Rule PreparedStatement
rulePreparedStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreparedStatementAccess().getGroup()); }
		(rule__PreparedStatement__Group__0)
		{ after(grammarAccess.getPreparedStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatementReference
entryRuleStatementReference
:
{ before(grammarAccess.getStatementReferenceRule()); }
	 ruleStatementReference
{ after(grammarAccess.getStatementReferenceRule()); } 
	 EOF 
;

// Rule StatementReference
ruleStatementReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementReferenceAccess().getRefAssignment()); }
		(rule__StatementReference__RefAssignment)
		{ after(grammarAccess.getStatementReferenceAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreparedActionSet
entryRulePreparedActionSet
:
{ before(grammarAccess.getPreparedActionSetRule()); }
	 rulePreparedActionSet
{ after(grammarAccess.getPreparedActionSetRule()); } 
	 EOF 
;

// Rule PreparedActionSet
rulePreparedActionSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreparedActionSetAccess().getGroup()); }
		(rule__PreparedActionSet__Group__0)
		{ after(grammarAccess.getPreparedActionSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionSetReference
entryRuleActionSetReference
:
{ before(grammarAccess.getActionSetReferenceRule()); }
	 ruleActionSetReference
{ after(grammarAccess.getActionSetReferenceRule()); } 
	 EOF 
;

// Rule ActionSetReference
ruleActionSetReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionSetReferenceAccess().getRefAssignment()); }
		(rule__ActionSetReference__RefAssignment)
		{ after(grammarAccess.getActionSetReferenceAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreparedValue
entryRulePreparedValue
:
{ before(grammarAccess.getPreparedValueRule()); }
	 rulePreparedValue
{ after(grammarAccess.getPreparedValueRule()); } 
	 EOF 
;

// Rule PreparedValue
rulePreparedValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreparedValueAccess().getGroup()); }
		(rule__PreparedValue__Group__0)
		{ after(grammarAccess.getPreparedValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanAction
entryRuleBooleanAction
:
{ before(grammarAccess.getBooleanActionRule()); }
	 ruleBooleanAction
{ after(grammarAccess.getBooleanActionRule()); } 
	 EOF 
;

// Rule BooleanAction
ruleBooleanAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanActionAccess().getGroup()); }
		(rule__BooleanAction__Group__0)
		{ after(grammarAccess.getBooleanActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatAction
entryRuleFloatAction
:
{ before(grammarAccess.getFloatActionRule()); }
	 ruleFloatAction
{ after(grammarAccess.getFloatActionRule()); } 
	 EOF 
;

// Rule FloatAction
ruleFloatAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatActionAccess().getGroup()); }
		(rule__FloatAction__Group__0)
		{ after(grammarAccess.getFloatActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLightSensor
entryRuleLightSensor
:
{ before(grammarAccess.getLightSensorRule()); }
	 ruleLightSensor
{ after(grammarAccess.getLightSensorRule()); } 
	 EOF 
;

// Rule LightSensor
ruleLightSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLightSensorAccess().getGroup()); }
		(rule__LightSensor__Group__0)
		{ after(grammarAccess.getLightSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTemperatureSensor
entryRuleTemperatureSensor
:
{ before(grammarAccess.getTemperatureSensorRule()); }
	 ruleTemperatureSensor
{ after(grammarAccess.getTemperatureSensorRule()); } 
	 EOF 
;

// Rule TemperatureSensor
ruleTemperatureSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTemperatureSensorAccess().getGroup()); }
		(rule__TemperatureSensor__Group__0)
		{ after(grammarAccess.getTemperatureSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRainSensor
entryRuleRainSensor
:
{ before(grammarAccess.getRainSensorRule()); }
	 ruleRainSensor
{ after(grammarAccess.getRainSensorRule()); } 
	 EOF 
;

// Rule RainSensor
ruleRainSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRainSensorAccess().getGroup()); }
		(rule__RainSensor__Group__0)
		{ after(grammarAccess.getRainSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchSensor
entryRuleSwitchSensor
:
{ before(grammarAccess.getSwitchSensorRule()); }
	 ruleSwitchSensor
{ after(grammarAccess.getSwitchSensorRule()); } 
	 EOF 
;

// Rule SwitchSensor
ruleSwitchSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchSensorAccess().getGroup()); }
		(rule__SwitchSensor__Group__0)
		{ after(grammarAccess.getSwitchSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberSensor
entryRuleNumberSensor
:
{ before(grammarAccess.getNumberSensorRule()); }
	 ruleNumberSensor
{ after(grammarAccess.getNumberSensorRule()); } 
	 EOF 
;

// Rule NumberSensor
ruleNumberSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberSensorAccess().getGroup()); }
		(rule__NumberSensor__Group__0)
		{ after(grammarAccess.getNumberSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClockSensor
entryRuleClockSensor
:
{ before(grammarAccess.getClockSensorRule()); }
	 ruleClockSensor
{ after(grammarAccess.getClockSensorRule()); } 
	 EOF 
;

// Rule ClockSensor
ruleClockSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClockSensorAccess().getGroup()); }
		(rule__ClockSensor__Group__0)
		{ after(grammarAccess.getClockSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLampActor
entryRuleLampActor
:
{ before(grammarAccess.getLampActorRule()); }
	 ruleLampActor
{ after(grammarAccess.getLampActorRule()); } 
	 EOF 
;

// Rule LampActor
ruleLampActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLampActorAccess().getGroup()); }
		(rule__LampActor__Group__0)
		{ after(grammarAccess.getLampActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRollerActor
entryRuleRollerActor
:
{ before(grammarAccess.getRollerActorRule()); }
	 ruleRollerActor
{ after(grammarAccess.getRollerActorRule()); } 
	 EOF 
;

// Rule RollerActor
ruleRollerActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRollerActorAccess().getGroup()); }
		(rule__RollerActor__Group__0)
		{ after(grammarAccess.getRollerActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoofWindowActor
entryRuleRoofWindowActor
:
{ before(grammarAccess.getRoofWindowActorRule()); }
	 ruleRoofWindowActor
{ after(grammarAccess.getRoofWindowActorRule()); } 
	 EOF 
;

// Rule RoofWindowActor
ruleRoofWindowActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoofWindowActorAccess().getGroup()); }
		(rule__RoofWindowActor__Group__0)
		{ after(grammarAccess.getRoofWindowActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRadiatorActor
entryRuleRadiatorActor
:
{ before(grammarAccess.getRadiatorActorRule()); }
	 ruleRadiatorActor
{ after(grammarAccess.getRadiatorActorRule()); } 
	 EOF 
;

// Rule RadiatorActor
ruleRadiatorActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRadiatorActorAccess().getGroup()); }
		(rule__RadiatorActor__Group__0)
		{ after(grammarAccess.getRadiatorActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoilerActor
entryRuleBoilerActor
:
{ before(grammarAccess.getBoilerActorRule()); }
	 ruleBoilerActor
{ after(grammarAccess.getBoilerActorRule()); } 
	 EOF 
;

// Rule BoilerActor
ruleBoilerActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBoilerActorAccess().getGroup()); }
		(rule__BoilerActor__Group__0)
		{ after(grammarAccess.getBoilerActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCoffeeActor
entryRuleCoffeeActor
:
{ before(grammarAccess.getCoffeeActorRule()); }
	 ruleCoffeeActor
{ after(grammarAccess.getCoffeeActorRule()); } 
	 EOF 
;

// Rule CoffeeActor
ruleCoffeeActor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCoffeeActorAccess().getGroup()); }
		(rule__CoffeeActor__Group__0)
		{ after(grammarAccess.getCoffeeActorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleName
entryRuleName
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getNameAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstID
entryRuleConstID
:
{ before(grammarAccess.getConstIDRule()); }
	 ruleConstID
{ after(grammarAccess.getConstIDRule()); } 
	 EOF 
;

// Rule ConstID
ruleConstID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstIDAccess().getCONSTTerminalRuleCall()); }
		RULE_CONST
		{ after(grammarAccess.getConstIDAccess().getCONSTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryAndOperator
entryRuleBinaryAndOperator
:
{ before(grammarAccess.getBinaryAndOperatorRule()); }
	 ruleBinaryAndOperator
{ after(grammarAccess.getBinaryAndOperatorRule()); } 
	 EOF 
;

// Rule BinaryAndOperator
ruleBinaryAndOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryAndOperatorAccess().getAlternatives()); }
		(rule__BinaryAndOperator__Alternatives)
		{ after(grammarAccess.getBinaryAndOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryOrOperator
entryRuleBinaryOrOperator
:
{ before(grammarAccess.getBinaryOrOperatorRule()); }
	 ruleBinaryOrOperator
{ after(grammarAccess.getBinaryOrOperatorRule()); } 
	 EOF 
;

// Rule BinaryOrOperator
ruleBinaryOrOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryOrOperatorAccess().getAlternatives()); }
		(rule__BinaryOrOperator__Alternatives)
		{ after(grammarAccess.getBinaryOrOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFloat
entryRuleEFloat
:
{ before(grammarAccess.getEFloatRule()); }
	 ruleEFloat
{ after(grammarAccess.getEFloatRule()); } 
	 EOF 
;

// Rule EFloat
ruleEFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFloatAccess().getGroup()); }
		(rule__EFloat__Group__0)
		{ after(grammarAccess.getEFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Comparator
ruleComparator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparatorAccess().getAlternatives()); }
		(rule__Comparator__Alternatives)
		{ after(grammarAccess.getComparatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Alternatives_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getGroup_3_0()); }
		(rule__Program__Group_3_0__0)
		{ after(grammarAccess.getProgramAccess().getGroup_3_0()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getGroup_3_1()); }
		(rule__Program__Group_3_1__0)
		{ after(grammarAccess.getProgramAccess().getGroup_3_1()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getGroup_3_2()); }
		(rule__Program__Group_3_2__0)
		{ after(grammarAccess.getProgramAccess().getGroup_3_2()); }
	)
	|
	(
		{ before(grammarAccess.getProgramAccess().getGroup_3_3()); }
		(rule__Program__Group_3_3__0)
		{ after(grammarAccess.getProgramAccess().getGroup_3_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Alternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHouseAccess().getSensorsAssignment_3_0_0()); }
		(rule__House__SensorsAssignment_3_0_0)
		{ after(grammarAccess.getHouseAccess().getSensorsAssignment_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getHouseAccess().getActorsAssignment_3_0_1()); }
		(rule__House__ActorsAssignment_3_0_1)
		{ after(grammarAccess.getHouseAccess().getActorsAssignment_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Alternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomAccess().getSensorsAssignment_4_0_0()); }
		(rule__Room__SensorsAssignment_4_0_0)
		{ after(grammarAccess.getRoomAccess().getSensorsAssignment_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRoomAccess().getActorsAssignment_4_0_1()); }
		(rule__Room__ActorsAssignment_4_0_1)
		{ after(grammarAccess.getRoomAccess().getActorsAssignment_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorAccess().getLightSensorParserRuleCall_0()); }
		ruleLightSensor
		{ after(grammarAccess.getSensorAccess().getLightSensorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getTemperatureSensorParserRuleCall_1()); }
		ruleTemperatureSensor
		{ after(grammarAccess.getSensorAccess().getTemperatureSensorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getRainSensorParserRuleCall_2()); }
		ruleRainSensor
		{ after(grammarAccess.getSensorAccess().getRainSensorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getSwitchSensorParserRuleCall_3()); }
		ruleSwitchSensor
		{ after(grammarAccess.getSensorAccess().getSwitchSensorParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getNumberSensorParserRuleCall_4()); }
		ruleNumberSensor
		{ after(grammarAccess.getSensorAccess().getNumberSensorParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getSensorAccess().getClockSensorParserRuleCall_5()); }
		ruleClockSensor
		{ after(grammarAccess.getSensorAccess().getClockSensorParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActorAccess().getLampActorParserRuleCall_0()); }
		ruleLampActor
		{ after(grammarAccess.getActorAccess().getLampActorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActorAccess().getRollerActorParserRuleCall_1()); }
		ruleRollerActor
		{ after(grammarAccess.getActorAccess().getRollerActorParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActorAccess().getRoofWindowActorParserRuleCall_2()); }
		ruleRoofWindowActor
		{ after(grammarAccess.getActorAccess().getRoofWindowActorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getActorAccess().getRadiatorActorParserRuleCall_3()); }
		ruleRadiatorActor
		{ after(grammarAccess.getActorAccess().getRadiatorActorParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getActorAccess().getBoilerActorParserRuleCall_4()); }
		ruleBoilerActor
		{ after(grammarAccess.getActorAccess().getBoilerActorParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getActorAccess().getCoffeeActorParserRuleCall_5()); }
		ruleCoffeeActor
		{ after(grammarAccess.getActorAccess().getCoffeeActorParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOperationAccess().getUnaryStatementParserRuleCall_0()); }
		ruleUnaryStatement
		{ after(grammarAccess.getNotOperationAccess().getUnaryStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotOperationAccess().getGroup_1()); }
		(rule__NotOperation__Group_1__0)
		{ after(grammarAccess.getNotOperationAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOperationAccess().getNotKeyword_1_1_0()); }
		'not'
		{ after(grammarAccess.getNotOperationAccess().getNotKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotOperationAccess().getExclamationMarkKeyword_1_1_1()); }
		'!'
		{ after(grammarAccess.getNotOperationAccess().getExclamationMarkKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryStatementAccess().getGroup_0()); }
		(rule__UnaryStatement__Group_0__0)
		{ after(grammarAccess.getUnaryStatementAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryStatementAccess().getStatementReferenceParserRuleCall_1()); }
		ruleStatementReference
		{ after(grammarAccess.getUnaryStatementAccess().getStatementReferenceParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryStatementAccess().getBooleanSensorStatementParserRuleCall_2()); }
		ruleBooleanSensorStatement
		{ after(grammarAccess.getUnaryStatementAccess().getBooleanSensorStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryStatementAccess().getCompareOperationParserRuleCall_3()); }
		ruleCompareOperation
		{ after(grammarAccess.getUnaryStatementAccess().getCompareOperationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionAccess().getSensorValueParserRuleCall_0()); }
		ruleSensorValue
		{ after(grammarAccess.getValueExpressionAccess().getSensorValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionAccess().getConstantValueParserRuleCall_1()); }
		ruleConstantValue
		{ after(grammarAccess.getValueExpressionAccess().getConstantValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionAccess().getValueReferenceParserRuleCall_2()); }
		ruleValueReference
		{ after(grammarAccess.getValueExpressionAccess().getValueReferenceParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getBooleanActionParserRuleCall_0()); }
		ruleBooleanAction
		{ after(grammarAccess.getActionAccess().getBooleanActionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getFloatActionParserRuleCall_1()); }
		ruleFloatAction
		{ after(grammarAccess.getActionAccess().getFloatActionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getActionSetReferenceParserRuleCall_2()); }
		ruleActionSetReference
		{ after(grammarAccess.getActionAccess().getActionSetReferenceParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAndOperatorAccess().getAndKeyword_0()); }
		'and'
		{ after(grammarAccess.getBinaryAndOperatorAccess().getAndKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAndOperatorAccess().getAmpersandAmpersandKeyword_1()); }
		'&&'
		{ after(grammarAccess.getBinaryAndOperatorAccess().getAmpersandAmpersandKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryAndOperatorAccess().getAmpersandKeyword_2()); }
		'&'
		{ after(grammarAccess.getBinaryAndOperatorAccess().getAmpersandKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOrOperatorAccess().getOrKeyword_0()); }
		'or'
		{ after(grammarAccess.getBinaryOrOperatorAccess().getOrKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOrOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
		'||'
		{ after(grammarAccess.getBinaryOrOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOrOperatorAccess().getVerticalLineKeyword_2()); }
		'|'
		{ after(grammarAccess.getBinaryOrOperatorAccess().getVerticalLineKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Alternatives_2_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEFloatAccess().getEKeyword_2_2_0_0()); }
		'E'
		{ after(grammarAccess.getEFloatAccess().getEKeyword_2_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEFloatAccess().getEKeyword_2_2_0_1()); }
		'e'
		{ after(grammarAccess.getEFloatAccess().getEKeyword_2_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparatorAccess().getLTEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getComparatorAccess().getLTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_1()); }
		('<=')
		{ after(grammarAccess.getComparatorAccess().getLEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_2()); }
		('>=')
		{ after(grammarAccess.getComparatorAccess().getGEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparatorAccess().getGTEnumLiteralDeclaration_3()); }
		('>')
		{ after(grammarAccess.getComparatorAccess().getGTEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Majordomo__Group__0__Impl
	rule__Majordomo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMajordomoAccess().getMajordomoAction_0()); }
	()
	{ after(grammarAccess.getMajordomoAccess().getMajordomoAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Majordomo__Group__1__Impl
	rule__Majordomo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMajordomoAccess().getHouseAssignment_1()); }
	(rule__Majordomo__HouseAssignment_1)?
	{ after(grammarAccess.getMajordomoAccess().getHouseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Majordomo__Group__2__Impl
	rule__Majordomo__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMajordomoAccess().getRoomsAssignment_2()); }
	(rule__Majordomo__RoomsAssignment_2)*
	{ after(grammarAccess.getMajordomoAccess().getRoomsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Majordomo__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMajordomoAccess().getProgramAssignment_3()); }
	(rule__Majordomo__ProgramAssignment_3)
	{ after(grammarAccess.getMajordomoAccess().getProgramAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramKeyword_1()); }
	'program'
	{ after(grammarAccess.getProgramAccess().getProgramKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getAlternatives_3()); }
	(rule__Program__Alternatives_3)*
	{ after(grammarAccess.getProgramAccess().getAlternatives_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_0__0__Impl
	rule__Program__Group_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getRulesAssignment_3_0_0()); }
	(rule__Program__RulesAssignment_3_0_0)
	{ after(grammarAccess.getProgramAccess().getRulesAssignment_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_3_0_1()); }
	(';')?
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_1__0__Impl
	rule__Program__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getPreparedStatementsAssignment_3_1_0()); }
	(rule__Program__PreparedStatementsAssignment_3_1_0)
	{ after(grammarAccess.getProgramAccess().getPreparedStatementsAssignment_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_3_1_1()); }
	(';')?
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_2__0__Impl
	rule__Program__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getPreparedActionSetsAssignment_3_2_0()); }
	(rule__Program__PreparedActionSetsAssignment_3_2_0)
	{ after(grammarAccess.getProgramAccess().getPreparedActionSetsAssignment_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_3_2_1()); }
	(';')?
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_3_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_3__0__Impl
	rule__Program__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getConstantsAssignment_3_3_0()); }
	(rule__Program__ConstantsAssignment_3_3_0)
	{ after(grammarAccess.getProgramAccess().getConstantsAssignment_3_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_3_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_3_3_1()); }
	(';')?
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_3_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__House__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group__0__Impl
	rule__House__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getHouseAction_0()); }
	()
	{ after(grammarAccess.getHouseAccess().getHouseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group__1__Impl
	rule__House__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getHouseKeyword_1()); }
	'house'
	{ after(grammarAccess.getHouseAccess().getHouseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group__2__Impl
	rule__House__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getHouseAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group__3__Impl
	rule__House__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getGroup_3()); }
	(rule__House__Group_3__0)*
	{ after(grammarAccess.getHouseAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getHouseAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__House__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group_3__0__Impl
	rule__House__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getAlternatives_3_0()); }
	(rule__House__Alternatives_3_0)
	{ after(grammarAccess.getHouseAccess().getAlternatives_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__House__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__House__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHouseAccess().getSemicolonKeyword_3_1()); }
	(';')?
	{ after(grammarAccess.getHouseAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Room__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group__0__Impl
	rule__Room__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getRoomAction_0()); }
	()
	{ after(grammarAccess.getRoomAccess().getRoomAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group__1__Impl
	rule__Room__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getRoomKeyword_1()); }
	'room'
	{ after(grammarAccess.getRoomAccess().getRoomKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group__2__Impl
	rule__Room__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getNameAssignment_2()); }
	(rule__Room__NameAssignment_2)
	{ after(grammarAccess.getRoomAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group__3__Impl
	rule__Room__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getRoomAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group__4__Impl
	rule__Room__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getGroup_4()); }
	(rule__Room__Group_4__0)*
	{ after(grammarAccess.getRoomAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getRoomAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Room__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group_4__0__Impl
	rule__Room__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getAlternatives_4_0()); }
	(rule__Room__Alternatives_4_0)
	{ after(grammarAccess.getRoomAccess().getAlternatives_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Room__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoomAccess().getSemicolonKeyword_4_1()); }
	(';')?
	{ after(grammarAccess.getRoomAccess().getSemicolonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getOnKeyword_0()); }
	'on'
	{ after(grammarAccess.getRuleAccess().getOnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getStatementAssignment_1()); }
	(rule__Rule__StatementAssignment_1)
	{ after(grammarAccess.getRuleAccess().getStatementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getRuleAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionsAssignment_3()); }
	(rule__Rule__ActionsAssignment_3)
	{ after(grammarAccess.getRuleAccess().getActionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getGroup_4()); }
	(rule__Rule__Group_4__0)*
	{ after(grammarAccess.getRuleAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_4__0__Impl
	rule__Rule__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getRuleAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionsAssignment_4_1()); }
	(rule__Rule__ActionsAssignment_4_1)
	{ after(grammarAccess.getRuleAccess().getActionsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryOrOperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOrOperation__Group__0__Impl
	rule__BinaryOrOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOrOperationAccess().getBinaryAndOperationParserRuleCall_0()); }
	ruleBinaryAndOperation
	{ after(grammarAccess.getBinaryOrOperationAccess().getBinaryAndOperationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOrOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOrOperationAccess().getGroup_1()); }
	(rule__BinaryOrOperation__Group_1__0)*
	{ after(grammarAccess.getBinaryOrOperationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryOrOperation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOrOperation__Group_1__0__Impl
	rule__BinaryOrOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOrOperationAccess().getBinaryOrOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBinaryOrOperationAccess().getBinaryOrOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOrOperation__Group_1__1__Impl
	rule__BinaryOrOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOrOperationAccess().getBinaryOrOperatorParserRuleCall_1_1()); }
	ruleBinaryOrOperator
	{ after(grammarAccess.getBinaryOrOperationAccess().getBinaryOrOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOrOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOrOperationAccess().getRightAssignment_1_2()); }
	(rule__BinaryOrOperation__RightAssignment_1_2)
	{ after(grammarAccess.getBinaryOrOperationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryAndOperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryAndOperation__Group__0__Impl
	rule__BinaryAndOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAndOperationAccess().getNotOperationParserRuleCall_0()); }
	ruleNotOperation
	{ after(grammarAccess.getBinaryAndOperationAccess().getNotOperationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryAndOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAndOperationAccess().getGroup_1()); }
	(rule__BinaryAndOperation__Group_1__0)*
	{ after(grammarAccess.getBinaryAndOperationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryAndOperation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryAndOperation__Group_1__0__Impl
	rule__BinaryAndOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAndOperationAccess().getBinaryAndOperationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBinaryAndOperationAccess().getBinaryAndOperationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryAndOperation__Group_1__1__Impl
	rule__BinaryAndOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAndOperationAccess().getBinaryAndOperatorParserRuleCall_1_1()); }
	ruleBinaryAndOperator
	{ after(grammarAccess.getBinaryAndOperationAccess().getBinaryAndOperatorParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryAndOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryAndOperationAccess().getRightAssignment_1_2()); }
	(rule__BinaryAndOperation__RightAssignment_1_2)
	{ after(grammarAccess.getBinaryAndOperationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NotOperation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOperation__Group_1__0__Impl
	rule__NotOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOperationAccess().getNotOperationAction_1_0()); }
	()
	{ after(grammarAccess.getNotOperationAccess().getNotOperationAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOperation__Group_1__1__Impl
	rule__NotOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOperationAccess().getAlternatives_1_1()); }
	(rule__NotOperation__Alternatives_1_1)
	{ after(grammarAccess.getNotOperationAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NotOperation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNotOperationAccess().getStatementAssignment_1_2()); }
	(rule__NotOperation__StatementAssignment_1_2)
	{ after(grammarAccess.getNotOperationAccess().getStatementAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryStatement__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryStatement__Group_0__0__Impl
	rule__UnaryStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryStatement__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryStatementAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getUnaryStatementAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryStatement__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryStatement__Group_0__1__Impl
	rule__UnaryStatement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryStatement__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryStatementAccess().getStatementParserRuleCall_0_1()); }
	ruleStatement
	{ after(grammarAccess.getUnaryStatementAccess().getStatementParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryStatement__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryStatement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryStatement__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryStatementAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getUnaryStatementAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanSensorStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanSensorStatement__Group__0__Impl
	rule__BooleanSensorStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanSensorStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanSensorStatementAccess().getSensorAssignment_0()); }
	(rule__BooleanSensorStatement__SensorAssignment_0)
	{ after(grammarAccess.getBooleanSensorStatementAccess().getSensorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanSensorStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanSensorStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanSensorStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanSensorStatementAccess().getQuestionMarkKeyword_1()); }
	'?'
	{ after(grammarAccess.getBooleanSensorStatementAccess().getQuestionMarkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompareOperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareOperation__Group__0__Impl
	rule__CompareOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareOperationAccess().getLeftAssignment_0()); }
	(rule__CompareOperation__LeftAssignment_0)
	{ after(grammarAccess.getCompareOperationAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareOperation__Group__1__Impl
	rule__CompareOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareOperationAccess().getComparatorAssignment_1()); }
	(rule__CompareOperation__ComparatorAssignment_1)
	{ after(grammarAccess.getCompareOperationAccess().getComparatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompareOperation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompareOperationAccess().getRightAssignment_2()); }
	(rule__CompareOperation__RightAssignment_2)
	{ after(grammarAccess.getCompareOperationAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PreparedStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedStatement__Group__0__Impl
	rule__PreparedStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedStatementAccess().getDefKeyword_0()); }
	'def'
	{ after(grammarAccess.getPreparedStatementAccess().getDefKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedStatement__Group__1__Impl
	rule__PreparedStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedStatementAccess().getNameAssignment_1()); }
	(rule__PreparedStatement__NameAssignment_1)
	{ after(grammarAccess.getPreparedStatementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedStatement__Group__2__Impl
	rule__PreparedStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedStatementAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPreparedStatementAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedStatementAccess().getStatementAssignment_3()); }
	(rule__PreparedStatement__StatementAssignment_3)
	{ after(grammarAccess.getPreparedStatementAccess().getStatementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PreparedActionSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group__0__Impl
	rule__PreparedActionSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getSetKeyword_0()); }
	'set'
	{ after(grammarAccess.getPreparedActionSetAccess().getSetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group__1__Impl
	rule__PreparedActionSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getNameAssignment_1()); }
	(rule__PreparedActionSet__NameAssignment_1)
	{ after(grammarAccess.getPreparedActionSetAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group__2__Impl
	rule__PreparedActionSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPreparedActionSetAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group__3__Impl
	rule__PreparedActionSet__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getActionsAssignment_3()); }
	(rule__PreparedActionSet__ActionsAssignment_3)
	{ after(grammarAccess.getPreparedActionSetAccess().getActionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getGroup_4()); }
	(rule__PreparedActionSet__Group_4__0)*
	{ after(grammarAccess.getPreparedActionSetAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PreparedActionSet__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group_4__0__Impl
	rule__PreparedActionSet__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPreparedActionSetAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedActionSet__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedActionSetAccess().getActionsAssignment_4_1()); }
	(rule__PreparedActionSet__ActionsAssignment_4_1)
	{ after(grammarAccess.getPreparedActionSetAccess().getActionsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PreparedValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedValue__Group__0__Impl
	rule__PreparedValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedValueAccess().getValKeyword_0()); }
	'val'
	{ after(grammarAccess.getPreparedValueAccess().getValKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedValue__Group__1__Impl
	rule__PreparedValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedValueAccess().getNameAssignment_1()); }
	(rule__PreparedValue__NameAssignment_1)
	{ after(grammarAccess.getPreparedValueAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedValue__Group__2__Impl
	rule__PreparedValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedValueAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPreparedValueAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreparedValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreparedValueAccess().getValueAssignment_3()); }
	(rule__PreparedValue__ValueAssignment_3)
	{ after(grammarAccess.getPreparedValueAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAction__Group__0__Impl
	rule__BooleanAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanActionAccess().getActorAssignment_0()); }
	(rule__BooleanAction__ActorAssignment_0)
	{ after(grammarAccess.getBooleanActionAccess().getActorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAction__Group__1__Impl
	rule__BooleanAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanActionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getBooleanActionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanActionAccess().getValueAssignment_2()); }
	(rule__BooleanAction__ValueAssignment_2)
	{ after(grammarAccess.getBooleanActionAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatAction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatAction__Group__0__Impl
	rule__FloatAction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatActionAccess().getActorAssignment_0()); }
	(rule__FloatAction__ActorAssignment_0)
	{ after(grammarAccess.getFloatActionAccess().getActorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatAction__Group__1__Impl
	rule__FloatAction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatActionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getFloatActionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatAction__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatActionAccess().getValueAssignment_2()); }
	(rule__FloatAction__ValueAssignment_2)
	{ after(grammarAccess.getFloatActionAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LightSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightSensor__Group__0__Impl
	rule__LightSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LightSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightSensorAccess().getLightKeyword_0()); }
	'@light'
	{ after(grammarAccess.getLightSensorAccess().getLightKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LightSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LightSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLightSensorAccess().getNameAssignment_1()); }
	(rule__LightSensor__NameAssignment_1)
	{ after(grammarAccess.getLightSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TemperatureSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemperatureSensor__Group__0__Impl
	rule__TemperatureSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemperatureSensorAccess().getTempKeyword_0()); }
	'@temp'
	{ after(grammarAccess.getTemperatureSensorAccess().getTempKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TemperatureSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTemperatureSensorAccess().getNameAssignment_1()); }
	(rule__TemperatureSensor__NameAssignment_1)
	{ after(grammarAccess.getTemperatureSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RainSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RainSensor__Group__0__Impl
	rule__RainSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RainSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRainSensorAccess().getRainKeyword_0()); }
	'@rain'
	{ after(grammarAccess.getRainSensorAccess().getRainKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RainSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RainSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RainSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRainSensorAccess().getNameAssignment_1()); }
	(rule__RainSensor__NameAssignment_1)
	{ after(grammarAccess.getRainSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchSensor__Group__0__Impl
	rule__SwitchSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchSensorAccess().getSwitchKeyword_0()); }
	'@switch'
	{ after(grammarAccess.getSwitchSensorAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchSensorAccess().getNameAssignment_1()); }
	(rule__SwitchSensor__NameAssignment_1)
	{ after(grammarAccess.getSwitchSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberSensor__Group__0__Impl
	rule__NumberSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberSensorAccess().getNumberKeyword_0()); }
	'@number'
	{ after(grammarAccess.getNumberSensorAccess().getNumberKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberSensorAccess().getNameAssignment_1()); }
	(rule__NumberSensor__NameAssignment_1)
	{ after(grammarAccess.getNumberSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClockSensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClockSensor__Group__0__Impl
	rule__ClockSensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClockSensorAccess().getClockKeyword_0()); }
	'@clock'
	{ after(grammarAccess.getClockSensorAccess().getClockKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClockSensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClockSensorAccess().getNameAssignment_1()); }
	(rule__ClockSensor__NameAssignment_1)
	{ after(grammarAccess.getClockSensorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LampActor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LampActor__Group__0__Impl
	rule__LampActor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LampActor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLampActorAccess().getLampKeyword_0()); }
	'@lamp'
	{ after(grammarAccess.getLampActorAccess().getLampKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LampActor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LampActor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LampActor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLampActorAccess().getNameAssignment_1()); }
	(rule__LampActor__NameAssignment_1)
	{ after(grammarAccess.getLampActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RollerActor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RollerActor__Group__0__Impl
	rule__RollerActor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerActor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRollerActorAccess().getRollerKeyword_0()); }
	'@roller'
	{ after(grammarAccess.getRollerActorAccess().getRollerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerActor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RollerActor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerActor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRollerActorAccess().getNameAssignment_1()); }
	(rule__RollerActor__NameAssignment_1)
	{ after(grammarAccess.getRollerActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RoofWindowActor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoofWindowActor__Group__0__Impl
	rule__RoofWindowActor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RoofWindowActor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoofWindowActorAccess().getRoofKeyword_0()); }
	'@roof'
	{ after(grammarAccess.getRoofWindowActorAccess().getRoofKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoofWindowActor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoofWindowActor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RoofWindowActor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoofWindowActorAccess().getNameAssignment_1()); }
	(rule__RoofWindowActor__NameAssignment_1)
	{ after(grammarAccess.getRoofWindowActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RadiatorActor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RadiatorActor__Group__0__Impl
	rule__RadiatorActor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RadiatorActor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRadiatorActorAccess().getRadiatorKeyword_0()); }
	'@radiator'
	{ after(grammarAccess.getRadiatorActorAccess().getRadiatorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RadiatorActor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RadiatorActor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RadiatorActor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRadiatorActorAccess().getNameAssignment_1()); }
	(rule__RadiatorActor__NameAssignment_1)
	{ after(grammarAccess.getRadiatorActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BoilerActor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoilerActor__Group__0__Impl
	rule__BoilerActor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoilerActor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoilerActorAccess().getBoilerKeyword_0()); }
	'@boiler'
	{ after(grammarAccess.getBoilerActorAccess().getBoilerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoilerActor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BoilerActor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoilerActor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBoilerActorAccess().getNameAssignment_1()); }
	(rule__BoilerActor__NameAssignment_1)
	{ after(grammarAccess.getBoilerActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CoffeeActor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CoffeeActor__Group__0__Impl
	rule__CoffeeActor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CoffeeActor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoffeeActorAccess().getCoffeeKeyword_0()); }
	'@coffee'
	{ after(grammarAccess.getCoffeeActorAccess().getCoffeeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CoffeeActor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CoffeeActor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CoffeeActor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoffeeActorAccess().getNameAssignment_1()); }
	(rule__CoffeeActor__NameAssignment_1)
	{ after(grammarAccess.getCoffeeActorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_0()); }
	ruleName
	{ after(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1_1()); }
	ruleName
	{ after(grammarAccess.getQualifiedNameAccess().getNameParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__0__Impl
	rule__EFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__1__Impl
	rule__EFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); }
	(RULE_INT)?
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getGroup_2()); }
	(rule__EFloat__Group_2__0)?
	{ after(grammarAccess.getEFloatAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_2__0__Impl
	rule__EFloat__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getEFloatAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_2__1__Impl
	rule__EFloat__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getGroup_2_2()); }
	(rule__EFloat__Group_2_2__0)?
	{ after(grammarAccess.getEFloatAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_2_2__0__Impl
	rule__EFloat__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getAlternatives_2_2_0()); }
	(rule__EFloat__Alternatives_2_2_0)
	{ after(grammarAccess.getEFloatAccess().getAlternatives_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_2_2__1__Impl
	rule__EFloat__Group_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_2_2_1()); }
	('-')?
	{ after(grammarAccess.getEFloatAccess().getHyphenMinusKeyword_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group_2_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2_2_2()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Majordomo__HouseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMajordomoAccess().getHouseHouseParserRuleCall_1_0()); }
		ruleHouse
		{ after(grammarAccess.getMajordomoAccess().getHouseHouseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__RoomsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMajordomoAccess().getRoomsRoomParserRuleCall_2_0()); }
		ruleRoom
		{ after(grammarAccess.getMajordomoAccess().getRoomsRoomParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Majordomo__ProgramAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMajordomoAccess().getProgramProgramParserRuleCall_3_0()); }
		ruleProgram
		{ after(grammarAccess.getMajordomoAccess().getProgramProgramParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__RulesAssignment_3_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getRulesRuleParserRuleCall_3_0_0_0()); }
		ruleRule
		{ after(grammarAccess.getProgramAccess().getRulesRuleParserRuleCall_3_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__PreparedStatementsAssignment_3_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getPreparedStatementsPreparedStatementParserRuleCall_3_1_0_0()); }
		rulePreparedStatement
		{ after(grammarAccess.getProgramAccess().getPreparedStatementsPreparedStatementParserRuleCall_3_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__PreparedActionSetsAssignment_3_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getPreparedActionSetsPreparedActionSetParserRuleCall_3_2_0_0()); }
		rulePreparedActionSet
		{ after(grammarAccess.getProgramAccess().getPreparedActionSetsPreparedActionSetParserRuleCall_3_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__ConstantsAssignment_3_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getConstantsPreparedValueParserRuleCall_3_3_0_0()); }
		rulePreparedValue
		{ after(grammarAccess.getProgramAccess().getConstantsPreparedValueParserRuleCall_3_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__SensorsAssignment_3_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHouseAccess().getSensorsSensorParserRuleCall_3_0_0_0()); }
		ruleSensor
		{ after(grammarAccess.getHouseAccess().getSensorsSensorParserRuleCall_3_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__House__ActorsAssignment_3_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHouseAccess().getActorsActorParserRuleCall_3_0_1_0()); }
		ruleActor
		{ after(grammarAccess.getHouseAccess().getActorsActorParserRuleCall_3_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomAccess().getNameNameParserRuleCall_2_0()); }
		ruleName
		{ after(grammarAccess.getRoomAccess().getNameNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__SensorsAssignment_4_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomAccess().getSensorsSensorParserRuleCall_4_0_0_0()); }
		ruleSensor
		{ after(grammarAccess.getRoomAccess().getSensorsSensorParserRuleCall_4_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Room__ActorsAssignment_4_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoomAccess().getActorsActorParserRuleCall_4_0_1_0()); }
		ruleActor
		{ after(grammarAccess.getRoomAccess().getActorsActorParserRuleCall_4_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__StatementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getStatementStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getRuleAccess().getStatementStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionsActionParserRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getRuleAccess().getActionsActionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionsActionParserRuleCall_4_1_0()); }
		ruleAction
		{ after(grammarAccess.getRuleAccess().getActionsActionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOrOperation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOrOperationAccess().getRightBinaryAndOperationParserRuleCall_1_2_0()); }
		ruleBinaryAndOperation
		{ after(grammarAccess.getBinaryOrOperationAccess().getRightBinaryAndOperationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryAndOperation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryAndOperationAccess().getRightNotOperationParserRuleCall_1_2_0()); }
		ruleNotOperation
		{ after(grammarAccess.getBinaryAndOperationAccess().getRightNotOperationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperation__StatementAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOperationAccess().getStatementUnaryStatementParserRuleCall_1_2_0()); }
		ruleUnaryStatement
		{ after(grammarAccess.getNotOperationAccess().getStatementUnaryStatementParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanSensorStatement__SensorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanSensorStatementAccess().getSensorBooleanSensorCrossReference_0_0()); }
		(
			{ before(grammarAccess.getBooleanSensorStatementAccess().getSensorBooleanSensorQualifiedNameParserRuleCall_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getBooleanSensorStatementAccess().getSensorBooleanSensorQualifiedNameParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getBooleanSensorStatementAccess().getSensorBooleanSensorCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperationAccess().getLeftValueExpressionParserRuleCall_0_0()); }
		ruleValueExpression
		{ after(grammarAccess.getCompareOperationAccess().getLeftValueExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__ComparatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperationAccess().getComparatorComparatorEnumRuleCall_1_0()); }
		ruleComparator
		{ after(grammarAccess.getCompareOperationAccess().getComparatorComparatorEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperation__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompareOperationAccess().getRightValueExpressionParserRuleCall_2_0()); }
		ruleValueExpression
		{ after(grammarAccess.getCompareOperationAccess().getRightValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SensorValue__SensorAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSensorValueAccess().getSensorFloatSensorCrossReference_0()); }
		(
			{ before(grammarAccess.getSensorValueAccess().getSensorFloatSensorQualifiedNameParserRuleCall_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getSensorValueAccess().getSensorFloatSensorQualifiedNameParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getSensorValueAccess().getSensorFloatSensorCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantValueAccess().getValueEFloatParserRuleCall_0()); }
		ruleEFloat
		{ after(grammarAccess.getConstantValueAccess().getValueEFloatParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueReference__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueReferenceAccess().getRefPreparedValueCrossReference_0()); }
		(
			{ before(grammarAccess.getValueReferenceAccess().getRefPreparedValueConstIDParserRuleCall_0_1()); }
			ruleConstID
			{ after(grammarAccess.getValueReferenceAccess().getRefPreparedValueConstIDParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getValueReferenceAccess().getRefPreparedValueCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedStatementAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getPreparedStatementAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedStatement__StatementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedStatementAccess().getStatementStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getPreparedStatementAccess().getStatementStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementReference__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementReferenceAccess().getRefPreparedStatementCrossReference_0()); }
		(
			{ before(grammarAccess.getStatementReferenceAccess().getRefPreparedStatementNameParserRuleCall_0_1()); }
			ruleName
			{ after(grammarAccess.getStatementReferenceAccess().getRefPreparedStatementNameParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getStatementReferenceAccess().getRefPreparedStatementCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedActionSetAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getPreparedActionSetAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__ActionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedActionSetAccess().getActionsActionParserRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getPreparedActionSetAccess().getActionsActionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedActionSet__ActionsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedActionSetAccess().getActionsActionParserRuleCall_4_1_0()); }
		ruleAction
		{ after(grammarAccess.getPreparedActionSetAccess().getActionsActionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSetReference__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSetReferenceAccess().getRefPreparedActionSetCrossReference_0()); }
		(
			{ before(grammarAccess.getActionSetReferenceAccess().getRefPreparedActionSetNameParserRuleCall_0_1()); }
			ruleName
			{ after(grammarAccess.getActionSetReferenceAccess().getRefPreparedActionSetNameParserRuleCall_0_1()); }
		)
		{ after(grammarAccess.getActionSetReferenceAccess().getRefPreparedActionSetCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedValueAccess().getNameConstIDParserRuleCall_1_0()); }
		ruleConstID
		{ after(grammarAccess.getPreparedValueAccess().getNameConstIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreparedValue__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreparedValueAccess().getValueValueExpressionParserRuleCall_3_0()); }
		ruleValueExpression
		{ after(grammarAccess.getPreparedValueAccess().getValueValueExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__ActorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanActionAccess().getActorBooleanActorCrossReference_0_0()); }
		(
			{ before(grammarAccess.getBooleanActionAccess().getActorBooleanActorQualifiedNameParserRuleCall_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getBooleanActionAccess().getActorBooleanActorQualifiedNameParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getBooleanActionAccess().getActorBooleanActorCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAction__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanActionAccess().getValueEBooleanParserRuleCall_2_0()); }
		ruleEBoolean
		{ after(grammarAccess.getBooleanActionAccess().getValueEBooleanParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__ActorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatActionAccess().getActorFloatActorCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFloatActionAccess().getActorFloatActorQualifiedNameParserRuleCall_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getFloatActionAccess().getActorFloatActorQualifiedNameParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFloatActionAccess().getActorFloatActorCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatAction__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFloatActionAccess().getValueEFloatParserRuleCall_2_0()); }
		ruleEFloat
		{ after(grammarAccess.getFloatActionAccess().getValueEFloatParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LightSensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLightSensorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getLightSensorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TemperatureSensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTemperatureSensorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getTemperatureSensorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RainSensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRainSensorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getRainSensorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchSensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchSensorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getSwitchSensorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberSensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberSensorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getNumberSensorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockSensor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClockSensorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getClockSensorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LampActor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLampActorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getLampActorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RollerActor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRollerActorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getRollerActorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoofWindowActor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoofWindowActorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getRoofWindowActorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RadiatorActor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRadiatorActorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getRadiatorActorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoilerActor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoilerActorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getBoilerActorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CoffeeActor__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoffeeActorAccess().getNameNameParserRuleCall_1_0()); }
		ruleName
		{ after(grammarAccess.getCoffeeActorAccess().getNameNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CONST : ('A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
