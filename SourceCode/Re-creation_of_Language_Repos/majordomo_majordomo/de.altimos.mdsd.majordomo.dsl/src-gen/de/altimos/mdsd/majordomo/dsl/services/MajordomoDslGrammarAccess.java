/*
 * generated by Xtext 2.35.0
 */
package de.altimos.mdsd.majordomo.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MajordomoDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MajordomoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Majordomo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMajordomoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cHouseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHouseHouseParserRuleCall_1_0 = (RuleCall)cHouseAssignment_1.eContents().get(0);
		private final Assignment cRoomsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRoomsRoomParserRuleCall_2_0 = (RuleCall)cRoomsAssignment_2.eContents().get(0);
		private final Assignment cProgramAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProgramProgramParserRuleCall_3_0 = (RuleCall)cProgramAssignment_3.eContents().get(0);
		
		//Majordomo:
		//    {Majordomo}
		//    (house=House)?
		//    (rooms+=Room)*
		//    program=Program
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Majordomo}
		//(house=House)?
		//(rooms+=Room)*
		//program=Program
		public Group getGroup() { return cGroup; }
		
		//{Majordomo}
		public Action getMajordomoAction_0() { return cMajordomoAction_0; }
		
		//(house=House)?
		public Assignment getHouseAssignment_1() { return cHouseAssignment_1; }
		
		//House
		public RuleCall getHouseHouseParserRuleCall_1_0() { return cHouseHouseParserRuleCall_1_0; }
		
		//(rooms+=Room)*
		public Assignment getRoomsAssignment_2() { return cRoomsAssignment_2; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_2_0() { return cRoomsRoomParserRuleCall_2_0; }
		
		//program=Program
		public Assignment getProgramAssignment_3() { return cProgramAssignment_3; }
		
		//Program
		public RuleCall getProgramProgramParserRuleCall_3_0() { return cProgramProgramParserRuleCall_3_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cRulesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_3_0_0_0 = (RuleCall)cRulesAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cPreparedStatementsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cPreparedStatementsPreparedStatementParserRuleCall_3_1_0_0 = (RuleCall)cPreparedStatementsAssignment_3_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cAlternatives_3.eContents().get(2);
		private final Assignment cPreparedActionSetsAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cPreparedActionSetsPreparedActionSetParserRuleCall_3_2_0_0 = (RuleCall)cPreparedActionSetsAssignment_3_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cAlternatives_3.eContents().get(3);
		private final Assignment cConstantsAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cConstantsPreparedValueParserRuleCall_3_3_0_0 = (RuleCall)cConstantsAssignment_3_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program:
		//    {Program}
		//    'program'
		//    '{'
		//        (
		//            (rules+=Rule ';'?) |
		//            (preparedStatements+=PreparedStatement ';'?) |
		//            (preparedActionSets+=PreparedActionSet ';'?) |
		//            (constants+=PreparedValue ';'?)
		//        )*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'program'
		//'{'
		//    (
		//        (rules+=Rule ';'?) |
		//        (preparedStatements+=PreparedStatement ';'?) |
		//        (preparedActionSets+=PreparedActionSet ';'?) |
		//        (constants+=PreparedValue ';'?)
		//    )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(
		//    (rules+=Rule ';'?) |
		//    (preparedStatements+=PreparedStatement ';'?) |
		//    (preparedActionSets+=PreparedActionSet ';'?) |
		//    (constants+=PreparedValue ';'?)
		//)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(rules+=Rule ';'?)
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_3_0_0() { return cRulesAssignment_3_0_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_0_0_0() { return cRulesRuleParserRuleCall_3_0_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }
		
		//(preparedStatements+=PreparedStatement ';'?)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//preparedStatements+=PreparedStatement
		public Assignment getPreparedStatementsAssignment_3_1_0() { return cPreparedStatementsAssignment_3_1_0; }
		
		//PreparedStatement
		public RuleCall getPreparedStatementsPreparedStatementParserRuleCall_3_1_0_0() { return cPreparedStatementsPreparedStatementParserRuleCall_3_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_1_1() { return cSemicolonKeyword_3_1_1; }
		
		//(preparedActionSets+=PreparedActionSet ';'?)
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//preparedActionSets+=PreparedActionSet
		public Assignment getPreparedActionSetsAssignment_3_2_0() { return cPreparedActionSetsAssignment_3_2_0; }
		
		//PreparedActionSet
		public RuleCall getPreparedActionSetsPreparedActionSetParserRuleCall_3_2_0_0() { return cPreparedActionSetsPreparedActionSetParserRuleCall_3_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_2_1() { return cSemicolonKeyword_3_2_1; }
		
		//(constants+=PreparedValue ';'?)
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//constants+=PreparedValue
		public Assignment getConstantsAssignment_3_3_0() { return cConstantsAssignment_3_3_0; }
		
		//PreparedValue
		public RuleCall getConstantsPreparedValueParserRuleCall_3_3_0_0() { return cConstantsPreparedValueParserRuleCall_3_3_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_3_1() { return cSemicolonKeyword_3_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class HouseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.House");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHouseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHouseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cSensorsAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cSensorsSensorParserRuleCall_3_0_0_0 = (RuleCall)cSensorsAssignment_3_0_0.eContents().get(0);
		private final Assignment cActorsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_3_0_1_0 = (RuleCall)cActorsAssignment_3_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//House:
		//    {House}
		//    'house'
		//    '{'
		//        ((sensors+=Sensor|actors+=Actor) ';'?)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{House}
		//'house'
		//'{'
		//    ((sensors+=Sensor|actors+=Actor) ';'?)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{House}
		public Action getHouseAction_0() { return cHouseAction_0; }
		
		//'house'
		public Keyword getHouseKeyword_1() { return cHouseKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//((sensors+=Sensor|actors+=Actor) ';'?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//(sensors+=Sensor|actors+=Actor)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_3_0_0() { return cSensorsAssignment_3_0_0; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_0_0_0() { return cSensorsSensorParserRuleCall_3_0_0_0; }
		
		//actors+=Actor
		public Assignment getActorsAssignment_3_0_1() { return cActorsAssignment_3_0_1; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_3_0_1_0() { return cActorsActorParserRuleCall_3_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoomAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoomKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Assignment cSensorsAssignment_4_0_0 = (Assignment)cAlternatives_4_0.eContents().get(0);
		private final RuleCall cSensorsSensorParserRuleCall_4_0_0_0 = (RuleCall)cSensorsAssignment_4_0_0.eContents().get(0);
		private final Assignment cActorsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_4_0_1_0 = (RuleCall)cActorsAssignment_4_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Room:
		//    {Room}
		//    'room'
		//    name=Name
		//    '{'
		//        ((sensors+=Sensor|actors+=Actor) ';'?)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Room}
		//'room'
		//name=Name
		//'{'
		//    ((sensors+=Sensor|actors+=Actor) ';'?)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Room}
		public Action getRoomAction_0() { return cRoomAction_0; }
		
		//'room'
		public Keyword getRoomKeyword_1() { return cRoomKeyword_1; }
		
		//name=Name
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_2_0() { return cNameNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//((sensors+=Sensor|actors+=Actor) ';'?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//(sensors+=Sensor|actors+=Actor)
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_4_0_0() { return cSensorsAssignment_4_0_0; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_4_0_0_0() { return cSensorsSensorParserRuleCall_4_0_0_0; }
		
		//actors+=Actor
		public Assignment getActorsAssignment_4_0_1() { return cActorsAssignment_4_0_1; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_4_0_1_0() { return cActorsActorParserRuleCall_4_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLightSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemperatureSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRainSensorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSwitchSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNumberSensorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cClockSensorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Sensor:
		//    LightSensor | TemperatureSensor | RainSensor | SwitchSensor | NumberSensor | ClockSensor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LightSensor | TemperatureSensor | RainSensor | SwitchSensor | NumberSensor | ClockSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LightSensor
		public RuleCall getLightSensorParserRuleCall_0() { return cLightSensorParserRuleCall_0; }
		
		//TemperatureSensor
		public RuleCall getTemperatureSensorParserRuleCall_1() { return cTemperatureSensorParserRuleCall_1; }
		
		//RainSensor
		public RuleCall getRainSensorParserRuleCall_2() { return cRainSensorParserRuleCall_2; }
		
		//SwitchSensor
		public RuleCall getSwitchSensorParserRuleCall_3() { return cSwitchSensorParserRuleCall_3; }
		
		//NumberSensor
		public RuleCall getNumberSensorParserRuleCall_4() { return cNumberSensorParserRuleCall_4; }
		
		//ClockSensor
		public RuleCall getClockSensorParserRuleCall_5() { return cClockSensorParserRuleCall_5; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Actor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLampActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRollerActorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRoofWindowActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRadiatorActorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBoilerActorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCoffeeActorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Actor:
		//    LampActor | RollerActor | RoofWindowActor | RadiatorActor | BoilerActor | CoffeeActor
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LampActor | RollerActor | RoofWindowActor | RadiatorActor | BoilerActor | CoffeeActor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LampActor
		public RuleCall getLampActorParserRuleCall_0() { return cLampActorParserRuleCall_0; }
		
		//RollerActor
		public RuleCall getRollerActorParserRuleCall_1() { return cRollerActorParserRuleCall_1; }
		
		//RoofWindowActor
		public RuleCall getRoofWindowActorParserRuleCall_2() { return cRoofWindowActorParserRuleCall_2; }
		
		//RadiatorActor
		public RuleCall getRadiatorActorParserRuleCall_3() { return cRadiatorActorParserRuleCall_3; }
		
		//BoilerActor
		public RuleCall getBoilerActorParserRuleCall_4() { return cBoilerActorParserRuleCall_4; }
		
		//CoffeeActor
		public RuleCall getCoffeeActorParserRuleCall_5() { return cCoffeeActorParserRuleCall_5; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_4_1_0 = (RuleCall)cActionsAssignment_4_1.eContents().get(0);
		
		//// Rules and Statements
		////
		//Rule:
		//    'on' statement=Statement 'do' (actions+=Action)(',' (actions+=Action))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' statement=Statement 'do' (actions+=Action)(',' (actions+=Action))*
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//(actions+=Action)
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
		
		//(',' (actions+=Action))*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//(actions+=Action)
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_4_1_0() { return cActionsActionParserRuleCall_4_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Statement");
		private final RuleCall cBinaryOrOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement returns Statement:
		//    BinaryOrOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryOrOperation
		public RuleCall getBinaryOrOperationParserRuleCall() { return cBinaryOrOperationParserRuleCall; }
	}
	public class BinaryOrOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BinaryOrOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryAndOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryOrOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBinaryOrOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBinaryAndOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryOrOperation returns Statement:
		//    BinaryAndOperation ({BinaryOrOperation.left=current} BinaryOrOperator right=BinaryAndOperation)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryAndOperation ({BinaryOrOperation.left=current} BinaryOrOperator right=BinaryAndOperation)*
		public Group getGroup() { return cGroup; }
		
		//BinaryAndOperation
		public RuleCall getBinaryAndOperationParserRuleCall_0() { return cBinaryAndOperationParserRuleCall_0; }
		
		//({BinaryOrOperation.left=current} BinaryOrOperator right=BinaryAndOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryOrOperation.left=current}
		public Action getBinaryOrOperationLeftAction_1_0() { return cBinaryOrOperationLeftAction_1_0; }
		
		//BinaryOrOperator
		public RuleCall getBinaryOrOperatorParserRuleCall_1_1() { return cBinaryOrOperatorParserRuleCall_1_1; }
		
		//right=BinaryAndOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BinaryAndOperation
		public RuleCall getRightBinaryAndOperationParserRuleCall_1_2_0() { return cRightBinaryAndOperationParserRuleCall_1_2_0; }
	}
	public class BinaryAndOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BinaryAndOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNotOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryAndOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBinaryAndOperatorParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNotOperationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//BinaryAndOperation returns Statement:
		//    NotOperation ({BinaryAndOperation.left=current} BinaryAndOperator right=NotOperation)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NotOperation ({BinaryAndOperation.left=current} BinaryAndOperator right=NotOperation)*
		public Group getGroup() { return cGroup; }
		
		//NotOperation
		public RuleCall getNotOperationParserRuleCall_0() { return cNotOperationParserRuleCall_0; }
		
		//({BinaryAndOperation.left=current} BinaryAndOperator right=NotOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryAndOperation.left=current}
		public Action getBinaryAndOperationLeftAction_1_0() { return cBinaryAndOperationLeftAction_1_0; }
		
		//BinaryAndOperator
		public RuleCall getBinaryAndOperatorParserRuleCall_1_1() { return cBinaryAndOperatorParserRuleCall_1_1; }
		
		//right=NotOperation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//NotOperation
		public RuleCall getRightNotOperationParserRuleCall_1_2_0() { return cRightNotOperationParserRuleCall_1_2_0; }
	}
	public class NotOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.NotOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cNotKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cStatementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatementUnaryStatementParserRuleCall_1_2_0 = (RuleCall)cStatementAssignment_1_2.eContents().get(0);
		
		//NotOperation returns Statement:
		//    UnaryStatement | ({NotOperation} ('not' | '!') statement=UnaryStatement)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryStatement | ({NotOperation} ('not' | '!') statement=UnaryStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryStatement
		public RuleCall getUnaryStatementParserRuleCall_0() { return cUnaryStatementParserRuleCall_0; }
		
		//({NotOperation} ('not' | '!') statement=UnaryStatement)
		public Group getGroup_1() { return cGroup_1; }
		
		//{NotOperation}
		public Action getNotOperationAction_1_0() { return cNotOperationAction_1_0; }
		
		//('not' | '!')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'not'
		public Keyword getNotKeyword_1_1_0() { return cNotKeyword_1_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1_1() { return cExclamationMarkKeyword_1_1_1; }
		
		//statement=UnaryStatement
		public Assignment getStatementAssignment_1_2() { return cStatementAssignment_1_2; }
		
		//UnaryStatement
		public RuleCall getStatementUnaryStatementParserRuleCall_1_2_0() { return cStatementUnaryStatementParserRuleCall_1_2_0; }
	}
	public class UnaryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.UnaryStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cStatementReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanSensorStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompareOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//UnaryStatement returns Statement:
		//    ('(' Statement ')') | StatementReference | BooleanSensorStatement | CompareOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('(' Statement ')') | StatementReference | BooleanSensorStatement | CompareOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('(' Statement ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_0_1() { return cStatementParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//StatementReference
		public RuleCall getStatementReferenceParserRuleCall_1() { return cStatementReferenceParserRuleCall_1; }
		
		//BooleanSensorStatement
		public RuleCall getBooleanSensorStatementParserRuleCall_2() { return cBooleanSensorStatementParserRuleCall_2; }
		
		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_3() { return cCompareOperationParserRuleCall_3; }
	}
	public class BooleanSensorStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BooleanSensorStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorBooleanSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorBooleanSensorQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSensorBooleanSensorCrossReference_0_0.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanSensorStatement:
		//    sensor=[BooleanSensor|QualifiedName] '?'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[BooleanSensor|QualifiedName] '?'
		public Group getGroup() { return cGroup; }
		
		//sensor=[BooleanSensor|QualifiedName]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[BooleanSensor|QualifiedName]
		public CrossReference getSensorBooleanSensorCrossReference_0_0() { return cSensorBooleanSensorCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getSensorBooleanSensorQualifiedNameParserRuleCall_0_0_1() { return cSensorBooleanSensorQualifiedNameParserRuleCall_0_0_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}
	public class CompareOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.CompareOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftValueExpressionParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cComparatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComparatorComparatorEnumRuleCall_1_0 = (RuleCall)cComparatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightValueExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//// Compare Statements
		////
		//CompareOperation:
		//    left=ValueExpression comparator=Comparator right=ValueExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ValueExpression comparator=Comparator right=ValueExpression
		public Group getGroup() { return cGroup; }
		
		//left=ValueExpression
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ValueExpression
		public RuleCall getLeftValueExpressionParserRuleCall_0_0() { return cLeftValueExpressionParserRuleCall_0_0; }
		
		//comparator=Comparator
		public Assignment getComparatorAssignment_1() { return cComparatorAssignment_1; }
		
		//Comparator
		public RuleCall getComparatorComparatorEnumRuleCall_1_0() { return cComparatorComparatorEnumRuleCall_1_0; }
		
		//right=ValueExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//ValueExpression
		public RuleCall getRightValueExpressionParserRuleCall_2_0() { return cRightValueExpressionParserRuleCall_2_0; }
	}
	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValueExpression:
		//    SensorValue | ConstantValue | ValueReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SensorValue | ConstantValue | ValueReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SensorValue
		public RuleCall getSensorValueParserRuleCall_0() { return cSensorValueParserRuleCall_0; }
		
		//ConstantValue
		public RuleCall getConstantValueParserRuleCall_1() { return cConstantValueParserRuleCall_1; }
		
		//ValueReference
		public RuleCall getValueReferenceParserRuleCall_2() { return cValueReferenceParserRuleCall_2; }
	}
	public class SensorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.SensorValue");
		private final Assignment cSensorAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSensorFloatSensorCrossReference_0 = (CrossReference)cSensorAssignment.eContents().get(0);
		private final RuleCall cSensorFloatSensorQualifiedNameParserRuleCall_0_1 = (RuleCall)cSensorFloatSensorCrossReference_0.eContents().get(1);
		
		//SensorValue:
		//    sensor=[FloatSensor|QualifiedName]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[FloatSensor|QualifiedName]
		public Assignment getSensorAssignment() { return cSensorAssignment; }
		
		//[FloatSensor|QualifiedName]
		public CrossReference getSensorFloatSensorCrossReference_0() { return cSensorFloatSensorCrossReference_0; }
		
		//QualifiedName
		public RuleCall getSensorFloatSensorQualifiedNameParserRuleCall_0_1() { return cSensorFloatSensorQualifiedNameParserRuleCall_0_1; }
	}
	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.ConstantValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEFloatParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ConstantValue:
		//    value=EFloat
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EFloat
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_0() { return cValueEFloatParserRuleCall_0; }
	}
	public class ValueReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.ValueReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefPreparedValueCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefPreparedValueConstIDParserRuleCall_0_1 = (RuleCall)cRefPreparedValueCrossReference_0.eContents().get(1);
		
		//ValueReference:
		//    ref=[PreparedValue|ConstID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[PreparedValue|ConstID]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[PreparedValue|ConstID]
		public CrossReference getRefPreparedValueCrossReference_0() { return cRefPreparedValueCrossReference_0; }
		
		//ConstID
		public RuleCall getRefPreparedValueConstIDParserRuleCall_0_1() { return cRefPreparedValueConstIDParserRuleCall_0_1; }
	}
	public class PreparedStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.PreparedStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//// Prepared Statements, Statement References, Consts
		////
		//PreparedStatement:
		//    'def' name=Name ':' statement=Statement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' name=Name ':' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//statement=Statement
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
	}
	public class StatementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.StatementReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefPreparedStatementCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefPreparedStatementNameParserRuleCall_0_1 = (RuleCall)cRefPreparedStatementCrossReference_0.eContents().get(1);
		
		//StatementReference:
		//    ref=[PreparedStatement|Name]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[PreparedStatement|Name]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[PreparedStatement|Name]
		public CrossReference getRefPreparedStatementCrossReference_0() { return cRefPreparedStatementCrossReference_0; }
		
		//Name
		public RuleCall getRefPreparedStatementNameParserRuleCall_0_1() { return cRefPreparedStatementNameParserRuleCall_0_1; }
	}
	public class PreparedActionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.PreparedActionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_4_1_0 = (RuleCall)cActionsAssignment_4_1.eContents().get(0);
		
		//PreparedActionSet:
		//    'set' name=Name ':' actions+=Action (',' actions+=Action)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' name=Name ':' actions+=Action (',' actions+=Action)*
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//actions+=Action
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
		
		//(',' actions+=Action)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_4_1() { return cActionsAssignment_4_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_4_1_0() { return cActionsActionParserRuleCall_4_1_0; }
	}
	public class ActionSetReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.ActionSetReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefPreparedActionSetCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefPreparedActionSetNameParserRuleCall_0_1 = (RuleCall)cRefPreparedActionSetCrossReference_0.eContents().get(1);
		
		//ActionSetReference:
		//    ref=[PreparedActionSet|Name]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[PreparedActionSet|Name]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[PreparedActionSet|Name]
		public CrossReference getRefPreparedActionSetCrossReference_0() { return cRefPreparedActionSetCrossReference_0; }
		
		//Name
		public RuleCall getRefPreparedActionSetNameParserRuleCall_0_1() { return cRefPreparedActionSetNameParserRuleCall_0_1; }
	}
	public class PreparedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.PreparedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameConstIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//PreparedValue:
		//    'val' name=ConstID ':' value=ValueExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'val' name=ConstID ':' value=ValueExpression
		public Group getGroup() { return cGroup; }
		
		//'val'
		public Keyword getValKeyword_0() { return cValKeyword_0; }
		
		//name=ConstID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ConstID
		public RuleCall getNameConstIDParserRuleCall_1_0() { return cNameConstIDParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//value=ValueExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//ValueExpression
		public RuleCall getValueValueExpressionParserRuleCall_3_0() { return cValueValueExpressionParserRuleCall_3_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionSetReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Actions
		////
		//Action:
		//    BooleanAction | FloatAction | ActionSetReference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanAction | FloatAction | ActionSetReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanAction
		public RuleCall getBooleanActionParserRuleCall_0() { return cBooleanActionParserRuleCall_0; }
		
		//FloatAction
		public RuleCall getFloatActionParserRuleCall_1() { return cFloatActionParserRuleCall_1; }
		
		//ActionSetReference
		public RuleCall getActionSetReferenceParserRuleCall_2() { return cActionSetReferenceParserRuleCall_2; }
	}
	public class BooleanActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BooleanAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActorBooleanActorCrossReference_0_0 = (CrossReference)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorBooleanActorQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cActorBooleanActorCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEBooleanParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BooleanAction:
		//    actor=[BooleanActor|QualifiedName] ':' value=EBoolean
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actor=[BooleanActor|QualifiedName] ':' value=EBoolean
		public Group getGroup() { return cGroup; }
		
		//actor=[BooleanActor|QualifiedName]
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }
		
		//[BooleanActor|QualifiedName]
		public CrossReference getActorBooleanActorCrossReference_0_0() { return cActorBooleanActorCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getActorBooleanActorQualifiedNameParserRuleCall_0_0_1() { return cActorBooleanActorQualifiedNameParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=EBoolean
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_2_0() { return cValueEBooleanParserRuleCall_2_0; }
	}
	public class FloatActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.FloatAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActorFloatActorCrossReference_0_0 = (CrossReference)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorFloatActorQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cActorFloatActorCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEFloatParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//FloatAction:
		//    actor=[FloatActor|QualifiedName] ':' value=EFloat
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//actor=[FloatActor|QualifiedName] ':' value=EFloat
		public Group getGroup() { return cGroup; }
		
		//actor=[FloatActor|QualifiedName]
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }
		
		//[FloatActor|QualifiedName]
		public CrossReference getActorFloatActorCrossReference_0_0() { return cActorFloatActorCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getActorFloatActorQualifiedNameParserRuleCall_0_0_1() { return cActorFloatActorQualifiedNameParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=EFloat
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EFloat
		public RuleCall getValueEFloatParserRuleCall_2_0() { return cValueEFloatParserRuleCall_2_0; }
	}
	public class LightSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.LightSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Sensors
		////
		//LightSensor:        '@light'    name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@light'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@light'
		public Keyword getLightKeyword_0() { return cLightKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class TemperatureSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.TemperatureSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTempKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TemperatureSensor:	'@temp'		name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@temp'		name=Name
		public Group getGroup() { return cGroup; }
		
		//'@temp'
		public Keyword getTempKeyword_0() { return cTempKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class RainSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.RainSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RainSensor:			'@rain'		name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@rain'		name=Name
		public Group getGroup() { return cGroup; }
		
		//'@rain'
		public Keyword getRainKeyword_0() { return cRainKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class SwitchSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.SwitchSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SwitchSensor:		'@switch'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@switch'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class NumberSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.NumberSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NumberSensor:		'@number'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@number'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@number'
		public Keyword getNumberKeyword_0() { return cNumberKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class ClockSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.ClockSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ClockSensor:		'@clock'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@clock'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@clock'
		public Keyword getClockKeyword_0() { return cClockKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class LampActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.LampActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLampKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// Actors
		////
		//LampActor:            '@lamp'        name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@lamp'		name=Name
		public Group getGroup() { return cGroup; }
		
		//'@lamp'
		public Keyword getLampKeyword_0() { return cLampKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class RollerActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.RollerActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRollerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RollerActor:		'@roller'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@roller'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@roller'
		public Keyword getRollerKeyword_0() { return cRollerKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class RoofWindowActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.RoofWindowActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RoofWindowActor:	'@roof'		name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@roof'		name=Name
		public Group getGroup() { return cGroup; }
		
		//'@roof'
		public Keyword getRoofKeyword_0() { return cRoofKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class RadiatorActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.RadiatorActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRadiatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RadiatorActor:		'@radiator'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@radiator'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@radiator'
		public Keyword getRadiatorKeyword_0() { return cRadiatorKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class BoilerActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BoilerActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoilerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BoilerActor:		'@boiler'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@boiler'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@boiler'
		public Keyword getBoilerKeyword_0() { return cBoilerKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class CoffeeActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.CoffeeActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoffeeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//CoffeeActor:		'@coffee'	name=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//'@coffee'	name=Name
		public Group getGroup() { return cGroup; }
		
		//'@coffee'
		public Keyword getCoffeeKeyword_0() { return cCoffeeKeyword_0; }
		
		//name=Name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Name
		public RuleCall getNameNameParserRuleCall_1_0() { return cNameNameParserRuleCall_1_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Operators, Enumerations, Values, Identifiers
		//// name system: full qualified names used for cross-referencing
		////
		//Name: ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName: Name ('.' Name)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Name ('.' Name)*
		public Group getGroup() { return cGroup; }
		
		//Name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }
		
		//('.' Name)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Name
		public RuleCall getNameParserRuleCall_1_1() { return cNameParserRuleCall_1_1; }
	}
	public class ConstIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.ConstID");
		private final RuleCall cCONSTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConstID: CONST;
		@Override public ParserRule getRule() { return rule; }
		
		//CONST
		public RuleCall getCONSTTerminalRuleCall() { return cCONSTTerminalRuleCall; }
	}
	public class BinaryAndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BinaryAndOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAmpersandKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BinaryAndOperator: "and" | "&&" | "&";
		@Override public ParserRule getRule() { return rule; }
		
		//"and" | "&&" | "&"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1() { return cAmpersandAmpersandKeyword_1; }
		
		//"&"
		public Keyword getAmpersandKeyword_2() { return cAmpersandKeyword_2; }
	}
	public class BinaryOrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.BinaryOrOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BinaryOrOperator: "or" | "||" | "|";
		@Override public ParserRule getRule() { return rule; }
		
		//"or" | "||" | "|"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"or"
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_0 = (Keyword)cAlternatives_2_2_0.eContents().get(0);
		private final Keyword cEKeyword_2_2_0_1 = (Keyword)cAlternatives_2_2_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		
		//EFloat returns ecore::EFloat:
		//    '-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//('.' INT (('E'|'e') '-'? INT)?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//('E'|'e')
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }
		
		//'E'
		public Keyword getEKeyword_2_2_0_0() { return cEKeyword_2_2_0_0; }
		
		//'e'
		public Keyword getEKeyword_2_2_0_1() { return cEKeyword_2_2_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2_2_1() { return cHyphenMinusKeyword_2_2_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_2() { return cINTTerminalRuleCall_2_2_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class ComparatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLELessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Comparator:
		//    LT="<" | LE="<=" | GE=">=" | GT=">";
		public EnumRule getRule() { return rule; }
		
		//LT="<" | LE="<=" | GE=">=" | GT=">"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//LE="<="
		public EnumLiteralDeclaration getLEEnumLiteralDeclaration_1() { return cLEEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getLELessThanSignEqualsSignKeyword_1_0() { return cLELessThanSignEqualsSignKeyword_1_0; }
		
		//GE=">="
		public EnumLiteralDeclaration getGEEnumLiteralDeclaration_2() { return cGEEnumLiteralDeclaration_2; }
		
		//">="
		public Keyword getGEGreaterThanSignEqualsSignKeyword_2_0() { return cGEGreaterThanSignEqualsSignKeyword_2_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }
	}
	
	private final MajordomoElements pMajordomo;
	private final ProgramElements pProgram;
	private final HouseElements pHouse;
	private final RoomElements pRoom;
	private final SensorElements pSensor;
	private final ActorElements pActor;
	private final RuleElements pRule;
	private final StatementElements pStatement;
	private final BinaryOrOperationElements pBinaryOrOperation;
	private final BinaryAndOperationElements pBinaryAndOperation;
	private final NotOperationElements pNotOperation;
	private final UnaryStatementElements pUnaryStatement;
	private final BooleanSensorStatementElements pBooleanSensorStatement;
	private final CompareOperationElements pCompareOperation;
	private final ValueExpressionElements pValueExpression;
	private final SensorValueElements pSensorValue;
	private final ConstantValueElements pConstantValue;
	private final ValueReferenceElements pValueReference;
	private final PreparedStatementElements pPreparedStatement;
	private final StatementReferenceElements pStatementReference;
	private final PreparedActionSetElements pPreparedActionSet;
	private final ActionSetReferenceElements pActionSetReference;
	private final PreparedValueElements pPreparedValue;
	private final ActionElements pAction;
	private final BooleanActionElements pBooleanAction;
	private final FloatActionElements pFloatAction;
	private final LightSensorElements pLightSensor;
	private final TemperatureSensorElements pTemperatureSensor;
	private final RainSensorElements pRainSensor;
	private final SwitchSensorElements pSwitchSensor;
	private final NumberSensorElements pNumberSensor;
	private final ClockSensorElements pClockSensor;
	private final LampActorElements pLampActor;
	private final RollerActorElements pRollerActor;
	private final RoofWindowActorElements pRoofWindowActor;
	private final RadiatorActorElements pRadiatorActor;
	private final BoilerActorElements pBoilerActor;
	private final CoffeeActorElements pCoffeeActor;
	private final NameElements pName;
	private final QualifiedNameElements pQualifiedName;
	private final ConstIDElements pConstID;
	private final TerminalRule tCONST;
	private final BinaryAndOperatorElements pBinaryAndOperator;
	private final BinaryOrOperatorElements pBinaryOrOperator;
	private final ComparatorElements eComparator;
	private final EFloatElements pEFloat;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MajordomoDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMajordomo = new MajordomoElements();
		this.pProgram = new ProgramElements();
		this.pHouse = new HouseElements();
		this.pRoom = new RoomElements();
		this.pSensor = new SensorElements();
		this.pActor = new ActorElements();
		this.pRule = new RuleElements();
		this.pStatement = new StatementElements();
		this.pBinaryOrOperation = new BinaryOrOperationElements();
		this.pBinaryAndOperation = new BinaryAndOperationElements();
		this.pNotOperation = new NotOperationElements();
		this.pUnaryStatement = new UnaryStatementElements();
		this.pBooleanSensorStatement = new BooleanSensorStatementElements();
		this.pCompareOperation = new CompareOperationElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pSensorValue = new SensorValueElements();
		this.pConstantValue = new ConstantValueElements();
		this.pValueReference = new ValueReferenceElements();
		this.pPreparedStatement = new PreparedStatementElements();
		this.pStatementReference = new StatementReferenceElements();
		this.pPreparedActionSet = new PreparedActionSetElements();
		this.pActionSetReference = new ActionSetReferenceElements();
		this.pPreparedValue = new PreparedValueElements();
		this.pAction = new ActionElements();
		this.pBooleanAction = new BooleanActionElements();
		this.pFloatAction = new FloatActionElements();
		this.pLightSensor = new LightSensorElements();
		this.pTemperatureSensor = new TemperatureSensorElements();
		this.pRainSensor = new RainSensorElements();
		this.pSwitchSensor = new SwitchSensorElements();
		this.pNumberSensor = new NumberSensorElements();
		this.pClockSensor = new ClockSensorElements();
		this.pLampActor = new LampActorElements();
		this.pRollerActor = new RollerActorElements();
		this.pRoofWindowActor = new RoofWindowActorElements();
		this.pRadiatorActor = new RadiatorActorElements();
		this.pBoilerActor = new BoilerActorElements();
		this.pCoffeeActor = new CoffeeActorElements();
		this.pName = new NameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pConstID = new ConstIDElements();
		this.tCONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.altimos.mdsd.majordomo.dsl.MajordomoDsl.CONST");
		this.pBinaryAndOperator = new BinaryAndOperatorElements();
		this.pBinaryOrOperator = new BinaryOrOperatorElements();
		this.eComparator = new ComparatorElements();
		this.pEFloat = new EFloatElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.altimos.mdsd.majordomo.dsl.MajordomoDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Majordomo:
	//    {Majordomo}
	//    (house=House)?
	//    (rooms+=Room)*
	//    program=Program
	//;
	public MajordomoElements getMajordomoAccess() {
		return pMajordomo;
	}
	
	public ParserRule getMajordomoRule() {
		return getMajordomoAccess().getRule();
	}
	
	//Program:
	//    {Program}
	//    'program'
	//    '{'
	//        (
	//            (rules+=Rule ';'?) |
	//            (preparedStatements+=PreparedStatement ';'?) |
	//            (preparedActionSets+=PreparedActionSet ';'?) |
	//            (constants+=PreparedValue ';'?)
	//        )*
	//    '}'
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//House:
	//    {House}
	//    'house'
	//    '{'
	//        ((sensors+=Sensor|actors+=Actor) ';'?)*
	//    '}'
	//;
	public HouseElements getHouseAccess() {
		return pHouse;
	}
	
	public ParserRule getHouseRule() {
		return getHouseAccess().getRule();
	}
	
	//Room:
	//    {Room}
	//    'room'
	//    name=Name
	//    '{'
	//        ((sensors+=Sensor|actors+=Actor) ';'?)*
	//    '}'
	//;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Sensor:
	//    LightSensor | TemperatureSensor | RainSensor | SwitchSensor | NumberSensor | ClockSensor
	//;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actor:
	//    LampActor | RollerActor | RoofWindowActor | RadiatorActor | BoilerActor | CoffeeActor
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//// Rules and Statements
	////
	//Rule:
	//    'on' statement=Statement 'do' (actions+=Action)(',' (actions+=Action))*
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Statement returns Statement:
	//    BinaryOrOperation
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//BinaryOrOperation returns Statement:
	//    BinaryAndOperation ({BinaryOrOperation.left=current} BinaryOrOperator right=BinaryAndOperation)*
	//;
	public BinaryOrOperationElements getBinaryOrOperationAccess() {
		return pBinaryOrOperation;
	}
	
	public ParserRule getBinaryOrOperationRule() {
		return getBinaryOrOperationAccess().getRule();
	}
	
	//BinaryAndOperation returns Statement:
	//    NotOperation ({BinaryAndOperation.left=current} BinaryAndOperator right=NotOperation)*
	//;
	public BinaryAndOperationElements getBinaryAndOperationAccess() {
		return pBinaryAndOperation;
	}
	
	public ParserRule getBinaryAndOperationRule() {
		return getBinaryAndOperationAccess().getRule();
	}
	
	//NotOperation returns Statement:
	//    UnaryStatement | ({NotOperation} ('not' | '!') statement=UnaryStatement)
	//;
	public NotOperationElements getNotOperationAccess() {
		return pNotOperation;
	}
	
	public ParserRule getNotOperationRule() {
		return getNotOperationAccess().getRule();
	}
	
	//UnaryStatement returns Statement:
	//    ('(' Statement ')') | StatementReference | BooleanSensorStatement | CompareOperation
	//;
	public UnaryStatementElements getUnaryStatementAccess() {
		return pUnaryStatement;
	}
	
	public ParserRule getUnaryStatementRule() {
		return getUnaryStatementAccess().getRule();
	}
	
	//BooleanSensorStatement:
	//    sensor=[BooleanSensor|QualifiedName] '?'
	//;
	public BooleanSensorStatementElements getBooleanSensorStatementAccess() {
		return pBooleanSensorStatement;
	}
	
	public ParserRule getBooleanSensorStatementRule() {
		return getBooleanSensorStatementAccess().getRule();
	}
	
	//// Compare Statements
	////
	//CompareOperation:
	//    left=ValueExpression comparator=Comparator right=ValueExpression
	//;
	public CompareOperationElements getCompareOperationAccess() {
		return pCompareOperation;
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}
	
	//ValueExpression:
	//    SensorValue | ConstantValue | ValueReference
	//;
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}
	
	//SensorValue:
	//    sensor=[FloatSensor|QualifiedName]
	//;
	public SensorValueElements getSensorValueAccess() {
		return pSensorValue;
	}
	
	public ParserRule getSensorValueRule() {
		return getSensorValueAccess().getRule();
	}
	
	//ConstantValue:
	//    value=EFloat
	//;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}
	
	//ValueReference:
	//    ref=[PreparedValue|ConstID]
	//;
	public ValueReferenceElements getValueReferenceAccess() {
		return pValueReference;
	}
	
	public ParserRule getValueReferenceRule() {
		return getValueReferenceAccess().getRule();
	}
	
	//// Prepared Statements, Statement References, Consts
	////
	//PreparedStatement:
	//    'def' name=Name ':' statement=Statement
	//;
	public PreparedStatementElements getPreparedStatementAccess() {
		return pPreparedStatement;
	}
	
	public ParserRule getPreparedStatementRule() {
		return getPreparedStatementAccess().getRule();
	}
	
	//StatementReference:
	//    ref=[PreparedStatement|Name]
	//;
	public StatementReferenceElements getStatementReferenceAccess() {
		return pStatementReference;
	}
	
	public ParserRule getStatementReferenceRule() {
		return getStatementReferenceAccess().getRule();
	}
	
	//PreparedActionSet:
	//    'set' name=Name ':' actions+=Action (',' actions+=Action)*
	//;
	public PreparedActionSetElements getPreparedActionSetAccess() {
		return pPreparedActionSet;
	}
	
	public ParserRule getPreparedActionSetRule() {
		return getPreparedActionSetAccess().getRule();
	}
	
	//ActionSetReference:
	//    ref=[PreparedActionSet|Name]
	//;
	public ActionSetReferenceElements getActionSetReferenceAccess() {
		return pActionSetReference;
	}
	
	public ParserRule getActionSetReferenceRule() {
		return getActionSetReferenceAccess().getRule();
	}
	
	//PreparedValue:
	//    'val' name=ConstID ':' value=ValueExpression
	//;
	public PreparedValueElements getPreparedValueAccess() {
		return pPreparedValue;
	}
	
	public ParserRule getPreparedValueRule() {
		return getPreparedValueAccess().getRule();
	}
	
	//// Actions
	////
	//Action:
	//    BooleanAction | FloatAction | ActionSetReference
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//BooleanAction:
	//    actor=[BooleanActor|QualifiedName] ':' value=EBoolean
	//;
	public BooleanActionElements getBooleanActionAccess() {
		return pBooleanAction;
	}
	
	public ParserRule getBooleanActionRule() {
		return getBooleanActionAccess().getRule();
	}
	
	//FloatAction:
	//    actor=[FloatActor|QualifiedName] ':' value=EFloat
	//;
	public FloatActionElements getFloatActionAccess() {
		return pFloatAction;
	}
	
	public ParserRule getFloatActionRule() {
		return getFloatActionAccess().getRule();
	}
	
	//// Sensors
	////
	//LightSensor:        '@light'    name=Name;
	public LightSensorElements getLightSensorAccess() {
		return pLightSensor;
	}
	
	public ParserRule getLightSensorRule() {
		return getLightSensorAccess().getRule();
	}
	
	//TemperatureSensor:	'@temp'		name=Name;
	public TemperatureSensorElements getTemperatureSensorAccess() {
		return pTemperatureSensor;
	}
	
	public ParserRule getTemperatureSensorRule() {
		return getTemperatureSensorAccess().getRule();
	}
	
	//RainSensor:			'@rain'		name=Name;
	public RainSensorElements getRainSensorAccess() {
		return pRainSensor;
	}
	
	public ParserRule getRainSensorRule() {
		return getRainSensorAccess().getRule();
	}
	
	//SwitchSensor:		'@switch'	name=Name;
	public SwitchSensorElements getSwitchSensorAccess() {
		return pSwitchSensor;
	}
	
	public ParserRule getSwitchSensorRule() {
		return getSwitchSensorAccess().getRule();
	}
	
	//NumberSensor:		'@number'	name=Name;
	public NumberSensorElements getNumberSensorAccess() {
		return pNumberSensor;
	}
	
	public ParserRule getNumberSensorRule() {
		return getNumberSensorAccess().getRule();
	}
	
	//ClockSensor:		'@clock'	name=Name;
	public ClockSensorElements getClockSensorAccess() {
		return pClockSensor;
	}
	
	public ParserRule getClockSensorRule() {
		return getClockSensorAccess().getRule();
	}
	
	//// Actors
	////
	//LampActor:            '@lamp'        name=Name;
	public LampActorElements getLampActorAccess() {
		return pLampActor;
	}
	
	public ParserRule getLampActorRule() {
		return getLampActorAccess().getRule();
	}
	
	//RollerActor:		'@roller'	name=Name;
	public RollerActorElements getRollerActorAccess() {
		return pRollerActor;
	}
	
	public ParserRule getRollerActorRule() {
		return getRollerActorAccess().getRule();
	}
	
	//RoofWindowActor:	'@roof'		name=Name;
	public RoofWindowActorElements getRoofWindowActorAccess() {
		return pRoofWindowActor;
	}
	
	public ParserRule getRoofWindowActorRule() {
		return getRoofWindowActorAccess().getRule();
	}
	
	//RadiatorActor:		'@radiator'	name=Name;
	public RadiatorActorElements getRadiatorActorAccess() {
		return pRadiatorActor;
	}
	
	public ParserRule getRadiatorActorRule() {
		return getRadiatorActorAccess().getRule();
	}
	
	//BoilerActor:		'@boiler'	name=Name;
	public BoilerActorElements getBoilerActorAccess() {
		return pBoilerActor;
	}
	
	public ParserRule getBoilerActorRule() {
		return getBoilerActorAccess().getRule();
	}
	
	//CoffeeActor:		'@coffee'	name=Name;
	public CoffeeActorElements getCoffeeActorAccess() {
		return pCoffeeActor;
	}
	
	public ParserRule getCoffeeActorRule() {
		return getCoffeeActorAccess().getRule();
	}
	
	//// Operators, Enumerations, Values, Identifiers
	//// name system: full qualified names used for cross-referencing
	////
	//Name: ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//QualifiedName: Name ('.' Name)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ConstID: CONST;
	public ConstIDElements getConstIDAccess() {
		return pConstID;
	}
	
	public ParserRule getConstIDRule() {
		return getConstIDAccess().getRule();
	}
	
	//terminal CONST: ('A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getCONSTRule() {
		return tCONST;
	}
	
	//BinaryAndOperator: "and" | "&&" | "&";
	public BinaryAndOperatorElements getBinaryAndOperatorAccess() {
		return pBinaryAndOperator;
	}
	
	public ParserRule getBinaryAndOperatorRule() {
		return getBinaryAndOperatorAccess().getRule();
	}
	
	//BinaryOrOperator: "or" | "||" | "|";
	public BinaryOrOperatorElements getBinaryOrOperatorAccess() {
		return pBinaryOrOperator;
	}
	
	public ParserRule getBinaryOrOperatorRule() {
		return getBinaryOrOperatorAccess().getRule();
	}
	
	//enum Comparator:
	//    LT="<" | LE="<=" | GE=">=" | GT=">";
	public ComparatorElements getComparatorAccess() {
		return eComparator;
	}
	
	public EnumRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//EFloat returns ecore::EFloat:
	//    '-'? INT? ('.' INT (('E'|'e') '-'? INT)?)?;
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
