/*
 * generated by Xtext 2.35.0
 */
package de.altimos.mdsd.majordomo.dsl.serializer;

import com.google.inject.Inject;
import de.altimos.mdsd.majordomo.dsl.services.MajordomoDslGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MajordomoDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MajordomoDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_House_SemicolonKeyword_3_1_q;
	protected AbstractElementAlias match_NotOperation_ExclamationMarkKeyword_1_1_1_or_NotKeyword_1_1_0;
	protected AbstractElementAlias match_Program_SemicolonKeyword_3_0_1_q;
	protected AbstractElementAlias match_Program_SemicolonKeyword_3_1_1_q;
	protected AbstractElementAlias match_Program_SemicolonKeyword_3_2_1_q;
	protected AbstractElementAlias match_Program_SemicolonKeyword_3_3_1_q;
	protected AbstractElementAlias match_Room_SemicolonKeyword_4_1_q;
	protected AbstractElementAlias match_UnaryStatement_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_UnaryStatement_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MajordomoDslGrammarAccess) access;
		match_House_SemicolonKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getHouseAccess().getSemicolonKeyword_3_1());
		match_NotOperation_ExclamationMarkKeyword_1_1_1_or_NotKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNotOperationAccess().getExclamationMarkKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getNotOperationAccess().getNotKeyword_1_1_0()));
		match_Program_SemicolonKeyword_3_0_1_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getSemicolonKeyword_3_0_1());
		match_Program_SemicolonKeyword_3_1_1_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getSemicolonKeyword_3_1_1());
		match_Program_SemicolonKeyword_3_2_1_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getSemicolonKeyword_3_2_1());
		match_Program_SemicolonKeyword_3_3_1_q = new TokenAlias(false, true, grammarAccess.getProgramAccess().getSemicolonKeyword_3_3_1());
		match_Room_SemicolonKeyword_4_1_q = new TokenAlias(false, true, grammarAccess.getRoomAccess().getSemicolonKeyword_4_1());
		match_UnaryStatement_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getUnaryStatementAccess().getLeftParenthesisKeyword_0_0());
		match_UnaryStatement_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getUnaryStatementAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBinaryAndOperatorRule())
			return getBinaryAndOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBinaryOrOperatorRule())
			return getBinaryOrOperatorToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BinaryAndOperator: "and" | "&&" | "&";
	 */
	protected String getBinaryAndOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "and";
	}
	
	/**
	 * BinaryOrOperator: "or" | "||" | "|";
	 */
	protected String getBinaryOrOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "or";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_House_SemicolonKeyword_3_1_q.equals(syntax))
				emit_House_SemicolonKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NotOperation_ExclamationMarkKeyword_1_1_1_or_NotKeyword_1_1_0.equals(syntax))
				emit_NotOperation_ExclamationMarkKeyword_1_1_1_or_NotKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Program_SemicolonKeyword_3_0_1_q.equals(syntax))
				emit_Program_SemicolonKeyword_3_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Program_SemicolonKeyword_3_1_1_q.equals(syntax))
				emit_Program_SemicolonKeyword_3_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Program_SemicolonKeyword_3_2_1_q.equals(syntax))
				emit_Program_SemicolonKeyword_3_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Program_SemicolonKeyword_3_3_1_q.equals(syntax))
				emit_Program_SemicolonKeyword_3_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Room_SemicolonKeyword_4_1_q.equals(syntax))
				emit_Room_SemicolonKeyword_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UnaryStatement_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_UnaryStatement_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UnaryStatement_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_UnaryStatement_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     actors+=Actor (ambiguity) '}' (rule end)
	 *     actors+=Actor (ambiguity) actors+=Actor
	 *     actors+=Actor (ambiguity) sensors+=Sensor
	 *     sensors+=Sensor (ambiguity) '}' (rule end)
	 *     sensors+=Sensor (ambiguity) actors+=Actor
	 *     sensors+=Sensor (ambiguity) sensors+=Sensor
	 
	 * </pre>
	 */
	protected void emit_House_SemicolonKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'not' | '!'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) statement=UnaryStatement
	 *     (rule start) '('+ (ambiguity) statement=UnaryStatement
	 
	 * </pre>
	 */
	protected void emit_NotOperation_ExclamationMarkKeyword_1_1_1_or_NotKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     rules+=Rule (ambiguity) '}' (rule end)
	 *     rules+=Rule (ambiguity) constants+=PreparedValue
	 *     rules+=Rule (ambiguity) preparedActionSets+=PreparedActionSet
	 *     rules+=Rule (ambiguity) preparedStatements+=PreparedStatement
	 *     rules+=Rule (ambiguity) rules+=Rule
	 
	 * </pre>
	 */
	protected void emit_Program_SemicolonKeyword_3_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     preparedStatements+=PreparedStatement (ambiguity) '}' (rule end)
	 *     preparedStatements+=PreparedStatement (ambiguity) constants+=PreparedValue
	 *     preparedStatements+=PreparedStatement (ambiguity) preparedActionSets+=PreparedActionSet
	 *     preparedStatements+=PreparedStatement (ambiguity) preparedStatements+=PreparedStatement
	 *     preparedStatements+=PreparedStatement (ambiguity) rules+=Rule
	 
	 * </pre>
	 */
	protected void emit_Program_SemicolonKeyword_3_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     preparedActionSets+=PreparedActionSet (ambiguity) '}' (rule end)
	 *     preparedActionSets+=PreparedActionSet (ambiguity) constants+=PreparedValue
	 *     preparedActionSets+=PreparedActionSet (ambiguity) preparedActionSets+=PreparedActionSet
	 *     preparedActionSets+=PreparedActionSet (ambiguity) preparedStatements+=PreparedStatement
	 *     preparedActionSets+=PreparedActionSet (ambiguity) rules+=Rule
	 
	 * </pre>
	 */
	protected void emit_Program_SemicolonKeyword_3_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     constants+=PreparedValue (ambiguity) '}' (rule end)
	 *     constants+=PreparedValue (ambiguity) constants+=PreparedValue
	 *     constants+=PreparedValue (ambiguity) preparedActionSets+=PreparedActionSet
	 *     constants+=PreparedValue (ambiguity) preparedStatements+=PreparedStatement
	 *     constants+=PreparedValue (ambiguity) rules+=Rule
	 
	 * </pre>
	 */
	protected void emit_Program_SemicolonKeyword_3_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     actors+=Actor (ambiguity) '}' (rule end)
	 *     actors+=Actor (ambiguity) actors+=Actor
	 *     actors+=Actor (ambiguity) sensors+=Sensor
	 *     sensors+=Sensor (ambiguity) '}' (rule end)
	 *     sensors+=Sensor (ambiguity) actors+=Actor
	 *     sensors+=Sensor (ambiguity) sensors+=Sensor
	 
	 * </pre>
	 */
	protected void emit_Room_SemicolonKeyword_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('not' | '!') statement=UnaryStatement
	 *     (rule start) (ambiguity) left=ValueExpression
	 *     (rule start) (ambiguity) ref=[PreparedStatement|Name]
	 *     (rule start) (ambiguity) sensor=[BooleanSensor|QualifiedName]
	 *     (rule start) (ambiguity) {BinaryAndOperation.left=}
	 *     (rule start) (ambiguity) {BinaryOrOperation.left=}
	 
	 * </pre>
	 */
	protected void emit_UnaryStatement_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('not' | '!') statement=UnaryStatement
	 *     (rule start) (ambiguity) {BinaryAndOperation.left=}
	 *     (rule start) (ambiguity) {BinaryOrOperation.left=}
	 
	 * </pre>
	 */
	protected void emit_UnaryStatement_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
