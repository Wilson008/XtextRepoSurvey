/**
 */
package io.yaktor.domain.provider;

import io.yaktor.domain.util.DomainAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DomainItemProviderAdapterFactory extends DomainAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DomainItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.DomainModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelItemProvider domainModelItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.DomainModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelAdapter() {
		if (domainModelItemProvider == null) {
			domainModelItemProvider = new DomainModelItemProvider(this);
		}

		return domainModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.StringField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringFieldItemProvider stringFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.StringField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringFieldAdapter() {
		if (stringFieldItemProvider == null) {
			stringFieldItemProvider = new StringFieldItemProvider(this);
		}

		return stringFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.DateField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateFieldItemProvider dateFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.DateField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateFieldAdapter() {
		if (dateFieldItemProvider == null) {
			dateFieldItemProvider = new DateFieldItemProvider(this);
		}

		return dateFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.IntegerField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerFieldItemProvider integerFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.IntegerField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerFieldAdapter() {
		if (integerFieldItemProvider == null) {
			integerFieldItemProvider = new IntegerFieldItemProvider(this);
		}

		return integerFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.AssociationEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationEndItemProvider associationEndItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.AssociationEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationEndAdapter() {
		if (associationEndItemProvider == null) {
			associationEndItemProvider = new AssociationEndItemProvider(this);
		}

		return associationEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.EnumField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumFieldItemProvider enumFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.EnumField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumFieldAdapter() {
		if (enumFieldItemProvider == null) {
			enumFieldItemProvider = new EnumFieldItemProvider(this);
		}

		return enumFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.EnumType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumTypeItemProvider enumTypeItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.EnumType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumTypeAdapter() {
		if (enumTypeItemProvider == null) {
			enumTypeItemProvider = new EnumTypeItemProvider(this);
		}

		return enumTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.NumericField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericFieldItemProvider numericFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.NumericField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericFieldAdapter() {
		if (numericFieldItemProvider == null) {
			numericFieldItemProvider = new NumericFieldItemProvider(this);
		}

		return numericFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.EnumValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumValueItemProvider enumValueItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.EnumValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumValueAdapter() {
		if (enumValueItemProvider == null) {
			enumValueItemProvider = new EnumValueItemProvider(this);
		}

		return enumValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.BooleanField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanFieldItemProvider booleanFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.BooleanField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanFieldAdapter() {
		if (booleanFieldItemProvider == null) {
			booleanFieldItemProvider = new BooleanFieldItemProvider(this);
		}

		return booleanFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.RooGenOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RooGenOptionsItemProvider rooGenOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.RooGenOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRooGenOptionsAdapter() {
		if (rooGenOptionsItemProvider == null) {
			rooGenOptionsItemProvider = new RooGenOptionsItemProvider(this);
		}

		return rooGenOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.ProjectOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectOptionsItemProvider projectOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.ProjectOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectOptionsAdapter() {
		if (projectOptionsItemProvider == null) {
			projectOptionsItemProvider = new ProjectOptionsItemProvider(this);
		}

		return projectOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.PersistenceOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistenceOptionsItemProvider persistenceOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.PersistenceOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistenceOptionsAdapter() {
		if (persistenceOptionsItemProvider == null) {
			persistenceOptionsItemProvider = new PersistenceOptionsItemProvider(this);
		}

		return persistenceOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.TypeField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeFieldItemProvider typeFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.TypeField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeFieldAdapter() {
		if (typeFieldItemProvider == null) {
			typeFieldItemProvider = new TypeFieldItemProvider(this);
		}

		return typeFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.AnyField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnyFieldItemProvider anyFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.AnyField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnyFieldAdapter() {
		if (anyFieldItemProvider == null) {
			anyFieldItemProvider = new AnyFieldItemProvider(this);
		}

		return anyFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.PriceField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PriceFieldItemProvider priceFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.PriceField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPriceFieldAdapter() {
		if (priceFieldItemProvider == null) {
			priceFieldItemProvider = new PriceFieldItemProvider(this);
		}

		return priceFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.AmountField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AmountFieldItemProvider amountFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.AmountField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmountFieldAdapter() {
		if (amountFieldItemProvider == null) {
			amountFieldItemProvider = new AmountFieldItemProvider(this);
		}

		return amountFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.CountField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountFieldItemProvider countFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.CountField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountFieldAdapter() {
		if (countFieldItemProvider == null) {
			countFieldItemProvider = new CountFieldItemProvider(this);
		}

		return countFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.EntityReferenceField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityReferenceFieldItemProvider entityReferenceFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.EntityReferenceField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityReferenceFieldAdapter() {
		if (entityReferenceFieldItemProvider == null) {
			entityReferenceFieldItemProvider = new EntityReferenceFieldItemProvider(this);
		}

		return entityReferenceFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.GeoLocationField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeoLocationFieldItemProvider geoLocationFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.GeoLocationField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeoLocationFieldAdapter() {
		if (geoLocationFieldItemProvider == null) {
			geoLocationFieldItemProvider = new GeoLocationFieldItemProvider(this);
		}

		return geoLocationFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.TableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableTypeItemProvider tableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.TableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableTypeAdapter() {
		if (tableTypeItemProvider == null) {
			tableTypeItemProvider = new TableTypeItemProvider(this);
		}

		return tableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.JpaGenOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JpaGenOptionsItemProvider jpaGenOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.JpaGenOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJpaGenOptionsAdapter() {
		if (jpaGenOptionsItemProvider == null) {
			jpaGenOptionsItemProvider = new JpaGenOptionsItemProvider(this);
		}

		return jpaGenOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.GenerationInclusion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenerationInclusionItemProvider generationInclusionItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.GenerationInclusion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenerationInclusionAdapter() {
		if (generationInclusionItemProvider == null) {
			generationInclusionItemProvider = new GenerationInclusionItemProvider(this);
		}

		return generationInclusionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.AssociationRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationRefItemProvider associationRefItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.AssociationRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationRefAdapter() {
		if (associationRefItemProvider == null) {
			associationRefItemProvider = new AssociationRefItemProvider(this);
		}

		return associationRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.UniqueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniqueConstraintItemProvider uniqueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.UniqueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniqueConstraintAdapter() {
		if (uniqueConstraintItemProvider == null) {
			uniqueConstraintItemProvider = new UniqueConstraintItemProvider(this);
		}

		return uniqueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.IndexConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexConstraintItemProvider indexConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.IndexConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexConstraintAdapter() {
		if (indexConstraintItemProvider == null) {
			indexConstraintItemProvider = new IndexConstraintItemProvider(this);
		}

		return indexConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.ConstraintTypeField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintTypeFieldItemProvider constraintTypeFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.ConstraintTypeField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintTypeFieldAdapter() {
		if (constraintTypeFieldItemProvider == null) {
			constraintTypeFieldItemProvider = new ConstraintTypeFieldItemProvider(this);
		}

		return constraintTypeFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.MongoNodeGenOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MongoNodeGenOptionsItemProvider mongoNodeGenOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.MongoNodeGenOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMongoNodeGenOptionsAdapter() {
		if (mongoNodeGenOptionsItemProvider == null) {
			mongoNodeGenOptionsItemProvider = new MongoNodeGenOptionsItemProvider(this);
		}

		return mongoNodeGenOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.ComplexTypeField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeFieldItemProvider complexTypeFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.ComplexTypeField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexTypeFieldAdapter() {
		if (complexTypeFieldItemProvider == null) {
			complexTypeFieldItemProvider = new ComplexTypeFieldItemProvider(this);
		}

		return complexTypeFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.DomainModelImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelImportItemProvider domainModelImportItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.DomainModelImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelImportAdapter() {
		if (domainModelImportItemProvider == null) {
			domainModelImportItemProvider = new DomainModelImportItemProvider(this);
		}

		return domainModelImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.MongoNodeTableOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MongoNodeTableOptionsItemProvider mongoNodeTableOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.MongoNodeTableOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMongoNodeTableOptionsAdapter() {
		if (mongoNodeTableOptionsItemProvider == null) {
			mongoNodeTableOptionsItemProvider = new MongoNodeTableOptionsItemProvider(this);
		}

		return mongoNodeTableOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.JpaTableOptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JpaTableOptionsItemProvider jpaTableOptionsItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.JpaTableOptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJpaTableOptionsAdapter() {
		if (jpaTableOptionsItemProvider == null) {
			jpaTableOptionsItemProvider = new JpaTableOptionsItemProvider(this);
		}

		return jpaTableOptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.IdField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdFieldItemProvider idFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.IdField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdFieldAdapter() {
		if (idFieldItemProvider == null) {
			idFieldItemProvider = new IdFieldItemProvider(this);
		}

		return idFieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link io.yaktor.domain.ShortIdField} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShortIdFieldItemProvider shortIdFieldItemProvider;

	/**
	 * This creates an adapter for a {@link io.yaktor.domain.ShortIdField}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShortIdFieldAdapter() {
		if (shortIdFieldItemProvider == null) {
			shortIdFieldItemProvider = new ShortIdFieldItemProvider(this);
		}

		return shortIdFieldItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (domainModelItemProvider != null) domainModelItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (stringFieldItemProvider != null) stringFieldItemProvider.dispose();
		if (dateFieldItemProvider != null) dateFieldItemProvider.dispose();
		if (integerFieldItemProvider != null) integerFieldItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (associationEndItemProvider != null) associationEndItemProvider.dispose();
		if (enumFieldItemProvider != null) enumFieldItemProvider.dispose();
		if (enumTypeItemProvider != null) enumTypeItemProvider.dispose();
		if (numericFieldItemProvider != null) numericFieldItemProvider.dispose();
		if (enumValueItemProvider != null) enumValueItemProvider.dispose();
		if (booleanFieldItemProvider != null) booleanFieldItemProvider.dispose();
		if (rooGenOptionsItemProvider != null) rooGenOptionsItemProvider.dispose();
		if (projectOptionsItemProvider != null) projectOptionsItemProvider.dispose();
		if (persistenceOptionsItemProvider != null) persistenceOptionsItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (typeFieldItemProvider != null) typeFieldItemProvider.dispose();
		if (anyFieldItemProvider != null) anyFieldItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (priceFieldItemProvider != null) priceFieldItemProvider.dispose();
		if (amountFieldItemProvider != null) amountFieldItemProvider.dispose();
		if (countFieldItemProvider != null) countFieldItemProvider.dispose();
		if (entityReferenceFieldItemProvider != null) entityReferenceFieldItemProvider.dispose();
		if (geoLocationFieldItemProvider != null) geoLocationFieldItemProvider.dispose();
		if (tableTypeItemProvider != null) tableTypeItemProvider.dispose();
		if (jpaGenOptionsItemProvider != null) jpaGenOptionsItemProvider.dispose();
		if (generationInclusionItemProvider != null) generationInclusionItemProvider.dispose();
		if (associationRefItemProvider != null) associationRefItemProvider.dispose();
		if (uniqueConstraintItemProvider != null) uniqueConstraintItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (indexConstraintItemProvider != null) indexConstraintItemProvider.dispose();
		if (constraintTypeFieldItemProvider != null) constraintTypeFieldItemProvider.dispose();
		if (mongoNodeGenOptionsItemProvider != null) mongoNodeGenOptionsItemProvider.dispose();
		if (complexTypeFieldItemProvider != null) complexTypeFieldItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (domainModelImportItemProvider != null) domainModelImportItemProvider.dispose();
		if (mongoNodeTableOptionsItemProvider != null) mongoNodeTableOptionsItemProvider.dispose();
		if (jpaTableOptionsItemProvider != null) jpaTableOptionsItemProvider.dispose();
		if (idFieldItemProvider != null) idFieldItemProvider.dispose();
		if (shortIdFieldItemProvider != null) shortIdFieldItemProvider.dispose();
	}

}
