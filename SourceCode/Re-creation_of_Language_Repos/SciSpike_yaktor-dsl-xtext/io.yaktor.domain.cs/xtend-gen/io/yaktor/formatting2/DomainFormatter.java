/**
 * generated by Xtext 2.35.0
 */
package io.yaktor.formatting2;

import com.google.inject.Inject;
import io.yaktor.domain.Association;
import io.yaktor.domain.AssociationEnd;
import io.yaktor.domain.DomainModel;
import io.yaktor.domain.DomainModelImport;
import io.yaktor.domain.GenOptions;
import io.yaktor.domain.NamedType;
import io.yaktor.services.DomainGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DomainFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DomainGrammarAccess _domainGrammarAccess;

  protected void _format(final DomainModel domainModel, @Extension final IFormattableDocument document) {
    EList<DomainModelImport> _domainModelImports = domainModel.getDomainModelImports();
    for (final DomainModelImport domainModelImport : _domainModelImports) {
      document.<DomainModelImport>format(domainModelImport);
    }
    document.<GenOptions>format(domainModel.getGenOptions());
    EList<NamedType> _types = domainModel.getTypes();
    for (final NamedType namedType : _types) {
      document.<NamedType>format(namedType);
    }
  }

  protected void _format(final Association association, @Extension final IFormattableDocument document) {
    document.<AssociationEnd>format(association.getStart());
    document.<AssociationEnd>format(association.getEnd());
  }

  public void format(final Object association, final IFormattableDocument document) {
    if (association instanceof XtextResource) {
      _format((XtextResource)association, document);
      return;
    } else if (association instanceof Association) {
      _format((Association)association, document);
      return;
    } else if (association instanceof DomainModel) {
      _format((DomainModel)association, document);
      return;
    } else if (association instanceof EObject) {
      _format((EObject)association, document);
      return;
    } else if (association == null) {
      _format((Void)null, document);
      return;
    } else if (association != null) {
      _format(association, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(association, document).toString());
    }
  }
}
