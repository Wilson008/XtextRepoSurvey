/*
 * generated by Xtext 2.35.0
 */
package io.yaktor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ConversationGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ConversationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Conversation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConversationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Assignment cImportedAgentsAssignment_3_2_0 = (Assignment)cAlternatives_3_2.eContents().get(0);
		private final RuleCall cImportedAgentsAgentImportParserRuleCall_3_2_0_0 = (RuleCall)cImportedAgentsAssignment_3_2_0.eContents().get(0);
		private final Assignment cImportedTypesAssignment_3_2_1 = (Assignment)cAlternatives_3_2.eContents().get(1);
		private final RuleCall cImportedTypesTypeImportParserRuleCall_3_2_1_0 = (RuleCall)cImportedTypesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cAgentsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cAgentsAgentParserRuleCall_4_0_0 = (RuleCall)cAgentsAssignment_4_0.eContents().get(0);
		private final Assignment cViewsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cViewsViewParserRuleCall_4_1_0 = (RuleCall)cViewsAssignment_4_1.eContents().get(0);
		private final Assignment cRestServicesAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cRestServicesRestServiceParserRuleCall_4_2_0 = (RuleCall)cRestServicesAssignment_4_2.eContents().get(0);
		private final Assignment cDefinedTypesAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cDefinedTypesTopLevelProjectionParserRuleCall_4_3_0 = (RuleCall)cDefinedTypesAssignment_4_3.eContents().get(0);
		private final Assignment cServicesAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cServicesServiceParserRuleCall_4_4_0 = (RuleCall)cServicesAssignment_4_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Conversation returns Conversation:
		//  'conversation' name=ID '{'
		//  ('imports' '{'
		//  (importedAgents+=AgentImport |
		//  importedTypes+=TypeImport)*
		//  '}')?
		//  (agents+=Agent |
		//  views+=View |
		//  restServices+=RestService |
		//  definedTypes+=TopLevelProjection |
		//  services+=Service)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'conversation' name=ID '{'
		//('imports' '{'
		//(importedAgents+=AgentImport |
		//importedTypes+=TypeImport)*
		//'}')?
		//(agents+=Agent |
		//views+=View |
		//restServices+=RestService |
		//definedTypes+=TopLevelProjection |
		//services+=Service)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'conversation'
		public Keyword getConversationKeyword_0() { return cConversationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('imports' '{'
		//(importedAgents+=AgentImport |
		//importedTypes+=TypeImport)*
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'imports'
		public Keyword getImportsKeyword_3_0() { return cImportsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//(importedAgents+=AgentImport |
		//importedTypes+=TypeImport)*
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//importedAgents+=AgentImport
		public Assignment getImportedAgentsAssignment_3_2_0() { return cImportedAgentsAssignment_3_2_0; }
		
		//AgentImport
		public RuleCall getImportedAgentsAgentImportParserRuleCall_3_2_0_0() { return cImportedAgentsAgentImportParserRuleCall_3_2_0_0; }
		
		//importedTypes+=TypeImport
		public Assignment getImportedTypesAssignment_3_2_1() { return cImportedTypesAssignment_3_2_1; }
		
		//TypeImport
		public RuleCall getImportedTypesTypeImportParserRuleCall_3_2_1_0() { return cImportedTypesTypeImportParserRuleCall_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//(agents+=Agent |
		//views+=View |
		//restServices+=RestService |
		//definedTypes+=TopLevelProjection |
		//services+=Service)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//agents+=Agent
		public Assignment getAgentsAssignment_4_0() { return cAgentsAssignment_4_0; }
		
		//Agent
		public RuleCall getAgentsAgentParserRuleCall_4_0_0() { return cAgentsAgentParserRuleCall_4_0_0; }
		
		//views+=View
		public Assignment getViewsAssignment_4_1() { return cViewsAssignment_4_1; }
		
		//View
		public RuleCall getViewsViewParserRuleCall_4_1_0() { return cViewsViewParserRuleCall_4_1_0; }
		
		//restServices+=RestService
		public Assignment getRestServicesAssignment_4_2() { return cRestServicesAssignment_4_2; }
		
		//RestService
		public RuleCall getRestServicesRestServiceParserRuleCall_4_2_0() { return cRestServicesRestServiceParserRuleCall_4_2_0; }
		
		//definedTypes+=TopLevelProjection
		public Assignment getDefinedTypesAssignment_4_3() { return cDefinedTypesAssignment_4_3; }
		
		//TopLevelProjection
		public RuleCall getDefinedTypesTopLevelProjectionParserRuleCall_4_3_0() { return cDefinedTypesTopLevelProjectionParserRuleCall_4_3_0; }
		
		//services+=Service
		public Assignment getServicesAssignment_4_4() { return cServicesAssignment_4_4; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_4_4_0() { return cServicesServiceParserRuleCall_4_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AgentImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.AgentImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAgentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAgentAgentCrossReference_1_0 = (CrossReference)cAgentAssignment_1.eContents().get(0);
		private final RuleCall cAgentAgentQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cAgentAgentCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//AgentImport:
		//  'agent' agent=[Agent|QualifiedName] ('as' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'agent' agent=[Agent|QualifiedName] ('as' alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//'agent'
		public Keyword getAgentKeyword_0() { return cAgentKeyword_0; }
		
		//agent=[Agent|QualifiedName]
		public Assignment getAgentAssignment_1() { return cAgentAssignment_1; }
		
		//[Agent|QualifiedName]
		public CrossReference getAgentAgentCrossReference_1_0() { return cAgentAgentCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getAgentAgentQualifiedNameParserRuleCall_1_0_1() { return cAgentAgentQualifiedNameParserRuleCall_1_0_1; }
		
		//('as' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
	}
	public class TypeImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.TypeImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMessageKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeProjectionCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeProjectionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeProjectionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//TypeImport:
		//  ('type' | 'message') type=[Projection|QualifiedName] ('as' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('type' | 'message') type=[Projection|QualifiedName] ('as' alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//('type' | 'message')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'type'
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }
		
		//'message'
		public Keyword getMessageKeyword_0_1() { return cMessageKeyword_0_1; }
		
		//type=[Projection|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[Projection|QualifiedName]
		public CrossReference getTypeProjectionCrossReference_1_0() { return cTypeProjectionCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeProjectionQualifiedNameParserRuleCall_1_0_1() { return cTypeProjectionQualifiedNameParserRuleCall_1_0_1; }
		
		//('as' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//  ID ('.' ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class PossiblyQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.PossiblyQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//PossiblyQualifiedName:
		//  ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AgentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Agent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateMachineTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateMachineTypeStateMachineTypeEnumRuleCall_0_0 = (RuleCall)cStateMachineTypeAssignment_0.eContents().get(0);
		private final Assignment cAccessRequirementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAccessRequirementAccessRequirementEnumRuleCall_1_0 = (RuleCall)cAccessRequirementAssignment_1.eContents().get(0);
		private final Keyword cAgentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cConcerningKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cConcernsKeyword_4_0_2 = (Keyword)cAlternatives_4_0.eContents().get(2);
		private final Assignment cProjectionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cProjectionProjectionCrossReference_4_1_0 = (CrossReference)cProjectionAssignment_4_1.eContents().get(0);
		private final RuleCall cProjectionProjectionPossiblyQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cProjectionProjectionCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cSendablesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cSendablesInitialPubliclySubscribableParserRuleCall_6_0_0 = (RuleCall)cSendablesAssignment_6_0.eContents().get(0);
		private final Assignment cSendablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSendablesSubsequentPubliclySubscribableParserRuleCall_6_1_0 = (RuleCall)cSendablesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cSendablesAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cSendablesInitialPublicPubSubParserRuleCall_7_0_0 = (RuleCall)cSendablesAssignment_7_0.eContents().get(0);
		private final Assignment cSendablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSendablesSubsequentPublicPubSubParserRuleCall_7_1_0 = (RuleCall)cSendablesAssignment_7_1.eContents().get(0);
		private final Assignment cStateMachineAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStateMachineStateMachineParserRuleCall_8_0 = (RuleCall)cStateMachineAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Agent returns Agent:
		//  (stateMachineType=StateMachineType)? (accessRequirement=AccessRequirement)? 'agent' name=ID ((':' | 'concerning' | 'concerns')
		//  projection=[Projection|PossiblyQualifiedName]) '{'
		//  (sendables+=InitialPubliclySubscribable (sendables+=SubsequentPubliclySubscribable)*)?
		//  (sendables+=InitialPublicPubSub (sendables+=SubsequentPublicPubSub)*)?
		//  stateMachine=StateMachine
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//(stateMachineType=StateMachineType)? (accessRequirement=AccessRequirement)? 'agent' name=ID ((':' | 'concerning' | 'concerns')
		//projection=[Projection|PossiblyQualifiedName]) '{'
		//(sendables+=InitialPubliclySubscribable (sendables+=SubsequentPubliclySubscribable)*)?
		//(sendables+=InitialPublicPubSub (sendables+=SubsequentPublicPubSub)*)?
		//stateMachine=StateMachine
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(stateMachineType=StateMachineType)?
		public Assignment getStateMachineTypeAssignment_0() { return cStateMachineTypeAssignment_0; }
		
		//StateMachineType
		public RuleCall getStateMachineTypeStateMachineTypeEnumRuleCall_0_0() { return cStateMachineTypeStateMachineTypeEnumRuleCall_0_0; }
		
		//(accessRequirement=AccessRequirement)?
		public Assignment getAccessRequirementAssignment_1() { return cAccessRequirementAssignment_1; }
		
		//AccessRequirement
		public RuleCall getAccessRequirementAccessRequirementEnumRuleCall_1_0() { return cAccessRequirementAccessRequirementEnumRuleCall_1_0; }
		
		//'agent'
		public Keyword getAgentKeyword_2() { return cAgentKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//((':' | 'concerning' | 'concerns')
		// projection=[Projection|PossiblyQualifiedName])
		public Group getGroup_4() { return cGroup_4; }
		
		//(':' | 'concerning' | 'concerns')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_0_0() { return cColonKeyword_4_0_0; }
		
		//'concerning'
		public Keyword getConcerningKeyword_4_0_1() { return cConcerningKeyword_4_0_1; }
		
		//'concerns'
		public Keyword getConcernsKeyword_4_0_2() { return cConcernsKeyword_4_0_2; }
		
		//projection=[Projection|PossiblyQualifiedName]
		public Assignment getProjectionAssignment_4_1() { return cProjectionAssignment_4_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getProjectionProjectionCrossReference_4_1_0() { return cProjectionProjectionCrossReference_4_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getProjectionProjectionPossiblyQualifiedNameParserRuleCall_4_1_0_1() { return cProjectionProjectionPossiblyQualifiedNameParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(sendables+=InitialPubliclySubscribable (sendables+=SubsequentPubliclySubscribable)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//sendables+=InitialPubliclySubscribable
		public Assignment getSendablesAssignment_6_0() { return cSendablesAssignment_6_0; }
		
		//InitialPubliclySubscribable
		public RuleCall getSendablesInitialPubliclySubscribableParserRuleCall_6_0_0() { return cSendablesInitialPubliclySubscribableParserRuleCall_6_0_0; }
		
		//(sendables+=SubsequentPubliclySubscribable)*
		public Assignment getSendablesAssignment_6_1() { return cSendablesAssignment_6_1; }
		
		//SubsequentPubliclySubscribable
		public RuleCall getSendablesSubsequentPubliclySubscribableParserRuleCall_6_1_0() { return cSendablesSubsequentPubliclySubscribableParserRuleCall_6_1_0; }
		
		//(sendables+=InitialPublicPubSub (sendables+=SubsequentPublicPubSub)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//sendables+=InitialPublicPubSub
		public Assignment getSendablesAssignment_7_0() { return cSendablesAssignment_7_0; }
		
		//InitialPublicPubSub
		public RuleCall getSendablesInitialPublicPubSubParserRuleCall_7_0_0() { return cSendablesInitialPublicPubSubParserRuleCall_7_0_0; }
		
		//(sendables+=SubsequentPublicPubSub)*
		public Assignment getSendablesAssignment_7_1() { return cSendablesAssignment_7_1; }
		
		//SubsequentPublicPubSub
		public RuleCall getSendablesSubsequentPublicPubSubParserRuleCall_7_1_0() { return cSendablesSubsequentPublicPubSubParserRuleCall_7_1_0; }
		
		//stateMachine=StateMachine
		public Assignment getStateMachineAssignment_8() { return cStateMachineAssignment_8; }
		
		//StateMachine
		public RuleCall getStateMachineStateMachineParserRuleCall_8_0() { return cStateMachineStateMachineParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cInitiallyKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_0_0 = (Keyword)cAlternatives_2_0_0.eContents().get(0);
		private final Keyword cBecomesKeyword_2_0_0_1 = (Keyword)cAlternatives_2_0_0.eContents().get(1);
		private final Assignment cInitialStateAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cInitialStateStateCrossReference_2_0_1_0 = (CrossReference)cInitialStateAssignment_2_0_1.eContents().get(0);
		private final RuleCall cInitialStateStateIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cInitialStateStateCrossReference_2_0_1_0.eContents().get(1);
		private final Assignment cInitialTransitionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInitialTransitionTransitionParserRuleCall_2_1_0 = (RuleCall)cInitialTransitionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateLikeParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StateMachine returns StateMachine:
		//  {StateMachine}
		//  ('initially' | '~') ( ( ('->' | 'becomes') initialState=[State])
		//  | ( initialTransition=Transition))
		//  '{'
		//  (states+=StateLike)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StateMachine}
		//('initially' | '~') ( ( ('->' | 'becomes') initialState=[State])
		//| ( initialTransition=Transition))
		//'{'
		//(states+=StateLike)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{StateMachine}
		public Action getStateMachineAction_0() { return cStateMachineAction_0; }
		
		//('initially' | '~')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'initially'
		public Keyword getInitiallyKeyword_1_0() { return cInitiallyKeyword_1_0; }
		
		//'~'
		public Keyword getTildeKeyword_1_1() { return cTildeKeyword_1_1; }
		
		//( ( ('->' | 'becomes') initialState=[State])
		// | ( initialTransition=Transition))
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//( ('->' | 'becomes') initialState=[State])
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//('->' | 'becomes')
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_0_0() { return cHyphenMinusGreaterThanSignKeyword_2_0_0_0; }
		
		//'becomes'
		public Keyword getBecomesKeyword_2_0_0_1() { return cBecomesKeyword_2_0_0_1; }
		
		//initialState=[State]
		public Assignment getInitialStateAssignment_2_0_1() { return cInitialStateAssignment_2_0_1; }
		
		//[State]
		public CrossReference getInitialStateStateCrossReference_2_0_1_0() { return cInitialStateStateCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getInitialStateStateIDTerminalRuleCall_2_0_1_0_1() { return cInitialStateStateIDTerminalRuleCall_2_0_1_0_1; }
		
		//( initialTransition=Transition)
		public Assignment getInitialTransitionAssignment_2_1() { return cInitialTransitionAssignment_2_1; }
		
		//Transition
		public RuleCall getInitialTransitionTransitionParserRuleCall_2_1_0() { return cInitialTransitionTransitionParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(states+=StateLike)*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }
		
		//StateLike
		public RuleCall getStatesStateLikeParserRuleCall_4_0() { return cStatesStateLikeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InitialPubliclySubscribableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.InitialPubliclySubscribable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cSendsKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Action cPubliclySubscribableAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefTypeProjectionCrossReference_2_1_0 = (CrossReference)cRefTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefTypeProjectionCrossReference_2_1_0.eContents().get(1);
		
		//InitialPubliclySubscribable returns PubliclySubscribable:
		//  (('>' | 'sends') {PubliclySubscribable})
		//  name=ID
		//  (':' refType=[Projection|PossiblyQualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(('>' | 'sends') {PubliclySubscribable})
		//name=ID
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//(('>' | 'sends') {PubliclySubscribable})
		public Group getGroup_0() { return cGroup_0; }
		
		//('>' | 'sends')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_0_0() { return cGreaterThanSignKeyword_0_0_0; }
		
		//'sends'
		public Keyword getSendsKeyword_0_0_1() { return cSendsKeyword_0_0_1; }
		
		//{PubliclySubscribable}
		public Action getPubliclySubscribableAction_0_1() { return cPubliclySubscribableAction_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//refType=[Projection|PossiblyQualifiedName]
		public Assignment getRefTypeAssignment_2_1() { return cRefTypeAssignment_2_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getRefTypeProjectionCrossReference_2_1_0() { return cRefTypeProjectionCrossReference_2_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1() { return cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1; }
	}
	public class SubsequentPubliclySubscribableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.SubsequentPubliclySubscribable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cSendsKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Action cPubliclySubscribableAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefTypeProjectionCrossReference_2_1_0 = (CrossReference)cRefTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefTypeProjectionCrossReference_2_1_0.eContents().get(1);
		
		//SubsequentPubliclySubscribable returns PubliclySubscribable:
		//  (('>' | 'sends')? {PubliclySubscribable})
		//  name=ID
		//  (':' refType=[Projection|PossiblyQualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(('>' | 'sends')? {PubliclySubscribable})
		//name=ID
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//(('>' | 'sends')? {PubliclySubscribable})
		public Group getGroup_0() { return cGroup_0; }
		
		//('>' | 'sends')?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_0_0() { return cGreaterThanSignKeyword_0_0_0; }
		
		//'sends'
		public Keyword getSendsKeyword_0_0_1() { return cSendsKeyword_0_0_1; }
		
		//{PubliclySubscribable}
		public Action getPubliclySubscribableAction_0_1() { return cPubliclySubscribableAction_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//refType=[Projection|PossiblyQualifiedName]
		public Assignment getRefTypeAssignment_2_1() { return cRefTypeAssignment_2_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getRefTypeProjectionCrossReference_2_1_0() { return cRefTypeProjectionCrossReference_2_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1() { return cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1; }
	}
	public class InitialPublicPubSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.InitialPublicPubSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPubsubKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cPublicPubSubAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefTypeProjectionCrossReference_2_1_0 = (CrossReference)cRefTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefTypeProjectionCrossReference_2_1_0.eContents().get(1);
		
		//InitialPublicPubSub returns PublicPubSub:
		//  ('pubsub' {PublicPubSub})
		//  name=ID
		//  (':' refType=[Projection|PossiblyQualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//('pubsub' {PublicPubSub})
		//name=ID
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//('pubsub' {PublicPubSub})
		public Group getGroup_0() { return cGroup_0; }
		
		//'pubsub'
		public Keyword getPubsubKeyword_0_0() { return cPubsubKeyword_0_0; }
		
		//{PublicPubSub}
		public Action getPublicPubSubAction_0_1() { return cPublicPubSubAction_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//refType=[Projection|PossiblyQualifiedName]
		public Assignment getRefTypeAssignment_2_1() { return cRefTypeAssignment_2_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getRefTypeProjectionCrossReference_2_1_0() { return cRefTypeProjectionCrossReference_2_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1() { return cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1; }
	}
	public class SubsequentPublicPubSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.SubsequentPublicPubSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPubsubKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cPublicPubSubAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefTypeProjectionCrossReference_2_1_0 = (CrossReference)cRefTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefTypeProjectionCrossReference_2_1_0.eContents().get(1);
		
		//SubsequentPublicPubSub returns PublicPubSub:
		//  ('pubsub'? {PublicPubSub})
		//  name=ID
		//  (':' refType=[Projection|PossiblyQualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//('pubsub'? {PublicPubSub})
		//name=ID
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//('pubsub'? {PublicPubSub})
		public Group getGroup_0() { return cGroup_0; }
		
		//'pubsub'?
		public Keyword getPubsubKeyword_0_0() { return cPubsubKeyword_0_0; }
		
		//{PublicPubSub}
		public Action getPublicPubSubAction_0_1() { return cPublicPubSubAction_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//refType=[Projection|PossiblyQualifiedName]
		public Assignment getRefTypeAssignment_2_1() { return cRefTypeAssignment_2_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getRefTypeProjectionCrossReference_2_1_0() { return cRefTypeProjectionCrossReference_2_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1() { return cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_2_1_0_1; }
	}
	public class StateLikeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.StateLike");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecisionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJoinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StateLike returns State:
		//  State | Decision | Join;
		@Override public ParserRule getRule() { return rule; }
		
		//State | Decision | Join
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }
		
		//Decision
		public RuleCall getDecisionParserRuleCall_1() { return cDecisionParserRuleCall_1; }
		
		//Join
		public RuleCall getJoinParserRuleCall_2() { return cJoinParserRuleCall_2; }
	}
	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Junction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMessageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMessageSubscribableByOthersCrossReference_0_0 = (CrossReference)cMessageAssignment_0.eContents().get(0);
		private final RuleCall cMessageSubscribableByOthersQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cMessageSubscribableByOthersCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cFieldMappingAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cFieldMappingProjectionFieldCrossReference_1_0_1_0 = (CrossReference)cFieldMappingAssignment_1_0_1.eContents().get(0);
		private final RuleCall cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_1_0_1_0_1 = (RuleCall)cFieldMappingProjectionFieldCrossReference_1_0_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cIfKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFieldMappingAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cFieldMappingProjectionFieldCrossReference_1_1_1_0 = (CrossReference)cFieldMappingAssignment_1_1_1.eContents().get(0);
		private final RuleCall cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cFieldMappingProjectionFieldCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cMatchesKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Junction returns Junction:
		//  message=[SubscribableByOthers|QualifiedName]
		//  (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//message=[SubscribableByOthers|QualifiedName]
		//(('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?
		public Group getGroup() { return cGroup; }
		
		//message=[SubscribableByOthers|QualifiedName]
		public Assignment getMessageAssignment_0() { return cMessageAssignment_0; }
		
		//[SubscribableByOthers|QualifiedName]
		public CrossReference getMessageSubscribableByOthersCrossReference_0_0() { return cMessageSubscribableByOthersCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getMessageSubscribableByOthersQualifiedNameParserRuleCall_0_0_1() { return cMessageSubscribableByOthersQualifiedNameParserRuleCall_0_0_1; }
		
		//(('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//fieldMapping=[ProjectionField|PossiblyQualifiedName]
		public Assignment getFieldMappingAssignment_1_0_1() { return cFieldMappingAssignment_1_0_1; }
		
		//[ProjectionField|PossiblyQualifiedName]
		public CrossReference getFieldMappingProjectionFieldCrossReference_1_0_1_0() { return cFieldMappingProjectionFieldCrossReference_1_0_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_1_0_1_0_1() { return cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_1_0_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }
		
		//('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'if'
		public Keyword getIfKeyword_1_1_0() { return cIfKeyword_1_1_0; }
		
		//fieldMapping=[ProjectionField|PossiblyQualifiedName]
		public Assignment getFieldMappingAssignment_1_1_1() { return cFieldMappingAssignment_1_1_1; }
		
		//[ProjectionField|PossiblyQualifiedName]
		public CrossReference getFieldMappingProjectionFieldCrossReference_1_1_1_0() { return cFieldMappingProjectionFieldCrossReference_1_1_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_1_1_1_0_1() { return cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_1_1_1_0_1; }
		
		//'matches'
		public Keyword getMatchesKeyword_1_1_2() { return cMatchesKeyword_1_1_2; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiresExecutionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cRequiresExecutionCustomKeyword_2_0 = (Keyword)cRequiresExecutionAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cWaitsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cForKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Keyword cAwaitsKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cJoinsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cJoinsJunctionParserRuleCall_5_0 = (RuleCall)cJoinsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cCommaKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cAndKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		private final Assignment cJoinsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cJoinsJunctionParserRuleCall_6_1_0 = (RuleCall)cJoinsAssignment_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTransitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTransitionsTransitionParserRuleCall_8_0 = (RuleCall)cTransitionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Join returns Join:
		//  'while' 'in'?  (requiresExecution?="custom")? name=ID ('waits' 'for' | 'awaits') joins+=Junction ((',' | 'and')? joins+=Junction)*
		//  '{'
		//  (transitions+=Transition)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' 'in'?  (requiresExecution?="custom")? name=ID ('waits' 'for' | 'awaits') joins+=Junction ((',' | 'and')? joins+=Junction)*
		//'{'
		//(transitions+=Transition)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'in'?
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//(requiresExecution?="custom")?
		public Assignment getRequiresExecutionAssignment_2() { return cRequiresExecutionAssignment_2; }
		
		//"custom"
		public Keyword getRequiresExecutionCustomKeyword_2_0() { return cRequiresExecutionCustomKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('waits' 'for' | 'awaits')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'waits' 'for'
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'waits'
		public Keyword getWaitsKeyword_4_0_0() { return cWaitsKeyword_4_0_0; }
		
		//'for'
		public Keyword getForKeyword_4_0_1() { return cForKeyword_4_0_1; }
		
		//'awaits'
		public Keyword getAwaitsKeyword_4_1() { return cAwaitsKeyword_4_1; }
		
		//joins+=Junction
		public Assignment getJoinsAssignment_5() { return cJoinsAssignment_5; }
		
		//Junction
		public RuleCall getJoinsJunctionParserRuleCall_5_0() { return cJoinsJunctionParserRuleCall_5_0; }
		
		//((',' | 'and')? joins+=Junction)*
		public Group getGroup_6() { return cGroup_6; }
		
		//(',' | 'and')?
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }
		
		//','
		public Keyword getCommaKeyword_6_0_0() { return cCommaKeyword_6_0_0; }
		
		//'and'
		public Keyword getAndKeyword_6_0_1() { return cAndKeyword_6_0_1; }
		
		//joins+=Junction
		public Assignment getJoinsAssignment_6_1() { return cJoinsAssignment_6_1; }
		
		//Junction
		public RuleCall getJoinsJunctionParserRuleCall_6_1_0() { return cJoinsJunctionParserRuleCall_6_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(transitions+=Transition)*
		public Assignment getTransitionsAssignment_8() { return cTransitionsAssignment_8; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_8_0() { return cTransitionsTransitionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Decision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsInternalTransitionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Decision returns Decision:
		//  'decision' name=ID
		//  '{'
		//  (transitions+=InternalTransition)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'decision' name=ID
		//'{'
		//(transitions+=InternalTransition)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'decision'
		public Keyword getDecisionKeyword_0() { return cDecisionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(transitions+=InternalTransition)*
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//InternalTransition
		public RuleCall getTransitionsInternalTransitionParserRuleCall_3_0() { return cTransitionsInternalTransitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cInKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRequiresExecutionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiresExecutionCustomKeyword_1_0 = (Keyword)cRequiresExecutionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State returns State:
		//  ('while' 'in'?)? (requiresExecution?="custom")? name=ID
		//  '{'
		//  (transitions+=Transition)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//('while' 'in'?)? (requiresExecution?="custom")? name=ID
		//'{'
		//(transitions+=Transition)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//('while' 'in'?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'while'
		public Keyword getWhileKeyword_0_0() { return cWhileKeyword_0_0; }
		
		//'in'?
		public Keyword getInKeyword_0_1() { return cInKeyword_0_1; }
		
		//(requiresExecution?="custom")?
		public Assignment getRequiresExecutionAssignment_1() { return cRequiresExecutionAssignment_1; }
		
		//"custom"
		public Keyword getRequiresExecutionCustomKeyword_1_0() { return cRequiresExecutionCustomKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(transitions+=Transition)*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() { return cTransitionsTransitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PrivatePubSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.PrivatePubSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefTypeProjectionCrossReference_1_1_0 = (CrossReference)cRefTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cRefTypeProjectionCrossReference_1_1_0.eContents().get(1);
		
		//PrivatePubSub returns PrivatePubSub:
		//  name=ID
		//  (':' refType=[Projection|PossiblyQualifiedName])?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(':' refType=[Projection|PossiblyQualifiedName])?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//refType=[Projection|PossiblyQualifiedName]
		public Assignment getRefTypeAssignment_1_1() { return cRefTypeAssignment_1_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getRefTypeProjectionCrossReference_1_1_0() { return cRefTypeProjectionCrossReference_1_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getRefTypeProjectionPossiblyQualifiedNameParserRuleCall_1_1_0_1() { return cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_1_1_0_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReceivesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiresExecutionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cRequiresExecutionCustomKeyword_2_0 = (Keyword)cRequiresExecutionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cCausedByAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cCausedByPrivatePubSubParserRuleCall_3_0_0 = (RuleCall)cCausedByAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cExCausedByAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cExCausedBySubscribableByOthersCrossReference_3_1_0_0 = (CrossReference)cExCausedByAssignment_3_1_0.eContents().get(0);
		private final RuleCall cExCausedBySubscribableByOthersQualifiedNameParserRuleCall_3_1_0_0_1 = (RuleCall)cExCausedBySubscribableByOthersCrossReference_3_1_0_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1_1 = (Alternatives)cGroup_3_1.eContents().get(1);
		private final Group cGroup_3_1_1_0 = (Group)cAlternatives_3_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1_0_0 = (Keyword)cGroup_3_1_1_0.eContents().get(0);
		private final Assignment cFieldMappingAssignment_3_1_1_0_1 = (Assignment)cGroup_3_1_1_0.eContents().get(1);
		private final CrossReference cFieldMappingProjectionFieldCrossReference_3_1_1_0_1_0 = (CrossReference)cFieldMappingAssignment_3_1_1_0_1.eContents().get(0);
		private final RuleCall cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_3_1_1_0_1_0_1 = (RuleCall)cFieldMappingProjectionFieldCrossReference_3_1_1_0_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_1_1_0_2 = (Keyword)cGroup_3_1_1_0.eContents().get(2);
		private final Group cGroup_3_1_1_1 = (Group)cAlternatives_3_1_1.eContents().get(1);
		private final Keyword cIfKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cFieldMappingAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final CrossReference cFieldMappingProjectionFieldCrossReference_3_1_1_1_1_0 = (CrossReference)cFieldMappingAssignment_3_1_1_1_1.eContents().get(0);
		private final RuleCall cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_3_1_1_1_1_0_1 = (RuleCall)cFieldMappingProjectionFieldCrossReference_3_1_1_1_1_0.eContents().get(1);
		private final Keyword cMatchesKeyword_3_1_1_1_2 = (Keyword)cGroup_3_1_1_1.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cBecomesKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cToStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToStateStateCrossReference_5_0 = (CrossReference)cToStateAssignment_5.eContents().get(0);
		private final RuleCall cToStateStateIDTerminalRuleCall_5_0_1 = (RuleCall)cToStateStateCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cSendsKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		private final Assignment cTriggersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cTriggersPublishableByMeCrossReference_6_1_0 = (CrossReference)cTriggersAssignment_6_1.eContents().get(0);
		private final RuleCall cTriggersPublishableByMeIDTerminalRuleCall_6_1_0_1 = (RuleCall)cTriggersPublishableByMeCrossReference_6_1_0.eContents().get(1);
		
		//Transition returns Transition:
		//  {Transition}
		//  'receives'?
		//  (requiresExecution?='custom')?
		//  (
		//  causedBy=PrivatePubSub |
		//  (exCausedBy=[SubscribableByOthers|QualifiedName] (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?)
		//  )
		//  ('->' | 'becomes') toState=[State|ID]
		//  (('>' | 'sends') (triggers=[PublishableByMe|ID]))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition}
		//'receives'?
		//(requiresExecution?='custom')?
		//(
		//causedBy=PrivatePubSub |
		//(exCausedBy=[SubscribableByOthers|QualifiedName] (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?)
		//)
		//('->' | 'becomes') toState=[State|ID]
		//(('>' | 'sends') (triggers=[PublishableByMe|ID]))?
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//'receives'?
		public Keyword getReceivesKeyword_1() { return cReceivesKeyword_1; }
		
		//(requiresExecution?='custom')?
		public Assignment getRequiresExecutionAssignment_2() { return cRequiresExecutionAssignment_2; }
		
		//'custom'
		public Keyword getRequiresExecutionCustomKeyword_2_0() { return cRequiresExecutionCustomKeyword_2_0; }
		
		//(
		//causedBy=PrivatePubSub |
		//(exCausedBy=[SubscribableByOthers|QualifiedName] (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?)
		//)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//causedBy=PrivatePubSub
		public Assignment getCausedByAssignment_3_0() { return cCausedByAssignment_3_0; }
		
		//PrivatePubSub
		public RuleCall getCausedByPrivatePubSubParserRuleCall_3_0_0() { return cCausedByPrivatePubSubParserRuleCall_3_0_0; }
		
		//(exCausedBy=[SubscribableByOthers|QualifiedName] (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?)
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//exCausedBy=[SubscribableByOthers|QualifiedName]
		public Assignment getExCausedByAssignment_3_1_0() { return cExCausedByAssignment_3_1_0; }
		
		//[SubscribableByOthers|QualifiedName]
		public CrossReference getExCausedBySubscribableByOthersCrossReference_3_1_0_0() { return cExCausedBySubscribableByOthersCrossReference_3_1_0_0; }
		
		//QualifiedName
		public RuleCall getExCausedBySubscribableByOthersQualifiedNameParserRuleCall_3_1_0_0_1() { return cExCausedBySubscribableByOthersQualifiedNameParserRuleCall_3_1_0_0_1; }
		
		//(('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?
		public Alternatives getAlternatives_3_1_1() { return cAlternatives_3_1_1; }
		
		//('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']')
		public Group getGroup_3_1_1_0() { return cGroup_3_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_1_1_0_0() { return cLeftSquareBracketKeyword_3_1_1_0_0; }
		
		//fieldMapping=[ProjectionField|PossiblyQualifiedName]
		public Assignment getFieldMappingAssignment_3_1_1_0_1() { return cFieldMappingAssignment_3_1_1_0_1; }
		
		//[ProjectionField|PossiblyQualifiedName]
		public CrossReference getFieldMappingProjectionFieldCrossReference_3_1_1_0_1_0() { return cFieldMappingProjectionFieldCrossReference_3_1_1_0_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_3_1_1_0_1_0_1() { return cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_3_1_1_0_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_1_0_2() { return cRightSquareBracketKeyword_3_1_1_0_2; }
		
		//('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches')
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }
		
		//'if'
		public Keyword getIfKeyword_3_1_1_1_0() { return cIfKeyword_3_1_1_1_0; }
		
		//fieldMapping=[ProjectionField|PossiblyQualifiedName]
		public Assignment getFieldMappingAssignment_3_1_1_1_1() { return cFieldMappingAssignment_3_1_1_1_1; }
		
		//[ProjectionField|PossiblyQualifiedName]
		public CrossReference getFieldMappingProjectionFieldCrossReference_3_1_1_1_1_0() { return cFieldMappingProjectionFieldCrossReference_3_1_1_1_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_3_1_1_1_1_0_1() { return cFieldMappingProjectionFieldPossiblyQualifiedNameParserRuleCall_3_1_1_1_1_0_1; }
		
		//'matches'
		public Keyword getMatchesKeyword_3_1_1_1_2() { return cMatchesKeyword_3_1_1_1_2; }
		
		//('->' | 'becomes')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }
		
		//'becomes'
		public Keyword getBecomesKeyword_4_1() { return cBecomesKeyword_4_1; }
		
		//toState=[State|ID]
		public Assignment getToStateAssignment_5() { return cToStateAssignment_5; }
		
		//[State|ID]
		public CrossReference getToStateStateCrossReference_5_0() { return cToStateStateCrossReference_5_0; }
		
		//ID
		public RuleCall getToStateStateIDTerminalRuleCall_5_0_1() { return cToStateStateIDTerminalRuleCall_5_0_1; }
		
		//(('>' | 'sends') (triggers=[PublishableByMe|ID]))?
		public Group getGroup_6() { return cGroup_6; }
		
		//('>' | 'sends')
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6_0_0() { return cGreaterThanSignKeyword_6_0_0; }
		
		//'sends'
		public Keyword getSendsKeyword_6_0_1() { return cSendsKeyword_6_0_1; }
		
		//(triggers=[PublishableByMe|ID])
		public Assignment getTriggersAssignment_6_1() { return cTriggersAssignment_6_1; }
		
		//[PublishableByMe|ID]
		public CrossReference getTriggersPublishableByMeCrossReference_6_1_0() { return cTriggersPublishableByMeCrossReference_6_1_0; }
		
		//ID
		public RuleCall getTriggersPublishableByMeIDTerminalRuleCall_6_1_0_1() { return cTriggersPublishableByMeIDTerminalRuleCall_6_1_0_1; }
	}
	public class InternalTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.InternalTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRequiresExecutionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRequiresExecutionCustomKeyword_1_0 = (Keyword)cRequiresExecutionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cCausedByAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cCausedByPrivatePubSubParserRuleCall_2_0_0 = (RuleCall)cCausedByAssignment_2_0.eContents().get(0);
		private final Assignment cExCausedByAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cExCausedBySubscribableByOthersCrossReference_2_1_0 = (CrossReference)cExCausedByAssignment_2_1.eContents().get(0);
		private final RuleCall cExCausedBySubscribableByOthersQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cExCausedBySubscribableByOthersCrossReference_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cBecomesKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cToStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToStateStateCrossReference_4_0 = (CrossReference)cToStateAssignment_4.eContents().get(0);
		private final RuleCall cToStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cToStateStateCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final Keyword cSendsKeyword_5_0_1 = (Keyword)cAlternatives_5_0.eContents().get(1);
		private final Assignment cTriggersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cTriggersPublishableByMeCrossReference_5_1_0 = (CrossReference)cTriggersAssignment_5_1.eContents().get(0);
		private final RuleCall cTriggersPublishableByMeIDTerminalRuleCall_5_1_0_1 = (RuleCall)cTriggersPublishableByMeCrossReference_5_1_0.eContents().get(1);
		
		//InternalTransition returns Transition:
		//  {Transition}
		//  (requiresExecution?='custom')?
		//  (causedBy=PrivatePubSub | exCausedBy=[SubscribableByOthers|QualifiedName])
		//  ('->' | 'becomes') toState=[State|ID]
		//  (('>' | 'sends') (triggers=[PublishableByMe|ID]))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition}
		//(requiresExecution?='custom')?
		//(causedBy=PrivatePubSub | exCausedBy=[SubscribableByOthers|QualifiedName])
		//('->' | 'becomes') toState=[State|ID]
		//(('>' | 'sends') (triggers=[PublishableByMe|ID]))?
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//(requiresExecution?='custom')?
		public Assignment getRequiresExecutionAssignment_1() { return cRequiresExecutionAssignment_1; }
		
		//'custom'
		public Keyword getRequiresExecutionCustomKeyword_1_0() { return cRequiresExecutionCustomKeyword_1_0; }
		
		//(causedBy=PrivatePubSub | exCausedBy=[SubscribableByOthers|QualifiedName])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//causedBy=PrivatePubSub
		public Assignment getCausedByAssignment_2_0() { return cCausedByAssignment_2_0; }
		
		//PrivatePubSub
		public RuleCall getCausedByPrivatePubSubParserRuleCall_2_0_0() { return cCausedByPrivatePubSubParserRuleCall_2_0_0; }
		
		//exCausedBy=[SubscribableByOthers|QualifiedName]
		public Assignment getExCausedByAssignment_2_1() { return cExCausedByAssignment_2_1; }
		
		//[SubscribableByOthers|QualifiedName]
		public CrossReference getExCausedBySubscribableByOthersCrossReference_2_1_0() { return cExCausedBySubscribableByOthersCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getExCausedBySubscribableByOthersQualifiedNameParserRuleCall_2_1_0_1() { return cExCausedBySubscribableByOthersQualifiedNameParserRuleCall_2_1_0_1; }
		
		//('->' | 'becomes')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//'becomes'
		public Keyword getBecomesKeyword_3_1() { return cBecomesKeyword_3_1; }
		
		//toState=[State|ID]
		public Assignment getToStateAssignment_4() { return cToStateAssignment_4; }
		
		//[State|ID]
		public CrossReference getToStateStateCrossReference_4_0() { return cToStateStateCrossReference_4_0; }
		
		//ID
		public RuleCall getToStateStateIDTerminalRuleCall_4_0_1() { return cToStateStateIDTerminalRuleCall_4_0_1; }
		
		//(('>' | 'sends') (triggers=[PublishableByMe|ID]))?
		public Group getGroup_5() { return cGroup_5; }
		
		//('>' | 'sends')
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5_0_0() { return cGreaterThanSignKeyword_5_0_0; }
		
		//'sends'
		public Keyword getSendsKeyword_5_0_1() { return cSendsKeyword_5_0_1; }
		
		//(triggers=[PublishableByMe|ID])
		public Assignment getTriggersAssignment_5_1() { return cTriggersAssignment_5_1; }
		
		//[PublishableByMe|ID]
		public CrossReference getTriggersPublishableByMeCrossReference_5_1_0() { return cTriggersPublishableByMeCrossReference_5_1_0; }
		
		//ID
		public RuleCall getTriggersPublishableByMeIDTerminalRuleCall_5_1_0_1() { return cTriggersPublishableByMeIDTerminalRuleCall_5_1_0_1; }
	}
	public class ProjectionFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.ProjectionField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappedFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNewFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProjectionContainmentFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeContainmentFieldParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProjectionField:
		//  MappedField | NewField | ProjectionContainmentField | TypeContainmentField;
		@Override public ParserRule getRule() { return rule; }
		
		//MappedField | NewField | ProjectionContainmentField | TypeContainmentField
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MappedField
		public RuleCall getMappedFieldParserRuleCall_0() { return cMappedFieldParserRuleCall_0; }
		
		//NewField
		public RuleCall getNewFieldParserRuleCall_1() { return cNewFieldParserRuleCall_1; }
		
		//ProjectionContainmentField
		public RuleCall getProjectionContainmentFieldParserRuleCall_2() { return cProjectionContainmentFieldParserRuleCall_2; }
		
		//TypeContainmentField
		public RuleCall getTypeContainmentFieldParserRuleCall_3() { return cTypeContainmentFieldParserRuleCall_3; }
	}
	public class ProjectionContainmentFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.ProjectionContainmentField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProjectionContainmentFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProjectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProjectionProjectionCrossReference_2_0 = (CrossReference)cProjectionAssignment_2.eContents().get(0);
		private final RuleCall cProjectionProjectionPossiblyQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cProjectionProjectionCrossReference_2_0.eContents().get(1);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasIDTerminalRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Assignment cCardinalityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCardinalityCardinalityEnumRuleCall_4_0 = (RuleCall)cCardinalityAssignment_4.eContents().get(0);
		
		//ProjectionContainmentField:
		//  {ProjectionContainmentField}
		//  'val' projection=[Projection|PossiblyQualifiedName]
		//  alias=ID
		//  (cardinality=Cardinality)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProjectionContainmentField}
		//'val' projection=[Projection|PossiblyQualifiedName]
		//alias=ID
		//(cardinality=Cardinality)?
		public Group getGroup() { return cGroup; }
		
		//{ProjectionContainmentField}
		public Action getProjectionContainmentFieldAction_0() { return cProjectionContainmentFieldAction_0; }
		
		//'val'
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//projection=[Projection|PossiblyQualifiedName]
		public Assignment getProjectionAssignment_2() { return cProjectionAssignment_2; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getProjectionProjectionCrossReference_2_0() { return cProjectionProjectionCrossReference_2_0; }
		
		//PossiblyQualifiedName
		public RuleCall getProjectionProjectionPossiblyQualifiedNameParserRuleCall_2_0_1() { return cProjectionProjectionPossiblyQualifiedNameParserRuleCall_2_0_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_0() { return cAliasIDTerminalRuleCall_3_0; }
		
		//(cardinality=Cardinality)?
		public Assignment getCardinalityAssignment_4() { return cCardinalityAssignment_4; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityEnumRuleCall_4_0() { return cCardinalityCardinalityEnumRuleCall_4_0; }
	}
	public class TypeContainmentFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.TypeContainmentField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeContainmentFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNewFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewFieldTypeFieldParserRuleCall_2_0 = (RuleCall)cNewFieldAssignment_2.eContents().get(0);
		private final Assignment cProjectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProjectionNestedProjectionParserRuleCall_3_0 = (RuleCall)cProjectionAssignment_3.eContents().get(0);
		
		//TypeContainmentField:
		//  {TypeContainmentField}
		//  => 'val' newField=TypeField
		//  projection=NestedProjection;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeContainmentField}
		//=> 'val' newField=TypeField
		//projection=NestedProjection
		public Group getGroup() { return cGroup; }
		
		//{TypeContainmentField}
		public Action getTypeContainmentFieldAction_0() { return cTypeContainmentFieldAction_0; }
		
		//=> 'val'
		public Keyword getValKeyword_1() { return cValKeyword_1; }
		
		//newField=TypeField
		public Assignment getNewFieldAssignment_2() { return cNewFieldAssignment_2; }
		
		//TypeField
		public RuleCall getNewFieldTypeFieldParserRuleCall_2_0() { return cNewFieldTypeFieldParserRuleCall_2_0; }
		
		//projection=NestedProjection
		public Assignment getProjectionAssignment_3() { return cProjectionAssignment_3; }
		
		//NestedProjection
		public RuleCall getProjectionNestedProjectionParserRuleCall_3_0() { return cProjectionNestedProjectionParserRuleCall_3_0; }
	}
	public class NewFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.NewField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNewFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNewFieldAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNewFieldSimpleFieldParserRuleCall_1_0_0 = (RuleCall)cNewFieldAssignment_1_0.eContents().get(0);
		private final Assignment cNewFieldAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNewFieldAnyFieldParserRuleCall_1_1_0 = (RuleCall)cNewFieldAssignment_1_1.eContents().get(0);
		
		//NewField:
		//  {NewField}
		//  (newField=SimpleField | newField = AnyField);
		@Override public ParserRule getRule() { return rule; }
		
		//{NewField}
		//(newField=SimpleField | newField = AnyField)
		public Group getGroup() { return cGroup; }
		
		//{NewField}
		public Action getNewFieldAction_0() { return cNewFieldAction_0; }
		
		//(newField=SimpleField | newField = AnyField)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//newField=SimpleField
		public Assignment getNewFieldAssignment_1_0() { return cNewFieldAssignment_1_0; }
		
		//SimpleField
		public RuleCall getNewFieldSimpleFieldParserRuleCall_1_0_0() { return cNewFieldSimpleFieldParserRuleCall_1_0_0; }
		
		//newField = AnyField
		public Assignment getNewFieldAssignment_1_1() { return cNewFieldAssignment_1_1; }
		
		//AnyField
		public RuleCall getNewFieldAnyFieldParserRuleCall_1_1_0() { return cNewFieldAnyFieldParserRuleCall_1_1_0; }
	}
	public class MappedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.MappedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappedFieldAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOldFieldAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cOldFieldFieldCrossReference_1_0_0 = (CrossReference)cOldFieldAssignment_1_0.eContents().get(0);
		private final RuleCall cOldFieldFieldIDTerminalRuleCall_1_0_0_1 = (RuleCall)cOldFieldFieldCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAsKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_1_0 = (RuleCall)cAliasAssignment_1_1_1.eContents().get(0);
		private final Assignment cProjectionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cProjectionNestedProjectionParserRuleCall_1_2_0 = (RuleCall)cProjectionAssignment_1_2.eContents().get(0);
		
		//MappedField:
		//  {MappedField}
		//  (oldField=[domain::Field|ID] ('as' alias=ID)? (projection=NestedProjection)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{MappedField}
		//(oldField=[domain::Field|ID] ('as' alias=ID)? (projection=NestedProjection)?)
		public Group getGroup() { return cGroup; }
		
		//{MappedField}
		public Action getMappedFieldAction_0() { return cMappedFieldAction_0; }
		
		//(oldField=[domain::Field|ID] ('as' alias=ID)? (projection=NestedProjection)?)
		public Group getGroup_1() { return cGroup_1; }
		
		//oldField=[domain::Field|ID]
		public Assignment getOldFieldAssignment_1_0() { return cOldFieldAssignment_1_0; }
		
		//[domain::Field|ID]
		public CrossReference getOldFieldFieldCrossReference_1_0_0() { return cOldFieldFieldCrossReference_1_0_0; }
		
		//ID
		public RuleCall getOldFieldFieldIDTerminalRuleCall_1_0_0_1() { return cOldFieldFieldIDTerminalRuleCall_1_0_0_1; }
		
		//('as' alias=ID)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'as'
		public Keyword getAsKeyword_1_1_0() { return cAsKeyword_1_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1_1() { return cAliasAssignment_1_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_1_0() { return cAliasIDTerminalRuleCall_1_1_1_0; }
		
		//(projection=NestedProjection)?
		public Assignment getProjectionAssignment_1_2() { return cProjectionAssignment_1_2; }
		
		//NestedProjection
		public RuleCall getProjectionNestedProjectionParserRuleCall_1_2_0() { return cProjectionNestedProjectionParserRuleCall_1_2_0; }
	}
	public class TopLevelProjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.TopLevelProjection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMessageKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cAlternatives_2_0.eContents().get(0);
		private final Keyword cFromKeyword_2_0_1 = (Keyword)cAlternatives_2_0.eContents().get(1);
		private final Assignment cEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_2_1_0 = (CrossReference)cEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cEntityEntityPossiblyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsProjectionFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TopLevelProjection returns Projection:
		//  ('type' | 'message') name=ID ((':' | 'from') entity=[domain::Entity|PossiblyQualifiedName])?
		//  '{'
		//  (fields+=ProjectionField)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//('type' | 'message') name=ID ((':' | 'from') entity=[domain::Entity|PossiblyQualifiedName])?
		//'{'
		//(fields+=ProjectionField)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//('type' | 'message')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'type'
		public Keyword getTypeKeyword_0_0() { return cTypeKeyword_0_0; }
		
		//'message'
		public Keyword getMessageKeyword_0_1() { return cMessageKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//((':' | 'from') entity=[domain::Entity|PossiblyQualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//(':' | 'from')
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }
		
		//'from'
		public Keyword getFromKeyword_2_0_1() { return cFromKeyword_2_0_1; }
		
		//entity=[domain::Entity|PossiblyQualifiedName]
		public Assignment getEntityAssignment_2_1() { return cEntityAssignment_2_1; }
		
		//[domain::Entity|PossiblyQualifiedName]
		public CrossReference getEntityEntityCrossReference_2_1_0() { return cEntityEntityCrossReference_2_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getEntityEntityPossiblyQualifiedNameParserRuleCall_2_1_0_1() { return cEntityEntityPossiblyQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(fields+=ProjectionField)*
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//ProjectionField
		public RuleCall getFieldsProjectionFieldParserRuleCall_4_0() { return cFieldsProjectionFieldParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class NestedProjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.NestedProjection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProjectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsProjectionFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NestedProjection returns Projection:
		//  {Projection}
		//  '{'
		//  (fields+=ProjectionField)*
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Projection}
		//'{'
		//(fields+=ProjectionField)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Projection}
		public Action getProjectionAction_0() { return cProjectionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(fields+=ProjectionField)*
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//ProjectionField
		public RuleCall getFieldsProjectionFieldParserRuleCall_2_0() { return cFieldsProjectionFieldParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RestServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.RestService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlPathParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cForKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cRefTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefTypeProjectionCrossReference_3_0 = (CrossReference)cRefTypeAssignment_3.eContents().get(0);
		private final RuleCall cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cRefTypeProjectionCrossReference_3_0.eContents().get(1);
		private final Keyword cOffersKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAccessGroupsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAccessGroupsAccessGroupParserRuleCall_5_0 = (RuleCall)cAccessGroupsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cInterchangesKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSupportedDocumentTypesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cSupportedDocumentTypesRestDocumentTypeEnumRuleCall_6_2_0 = (RuleCall)cSupportedDocumentTypesAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_7_0 = (Alternatives)cGroup_7.eContents().get(0);
		private final Keyword cCommercialAtKeyword_7_0_0 = (Keyword)cAlternatives_7_0.eContents().get(0);
		private final Keyword cAtKeyword_7_0_1 = (Keyword)cAlternatives_7_0.eContents().get(1);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Assignment cServerAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final RuleCall cServerIDTerminalRuleCall_7_1_0_0 = (RuleCall)cServerAssignment_7_1_0.eContents().get(0);
		private final Keyword cDefaultKeyword_7_1_1 = (Keyword)cAlternatives_7_1.eContents().get(1);
		
		//RestService returns access::RestService:
		//  'resource' url=Path
		//  (':' | 'for') refType=[Projection|PossiblyQualifiedName]
		//  'offers'? accessGroups+=AccessGroup+
		//  (('<=>' | 'interchanges') '(' supportedDocumentTypes+=RestDocumentType+ ')')?
		//  (('@' | 'at') (server=ID | 'default') )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'resource' url=Path
		//(':' | 'for') refType=[Projection|PossiblyQualifiedName]
		//'offers'? accessGroups+=AccessGroup+
		//(('<=>' | 'interchanges') '(' supportedDocumentTypes+=RestDocumentType+ ')')?
		//(('@' | 'at') (server=ID | 'default') )?
		public Group getGroup() { return cGroup; }
		
		//'resource'
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }
		
		//url=Path
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//Path
		public RuleCall getUrlPathParserRuleCall_1_0() { return cUrlPathParserRuleCall_1_0; }
		
		//(':' | 'for')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//'for'
		public Keyword getForKeyword_2_1() { return cForKeyword_2_1; }
		
		//refType=[Projection|PossiblyQualifiedName]
		public Assignment getRefTypeAssignment_3() { return cRefTypeAssignment_3; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getRefTypeProjectionCrossReference_3_0() { return cRefTypeProjectionCrossReference_3_0; }
		
		//PossiblyQualifiedName
		public RuleCall getRefTypeProjectionPossiblyQualifiedNameParserRuleCall_3_0_1() { return cRefTypeProjectionPossiblyQualifiedNameParserRuleCall_3_0_1; }
		
		//'offers'?
		public Keyword getOffersKeyword_4() { return cOffersKeyword_4; }
		
		//accessGroups+=AccessGroup+
		public Assignment getAccessGroupsAssignment_5() { return cAccessGroupsAssignment_5; }
		
		//AccessGroup
		public RuleCall getAccessGroupsAccessGroupParserRuleCall_5_0() { return cAccessGroupsAccessGroupParserRuleCall_5_0; }
		
		//(('<=>' | 'interchanges') '(' supportedDocumentTypes+=RestDocumentType+ ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//('<=>' | 'interchanges')
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }
		
		//'<=>'
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_6_0_0() { return cLessThanSignEqualsSignGreaterThanSignKeyword_6_0_0; }
		
		//'interchanges'
		public Keyword getInterchangesKeyword_6_0_1() { return cInterchangesKeyword_6_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//supportedDocumentTypes+=RestDocumentType+
		public Assignment getSupportedDocumentTypesAssignment_6_2() { return cSupportedDocumentTypesAssignment_6_2; }
		
		//RestDocumentType
		public RuleCall getSupportedDocumentTypesRestDocumentTypeEnumRuleCall_6_2_0() { return cSupportedDocumentTypesRestDocumentTypeEnumRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//(('@' | 'at') (server=ID | 'default') )?
		public Group getGroup_7() { return cGroup_7; }
		
		//('@' | 'at')
		public Alternatives getAlternatives_7_0() { return cAlternatives_7_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_7_0_0() { return cCommercialAtKeyword_7_0_0; }
		
		//'at'
		public Keyword getAtKeyword_7_0_1() { return cAtKeyword_7_0_1; }
		
		//(server=ID | 'default')
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }
		
		//server=ID
		public Assignment getServerAssignment_7_1_0() { return cServerAssignment_7_1_0; }
		
		//ID
		public RuleCall getServerIDTerminalRuleCall_7_1_0_0() { return cServerIDTerminalRuleCall_7_1_0_0; }
		
		//'default'
		public Keyword getDefaultKeyword_7_1_1() { return cDefaultKeyword_7_1_1; }
	}
	public class AccessGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.AccessGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessRequirementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessRequirementAccessRequirementEnumRuleCall_0_0 = (RuleCall)cAccessRequirementAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAccessMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAccessMethodsRestAccessEnumRuleCall_2_0 = (RuleCall)cAccessMethodsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AccessGroup returns access::AccessGroup:
		//  (accessRequirement=AccessRequirement)?  '(' accessMethods+= RestAccess+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(accessRequirement=AccessRequirement)?  '(' accessMethods+= RestAccess+ ')'
		public Group getGroup() { return cGroup; }
		
		//(accessRequirement=AccessRequirement)?
		public Assignment getAccessRequirementAssignment_0() { return cAccessRequirementAssignment_0; }
		
		//AccessRequirement
		public RuleCall getAccessRequirementAccessRequirementEnumRuleCall_0_0() { return cAccessRequirementAccessRequirementEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//accessMethods+= RestAccess+
		public Assignment getAccessMethodsAssignment_2() { return cAccessMethodsAssignment_2; }
		
		//RestAccess
		public RuleCall getAccessMethodsRestAccessEnumRuleCall_2_0() { return cAccessMethodsRestAccessEnumRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlPathParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cOverKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cBackedByAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBackedByRestServiceCrossReference_3_0 = (CrossReference)cBackedByAssignment_3.eContents().get(0);
		private final RuleCall cBackedByRestServicePathParserRuleCall_3_0_1 = (RuleCall)cBackedByRestServiceCrossReference_3_0.eContents().get(1);
		
		//View returns access::View:
		//  'view' url=Path
		//  ('over' | ':') backedBy=[access::RestService|Path];
		@Override public ParserRule getRule() { return rule; }
		
		//'view' url=Path
		//('over' | ':') backedBy=[access::RestService|Path]
		public Group getGroup() { return cGroup; }
		
		//'view'
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }
		
		//url=Path
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//Path
		public RuleCall getUrlPathParserRuleCall_1_0() { return cUrlPathParserRuleCall_1_0; }
		
		//('over' | ':')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'over'
		public Keyword getOverKeyword_2_0() { return cOverKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//backedBy=[access::RestService|Path]
		public Assignment getBackedByAssignment_3() { return cBackedByAssignment_3; }
		
		//[access::RestService|Path]
		public CrossReference getBackedByRestServiceCrossReference_3_0() { return cBackedByRestServiceCrossReference_3_0; }
		
		//Path
		public RuleCall getBackedByRestServicePathParserRuleCall_3_0_1() { return cBackedByRestServicePathParserRuleCall_3_0_1; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodsServiceMethodParserRuleCall_3_0 = (RuleCall)cMethodsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Service returns access::Service:
		//  'service' name=ID '{'
		//  methods+=ServiceMethod+
		//  '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID '{'
		//methods+=ServiceMethod+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//methods+=ServiceMethod+
		public Assignment getMethodsAssignment_3() { return cMethodsAssignment_3; }
		
		//ServiceMethod
		public RuleCall getMethodsServiceMethodParserRuleCall_3_0() { return cMethodsServiceMethodParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ServiceMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.ServiceMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAcceptsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cInputParamsProjectionCrossReference_3_0_0 = (CrossReference)cInputParamsAssignment_3_0.eContents().get(0);
		private final RuleCall cInputParamsProjectionPossiblyQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cInputParamsProjectionCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cInputParamsProjectionCrossReference_3_1_1_0 = (CrossReference)cInputParamsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cInputParamsProjectionPossiblyQualifiedNameParserRuleCall_3_1_1_0_1 = (RuleCall)cInputParamsProjectionCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_0_0 = (Keyword)cAlternatives_5_0.eContents().get(0);
		private final Keyword cReturnsKeyword_5_0_1 = (Keyword)cAlternatives_5_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cOutputParamsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final CrossReference cOutputParamsProjectionCrossReference_5_1_0_0 = (CrossReference)cOutputParamsAssignment_5_1_0.eContents().get(0);
		private final RuleCall cOutputParamsProjectionPossiblyQualifiedNameParserRuleCall_5_1_0_0_1 = (RuleCall)cOutputParamsProjectionCrossReference_5_1_0_0.eContents().get(1);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cOutputParamsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final CrossReference cOutputParamsProjectionCrossReference_5_1_1_1_0 = (CrossReference)cOutputParamsAssignment_5_1_1_1.eContents().get(0);
		private final RuleCall cOutputParamsProjectionPossiblyQualifiedNameParserRuleCall_5_1_1_1_0_1 = (RuleCall)cOutputParamsProjectionCrossReference_5_1_1_1_0.eContents().get(1);
		
		//ServiceMethod returns access::ServiceMethod:
		//  name=ID 'accepts'? '('
		//  (inputParams+=[Projection|PossiblyQualifiedName] (',' inputParams+=[Projection|PossiblyQualifiedName])*)?
		//  ')'
		//  ((':' | 'returns') (outputParams+=[Projection|PossiblyQualifiedName] (',' outputParams+=[Projection|PossiblyQualifiedName])*))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'accepts'? '('
		//(inputParams+=[Projection|PossiblyQualifiedName] (',' inputParams+=[Projection|PossiblyQualifiedName])*)?
		//')'
		//((':' | 'returns') (outputParams+=[Projection|PossiblyQualifiedName] (',' outputParams+=[Projection|PossiblyQualifiedName])*))?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'accepts'?
		public Keyword getAcceptsKeyword_1() { return cAcceptsKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(inputParams+=[Projection|PossiblyQualifiedName] (',' inputParams+=[Projection|PossiblyQualifiedName])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//inputParams+=[Projection|PossiblyQualifiedName]
		public Assignment getInputParamsAssignment_3_0() { return cInputParamsAssignment_3_0; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getInputParamsProjectionCrossReference_3_0_0() { return cInputParamsProjectionCrossReference_3_0_0; }
		
		//PossiblyQualifiedName
		public RuleCall getInputParamsProjectionPossiblyQualifiedNameParserRuleCall_3_0_0_1() { return cInputParamsProjectionPossiblyQualifiedNameParserRuleCall_3_0_0_1; }
		
		//(',' inputParams+=[Projection|PossiblyQualifiedName])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//inputParams+=[Projection|PossiblyQualifiedName]
		public Assignment getInputParamsAssignment_3_1_1() { return cInputParamsAssignment_3_1_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getInputParamsProjectionCrossReference_3_1_1_0() { return cInputParamsProjectionCrossReference_3_1_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getInputParamsProjectionPossiblyQualifiedNameParserRuleCall_3_1_1_0_1() { return cInputParamsProjectionPossiblyQualifiedNameParserRuleCall_3_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//((':' | 'returns') (outputParams+=[Projection|PossiblyQualifiedName] (',' outputParams+=[Projection|PossiblyQualifiedName])*))?
		public Group getGroup_5() { return cGroup_5; }
		
		//(':' | 'returns')
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_0_0() { return cColonKeyword_5_0_0; }
		
		//'returns'
		public Keyword getReturnsKeyword_5_0_1() { return cReturnsKeyword_5_0_1; }
		
		//(outputParams+=[Projection|PossiblyQualifiedName] (',' outputParams+=[Projection|PossiblyQualifiedName])*)
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//outputParams+=[Projection|PossiblyQualifiedName]
		public Assignment getOutputParamsAssignment_5_1_0() { return cOutputParamsAssignment_5_1_0; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getOutputParamsProjectionCrossReference_5_1_0_0() { return cOutputParamsProjectionCrossReference_5_1_0_0; }
		
		//PossiblyQualifiedName
		public RuleCall getOutputParamsProjectionPossiblyQualifiedNameParserRuleCall_5_1_0_0_1() { return cOutputParamsProjectionPossiblyQualifiedNameParserRuleCall_5_1_0_0_1; }
		
		//(',' outputParams+=[Projection|PossiblyQualifiedName])*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }
		
		//outputParams+=[Projection|PossiblyQualifiedName]
		public Assignment getOutputParamsAssignment_5_1_1_1() { return cOutputParamsAssignment_5_1_1_1; }
		
		//[Projection|PossiblyQualifiedName]
		public CrossReference getOutputParamsProjectionCrossReference_5_1_1_1_0() { return cOutputParamsProjectionCrossReference_5_1_1_1_0; }
		
		//PossiblyQualifiedName
		public RuleCall getOutputParamsProjectionPossiblyQualifiedNameParserRuleCall_5_1_1_1_0_1() { return cOutputParamsProjectionPossiblyQualifiedNameParserRuleCall_5_1_1_1_0_1; }
	}
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPossiblyQualifiedNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Path:
		//  ('/' PossiblyQualifiedName)+;
		@Override public ParserRule getRule() { return rule; }
		
		//('/' PossiblyQualifiedName)+
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//PossiblyQualifiedName
		public RuleCall getPossiblyQualifiedNameParserRuleCall_1() { return cPossiblyQualifiedNameParserRuleCall_1; }
	}
	
	public class StateMachineTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.StateMachineType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFiniteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFiniteFiniteKeyword_0_0 = (Keyword)cFiniteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInfiniteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInfiniteInfiniteKeyword_1_0 = (Keyword)cInfiniteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStatelessEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStatelessStatelessKeyword_2_0 = (Keyword)cStatelessEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StateMachineType:
		//  finite | infinite | stateless;
		public EnumRule getRule() { return rule; }
		
		//finite | infinite | stateless
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//finite
		public EnumLiteralDeclaration getFiniteEnumLiteralDeclaration_0() { return cFiniteEnumLiteralDeclaration_0; }
		
		public Keyword getFiniteFiniteKeyword_0_0() { return cFiniteFiniteKeyword_0_0; }
		
		//infinite
		public EnumLiteralDeclaration getInfiniteEnumLiteralDeclaration_1() { return cInfiniteEnumLiteralDeclaration_1; }
		
		public Keyword getInfiniteInfiniteKeyword_1_0() { return cInfiniteInfiniteKeyword_1_0; }
		
		//stateless
		public EnumLiteralDeclaration getStatelessEnumLiteralDeclaration_2() { return cStatelessEnumLiteralDeclaration_2; }
		
		public Keyword getStatelessStatelessKeyword_2_0() { return cStatelessStatelessKeyword_2_0; }
	}
	public class AccessRequirementElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.AccessRequirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANONYMOUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANONYMOUSAnonymousKeyword_0_0 = (Keyword)cANONYMOUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAUTHENTICATEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAUTHENTICATEDAuthenticatedKeyword_1_0 = (Keyword)cAUTHENTICATEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEFAULTDefaultKeyword_2_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAUTHORIZEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAUTHORIZEDAuthorizedKeyword_3_0 = (Keyword)cAUTHORIZEDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AccessRequirement returns access::AccessRequirement:
		//  ANONYMOUS='anonymous' | AUTHENTICATED='authenticated' | DEFAULT='default' | AUTHORIZED='authorized';
		public EnumRule getRule() { return rule; }
		
		//ANONYMOUS='anonymous' | AUTHENTICATED='authenticated' | DEFAULT='default' | AUTHORIZED='authorized'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANONYMOUS='anonymous'
		public EnumLiteralDeclaration getANONYMOUSEnumLiteralDeclaration_0() { return cANONYMOUSEnumLiteralDeclaration_0; }
		
		//'anonymous'
		public Keyword getANONYMOUSAnonymousKeyword_0_0() { return cANONYMOUSAnonymousKeyword_0_0; }
		
		//AUTHENTICATED='authenticated'
		public EnumLiteralDeclaration getAUTHENTICATEDEnumLiteralDeclaration_1() { return cAUTHENTICATEDEnumLiteralDeclaration_1; }
		
		//'authenticated'
		public Keyword getAUTHENTICATEDAuthenticatedKeyword_1_0() { return cAUTHENTICATEDAuthenticatedKeyword_1_0; }
		
		//DEFAULT='default'
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_2() { return cDEFAULTEnumLiteralDeclaration_2; }
		
		//'default'
		public Keyword getDEFAULTDefaultKeyword_2_0() { return cDEFAULTDefaultKeyword_2_0; }
		
		//AUTHORIZED='authorized'
		public EnumLiteralDeclaration getAUTHORIZEDEnumLiteralDeclaration_3() { return cAUTHORIZEDEnumLiteralDeclaration_3; }
		
		//'authorized'
		public Keyword getAUTHORIZEDAuthorizedKeyword_3_0() { return cAUTHORIZEDAuthorizedKeyword_3_0; }
	}
	public class RestDocumentTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.RestDocumentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJsonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJsonJsonKeyword_0_0 = (Keyword)cJsonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cXmlEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cXmlXmlKeyword_1_0 = (Keyword)cXmlEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cYamlEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cYamlYamlKeyword_2_0 = (Keyword)cYamlEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFormEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFormFormKeyword_3_0 = (Keyword)cFormEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cUploadEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cUploadMultiPartKeyword_4_0 = (Keyword)cUploadEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cXhtmlEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cXhtmlTextKeyword_5_0 = (Keyword)cXhtmlEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RestDocumentType returns access::RestDocumentType:
		//  json="json" | xml="xml" | yaml="yaml" | form="form" | upload="multi-part" | xhtml="text";
		public EnumRule getRule() { return rule; }
		
		//json="json" | xml="xml" | yaml="yaml" | form="form" | upload="multi-part" | xhtml="text"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//json="json"
		public EnumLiteralDeclaration getJsonEnumLiteralDeclaration_0() { return cJsonEnumLiteralDeclaration_0; }
		
		//"json"
		public Keyword getJsonJsonKeyword_0_0() { return cJsonJsonKeyword_0_0; }
		
		//xml="xml"
		public EnumLiteralDeclaration getXmlEnumLiteralDeclaration_1() { return cXmlEnumLiteralDeclaration_1; }
		
		//"xml"
		public Keyword getXmlXmlKeyword_1_0() { return cXmlXmlKeyword_1_0; }
		
		//yaml="yaml"
		public EnumLiteralDeclaration getYamlEnumLiteralDeclaration_2() { return cYamlEnumLiteralDeclaration_2; }
		
		//"yaml"
		public Keyword getYamlYamlKeyword_2_0() { return cYamlYamlKeyword_2_0; }
		
		//form="form"
		public EnumLiteralDeclaration getFormEnumLiteralDeclaration_3() { return cFormEnumLiteralDeclaration_3; }
		
		//"form"
		public Keyword getFormFormKeyword_3_0() { return cFormFormKeyword_3_0; }
		
		//upload="multi-part"
		public EnumLiteralDeclaration getUploadEnumLiteralDeclaration_4() { return cUploadEnumLiteralDeclaration_4; }
		
		//"multi-part"
		public Keyword getUploadMultiPartKeyword_4_0() { return cUploadMultiPartKeyword_4_0; }
		
		//xhtml="text"
		public EnumLiteralDeclaration getXhtmlEnumLiteralDeclaration_5() { return cXhtmlEnumLiteralDeclaration_5; }
		
		//"text"
		public Keyword getXhtmlTextKeyword_5_0() { return cXhtmlTextKeyword_5_0; }
	}
	public class RestAccessElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.yaktor.Conversation.RestAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPostEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPostCreateKeyword_0_0 = (Keyword)cPostEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPostEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPostPostKeyword_1_0 = (Keyword)cPostEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGetEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGetReadKeyword_2_0 = (Keyword)cGetEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPutEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPutUpdateKeyword_3_0 = (Keyword)cPutEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDeleteDeleteKeyword_4_0 = (Keyword)cDeleteEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFindEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFindFindKeyword_5_0 = (Keyword)cFindEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum RestAccess returns access::RestAccess:
		//  Post='create' | Post='post' | Get='read' | Put='update' | Delete='delete' | Find='find';
		public EnumRule getRule() { return rule; }
		
		//Post='create' | Post='post' | Get='read' | Put='update' | Delete='delete' | Find='find'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Post='create'
		public EnumLiteralDeclaration getPostEnumLiteralDeclaration_0() { return cPostEnumLiteralDeclaration_0; }
		
		//'create'
		public Keyword getPostCreateKeyword_0_0() { return cPostCreateKeyword_0_0; }
		
		//Post='post'
		public EnumLiteralDeclaration getPostEnumLiteralDeclaration_1() { return cPostEnumLiteralDeclaration_1; }
		
		//'post'
		public Keyword getPostPostKeyword_1_0() { return cPostPostKeyword_1_0; }
		
		//Get='read'
		public EnumLiteralDeclaration getGetEnumLiteralDeclaration_2() { return cGetEnumLiteralDeclaration_2; }
		
		//'read'
		public Keyword getGetReadKeyword_2_0() { return cGetReadKeyword_2_0; }
		
		//Put='update'
		public EnumLiteralDeclaration getPutEnumLiteralDeclaration_3() { return cPutEnumLiteralDeclaration_3; }
		
		//'update'
		public Keyword getPutUpdateKeyword_3_0() { return cPutUpdateKeyword_3_0; }
		
		//Delete='delete'
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_4() { return cDeleteEnumLiteralDeclaration_4; }
		
		//'delete'
		public Keyword getDeleteDeleteKeyword_4_0() { return cDeleteDeleteKeyword_4_0; }
		
		//Find='find'
		public EnumLiteralDeclaration getFindEnumLiteralDeclaration_5() { return cFindEnumLiteralDeclaration_5; }
		
		//'find'
		public Keyword getFindFindKeyword_5_0() { return cFindFindKeyword_5_0; }
	}
	
	private final ConversationElements pConversation;
	private final StateMachineTypeElements eStateMachineType;
	private final AgentImportElements pAgentImport;
	private final TypeImportElements pTypeImport;
	private final QualifiedNameElements pQualifiedName;
	private final PossiblyQualifiedNameElements pPossiblyQualifiedName;
	private final AgentElements pAgent;
	private final StateMachineElements pStateMachine;
	private final InitialPubliclySubscribableElements pInitialPubliclySubscribable;
	private final SubsequentPubliclySubscribableElements pSubsequentPubliclySubscribable;
	private final InitialPublicPubSubElements pInitialPublicPubSub;
	private final SubsequentPublicPubSubElements pSubsequentPublicPubSub;
	private final StateLikeElements pStateLike;
	private final JunctionElements pJunction;
	private final JoinElements pJoin;
	private final DecisionElements pDecision;
	private final StateElements pState;
	private final PrivatePubSubElements pPrivatePubSub;
	private final TransitionElements pTransition;
	private final InternalTransitionElements pInternalTransition;
	private final ProjectionFieldElements pProjectionField;
	private final ProjectionContainmentFieldElements pProjectionContainmentField;
	private final TypeContainmentFieldElements pTypeContainmentField;
	private final NewFieldElements pNewField;
	private final MappedFieldElements pMappedField;
	private final TopLevelProjectionElements pTopLevelProjection;
	private final NestedProjectionElements pNestedProjection;
	private final AccessRequirementElements eAccessRequirement;
	private final RestServiceElements pRestService;
	private final AccessGroupElements pAccessGroup;
	private final ViewElements pView;
	private final ServiceElements pService;
	private final ServiceMethodElements pServiceMethod;
	private final RestDocumentTypeElements eRestDocumentType;
	private final RestAccessElements eRestAccess;
	private final PathElements pPath;
	
	private final Grammar grammar;
	
	private final DomainGrammarAccess gaDomain;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConversationGrammarAccess(GrammarProvider grammarProvider,
			DomainGrammarAccess gaDomain,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDomain = gaDomain;
		this.gaTerminals = gaTerminals;
		this.pConversation = new ConversationElements();
		this.eStateMachineType = new StateMachineTypeElements();
		this.pAgentImport = new AgentImportElements();
		this.pTypeImport = new TypeImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pPossiblyQualifiedName = new PossiblyQualifiedNameElements();
		this.pAgent = new AgentElements();
		this.pStateMachine = new StateMachineElements();
		this.pInitialPubliclySubscribable = new InitialPubliclySubscribableElements();
		this.pSubsequentPubliclySubscribable = new SubsequentPubliclySubscribableElements();
		this.pInitialPublicPubSub = new InitialPublicPubSubElements();
		this.pSubsequentPublicPubSub = new SubsequentPublicPubSubElements();
		this.pStateLike = new StateLikeElements();
		this.pJunction = new JunctionElements();
		this.pJoin = new JoinElements();
		this.pDecision = new DecisionElements();
		this.pState = new StateElements();
		this.pPrivatePubSub = new PrivatePubSubElements();
		this.pTransition = new TransitionElements();
		this.pInternalTransition = new InternalTransitionElements();
		this.pProjectionField = new ProjectionFieldElements();
		this.pProjectionContainmentField = new ProjectionContainmentFieldElements();
		this.pTypeContainmentField = new TypeContainmentFieldElements();
		this.pNewField = new NewFieldElements();
		this.pMappedField = new MappedFieldElements();
		this.pTopLevelProjection = new TopLevelProjectionElements();
		this.pNestedProjection = new NestedProjectionElements();
		this.eAccessRequirement = new AccessRequirementElements();
		this.pRestService = new RestServiceElements();
		this.pAccessGroup = new AccessGroupElements();
		this.pView = new ViewElements();
		this.pService = new ServiceElements();
		this.pServiceMethod = new ServiceMethodElements();
		this.eRestDocumentType = new RestDocumentTypeElements();
		this.eRestAccess = new RestAccessElements();
		this.pPath = new PathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.yaktor.Conversation".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DomainGrammarAccess getDomainGrammarAccess() {
		return gaDomain;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Conversation returns Conversation:
	//  'conversation' name=ID '{'
	//  ('imports' '{'
	//  (importedAgents+=AgentImport |
	//  importedTypes+=TypeImport)*
	//  '}')?
	//  (agents+=Agent |
	//  views+=View |
	//  restServices+=RestService |
	//  definedTypes+=TopLevelProjection |
	//  services+=Service)*
	//  '}';
	public ConversationElements getConversationAccess() {
		return pConversation;
	}
	
	public ParserRule getConversationRule() {
		return getConversationAccess().getRule();
	}
	
	//enum StateMachineType:
	//  finite | infinite | stateless;
	public StateMachineTypeElements getStateMachineTypeAccess() {
		return eStateMachineType;
	}
	
	public EnumRule getStateMachineTypeRule() {
		return getStateMachineTypeAccess().getRule();
	}
	
	//AgentImport:
	//  'agent' agent=[Agent|QualifiedName] ('as' alias=ID)?;
	public AgentImportElements getAgentImportAccess() {
		return pAgentImport;
	}
	
	public ParserRule getAgentImportRule() {
		return getAgentImportAccess().getRule();
	}
	
	//TypeImport:
	//  ('type' | 'message') type=[Projection|QualifiedName] ('as' alias=ID)?;
	public TypeImportElements getTypeImportAccess() {
		return pTypeImport;
	}
	
	public ParserRule getTypeImportRule() {
		return getTypeImportAccess().getRule();
	}
	
	//QualifiedName:
	//  ID ('.' ID)+;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//PossiblyQualifiedName:
	//  ID ('.' ID)*;
	public PossiblyQualifiedNameElements getPossiblyQualifiedNameAccess() {
		return pPossiblyQualifiedName;
	}
	
	public ParserRule getPossiblyQualifiedNameRule() {
		return getPossiblyQualifiedNameAccess().getRule();
	}
	
	//Agent returns Agent:
	//  (stateMachineType=StateMachineType)? (accessRequirement=AccessRequirement)? 'agent' name=ID ((':' | 'concerning' | 'concerns')
	//  projection=[Projection|PossiblyQualifiedName]) '{'
	//  (sendables+=InitialPubliclySubscribable (sendables+=SubsequentPubliclySubscribable)*)?
	//  (sendables+=InitialPublicPubSub (sendables+=SubsequentPublicPubSub)*)?
	//  stateMachine=StateMachine
	//  '}';
	public AgentElements getAgentAccess() {
		return pAgent;
	}
	
	public ParserRule getAgentRule() {
		return getAgentAccess().getRule();
	}
	
	//StateMachine returns StateMachine:
	//  {StateMachine}
	//  ('initially' | '~') ( ( ('->' | 'becomes') initialState=[State])
	//  | ( initialTransition=Transition))
	//  '{'
	//  (states+=StateLike)*
	//  '}';
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//InitialPubliclySubscribable returns PubliclySubscribable:
	//  (('>' | 'sends') {PubliclySubscribable})
	//  name=ID
	//  (':' refType=[Projection|PossiblyQualifiedName])?;
	public InitialPubliclySubscribableElements getInitialPubliclySubscribableAccess() {
		return pInitialPubliclySubscribable;
	}
	
	public ParserRule getInitialPubliclySubscribableRule() {
		return getInitialPubliclySubscribableAccess().getRule();
	}
	
	//SubsequentPubliclySubscribable returns PubliclySubscribable:
	//  (('>' | 'sends')? {PubliclySubscribable})
	//  name=ID
	//  (':' refType=[Projection|PossiblyQualifiedName])?;
	public SubsequentPubliclySubscribableElements getSubsequentPubliclySubscribableAccess() {
		return pSubsequentPubliclySubscribable;
	}
	
	public ParserRule getSubsequentPubliclySubscribableRule() {
		return getSubsequentPubliclySubscribableAccess().getRule();
	}
	
	//InitialPublicPubSub returns PublicPubSub:
	//  ('pubsub' {PublicPubSub})
	//  name=ID
	//  (':' refType=[Projection|PossiblyQualifiedName])?;
	public InitialPublicPubSubElements getInitialPublicPubSubAccess() {
		return pInitialPublicPubSub;
	}
	
	public ParserRule getInitialPublicPubSubRule() {
		return getInitialPublicPubSubAccess().getRule();
	}
	
	//SubsequentPublicPubSub returns PublicPubSub:
	//  ('pubsub'? {PublicPubSub})
	//  name=ID
	//  (':' refType=[Projection|PossiblyQualifiedName])?;
	public SubsequentPublicPubSubElements getSubsequentPublicPubSubAccess() {
		return pSubsequentPublicPubSub;
	}
	
	public ParserRule getSubsequentPublicPubSubRule() {
		return getSubsequentPublicPubSubAccess().getRule();
	}
	
	//StateLike returns State:
	//  State | Decision | Join;
	public StateLikeElements getStateLikeAccess() {
		return pStateLike;
	}
	
	public ParserRule getStateLikeRule() {
		return getStateLikeAccess().getRule();
	}
	
	//Junction returns Junction:
	//  message=[SubscribableByOthers|QualifiedName]
	//  (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?
	//;
	public JunctionElements getJunctionAccess() {
		return pJunction;
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}
	
	//Join returns Join:
	//  'while' 'in'?  (requiresExecution?="custom")? name=ID ('waits' 'for' | 'awaits') joins+=Junction ((',' | 'and')? joins+=Junction)*
	//  '{'
	//  (transitions+=Transition)*
	//  '}';
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//Decision returns Decision:
	//  'decision' name=ID
	//  '{'
	//  (transitions+=InternalTransition)*
	//  '}';
	public DecisionElements getDecisionAccess() {
		return pDecision;
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}
	
	//State returns State:
	//  ('while' 'in'?)? (requiresExecution?="custom")? name=ID
	//  '{'
	//  (transitions+=Transition)*
	//  '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//PrivatePubSub returns PrivatePubSub:
	//  name=ID
	//  (':' refType=[Projection|PossiblyQualifiedName])?;
	public PrivatePubSubElements getPrivatePubSubAccess() {
		return pPrivatePubSub;
	}
	
	public ParserRule getPrivatePubSubRule() {
		return getPrivatePubSubAccess().getRule();
	}
	
	//Transition returns Transition:
	//  {Transition}
	//  'receives'?
	//  (requiresExecution?='custom')?
	//  (
	//  causedBy=PrivatePubSub |
	//  (exCausedBy=[SubscribableByOthers|QualifiedName] (('[' fieldMapping=[ProjectionField|PossiblyQualifiedName] ']') | ('if' fieldMapping=[ProjectionField|PossiblyQualifiedName] 'matches'))?)
	//  )
	//  ('->' | 'becomes') toState=[State|ID]
	//  (('>' | 'sends') (triggers=[PublishableByMe|ID]))?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//InternalTransition returns Transition:
	//  {Transition}
	//  (requiresExecution?='custom')?
	//  (causedBy=PrivatePubSub | exCausedBy=[SubscribableByOthers|QualifiedName])
	//  ('->' | 'becomes') toState=[State|ID]
	//  (('>' | 'sends') (triggers=[PublishableByMe|ID]))?;
	public InternalTransitionElements getInternalTransitionAccess() {
		return pInternalTransition;
	}
	
	public ParserRule getInternalTransitionRule() {
		return getInternalTransitionAccess().getRule();
	}
	
	//ProjectionField:
	//  MappedField | NewField | ProjectionContainmentField | TypeContainmentField;
	public ProjectionFieldElements getProjectionFieldAccess() {
		return pProjectionField;
	}
	
	public ParserRule getProjectionFieldRule() {
		return getProjectionFieldAccess().getRule();
	}
	
	//ProjectionContainmentField:
	//  {ProjectionContainmentField}
	//  'val' projection=[Projection|PossiblyQualifiedName]
	//  alias=ID
	//  (cardinality=Cardinality)?;
	public ProjectionContainmentFieldElements getProjectionContainmentFieldAccess() {
		return pProjectionContainmentField;
	}
	
	public ParserRule getProjectionContainmentFieldRule() {
		return getProjectionContainmentFieldAccess().getRule();
	}
	
	//TypeContainmentField:
	//  {TypeContainmentField}
	//  => 'val' newField=TypeField
	//  projection=NestedProjection;
	public TypeContainmentFieldElements getTypeContainmentFieldAccess() {
		return pTypeContainmentField;
	}
	
	public ParserRule getTypeContainmentFieldRule() {
		return getTypeContainmentFieldAccess().getRule();
	}
	
	//NewField:
	//  {NewField}
	//  (newField=SimpleField | newField = AnyField);
	public NewFieldElements getNewFieldAccess() {
		return pNewField;
	}
	
	public ParserRule getNewFieldRule() {
		return getNewFieldAccess().getRule();
	}
	
	//MappedField:
	//  {MappedField}
	//  (oldField=[domain::Field|ID] ('as' alias=ID)? (projection=NestedProjection)?);
	public MappedFieldElements getMappedFieldAccess() {
		return pMappedField;
	}
	
	public ParserRule getMappedFieldRule() {
		return getMappedFieldAccess().getRule();
	}
	
	//TopLevelProjection returns Projection:
	//  ('type' | 'message') name=ID ((':' | 'from') entity=[domain::Entity|PossiblyQualifiedName])?
	//  '{'
	//  (fields+=ProjectionField)*
	//  '}';
	public TopLevelProjectionElements getTopLevelProjectionAccess() {
		return pTopLevelProjection;
	}
	
	public ParserRule getTopLevelProjectionRule() {
		return getTopLevelProjectionAccess().getRule();
	}
	
	//NestedProjection returns Projection:
	//  {Projection}
	//  '{'
	//  (fields+=ProjectionField)*
	//  '}';
	public NestedProjectionElements getNestedProjectionAccess() {
		return pNestedProjection;
	}
	
	public ParserRule getNestedProjectionRule() {
		return getNestedProjectionAccess().getRule();
	}
	
	//enum AccessRequirement returns access::AccessRequirement:
	//  ANONYMOUS='anonymous' | AUTHENTICATED='authenticated' | DEFAULT='default' | AUTHORIZED='authorized';
	public AccessRequirementElements getAccessRequirementAccess() {
		return eAccessRequirement;
	}
	
	public EnumRule getAccessRequirementRule() {
		return getAccessRequirementAccess().getRule();
	}
	
	//RestService returns access::RestService:
	//  'resource' url=Path
	//  (':' | 'for') refType=[Projection|PossiblyQualifiedName]
	//  'offers'? accessGroups+=AccessGroup+
	//  (('<=>' | 'interchanges') '(' supportedDocumentTypes+=RestDocumentType+ ')')?
	//  (('@' | 'at') (server=ID | 'default') )?;
	public RestServiceElements getRestServiceAccess() {
		return pRestService;
	}
	
	public ParserRule getRestServiceRule() {
		return getRestServiceAccess().getRule();
	}
	
	//AccessGroup returns access::AccessGroup:
	//  (accessRequirement=AccessRequirement)?  '(' accessMethods+= RestAccess+ ')';
	public AccessGroupElements getAccessGroupAccess() {
		return pAccessGroup;
	}
	
	public ParserRule getAccessGroupRule() {
		return getAccessGroupAccess().getRule();
	}
	
	//View returns access::View:
	//  'view' url=Path
	//  ('over' | ':') backedBy=[access::RestService|Path];
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}
	
	//Service returns access::Service:
	//  'service' name=ID '{'
	//  methods+=ServiceMethod+
	//  '}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//ServiceMethod returns access::ServiceMethod:
	//  name=ID 'accepts'? '('
	//  (inputParams+=[Projection|PossiblyQualifiedName] (',' inputParams+=[Projection|PossiblyQualifiedName])*)?
	//  ')'
	//  ((':' | 'returns') (outputParams+=[Projection|PossiblyQualifiedName] (',' outputParams+=[Projection|PossiblyQualifiedName])*))?;
	public ServiceMethodElements getServiceMethodAccess() {
		return pServiceMethod;
	}
	
	public ParserRule getServiceMethodRule() {
		return getServiceMethodAccess().getRule();
	}
	
	//enum RestDocumentType returns access::RestDocumentType:
	//  json="json" | xml="xml" | yaml="yaml" | form="form" | upload="multi-part" | xhtml="text";
	public RestDocumentTypeElements getRestDocumentTypeAccess() {
		return eRestDocumentType;
	}
	
	public EnumRule getRestDocumentTypeRule() {
		return getRestDocumentTypeAccess().getRule();
	}
	
	//enum RestAccess returns access::RestAccess:
	//  Post='create' | Post='post' | Get='read' | Put='update' | Delete='delete' | Find='find';
	public RestAccessElements getRestAccessAccess() {
		return eRestAccess;
	}
	
	public EnumRule getRestAccessRule() {
		return getRestAccessAccess().getRule();
	}
	
	//Path:
	//  ('/' PossiblyQualifiedName)+;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//DomainModel:
	//  ('import' domainModelImports+=DomainModelImport)*
	//  'domain-model' name=ID '{'
	//  (genOptions=GenOptions)?
	//  types+=NamedType*
	//  '}'
	//;
	public DomainGrammarAccess.DomainModelElements getDomainModelAccess() {
		return gaDomain.getDomainModelAccess();
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//DomainModelImport :
	//  ref=[DomainModel|ID] ('as' alias=ID)?
	//;
	public DomainGrammarAccess.DomainModelImportElements getDomainModelImportAccess() {
		return gaDomain.getDomainModelImportAccess();
	}
	
	public ParserRule getDomainModelImportRule() {
		return getDomainModelImportAccess().getRule();
	}
	
	//NamedType:
	//  Association | AssociationRef | Entity | EnumType | Type
	//;
	public DomainGrammarAccess.NamedTypeElements getNamedTypeAccess() {
		return gaDomain.getNamedTypeAccess();
	}
	
	public ParserRule getNamedTypeRule() {
		return getNamedTypeAccess().getRule();
	}
	
	//Association:
	//  'association' name=ID '{'
	//  start=AssociationEnd
	//  (isUnidirectional?='-->'|'<-->')
	//  end=AssociationEnd
	//  '}'
	//;
	public DomainGrammarAccess.AssociationElements getAssociationAccess() {
		return gaDomain.getAssociationAccess();
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//AssociationRef:
	//  'association-ref' ref=[Association|PossiblyQualifiedName]
	//;
	public DomainGrammarAccess.AssociationRefElements getAssociationRefAccess() {
		return gaDomain.getAssociationRefAccess();
	}
	
	public ParserRule getAssociationRefRule() {
		return getAssociationRefAccess().getRule();
	}
	
	//AssociationEnd:
	//  references=[Entity|PossiblyQualifiedName]
	//  name=ID
	//  (cardinality=Cardinality)?
	//  isComposition?='composition'?
	//  unique?='unique'?
	//;
	public DomainGrammarAccess.AssociationEndElements getAssociationEndAccess() {
		return gaDomain.getAssociationEndAccess();
	}
	
	public ParserRule getAssociationEndRule() {
		return getAssociationEndAccess().getRule();
	}
	
	//SimpleField:
	//  IdField | ShortIdField | StringField | DateField | IntegerField | EnumField |
	//  NumericField | BooleanField | PriceField | AmountField |
	//  CountField | EntityReferenceField| GeoLocationField;
	public DomainGrammarAccess.SimpleFieldElements getSimpleFieldAccess() {
		return gaDomain.getSimpleFieldAccess();
	}
	
	public ParserRule getSimpleFieldRule() {
		return getSimpleFieldAccess().getRule();
	}
	
	//Field:
	//  SimpleField | TypeField | AnyField;
	public DomainGrammarAccess.FieldElements getFieldAccess() {
		return gaDomain.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//ConstraintTypeField:
	//  SimpleField | AssociationEnd;
	public DomainGrammarAccess.ConstraintTypeFieldElements getConstraintTypeFieldAccess() {
		return gaDomain.getConstraintTypeFieldAccess();
	}
	
	public ParserRule getConstraintTypeFieldRule() {
		return getConstraintTypeFieldAccess().getRule();
	}
	
	//UniqueConstraint:
	//  'unique-constraint' fields+=[ConstraintTypeField|PossiblyQualifiedName]+;
	public DomainGrammarAccess.UniqueConstraintElements getUniqueConstraintAccess() {
		return gaDomain.getUniqueConstraintAccess();
	}
	
	public ParserRule getUniqueConstraintRule() {
		return getUniqueConstraintAccess().getRule();
	}
	
	//IndexConstraint:
	//  'composite-index' fields+=[ConstraintTypeField|PossiblyQualifiedName]+;
	public DomainGrammarAccess.IndexConstraintElements getIndexConstraintAccess() {
		return gaDomain.getIndexConstraintAccess();
	}
	
	public ParserRule getIndexConstraintRule() {
		return getIndexConstraintAccess().getRule();
	}
	
	//Entity:
	//  isAbstract?='abstract'? 'entity' name=ID ('extends' supertype=[Entity|PossiblyQualifiedName])?  metaData?='auditable'?'{'
	//  fields+=Field*
	//  uniqueConstraints+=UniqueConstraint*
	//  indexConstraints+=IndexConstraint*
	//  ('key' '(' keys+=[Field|ID] ')')?
	//  '}'
	//;
	public DomainGrammarAccess.EntityElements getEntityAccess() {
		return gaDomain.getEntityAccess();
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Type:
	//  isAbstract?='abstract'? 'type' name=ID ('extends' supertype=[Type|PossiblyQualifiedName])?  '{'
	//  fields+=Field*
	//  uniqueConstraints+=UniqueConstraint*
	//  indexConstraints+=IndexConstraint*
	//  ('key' '(' keys+=[Field|ID] ')')?
	//  '}'
	//;
	public DomainGrammarAccess.TypeElements getTypeAccess() {
		return gaDomain.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//EnumType:
	//  'enum' name=ID '{'
	//  values+=EnumValue+
	//  '}'
	//;
	public DomainGrammarAccess.EnumTypeElements getEnumTypeAccess() {
		return gaDomain.getEnumTypeAccess();
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//EnumValue:
	//  name=ID '=' value=STRING;
	public DomainGrammarAccess.EnumValueElements getEnumValueAccess() {
		return gaDomain.getEnumValueAccess();
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//IdField:
	//    'Id' name=ID
	//  (cardinality=Cardinality)?
	//  (unique?='unique'? &
	//  indexed?='indexed'?)
	//;
	public DomainGrammarAccess.IdFieldElements getIdFieldAccess() {
		return gaDomain.getIdFieldAccess();
	}
	
	public ParserRule getIdFieldRule() {
		return getIdFieldAccess().getRule();
	}
	
	//ShortIdField:
	//    'ShortId' name=ID
	//  (cardinality=Cardinality)?
	//  ((pattern=STRING maxValue=INT?)? &
	//  unique?='unique'? &
	//  indexed?='indexed'?)
	//;
	public DomainGrammarAccess.ShortIdFieldElements getShortIdFieldAccess() {
		return gaDomain.getShortIdFieldAccess();
	}
	
	public ParserRule getShortIdFieldRule() {
		return getShortIdFieldAccess().getRule();
	}
	
	//StringField:
	//  'String' name=ID
	//  (cardinality=Cardinality)?
	//  (('=' defaultValue=STRING)? &
	//  ('pattern' pattern=STRING)? &
	//  unique?='unique'? &
	//  indexed?='indexed'? &
	//  obscured?='obscured'? &
	//  ('[' (minLength=INT)? '..' (maxLength=INT)? ']')?)
	//;
	public DomainGrammarAccess.StringFieldElements getStringFieldAccess() {
		return gaDomain.getStringFieldAccess();
	}
	
	public ParserRule getStringFieldRule() {
		return getStringFieldAccess().getRule();
	}
	
	//DateField:
	//  'Date' name=ID
	//  ('=' defaultValue=STRING)?
	//  (cardinality=Cardinality)?
	//  (('[' (before=STRING)? '..' (after=STRING)? ']')? &
	//  unique?='unique'? &
	//  indexed?='indexed'? &
	//  (past?='past' | future?='future')?)
	//;
	public DomainGrammarAccess.DateFieldElements getDateFieldAccess() {
		return gaDomain.getDateFieldAccess();
	}
	
	public ParserRule getDateFieldRule() {
		return getDateFieldAccess().getRule();
	}
	
	//GeoLocationField:
	//  'GeoLocation' name=ID
	//  (cardinality=SinglularCardinality)?
	//;
	public DomainGrammarAccess.GeoLocationFieldElements getGeoLocationFieldAccess() {
		return gaDomain.getGeoLocationFieldAccess();
	}
	
	public ParserRule getGeoLocationFieldRule() {
		return getGeoLocationFieldAccess().getRule();
	}
	
	//IntegerField:
	//  'Integer' name=ID
	//  (cardinality=Cardinality)?
	//  (('=' defaultValue=IntegerConst)? &
	//  unique?='unique'? &
	//  indexed?='indexed'? &
	//  ('[' (minValue=IntegerConst)? '..' (maxValue=IntegerConst)? ']')?)
	//;
	public DomainGrammarAccess.IntegerFieldElements getIntegerFieldAccess() {
		return gaDomain.getIntegerFieldAccess();
	}
	
	public ParserRule getIntegerFieldRule() {
		return getIntegerFieldAccess().getRule();
	}
	
	//NumericField:
	//  'Numeric' name=ID
	//  (cardinality=Cardinality)?
	//  (('=' defaultValue=FloatingPointConst)? &
	//  unique?='unique'? &
	//  indexed?='indexed'? &
	//  ('[' (minValue=FloatingPointConst)? '..' (maxValue=FloatingPointConst)? ']')?)
	//;
	public DomainGrammarAccess.NumericFieldElements getNumericFieldAccess() {
		return gaDomain.getNumericFieldAccess();
	}
	
	public ParserRule getNumericFieldRule() {
		return getNumericFieldAccess().getRule();
	}
	
	//BooleanField:
	//  'Boolean' name=ID
	//  (cardinality=Cardinality)?
	//  (unique?='unique'? &
	//  indexed?='indexed'? &
	//  ('=' defaultValue=BooleanConst))?
	//;
	public DomainGrammarAccess.BooleanFieldElements getBooleanFieldAccess() {
		return gaDomain.getBooleanFieldAccess();
	}
	
	public ParserRule getBooleanFieldRule() {
		return getBooleanFieldAccess().getRule();
	}
	
	//PriceField:
	//  'Price' name=ID
	//  (cardinality=Cardinality)?
	//  (indexed?='indexed'? &
	//  unique?='unique'?)
	//;
	public DomainGrammarAccess.PriceFieldElements getPriceFieldAccess() {
		return gaDomain.getPriceFieldAccess();
	}
	
	public ParserRule getPriceFieldRule() {
		return getPriceFieldAccess().getRule();
	}
	
	//AmountField:
	//  'Amount' name=ID
	//  (cardinality=Cardinality)?
	//  (indexed?='indexed'? &
	//  unique?='unique'?)
	//;
	public DomainGrammarAccess.AmountFieldElements getAmountFieldAccess() {
		return gaDomain.getAmountFieldAccess();
	}
	
	public ParserRule getAmountFieldRule() {
		return getAmountFieldAccess().getRule();
	}
	
	//CountField:
	//  'Count' name=ID
	//  (cardinality=Cardinality)?
	//  (indexed?='indexed'? &
	//  unique?='unique'?)
	//;
	public DomainGrammarAccess.CountFieldElements getCountFieldAccess() {
		return gaDomain.getCountFieldAccess();
	}
	
	public ParserRule getCountFieldRule() {
		return getCountFieldAccess().getRule();
	}
	
	//EnumField:
	//  'enum' isType=[EnumType|PossiblyQualifiedName] name=ID
	//  (cardinality=Cardinality)?
	//  ('jpa-enum-type' isJpaEnumType=JpaEnumType)?
	//;
	public DomainGrammarAccess.EnumFieldElements getEnumFieldAccess() {
		return gaDomain.getEnumFieldAccess();
	}
	
	public ParserRule getEnumFieldRule() {
		return getEnumFieldAccess().getRule();
	}
	
	//TypeField:
	//  isType=[Type|PossiblyQualifiedName] name=ID
	//  (cardinality=Cardinality)?
	//;
	public DomainGrammarAccess.TypeFieldElements getTypeFieldAccess() {
		return gaDomain.getTypeFieldAccess();
	}
	
	public ParserRule getTypeFieldRule() {
		return getTypeFieldAccess().getRule();
	}
	
	//AnyField:
	//  'Any' name=ID
	//  (cardinality=Cardinality)?
	//;
	public DomainGrammarAccess.AnyFieldElements getAnyFieldAccess() {
		return gaDomain.getAnyFieldAccess();
	}
	
	public ParserRule getAnyFieldRule() {
		return getAnyFieldAccess().getRule();
	}
	
	//EntityReferenceField:
	//  'ref' refType=[Entity|PossiblyQualifiedName] name=ID
	//  (cardinality=Cardinality)?
	//;
	public DomainGrammarAccess.EntityReferenceFieldElements getEntityReferenceFieldAccess() {
		return gaDomain.getEntityReferenceFieldAccess();
	}
	
	public ParserRule getEntityReferenceFieldRule() {
		return getEntityReferenceFieldAccess().getRule();
	}
	
	//enum Cardinality:
	//  Required = '!' | Optional = '?' | OneOrMore = '+' | Many = '*';
	public DomainGrammarAccess.CardinalityElements getCardinalityAccess() {
		return gaDomain.getCardinalityAccess();
	}
	
	public EnumRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//enum SinglularCardinality returns Cardinality:
	//  Required = '!' | Optional = '?';
	public DomainGrammarAccess.SinglularCardinalityElements getSinglularCardinalityAccess() {
		return gaDomain.getSinglularCardinalityAccess();
	}
	
	public EnumRule getSinglularCardinalityRule() {
		return getSinglularCardinalityAccess().getRule();
	}
	
	//FloatingPointConst:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public DomainGrammarAccess.FloatingPointConstElements getFloatingPointConstAccess() {
		return gaDomain.getFloatingPointConstAccess();
	}
	
	public ParserRule getFloatingPointConstRule() {
		return getFloatingPointConstAccess().getRule();
	}
	
	//IntegerConst:
	//  '-'? INT;
	public DomainGrammarAccess.IntegerConstElements getIntegerConstAccess() {
		return gaDomain.getIntegerConstAccess();
	}
	
	public ParserRule getIntegerConstRule() {
		return getIntegerConstAccess().getRule();
	}
	
	//BooleanConst:
	//  'true' | 'false';
	public DomainGrammarAccess.BooleanConstElements getBooleanConstAccess() {
		return gaDomain.getBooleanConstAccess();
	}
	
	public ParserRule getBooleanConstRule() {
		return getBooleanConstAccess().getRule();
	}
	
	//GenOptions:
	//  JpaGenOptions | MongoNodeGenOptions
	//;
	public DomainGrammarAccess.GenOptionsElements getGenOptionsAccess() {
		return gaDomain.getGenOptionsAccess();
	}
	
	public ParserRule getGenOptionsRule() {
		return getGenOptionsAccess().getRule();
	}
	
	//JpaGenOptions:
	//  'jpa-gen-options' '{'
	//    project=ProjectOptions
	//    (persistence=PersistenceOptions)?
	//    (generationInclusion=GenerationInclusion)?
	//    useAspects?='use-aspects'?
	//    metaData?='auditable'?
	//    ('extensions' '{'
	//      (tableOptions+=JpaTableOptions)*
	//    '}')?
	//  '}'
	//;
	public DomainGrammarAccess.JpaGenOptionsElements getJpaGenOptionsAccess() {
		return gaDomain.getJpaGenOptionsAccess();
	}
	
	public ParserRule getJpaGenOptionsRule() {
		return getJpaGenOptionsAccess().getRule();
	}
	
	//ProjectOptions:
	//  'project-options' '{'
	//  (('project-name' name=ID) &
	//  ('root-package' rootPackage=QualifiedName) &
	//  ('domain-subpackage' domainSubpackage=QualifiedName)? &
	//  ('controller-subpackage' controllerSubpackage=QualifiedName)? &
	//  jsonSupport?='json-support'?)
	//  '}'
	//;
	public DomainGrammarAccess.ProjectOptionsElements getProjectOptionsAccess() {
		return gaDomain.getProjectOptionsAccess();
	}
	
	public ParserRule getProjectOptionsRule() {
		return getProjectOptionsAccess().getRule();
	}
	
	//GenerationInclusion:
	//  'generation-inclusion' '{'
	//  (
	//        ('types'      types=InclusionType) &
	//        ('controller' controller=InclusionType)? &
	//        ('resources'  resources=InclusionType)? &
	//        ('properties' properties=InclusionType)? &
	//        ('views'      views=InclusionType)? &
	//        ('web-xml'    webxml=InclusionType)? &
	//        ('pom'        pom=InclusionType)? &
	//        ('styles'     styles=InclusionType)? &
	//        ('classes'    classes=InclusionType)? &
	//        ('layouts'    layouts=InclusionType)? &
	//        ('web-mvc'    webmvc=InclusionType)? &
	//        ('tags'       tags=InclusionType)?
	//        )
	//  '}'
	//;
	public DomainGrammarAccess.GenerationInclusionElements getGenerationInclusionAccess() {
		return gaDomain.getGenerationInclusionAccess();
	}
	
	public ParserRule getGenerationInclusionRule() {
		return getGenerationInclusionAccess().getRule();
	}
	
	//Ttl:
	//  'ttl'
	//  field=[DateField|PossiblyQualifiedName]
	//  expireAfterSeconds=INT
	//;
	public DomainGrammarAccess.TtlElements getTtlAccess() {
		return gaDomain.getTtlAccess();
	}
	
	public ParserRule getTtlRule() {
		return getTtlAccess().getRule();
	}
	
	//MongoNodeGenOptions:
	//  {MongoNodeGenOptions}
	//  'node-mongo-options' '{'
	//    useLogger?='use-logger'?
	//    ('model-path' modelPath=STRING)?
	//    ('test-path'  testPath=STRING)?
	//    (generateTest?='gen-test')?
	//    ('extensions' '{'
	//      (tableOptions+=MongoNodeTableOptions)*
	//    '}')?
	//  '}'
	//;
	public DomainGrammarAccess.MongoNodeGenOptionsElements getMongoNodeGenOptionsAccess() {
		return gaDomain.getMongoNodeGenOptionsAccess();
	}
	
	public ParserRule getMongoNodeGenOptionsRule() {
		return getMongoNodeGenOptionsAccess().getRule();
	}
	
	//JpaTableOptions:
	//  type=[Entity|ID] "{"
	//    (singleTableRoot?='single-table-root')?
	//  "}"
	//;
	public DomainGrammarAccess.JpaTableOptionsElements getJpaTableOptionsAccess() {
		return gaDomain.getJpaTableOptionsAccess();
	}
	
	public ParserRule getJpaTableOptionsRule() {
		return getJpaTableOptionsAccess().getRule();
	}
	
	//MongoNodeTableOptions:
	//  type=[Entity|ID] '{'
	//    (ttl=Ttl)?
	//    (singleTableRoot?='single-table-root')?
	//  '}'
	//;
	public DomainGrammarAccess.MongoNodeTableOptionsElements getMongoNodeTableOptionsAccess() {
		return gaDomain.getMongoNodeTableOptionsAccess();
	}
	
	public ParserRule getMongoNodeTableOptionsRule() {
		return getMongoNodeTableOptionsAccess().getRule();
	}
	
	//enum InclusionType:
	//  Overwrite = 'OVERWRITE' | Protected = 'PROTECTED' | None = 'NONE';
	public DomainGrammarAccess.InclusionTypeElements getInclusionTypeAccess() {
		return gaDomain.getInclusionTypeAccess();
	}
	
	public EnumRule getInclusionTypeRule() {
		return getInclusionTypeAccess().getRule();
	}
	
	//PersistenceOptions:
	//  'persistence-options' '{'
	//  (('database' dbType=DbType) &
	//  ('provider' dbProvider=DbProvider) &
	//  ('user' userName=ID)? &
	//  ('password' password=(ID | STRING))? &
	//  ('url' url=STRING)? &
	//  ('db-name' dbName=ID)?)
	//  '}'
	//;
	public DomainGrammarAccess.PersistenceOptionsElements getPersistenceOptionsAccess() {
		return gaDomain.getPersistenceOptionsAccess();
	}
	
	public ParserRule getPersistenceOptionsRule() {
		return getPersistenceOptionsAccess().getRule();
	}
	
	//enum DbType:
	//  MySql = 'MYSQL' | Oracle = 'ORACLE' |
	//  DatabaseDotCom = 'DATABASE_DOT_COM' | Db2400 = 'DB2_400' | Db2ExpressC = 'DB2_EXPRESS_C' | DerbyClient = 'DERBY_CLIENT' | DerbyEmbedded = 'DERBY_EMBEDDED' |
	//    Firebird = 'FIREBIRD' | GoogleAppEngine = 'GOOGLE_APP_ENGINE' | H2InMemory = 'H2_IN_MEMORY' | HypersonicInMemory = 'HYPERSONIC_IN_MEMORY' |
	//    HypersonicPersistent = 'HYPERSONIC_PERSISTENT' | MsSql = 'MSSQL' | Postgres = 'POSTGRES' | Sybase = 'SYBASE'
	//  ;
	public DomainGrammarAccess.DbTypeElements getDbTypeAccess() {
		return gaDomain.getDbTypeAccess();
	}
	
	public EnumRule getDbTypeRule() {
		return getDbTypeAccess().getRule();
	}
	
	//enum DbProvider:
	//    Hibernate = 'HIBERNATE' | DataNucleus = 'DATANUCLEUS' |
	//    EclipseLink = 'ECLIPSELINK' | OpenJPA = 'OPENJPA'
	//    ;
	public DomainGrammarAccess.DbProviderElements getDbProviderAccess() {
		return gaDomain.getDbProviderAccess();
	}
	
	public EnumRule getDbProviderRule() {
		return getDbProviderAccess().getRule();
	}
	
	//enum JpaEnumType:
	//    Ordinal = 'ORDINAL' | String = 'STRING' | None = 'NONE'
	//    ;
	public DomainGrammarAccess.JpaEnumTypeElements getJpaEnumTypeAccess() {
		return gaDomain.getJpaEnumTypeAccess();
	}
	
	public EnumRule getJpaEnumTypeRule() {
		return getJpaEnumTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
