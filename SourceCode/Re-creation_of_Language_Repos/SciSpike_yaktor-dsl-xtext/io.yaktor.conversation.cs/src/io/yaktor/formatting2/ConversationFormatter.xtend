/*
 * generated by Xtext 2.35.0
 */
package io.yaktor.formatting2

import com.google.inject.Inject
import io.yaktor.conversation.Agent
import io.yaktor.conversation.Conversation
import io.yaktor.services.ConversationGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class ConversationFormatter extends DomainFormatter {
	
	@Inject extension ConversationGrammarAccess

	def dispatch void format(Conversation conversation, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (agentImport : conversation.importedAgents) {
			agentImport.format
		}
		for (typeImport : conversation.importedTypes) {
			typeImport.format
		}
		for (agent : conversation.agents) {
			agent.format
		}
		for (view : conversation.views) {
			view.format
		}
		for (restService : conversation.restServices) {
			restService.format
		}
		for (projection : conversation.definedTypes) {
			projection.format
		}
		for (service : conversation.services) {
			service.format
		}
	}

	def dispatch void format(Agent agent, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (publiclySubscribable : agent.sendables) {
			publiclySubscribable.format
		}
		agent.stateMachine.format
	}
	
	// TODO: implement for StateMachine, Join, Decision, State, Transition, TypeContainmentField, NewField, MappedField, Projection, RestService, Service
}
